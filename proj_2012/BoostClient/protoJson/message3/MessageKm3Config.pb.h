// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageKm3Config.proto

#ifndef PROTOBUF_MessageKm3Config_2eproto__INCLUDED
#define PROTOBUF_MessageKm3Config_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace OPMessage {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MessageKm3Config_2eproto();
void protobuf_AssignDesc_MessageKm3Config_2eproto();
void protobuf_ShutdownFile_MessageKm3Config_2eproto();

class judgeItem;
class voiceItem;
class Judge0;
class Judge40100;
class Judge41600;
class Judge40200;
class Judge40400;
class Judge41000;
class Judge41001;
class Judge41200;
class Judge41100;
class Judge40700;
class Judge41500;
class Judge40800;
class Judge40900;
class Judge41400;
class Judge40500;
class Judge41300;
class Judge40300;
class Judge40600;
class Judge40601;
class Judge50001;
class Judge50002;
class Judge50003;
class Judge50004;
class Judge50005;
class Judge50006;
class Km3Judge;

// ===================================================================

class judgeItem : public ::google::protobuf::Message {
 public:
  judgeItem();
  virtual ~judgeItem();

  judgeItem(const judgeItem& from);

  inline judgeItem& operator=(const judgeItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const judgeItem& default_instance();

  void Swap(judgeItem* other);

  // implements Message ----------------------------------------------

  judgeItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const judgeItem& from);
  void MergeFrom(const judgeItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string configFileName = 1;
  inline bool has_configfilename() const;
  inline void clear_configfilename();
  static const int kConfigFileNameFieldNumber = 1;
  inline const ::std::string& configfilename() const;
  inline void set_configfilename(const ::std::string& value);
  inline void set_configfilename(const char* value);
  inline void set_configfilename(const char* value, size_t size);
  inline ::std::string* mutable_configfilename();
  inline ::std::string* release_configfilename();
  inline void set_allocated_configfilename(::std::string* configfilename);

  // optional string configItem = 2;
  inline bool has_configitem() const;
  inline void clear_configitem();
  static const int kConfigItemFieldNumber = 2;
  inline const ::std::string& configitem() const;
  inline void set_configitem(const ::std::string& value);
  inline void set_configitem(const char* value);
  inline void set_configitem(const char* value, size_t size);
  inline ::std::string* mutable_configitem();
  inline ::std::string* release_configitem();
  inline void set_allocated_configitem(::std::string* configitem);

  // optional string configName = 3;
  inline bool has_configname() const;
  inline void clear_configname();
  static const int kConfigNameFieldNumber = 3;
  inline const ::std::string& configname() const;
  inline void set_configname(const ::std::string& value);
  inline void set_configname(const char* value);
  inline void set_configname(const char* value, size_t size);
  inline ::std::string* mutable_configname();
  inline ::std::string* release_configname();
  inline void set_allocated_configname(::std::string* configname);

  // optional string detailStr = 4;
  inline bool has_detailstr() const;
  inline void clear_detailstr();
  static const int kDetailStrFieldNumber = 4;
  inline const ::std::string& detailstr() const;
  inline void set_detailstr(const ::std::string& value);
  inline void set_detailstr(const char* value);
  inline void set_detailstr(const char* value, size_t size);
  inline ::std::string* mutable_detailstr();
  inline ::std::string* release_detailstr();
  inline void set_allocated_detailstr(::std::string* detailstr);

  // optional double defValue = 5;
  inline bool has_defvalue() const;
  inline void clear_defvalue();
  static const int kDefValueFieldNumber = 5;
  inline double defvalue() const;
  inline void set_defvalue(double value);

  // repeated int32 defValues = 6;
  inline int defvalues_size() const;
  inline void clear_defvalues();
  static const int kDefValuesFieldNumber = 6;
  inline ::google::protobuf::int32 defvalues(int index) const;
  inline void set_defvalues(int index, ::google::protobuf::int32 value);
  inline void add_defvalues(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      defvalues() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_defvalues();

  // repeated string strArr = 7;
  inline int strarr_size() const;
  inline void clear_strarr();
  static const int kStrArrFieldNumber = 7;
  inline const ::std::string& strarr(int index) const;
  inline ::std::string* mutable_strarr(int index);
  inline void set_strarr(int index, const ::std::string& value);
  inline void set_strarr(int index, const char* value);
  inline void set_strarr(int index, const char* value, size_t size);
  inline ::std::string* add_strarr();
  inline void add_strarr(const ::std::string& value);
  inline void add_strarr(const char* value);
  inline void add_strarr(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& strarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_strarr();

  // optional bool force = 8;
  inline bool has_force() const;
  inline void clear_force();
  static const int kForceFieldNumber = 8;
  inline bool force() const;
  inline void set_force(bool value);

  // optional int32 gear = 9;
  inline bool has_gear() const;
  inline void clear_gear();
  static const int kGearFieldNumber = 9;
  inline ::google::protobuf::int32 gear() const;
  inline void set_gear(::google::protobuf::int32 value);

  // optional int32 type = 10;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 10;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:OPMessage.judgeItem)
 private:
  inline void set_has_configfilename();
  inline void clear_has_configfilename();
  inline void set_has_configitem();
  inline void clear_has_configitem();
  inline void set_has_configname();
  inline void clear_has_configname();
  inline void set_has_detailstr();
  inline void clear_has_detailstr();
  inline void set_has_defvalue();
  inline void clear_has_defvalue();
  inline void set_has_force();
  inline void clear_has_force();
  inline void set_has_gear();
  inline void clear_has_gear();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* configfilename_;
  ::std::string* configitem_;
  ::std::string* configname_;
  ::std::string* detailstr_;
  double defvalue_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > defvalues_;
  ::google::protobuf::RepeatedPtrField< ::std::string> strarr_;
  bool force_;
  ::google::protobuf::int32 gear_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_MessageKm3Config_2eproto();
  friend void protobuf_AssignDesc_MessageKm3Config_2eproto();
  friend void protobuf_ShutdownFile_MessageKm3Config_2eproto();

  void InitAsDefaultInstance();
  static judgeItem* default_instance_;
};
// -------------------------------------------------------------------

class voiceItem : public ::google::protobuf::Message {
 public:
  voiceItem();
  virtual ~voiceItem();

  voiceItem(const voiceItem& from);

  inline voiceItem& operator=(const voiceItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const voiceItem& default_instance();

  void Swap(voiceItem* other);

  // implements Message ----------------------------------------------

  voiceItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const voiceItem& from);
  void MergeFrom(const voiceItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional int32 item = 2;
  inline bool has_item() const;
  inline void clear_item();
  static const int kItemFieldNumber = 2;
  inline ::google::protobuf::int32 item() const;
  inline void set_item(::google::protobuf::int32 value);

  // optional int32 mistake_enable = 3;
  inline bool has_mistake_enable() const;
  inline void clear_mistake_enable();
  static const int kMistakeEnableFieldNumber = 3;
  inline ::google::protobuf::int32 mistake_enable() const;
  inline void set_mistake_enable(::google::protobuf::int32 value);

  // optional int32 mistake_id = 4;
  inline bool has_mistake_id() const;
  inline void clear_mistake_id();
  static const int kMistakeIdFieldNumber = 4;
  inline ::google::protobuf::int32 mistake_id() const;
  inline void set_mistake_id(::google::protobuf::int32 value);

  // optional int32 mistake_point = 5;
  inline bool has_mistake_point() const;
  inline void clear_mistake_point();
  static const int kMistakePointFieldNumber = 5;
  inline ::google::protobuf::int32 mistake_point() const;
  inline void set_mistake_point(::google::protobuf::int32 value);

  // optional string mistake_reason = 6;
  inline bool has_mistake_reason() const;
  inline void clear_mistake_reason();
  static const int kMistakeReasonFieldNumber = 6;
  inline const ::std::string& mistake_reason() const;
  inline void set_mistake_reason(const ::std::string& value);
  inline void set_mistake_reason(const char* value);
  inline void set_mistake_reason(const char* value, size_t size);
  inline ::std::string* mutable_mistake_reason();
  inline ::std::string* release_mistake_reason();
  inline void set_allocated_mistake_reason(::std::string* mistake_reason);

  // optional int32 position = 7;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 7;
  inline ::google::protobuf::int32 position() const;
  inline void set_position(::google::protobuf::int32 value);

  // optional string tips = 8;
  inline bool has_tips() const;
  inline void clear_tips();
  static const int kTipsFieldNumber = 8;
  inline const ::std::string& tips() const;
  inline void set_tips(const ::std::string& value);
  inline void set_tips(const char* value);
  inline void set_tips(const char* value, size_t size);
  inline ::std::string* mutable_tips();
  inline ::std::string* release_tips();
  inline void set_allocated_tips(::std::string* tips);

  // optional int32 title = 9;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 9;
  inline ::google::protobuf::int32 title() const;
  inline void set_title(::google::protobuf::int32 value);

  // optional string voice = 10;
  inline bool has_voice() const;
  inline void clear_voice();
  static const int kVoiceFieldNumber = 10;
  inline const ::std::string& voice() const;
  inline void set_voice(const ::std::string& value);
  inline void set_voice(const char* value);
  inline void set_voice(const char* value, size_t size);
  inline ::std::string* mutable_voice();
  inline ::std::string* release_voice();
  inline void set_allocated_voice(::std::string* voice);

  // optional int32 voice_enable = 11;
  inline bool has_voice_enable() const;
  inline void clear_voice_enable();
  static const int kVoiceEnableFieldNumber = 11;
  inline ::google::protobuf::int32 voice_enable() const;
  inline void set_voice_enable(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:OPMessage.voiceItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_item();
  inline void clear_has_item();
  inline void set_has_mistake_enable();
  inline void clear_has_mistake_enable();
  inline void set_has_mistake_id();
  inline void clear_has_mistake_id();
  inline void set_has_mistake_point();
  inline void clear_has_mistake_point();
  inline void set_has_mistake_reason();
  inline void clear_has_mistake_reason();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_tips();
  inline void clear_has_tips();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_voice();
  inline void clear_has_voice();
  inline void set_has_voice_enable();
  inline void clear_has_voice_enable();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::google::protobuf::int32 item_;
  ::google::protobuf::int32 mistake_enable_;
  ::google::protobuf::int32 mistake_id_;
  ::google::protobuf::int32 mistake_point_;
  ::std::string* mistake_reason_;
  ::std::string* tips_;
  ::google::protobuf::int32 position_;
  ::google::protobuf::int32 title_;
  ::std::string* voice_;
  ::google::protobuf::int32 voice_enable_;
  friend void  protobuf_AddDesc_MessageKm3Config_2eproto();
  friend void protobuf_AssignDesc_MessageKm3Config_2eproto();
  friend void protobuf_ShutdownFile_MessageKm3Config_2eproto();

  void InitAsDefaultInstance();
  static voiceItem* default_instance_;
};
// -------------------------------------------------------------------

class Judge0 : public ::google::protobuf::Message {
 public:
  Judge0();
  virtual ~Judge0();

  Judge0(const Judge0& from);

  inline Judge0& operator=(const Judge0& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Judge0& default_instance();

  void Swap(Judge0* other);

  // implements Message ----------------------------------------------

  Judge0* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Judge0& from);
  void MergeFrom(const Judge0& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 itemCode = 1;
  inline bool has_itemcode() const;
  inline void clear_itemcode();
  static const int kItemCodeFieldNumber = 1;
  inline ::google::protobuf::int32 itemcode() const;
  inline void set_itemcode(::google::protobuf::int32 value);

  // optional string itemName = 2;
  inline bool has_itemname() const;
  inline void clear_itemname();
  static const int kItemNameFieldNumber = 2;
  inline const ::std::string& itemname() const;
  inline void set_itemname(const ::std::string& value);
  inline void set_itemname(const char* value);
  inline void set_itemname(const char* value, size_t size);
  inline ::std::string* mutable_itemname();
  inline ::std::string* release_itemname();
  inline void set_allocated_itemname(::std::string* itemname);

  // optional .OPMessage.judgeItem max_time = 3;
  inline bool has_max_time() const;
  inline void clear_max_time();
  static const int kMaxTimeFieldNumber = 3;
  inline const ::OPMessage::judgeItem& max_time() const;
  inline ::OPMessage::judgeItem* mutable_max_time();
  inline ::OPMessage::judgeItem* release_max_time();
  inline void set_allocated_max_time(::OPMessage::judgeItem* max_time);

  // optional .OPMessage.judgeItem max_stop_speed = 4;
  inline bool has_max_stop_speed() const;
  inline void clear_max_stop_speed();
  static const int kMaxStopSpeedFieldNumber = 4;
  inline const ::OPMessage::judgeItem& max_stop_speed() const;
  inline ::OPMessage::judgeItem* mutable_max_stop_speed();
  inline ::OPMessage::judgeItem* release_max_stop_speed();
  inline void set_allocated_max_stop_speed(::OPMessage::judgeItem* max_stop_speed);

  // optional .OPMessage.judgeItem max_speed = 5;
  inline bool has_max_speed() const;
  inline void clear_max_speed();
  static const int kMaxSpeedFieldNumber = 5;
  inline const ::OPMessage::judgeItem& max_speed() const;
  inline ::OPMessage::judgeItem* mutable_max_speed();
  inline ::OPMessage::judgeItem* release_max_speed();
  inline void set_allocated_max_speed(::OPMessage::judgeItem* max_speed);

  // optional .OPMessage.judgeItem max_off_course_distance = 6;
  inline bool has_max_off_course_distance() const;
  inline void clear_max_off_course_distance();
  static const int kMaxOffCourseDistanceFieldNumber = 6;
  inline const ::OPMessage::judgeItem& max_off_course_distance() const;
  inline ::OPMessage::judgeItem* mutable_max_off_course_distance();
  inline ::OPMessage::judgeItem* release_max_off_course_distance();
  inline void set_allocated_max_off_course_distance(::OPMessage::judgeItem* max_off_course_distance);

  // optional .OPMessage.judgeItem max_near_lamp_off_time = 7;
  inline bool has_max_near_lamp_off_time() const;
  inline void clear_max_near_lamp_off_time();
  static const int kMaxNearLampOffTimeFieldNumber = 7;
  inline const ::OPMessage::judgeItem& max_near_lamp_off_time() const;
  inline ::OPMessage::judgeItem* mutable_max_near_lamp_off_time();
  inline ::OPMessage::judgeItem* release_max_near_lamp_off_time();
  inline void set_allocated_max_near_lamp_off_time(::OPMessage::judgeItem* max_near_lamp_off_time);

  // optional .OPMessage.judgeItem max_far_lamp_on_time = 8;
  inline bool has_max_far_lamp_on_time() const;
  inline void clear_max_far_lamp_on_time();
  static const int kMaxFarLampOnTimeFieldNumber = 8;
  inline const ::OPMessage::judgeItem& max_far_lamp_on_time() const;
  inline ::OPMessage::judgeItem* mutable_max_far_lamp_on_time();
  inline ::OPMessage::judgeItem* release_max_far_lamp_on_time();
  inline void set_allocated_max_far_lamp_on_time(::OPMessage::judgeItem* max_far_lamp_on_time);

  // optional .OPMessage.judgeItem auto_gear = 9;
  inline bool has_auto_gear() const;
  inline void clear_auto_gear();
  static const int kAutoGearFieldNumber = 9;
  inline const ::OPMessage::judgeItem& auto_gear() const;
  inline ::OPMessage::judgeItem* mutable_auto_gear();
  inline ::OPMessage::judgeItem* release_auto_gear();
  inline void set_allocated_auto_gear(::OPMessage::judgeItem* auto_gear);

  // optional .OPMessage.judgeItem max_first_gear_distance_once = 10;
  inline bool has_max_first_gear_distance_once() const;
  inline void clear_max_first_gear_distance_once();
  static const int kMaxFirstGearDistanceOnceFieldNumber = 10;
  inline const ::OPMessage::judgeItem& max_first_gear_distance_once() const;
  inline ::OPMessage::judgeItem* mutable_max_first_gear_distance_once();
  inline ::OPMessage::judgeItem* release_max_first_gear_distance_once();
  inline void set_allocated_max_first_gear_distance_once(::OPMessage::judgeItem* max_first_gear_distance_once);

  // optional .OPMessage.judgeItem max_second_gear_distance_once = 11;
  inline bool has_max_second_gear_distance_once() const;
  inline void clear_max_second_gear_distance_once();
  static const int kMaxSecondGearDistanceOnceFieldNumber = 11;
  inline const ::OPMessage::judgeItem& max_second_gear_distance_once() const;
  inline ::OPMessage::judgeItem* mutable_max_second_gear_distance_once();
  inline ::OPMessage::judgeItem* release_max_second_gear_distance_once();
  inline void set_allocated_max_second_gear_distance_once(::OPMessage::judgeItem* max_second_gear_distance_once);

  // optional .OPMessage.judgeItem max_first_gear_distance_global = 12;
  inline bool has_max_first_gear_distance_global() const;
  inline void clear_max_first_gear_distance_global();
  static const int kMaxFirstGearDistanceGlobalFieldNumber = 12;
  inline const ::OPMessage::judgeItem& max_first_gear_distance_global() const;
  inline ::OPMessage::judgeItem* mutable_max_first_gear_distance_global();
  inline ::OPMessage::judgeItem* release_max_first_gear_distance_global();
  inline void set_allocated_max_first_gear_distance_global(::OPMessage::judgeItem* max_first_gear_distance_global);

  // optional .OPMessage.judgeItem max_second_gear_distance_global = 13;
  inline bool has_max_second_gear_distance_global() const;
  inline void clear_max_second_gear_distance_global();
  static const int kMaxSecondGearDistanceGlobalFieldNumber = 13;
  inline const ::OPMessage::judgeItem& max_second_gear_distance_global() const;
  inline ::OPMessage::judgeItem* mutable_max_second_gear_distance_global();
  inline ::OPMessage::judgeItem* release_max_second_gear_distance_global();
  inline void set_allocated_max_second_gear_distance_global(::OPMessage::judgeItem* max_second_gear_distance_global);

  // optional .OPMessage.judgeItem min_third_gear_distance_global = 14;
  inline bool has_min_third_gear_distance_global() const;
  inline void clear_min_third_gear_distance_global();
  static const int kMinThirdGearDistanceGlobalFieldNumber = 14;
  inline const ::OPMessage::judgeItem& min_third_gear_distance_global() const;
  inline ::OPMessage::judgeItem* mutable_min_third_gear_distance_global();
  inline ::OPMessage::judgeItem* release_min_third_gear_distance_global();
  inline void set_allocated_min_third_gear_distance_global(::OPMessage::judgeItem* min_third_gear_distance_global);

  // optional .OPMessage.judgeItem global_reach_speed = 15;
  inline bool has_global_reach_speed() const;
  inline void clear_global_reach_speed();
  static const int kGlobalReachSpeedFieldNumber = 15;
  inline const ::OPMessage::judgeItem& global_reach_speed() const;
  inline ::OPMessage::judgeItem* mutable_global_reach_speed();
  inline ::OPMessage::judgeItem* release_global_reach_speed();
  inline void set_allocated_global_reach_speed(::OPMessage::judgeItem* global_reach_speed);

  // optional .OPMessage.judgeItem min_global_reach_speed_distance = 16;
  inline bool has_min_global_reach_speed_distance() const;
  inline void clear_min_global_reach_speed_distance();
  static const int kMinGlobalReachSpeedDistanceFieldNumber = 16;
  inline const ::OPMessage::judgeItem& min_global_reach_speed_distance() const;
  inline ::OPMessage::judgeItem* mutable_min_global_reach_speed_distance();
  inline ::OPMessage::judgeItem* release_min_global_reach_speed_distance();
  inline void set_allocated_min_global_reach_speed_distance(::OPMessage::judgeItem* min_global_reach_speed_distance);

  // optional .OPMessage.judgeItem max_rpm = 17;
  inline bool has_max_rpm() const;
  inline void clear_max_rpm();
  static const int kMaxRpmFieldNumber = 17;
  inline const ::OPMessage::judgeItem& max_rpm() const;
  inline ::OPMessage::judgeItem* mutable_max_rpm();
  inline ::OPMessage::judgeItem* release_max_rpm();
  inline void set_allocated_max_rpm(::OPMessage::judgeItem* max_rpm);

  // optional .OPMessage.judgeItem max_neutral_distance_once = 18;
  inline bool has_max_neutral_distance_once() const;
  inline void clear_max_neutral_distance_once();
  static const int kMaxNeutralDistanceOnceFieldNumber = 18;
  inline const ::OPMessage::judgeItem& max_neutral_distance_once() const;
  inline ::OPMessage::judgeItem* mutable_max_neutral_distance_once();
  inline ::OPMessage::judgeItem* release_max_neutral_distance_once();
  inline void set_allocated_max_neutral_distance_once(::OPMessage::judgeItem* max_neutral_distance_once);

  // optional .OPMessage.judgeItem gear_speed_match_0 = 19;
  inline bool has_gear_speed_match_0() const;
  inline void clear_gear_speed_match_0();
  static const int kGearSpeedMatch0FieldNumber = 19;
  inline const ::OPMessage::judgeItem& gear_speed_match_0() const;
  inline ::OPMessage::judgeItem* mutable_gear_speed_match_0();
  inline ::OPMessage::judgeItem* release_gear_speed_match_0();
  inline void set_allocated_gear_speed_match_0(::OPMessage::judgeItem* gear_speed_match_0);

  // optional .OPMessage.judgeItem gear_speed_match_1 = 20;
  inline bool has_gear_speed_match_1() const;
  inline void clear_gear_speed_match_1();
  static const int kGearSpeedMatch1FieldNumber = 20;
  inline const ::OPMessage::judgeItem& gear_speed_match_1() const;
  inline ::OPMessage::judgeItem* mutable_gear_speed_match_1();
  inline ::OPMessage::judgeItem* release_gear_speed_match_1();
  inline void set_allocated_gear_speed_match_1(::OPMessage::judgeItem* gear_speed_match_1);

  // optional .OPMessage.judgeItem gear_speed_match_2 = 21;
  inline bool has_gear_speed_match_2() const;
  inline void clear_gear_speed_match_2();
  static const int kGearSpeedMatch2FieldNumber = 21;
  inline const ::OPMessage::judgeItem& gear_speed_match_2() const;
  inline ::OPMessage::judgeItem* mutable_gear_speed_match_2();
  inline ::OPMessage::judgeItem* release_gear_speed_match_2();
  inline void set_allocated_gear_speed_match_2(::OPMessage::judgeItem* gear_speed_match_2);

  // optional .OPMessage.judgeItem gear_speed_match_3 = 22;
  inline bool has_gear_speed_match_3() const;
  inline void clear_gear_speed_match_3();
  static const int kGearSpeedMatch3FieldNumber = 22;
  inline const ::OPMessage::judgeItem& gear_speed_match_3() const;
  inline ::OPMessage::judgeItem* mutable_gear_speed_match_3();
  inline ::OPMessage::judgeItem* release_gear_speed_match_3();
  inline void set_allocated_gear_speed_match_3(::OPMessage::judgeItem* gear_speed_match_3);

  // optional .OPMessage.judgeItem gear_speed_match_4 = 23;
  inline bool has_gear_speed_match_4() const;
  inline void clear_gear_speed_match_4();
  static const int kGearSpeedMatch4FieldNumber = 23;
  inline const ::OPMessage::judgeItem& gear_speed_match_4() const;
  inline ::OPMessage::judgeItem* mutable_gear_speed_match_4();
  inline ::OPMessage::judgeItem* release_gear_speed_match_4();
  inline void set_allocated_gear_speed_match_4(::OPMessage::judgeItem* gear_speed_match_4);

  // optional .OPMessage.judgeItem gear_speed_match_5 = 24;
  inline bool has_gear_speed_match_5() const;
  inline void clear_gear_speed_match_5();
  static const int kGearSpeedMatch5FieldNumber = 24;
  inline const ::OPMessage::judgeItem& gear_speed_match_5() const;
  inline ::OPMessage::judgeItem* mutable_gear_speed_match_5();
  inline ::OPMessage::judgeItem* release_gear_speed_match_5();
  inline void set_allocated_gear_speed_match_5(::OPMessage::judgeItem* gear_speed_match_5);

  // optional .OPMessage.judgeItem max_turn_lamp_on_time = 25;
  inline bool has_max_turn_lamp_on_time() const;
  inline void clear_max_turn_lamp_on_time();
  static const int kMaxTurnLampOnTimeFieldNumber = 25;
  inline const ::OPMessage::judgeItem& max_turn_lamp_on_time() const;
  inline ::OPMessage::judgeItem* mutable_max_turn_lamp_on_time();
  inline ::OPMessage::judgeItem* release_max_turn_lamp_on_time();
  inline void set_allocated_max_turn_lamp_on_time(::OPMessage::judgeItem* max_turn_lamp_on_time);

  // optional .OPMessage.judgeItem max_neutral_time_once = 26;
  inline bool has_max_neutral_time_once() const;
  inline void clear_max_neutral_time_once();
  static const int kMaxNeutralTimeOnceFieldNumber = 26;
  inline const ::OPMessage::judgeItem& max_neutral_time_once() const;
  inline ::OPMessage::judgeItem* mutable_max_neutral_time_once();
  inline ::OPMessage::judgeItem* release_max_neutral_time_once();
  inline void set_allocated_max_neutral_time_once(::OPMessage::judgeItem* max_neutral_time_once);

  // optional .OPMessage.judgeItem gear_speed_match_time = 27;
  inline bool has_gear_speed_match_time() const;
  inline void clear_gear_speed_match_time();
  static const int kGearSpeedMatchTimeFieldNumber = 27;
  inline const ::OPMessage::judgeItem& gear_speed_match_time() const;
  inline ::OPMessage::judgeItem* mutable_gear_speed_match_time();
  inline ::OPMessage::judgeItem* release_gear_speed_match_time();
  inline void set_allocated_gear_speed_match_time(::OPMessage::judgeItem* gear_speed_match_time);

  // optional .OPMessage.judgeItem foot_brake_beep = 28;
  inline bool has_foot_brake_beep() const;
  inline void clear_foot_brake_beep();
  static const int kFootBrakeBeepFieldNumber = 28;
  inline const ::OPMessage::judgeItem& foot_brake_beep() const;
  inline ::OPMessage::judgeItem* mutable_foot_brake_beep();
  inline ::OPMessage::judgeItem* release_foot_brake_beep();
  inline void set_allocated_foot_brake_beep(::OPMessage::judgeItem* foot_brake_beep);

  // optional .OPMessage.judgeItem deduct_voice_speak_mode = 29;
  inline bool has_deduct_voice_speak_mode() const;
  inline void clear_deduct_voice_speak_mode();
  static const int kDeductVoiceSpeakModeFieldNumber = 29;
  inline const ::OPMessage::judgeItem& deduct_voice_speak_mode() const;
  inline ::OPMessage::judgeItem* mutable_deduct_voice_speak_mode();
  inline ::OPMessage::judgeItem* release_deduct_voice_speak_mode();
  inline void set_allocated_deduct_voice_speak_mode(::OPMessage::judgeItem* deduct_voice_speak_mode);

  // optional .OPMessage.judgeItem car_shake_rpm_threshold = 30;
  inline bool has_car_shake_rpm_threshold() const;
  inline void clear_car_shake_rpm_threshold();
  static const int kCarShakeRpmThresholdFieldNumber = 30;
  inline const ::OPMessage::judgeItem& car_shake_rpm_threshold() const;
  inline ::OPMessage::judgeItem* mutable_car_shake_rpm_threshold();
  inline ::OPMessage::judgeItem* release_car_shake_rpm_threshold();
  inline void set_allocated_car_shake_rpm_threshold(::OPMessage::judgeItem* car_shake_rpm_threshold);

  // optional .OPMessage.judgeItem car_shake_time_threshold = 31;
  inline bool has_car_shake_time_threshold() const;
  inline void clear_car_shake_time_threshold();
  static const int kCarShakeTimeThresholdFieldNumber = 31;
  inline const ::OPMessage::judgeItem& car_shake_time_threshold() const;
  inline ::OPMessage::judgeItem* mutable_car_shake_time_threshold();
  inline ::OPMessage::judgeItem* release_car_shake_time_threshold();
  inline void set_allocated_car_shake_time_threshold(::OPMessage::judgeItem* car_shake_time_threshold);

  // optional .OPMessage.judgeItem repeat_voice_time_delay = 32;
  inline bool has_repeat_voice_time_delay() const;
  inline void clear_repeat_voice_time_delay();
  static const int kRepeatVoiceTimeDelayFieldNumber = 32;
  inline const ::OPMessage::judgeItem& repeat_voice_time_delay() const;
  inline ::OPMessage::judgeItem* mutable_repeat_voice_time_delay();
  inline ::OPMessage::judgeItem* release_repeat_voice_time_delay();
  inline void set_allocated_repeat_voice_time_delay(::OPMessage::judgeItem* repeat_voice_time_delay);

  // optional .OPMessage.judgeItem min_fourth_gear_distance_global = 33;
  inline bool has_min_fourth_gear_distance_global() const;
  inline void clear_min_fourth_gear_distance_global();
  static const int kMinFourthGearDistanceGlobalFieldNumber = 33;
  inline const ::OPMessage::judgeItem& min_fourth_gear_distance_global() const;
  inline ::OPMessage::judgeItem* mutable_min_fourth_gear_distance_global();
  inline ::OPMessage::judgeItem* release_min_fourth_gear_distance_global();
  inline void set_allocated_min_fourth_gear_distance_global(::OPMessage::judgeItem* min_fourth_gear_distance_global);

  // optional .OPMessage.voiceItem vi_global_app_start = 34;
  inline bool has_vi_global_app_start() const;
  inline void clear_vi_global_app_start();
  static const int kViGlobalAppStartFieldNumber = 34;
  inline const ::OPMessage::voiceItem& vi_global_app_start() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_app_start();
  inline ::OPMessage::voiceItem* release_vi_global_app_start();
  inline void set_allocated_vi_global_app_start(::OPMessage::voiceItem* vi_global_app_start);

  // optional .OPMessage.voiceItem vi_global_not_wear_seat_belts = 35;
  inline bool has_vi_global_not_wear_seat_belts() const;
  inline void clear_vi_global_not_wear_seat_belts();
  static const int kViGlobalNotWearSeatBeltsFieldNumber = 35;
  inline const ::OPMessage::voiceItem& vi_global_not_wear_seat_belts() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_not_wear_seat_belts();
  inline ::OPMessage::voiceItem* release_vi_global_not_wear_seat_belts();
  inline void set_allocated_vi_global_not_wear_seat_belts(::OPMessage::voiceItem* vi_global_not_wear_seat_belts);

  // optional .OPMessage.voiceItem vi_global_not_close_door = 36;
  inline bool has_vi_global_not_close_door() const;
  inline void clear_vi_global_not_close_door();
  static const int kViGlobalNotCloseDoorFieldNumber = 36;
  inline const ::OPMessage::voiceItem& vi_global_not_close_door() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_not_close_door();
  inline ::OPMessage::voiceItem* release_vi_global_not_close_door();
  inline void set_allocated_vi_global_not_close_door(::OPMessage::voiceItem* vi_global_not_close_door);

  // optional .OPMessage.voiceItem vi_global_falmeout = 37;
  inline bool has_vi_global_falmeout() const;
  inline void clear_vi_global_falmeout();
  static const int kViGlobalFalmeoutFieldNumber = 37;
  inline const ::OPMessage::voiceItem& vi_global_falmeout() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_falmeout();
  inline ::OPMessage::voiceItem* release_vi_global_falmeout();
  inline void set_allocated_vi_global_falmeout(::OPMessage::voiceItem* vi_global_falmeout);

  // optional .OPMessage.voiceItem vi_global_overspeed = 38;
  inline bool has_vi_global_overspeed() const;
  inline void clear_vi_global_overspeed();
  static const int kViGlobalOverspeedFieldNumber = 38;
  inline const ::OPMessage::voiceItem& vi_global_overspeed() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_overspeed();
  inline ::OPMessage::voiceItem* release_vi_global_overspeed();
  inline void set_allocated_vi_global_overspeed(::OPMessage::voiceItem* vi_global_overspeed);

  // optional .OPMessage.voiceItem vi_global_first_gear_distance_overrange_once = 39;
  inline bool has_vi_global_first_gear_distance_overrange_once() const;
  inline void clear_vi_global_first_gear_distance_overrange_once();
  static const int kViGlobalFirstGearDistanceOverrangeOnceFieldNumber = 39;
  inline const ::OPMessage::voiceItem& vi_global_first_gear_distance_overrange_once() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_first_gear_distance_overrange_once();
  inline ::OPMessage::voiceItem* release_vi_global_first_gear_distance_overrange_once();
  inline void set_allocated_vi_global_first_gear_distance_overrange_once(::OPMessage::voiceItem* vi_global_first_gear_distance_overrange_once);

  // optional .OPMessage.voiceItem vi_global_second_gear_distance_overrange_once = 40;
  inline bool has_vi_global_second_gear_distance_overrange_once() const;
  inline void clear_vi_global_second_gear_distance_overrange_once();
  static const int kViGlobalSecondGearDistanceOverrangeOnceFieldNumber = 40;
  inline const ::OPMessage::voiceItem& vi_global_second_gear_distance_overrange_once() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_second_gear_distance_overrange_once();
  inline ::OPMessage::voiceItem* release_vi_global_second_gear_distance_overrange_once();
  inline void set_allocated_vi_global_second_gear_distance_overrange_once(::OPMessage::voiceItem* vi_global_second_gear_distance_overrange_once);

  // optional .OPMessage.voiceItem vi_global_first_gear_distance_overrange_global = 41;
  inline bool has_vi_global_first_gear_distance_overrange_global() const;
  inline void clear_vi_global_first_gear_distance_overrange_global();
  static const int kViGlobalFirstGearDistanceOverrangeGlobalFieldNumber = 41;
  inline const ::OPMessage::voiceItem& vi_global_first_gear_distance_overrange_global() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_first_gear_distance_overrange_global();
  inline ::OPMessage::voiceItem* release_vi_global_first_gear_distance_overrange_global();
  inline void set_allocated_vi_global_first_gear_distance_overrange_global(::OPMessage::voiceItem* vi_global_first_gear_distance_overrange_global);

  // optional .OPMessage.voiceItem vi_global_second_gear_distance_overrange_global = 42;
  inline bool has_vi_global_second_gear_distance_overrange_global() const;
  inline void clear_vi_global_second_gear_distance_overrange_global();
  static const int kViGlobalSecondGearDistanceOverrangeGlobalFieldNumber = 42;
  inline const ::OPMessage::voiceItem& vi_global_second_gear_distance_overrange_global() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_second_gear_distance_overrange_global();
  inline ::OPMessage::voiceItem* release_vi_global_second_gear_distance_overrange_global();
  inline void set_allocated_vi_global_second_gear_distance_overrange_global(::OPMessage::voiceItem* vi_global_second_gear_distance_overrange_global);

  // optional .OPMessage.voiceItem vi_global_third_gear_distance_not_enough = 43;
  inline bool has_vi_global_third_gear_distance_not_enough() const;
  inline void clear_vi_global_third_gear_distance_not_enough();
  static const int kViGlobalThirdGearDistanceNotEnoughFieldNumber = 43;
  inline const ::OPMessage::voiceItem& vi_global_third_gear_distance_not_enough() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_third_gear_distance_not_enough();
  inline ::OPMessage::voiceItem* release_vi_global_third_gear_distance_not_enough();
  inline void set_allocated_vi_global_third_gear_distance_not_enough(::OPMessage::voiceItem* vi_global_third_gear_distance_not_enough);

  // optional .OPMessage.voiceItem vi_global_fourth_gear_distance_not_enough = 44;
  inline bool has_vi_global_fourth_gear_distance_not_enough() const;
  inline void clear_vi_global_fourth_gear_distance_not_enough();
  static const int kViGlobalFourthGearDistanceNotEnoughFieldNumber = 44;
  inline const ::OPMessage::voiceItem& vi_global_fourth_gear_distance_not_enough() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_fourth_gear_distance_not_enough();
  inline ::OPMessage::voiceItem* release_vi_global_fourth_gear_distance_not_enough();
  inline void set_allocated_vi_global_fourth_gear_distance_not_enough(::OPMessage::voiceItem* vi_global_fourth_gear_distance_not_enough);

  // optional .OPMessage.voiceItem vi_global_neutral_driving = 45;
  inline bool has_vi_global_neutral_driving() const;
  inline void clear_vi_global_neutral_driving();
  static const int kViGlobalNeutralDrivingFieldNumber = 45;
  inline const ::OPMessage::voiceItem& vi_global_neutral_driving() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_neutral_driving();
  inline ::OPMessage::voiceItem* release_vi_global_neutral_driving();
  inline void set_allocated_vi_global_neutral_driving(::OPMessage::voiceItem* vi_global_neutral_driving);

  // optional .OPMessage.voiceItem vi_global_high_speed_not_enough = 46;
  inline bool has_vi_global_high_speed_not_enough() const;
  inline void clear_vi_global_high_speed_not_enough();
  static const int kViGlobalHighSpeedNotEnoughFieldNumber = 46;
  inline const ::OPMessage::voiceItem& vi_global_high_speed_not_enough() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_high_speed_not_enough();
  inline ::OPMessage::voiceItem* release_vi_global_high_speed_not_enough();
  inline void set_allocated_vi_global_high_speed_not_enough(::OPMessage::voiceItem* vi_global_high_speed_not_enough);

  // optional .OPMessage.voiceItem vi_global_rpm_overrange = 47;
  inline bool has_vi_global_rpm_overrange() const;
  inline void clear_vi_global_rpm_overrange();
  static const int kViGlobalRpmOverrangeFieldNumber = 47;
  inline const ::OPMessage::voiceItem& vi_global_rpm_overrange() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_rpm_overrange();
  inline ::OPMessage::voiceItem* release_vi_global_rpm_overrange();
  inline void set_allocated_vi_global_rpm_overrange(::OPMessage::voiceItem* vi_global_rpm_overrange);

  // optional .OPMessage.voiceItem vi_global_gear_speed_not_match = 48;
  inline bool has_vi_global_gear_speed_not_match() const;
  inline void clear_vi_global_gear_speed_not_match();
  static const int kViGlobalGearSpeedNotMatchFieldNumber = 48;
  inline const ::OPMessage::voiceItem& vi_global_gear_speed_not_match() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_gear_speed_not_match();
  inline ::OPMessage::voiceItem* release_vi_global_gear_speed_not_match();
  inline void set_allocated_vi_global_gear_speed_not_match(::OPMessage::voiceItem* vi_global_gear_speed_not_match);

  // optional .OPMessage.voiceItem vi_global_exam_timeout = 49;
  inline bool has_vi_global_exam_timeout() const;
  inline void clear_vi_global_exam_timeout();
  static const int kViGlobalExamTimeoutFieldNumber = 49;
  inline const ::OPMessage::voiceItem& vi_global_exam_timeout() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_exam_timeout();
  inline ::OPMessage::voiceItem* release_vi_global_exam_timeout();
  inline void set_allocated_vi_global_exam_timeout(::OPMessage::voiceItem* vi_global_exam_timeout);

  // optional .OPMessage.voiceItem vi_global_turn_lamp_long_time_on = 50;
  inline bool has_vi_global_turn_lamp_long_time_on() const;
  inline void clear_vi_global_turn_lamp_long_time_on();
  static const int kViGlobalTurnLampLongTimeOnFieldNumber = 50;
  inline const ::OPMessage::voiceItem& vi_global_turn_lamp_long_time_on() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_turn_lamp_long_time_on();
  inline ::OPMessage::voiceItem* release_vi_global_turn_lamp_long_time_on();
  inline void set_allocated_vi_global_turn_lamp_long_time_on(::OPMessage::voiceItem* vi_global_turn_lamp_long_time_on);

  // optional .OPMessage.voiceItem vi_global_road_error = 51;
  inline bool has_vi_global_road_error() const;
  inline void clear_vi_global_road_error();
  static const int kViGlobalRoadErrorFieldNumber = 51;
  inline const ::OPMessage::voiceItem& vi_global_road_error() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_road_error();
  inline ::OPMessage::voiceItem* release_vi_global_road_error();
  inline void set_allocated_vi_global_road_error(::OPMessage::voiceItem* vi_global_road_error);

  // optional .OPMessage.voiceItem vi_global_exam_over_pass = 52;
  inline bool has_vi_global_exam_over_pass() const;
  inline void clear_vi_global_exam_over_pass();
  static const int kViGlobalExamOverPassFieldNumber = 52;
  inline const ::OPMessage::voiceItem& vi_global_exam_over_pass() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_exam_over_pass();
  inline ::OPMessage::voiceItem* release_vi_global_exam_over_pass();
  inline void set_allocated_vi_global_exam_over_pass(::OPMessage::voiceItem* vi_global_exam_over_pass);

  // optional .OPMessage.voiceItem vi_global_exam_over_not_pass = 53;
  inline bool has_vi_global_exam_over_not_pass() const;
  inline void clear_vi_global_exam_over_not_pass();
  static const int kViGlobalExamOverNotPassFieldNumber = 53;
  inline const ::OPMessage::voiceItem& vi_global_exam_over_not_pass() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_exam_over_not_pass();
  inline ::OPMessage::voiceItem* release_vi_global_exam_over_not_pass();
  inline void set_allocated_vi_global_exam_over_not_pass(::OPMessage::voiceItem* vi_global_exam_over_not_pass);

  // optional .OPMessage.voiceItem vi_global_delay_speak_start = 54;
  inline bool has_vi_global_delay_speak_start() const;
  inline void clear_vi_global_delay_speak_start();
  static const int kViGlobalDelaySpeakStartFieldNumber = 54;
  inline const ::OPMessage::voiceItem& vi_global_delay_speak_start() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_delay_speak_start();
  inline ::OPMessage::voiceItem* release_vi_global_delay_speak_start();
  inline void set_allocated_vi_global_delay_speak_start(::OPMessage::voiceItem* vi_global_delay_speak_start);

  // optional .OPMessage.voiceItem vi_global_delay_speak_stop = 55;
  inline bool has_vi_global_delay_speak_stop() const;
  inline void clear_vi_global_delay_speak_stop();
  static const int kViGlobalDelaySpeakStopFieldNumber = 55;
  inline const ::OPMessage::voiceItem& vi_global_delay_speak_stop() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_delay_speak_stop();
  inline ::OPMessage::voiceItem* release_vi_global_delay_speak_stop();
  inline void set_allocated_vi_global_delay_speak_stop(::OPMessage::voiceItem* vi_global_delay_speak_stop);

  // optional .OPMessage.voiceItem vi_global_delay_speak_none = 56;
  inline bool has_vi_global_delay_speak_none() const;
  inline void clear_vi_global_delay_speak_none();
  static const int kViGlobalDelaySpeakNoneFieldNumber = 56;
  inline const ::OPMessage::voiceItem& vi_global_delay_speak_none() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_delay_speak_none();
  inline ::OPMessage::voiceItem* release_vi_global_delay_speak_none();
  inline void set_allocated_vi_global_delay_speak_none(::OPMessage::voiceItem* vi_global_delay_speak_none);

  // optional .OPMessage.voiceItem vi_global_whole_exam_timeout = 57;
  inline bool has_vi_global_whole_exam_timeout() const;
  inline void clear_vi_global_whole_exam_timeout();
  static const int kViGlobalWholeExamTimeoutFieldNumber = 57;
  inline const ::OPMessage::voiceItem& vi_global_whole_exam_timeout() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_whole_exam_timeout();
  inline ::OPMessage::voiceItem* release_vi_global_whole_exam_timeout();
  inline void set_allocated_vi_global_whole_exam_timeout(::OPMessage::voiceItem* vi_global_whole_exam_timeout);

  // optional .OPMessage.voiceItem vi_global_start_driving_with_error_gear = 58;
  inline bool has_vi_global_start_driving_with_error_gear() const;
  inline void clear_vi_global_start_driving_with_error_gear();
  static const int kViGlobalStartDrivingWithErrorGearFieldNumber = 58;
  inline const ::OPMessage::voiceItem& vi_global_start_driving_with_error_gear() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_start_driving_with_error_gear();
  inline ::OPMessage::voiceItem* release_vi_global_start_driving_with_error_gear();
  inline void set_allocated_vi_global_start_driving_with_error_gear(::OPMessage::voiceItem* vi_global_start_driving_with_error_gear);

  // optional .OPMessage.voiceItem vi_global_start_driving_not_release_handbrake = 59;
  inline bool has_vi_global_start_driving_not_release_handbrake() const;
  inline void clear_vi_global_start_driving_not_release_handbrake();
  static const int kViGlobalStartDrivingNotReleaseHandbrakeFieldNumber = 59;
  inline const ::OPMessage::voiceItem& vi_global_start_driving_not_release_handbrake() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_start_driving_not_release_handbrake();
  inline ::OPMessage::voiceItem* release_vi_global_start_driving_not_release_handbrake();
  inline void set_allocated_vi_global_start_driving_not_release_handbrake(::OPMessage::voiceItem* vi_global_start_driving_not_release_handbrake);

  // optional .OPMessage.voiceItem vi_global_jump_gear = 60;
  inline bool has_vi_global_jump_gear() const;
  inline void clear_vi_global_jump_gear();
  static const int kViGlobalJumpGearFieldNumber = 60;
  inline const ::OPMessage::voiceItem& vi_global_jump_gear() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_jump_gear();
  inline ::OPMessage::voiceItem* release_vi_global_jump_gear();
  inline void set_allocated_vi_global_jump_gear(::OPMessage::voiceItem* vi_global_jump_gear);

  // optional .OPMessage.voiceItem vi_global_car_shake = 61;
  inline bool has_vi_global_car_shake() const;
  inline void clear_vi_global_car_shake();
  static const int kViGlobalCarShakeFieldNumber = 61;
  inline const ::OPMessage::voiceItem& vi_global_car_shake() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_car_shake();
  inline ::OPMessage::voiceItem* release_vi_global_car_shake();
  inline void set_allocated_vi_global_car_shake(::OPMessage::voiceItem* vi_global_car_shake);

  // optional .OPMessage.voiceItem vi_global_firingup_timeout = 62;
  inline bool has_vi_global_firingup_timeout() const;
  inline void clear_vi_global_firingup_timeout();
  static const int kViGlobalFiringupTimeoutFieldNumber = 62;
  inline const ::OPMessage::voiceItem& vi_global_firingup_timeout() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_firingup_timeout();
  inline ::OPMessage::voiceItem* release_vi_global_firingup_timeout();
  inline void set_allocated_vi_global_firingup_timeout(::OPMessage::voiceItem* vi_global_firingup_timeout);

  // optional .OPMessage.voiceItem vi_global_notify_push_fingerprint = 63;
  inline bool has_vi_global_notify_push_fingerprint() const;
  inline void clear_vi_global_notify_push_fingerprint();
  static const int kViGlobalNotifyPushFingerprintFieldNumber = 63;
  inline const ::OPMessage::voiceItem& vi_global_notify_push_fingerprint() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_notify_push_fingerprint();
  inline ::OPMessage::voiceItem* release_vi_global_notify_push_fingerprint();
  inline void set_allocated_vi_global_notify_push_fingerprint(::OPMessage::voiceItem* vi_global_notify_push_fingerprint);

  // optional .OPMessage.voiceItem vi_global_fingerprint_pass = 64;
  inline bool has_vi_global_fingerprint_pass() const;
  inline void clear_vi_global_fingerprint_pass();
  static const int kViGlobalFingerprintPassFieldNumber = 64;
  inline const ::OPMessage::voiceItem& vi_global_fingerprint_pass() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_fingerprint_pass();
  inline ::OPMessage::voiceItem* release_vi_global_fingerprint_pass();
  inline void set_allocated_vi_global_fingerprint_pass(::OPMessage::voiceItem* vi_global_fingerprint_pass);

  // optional .OPMessage.voiceItem vi_global_global = 65;
  inline bool has_vi_global_global() const;
  inline void clear_vi_global_global();
  static const int kViGlobalGlobalFieldNumber = 65;
  inline const ::OPMessage::voiceItem& vi_global_global() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_global();
  inline ::OPMessage::voiceItem* release_vi_global_global();
  inline void set_allocated_vi_global_global(::OPMessage::voiceItem* vi_global_global);

  // optional .OPMessage.voiceItem vi_global_40100 = 66;
  inline bool has_vi_global_40100() const;
  inline void clear_vi_global_40100();
  static const int kViGlobal40100FieldNumber = 66;
  inline const ::OPMessage::voiceItem& vi_global_40100() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_40100();
  inline ::OPMessage::voiceItem* release_vi_global_40100();
  inline void set_allocated_vi_global_40100(::OPMessage::voiceItem* vi_global_40100);

  // optional .OPMessage.voiceItem vi_global_40200 = 67;
  inline bool has_vi_global_40200() const;
  inline void clear_vi_global_40200();
  static const int kViGlobal40200FieldNumber = 67;
  inline const ::OPMessage::voiceItem& vi_global_40200() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_40200();
  inline ::OPMessage::voiceItem* release_vi_global_40200();
  inline void set_allocated_vi_global_40200(::OPMessage::voiceItem* vi_global_40200);

  // optional .OPMessage.voiceItem vi_global_40300 = 68;
  inline bool has_vi_global_40300() const;
  inline void clear_vi_global_40300();
  static const int kViGlobal40300FieldNumber = 68;
  inline const ::OPMessage::voiceItem& vi_global_40300() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_40300();
  inline ::OPMessage::voiceItem* release_vi_global_40300();
  inline void set_allocated_vi_global_40300(::OPMessage::voiceItem* vi_global_40300);

  // optional .OPMessage.voiceItem vi_global_40400 = 69;
  inline bool has_vi_global_40400() const;
  inline void clear_vi_global_40400();
  static const int kViGlobal40400FieldNumber = 69;
  inline const ::OPMessage::voiceItem& vi_global_40400() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_40400();
  inline ::OPMessage::voiceItem* release_vi_global_40400();
  inline void set_allocated_vi_global_40400(::OPMessage::voiceItem* vi_global_40400);

  // optional .OPMessage.voiceItem vi_global_40500 = 70;
  inline bool has_vi_global_40500() const;
  inline void clear_vi_global_40500();
  static const int kViGlobal40500FieldNumber = 70;
  inline const ::OPMessage::voiceItem& vi_global_40500() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_40500();
  inline ::OPMessage::voiceItem* release_vi_global_40500();
  inline void set_allocated_vi_global_40500(::OPMessage::voiceItem* vi_global_40500);

  // optional .OPMessage.voiceItem vi_global_40600 = 71;
  inline bool has_vi_global_40600() const;
  inline void clear_vi_global_40600();
  static const int kViGlobal40600FieldNumber = 71;
  inline const ::OPMessage::voiceItem& vi_global_40600() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_40600();
  inline ::OPMessage::voiceItem* release_vi_global_40600();
  inline void set_allocated_vi_global_40600(::OPMessage::voiceItem* vi_global_40600);

  // optional .OPMessage.voiceItem vi_global_40601 = 72;
  inline bool has_vi_global_40601() const;
  inline void clear_vi_global_40601();
  static const int kViGlobal40601FieldNumber = 72;
  inline const ::OPMessage::voiceItem& vi_global_40601() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_40601();
  inline ::OPMessage::voiceItem* release_vi_global_40601();
  inline void set_allocated_vi_global_40601(::OPMessage::voiceItem* vi_global_40601);

  // optional .OPMessage.voiceItem vi_global_40700 = 73;
  inline bool has_vi_global_40700() const;
  inline void clear_vi_global_40700();
  static const int kViGlobal40700FieldNumber = 73;
  inline const ::OPMessage::voiceItem& vi_global_40700() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_40700();
  inline ::OPMessage::voiceItem* release_vi_global_40700();
  inline void set_allocated_vi_global_40700(::OPMessage::voiceItem* vi_global_40700);

  // optional .OPMessage.voiceItem vi_global_40800 = 74;
  inline bool has_vi_global_40800() const;
  inline void clear_vi_global_40800();
  static const int kViGlobal40800FieldNumber = 74;
  inline const ::OPMessage::voiceItem& vi_global_40800() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_40800();
  inline ::OPMessage::voiceItem* release_vi_global_40800();
  inline void set_allocated_vi_global_40800(::OPMessage::voiceItem* vi_global_40800);

  // optional .OPMessage.voiceItem vi_global_40900 = 75;
  inline bool has_vi_global_40900() const;
  inline void clear_vi_global_40900();
  static const int kViGlobal40900FieldNumber = 75;
  inline const ::OPMessage::voiceItem& vi_global_40900() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_40900();
  inline ::OPMessage::voiceItem* release_vi_global_40900();
  inline void set_allocated_vi_global_40900(::OPMessage::voiceItem* vi_global_40900);

  // optional .OPMessage.voiceItem vi_global_41000 = 76;
  inline bool has_vi_global_41000() const;
  inline void clear_vi_global_41000();
  static const int kViGlobal41000FieldNumber = 76;
  inline const ::OPMessage::voiceItem& vi_global_41000() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_41000();
  inline ::OPMessage::voiceItem* release_vi_global_41000();
  inline void set_allocated_vi_global_41000(::OPMessage::voiceItem* vi_global_41000);

  // optional .OPMessage.voiceItem vi_global_41001 = 77;
  inline bool has_vi_global_41001() const;
  inline void clear_vi_global_41001();
  static const int kViGlobal41001FieldNumber = 77;
  inline const ::OPMessage::voiceItem& vi_global_41001() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_41001();
  inline ::OPMessage::voiceItem* release_vi_global_41001();
  inline void set_allocated_vi_global_41001(::OPMessage::voiceItem* vi_global_41001);

  // optional .OPMessage.voiceItem vi_global_41100 = 78;
  inline bool has_vi_global_41100() const;
  inline void clear_vi_global_41100();
  static const int kViGlobal41100FieldNumber = 78;
  inline const ::OPMessage::voiceItem& vi_global_41100() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_41100();
  inline ::OPMessage::voiceItem* release_vi_global_41100();
  inline void set_allocated_vi_global_41100(::OPMessage::voiceItem* vi_global_41100);

  // optional .OPMessage.voiceItem vi_global_41200 = 79;
  inline bool has_vi_global_41200() const;
  inline void clear_vi_global_41200();
  static const int kViGlobal41200FieldNumber = 79;
  inline const ::OPMessage::voiceItem& vi_global_41200() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_41200();
  inline ::OPMessage::voiceItem* release_vi_global_41200();
  inline void set_allocated_vi_global_41200(::OPMessage::voiceItem* vi_global_41200);

  // optional .OPMessage.voiceItem vi_global_41300 = 80;
  inline bool has_vi_global_41300() const;
  inline void clear_vi_global_41300();
  static const int kViGlobal41300FieldNumber = 80;
  inline const ::OPMessage::voiceItem& vi_global_41300() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_41300();
  inline ::OPMessage::voiceItem* release_vi_global_41300();
  inline void set_allocated_vi_global_41300(::OPMessage::voiceItem* vi_global_41300);

  // optional .OPMessage.voiceItem vi_global_41400 = 81;
  inline bool has_vi_global_41400() const;
  inline void clear_vi_global_41400();
  static const int kViGlobal41400FieldNumber = 81;
  inline const ::OPMessage::voiceItem& vi_global_41400() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_41400();
  inline ::OPMessage::voiceItem* release_vi_global_41400();
  inline void set_allocated_vi_global_41400(::OPMessage::voiceItem* vi_global_41400);

  // optional .OPMessage.voiceItem vi_global_41500 = 82;
  inline bool has_vi_global_41500() const;
  inline void clear_vi_global_41500();
  static const int kViGlobal41500FieldNumber = 82;
  inline const ::OPMessage::voiceItem& vi_global_41500() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_41500();
  inline ::OPMessage::voiceItem* release_vi_global_41500();
  inline void set_allocated_vi_global_41500(::OPMessage::voiceItem* vi_global_41500);

  // optional .OPMessage.voiceItem vi_global_41600 = 83;
  inline bool has_vi_global_41600() const;
  inline void clear_vi_global_41600();
  static const int kViGlobal41600FieldNumber = 83;
  inline const ::OPMessage::voiceItem& vi_global_41600() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_41600();
  inline ::OPMessage::voiceItem* release_vi_global_41600();
  inline void set_allocated_vi_global_41600(::OPMessage::voiceItem* vi_global_41600);

  // optional .OPMessage.voiceItem vi_global_50001 = 84;
  inline bool has_vi_global_50001() const;
  inline void clear_vi_global_50001();
  static const int kViGlobal50001FieldNumber = 84;
  inline const ::OPMessage::voiceItem& vi_global_50001() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_50001();
  inline ::OPMessage::voiceItem* release_vi_global_50001();
  inline void set_allocated_vi_global_50001(::OPMessage::voiceItem* vi_global_50001);

  // optional .OPMessage.voiceItem vi_global_50002 = 85;
  inline bool has_vi_global_50002() const;
  inline void clear_vi_global_50002();
  static const int kViGlobal50002FieldNumber = 85;
  inline const ::OPMessage::voiceItem& vi_global_50002() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_50002();
  inline ::OPMessage::voiceItem* release_vi_global_50002();
  inline void set_allocated_vi_global_50002(::OPMessage::voiceItem* vi_global_50002);

  // optional .OPMessage.voiceItem vi_global_50003 = 86;
  inline bool has_vi_global_50003() const;
  inline void clear_vi_global_50003();
  static const int kViGlobal50003FieldNumber = 86;
  inline const ::OPMessage::voiceItem& vi_global_50003() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_50003();
  inline ::OPMessage::voiceItem* release_vi_global_50003();
  inline void set_allocated_vi_global_50003(::OPMessage::voiceItem* vi_global_50003);

  // optional .OPMessage.voiceItem vi_global_50004 = 87;
  inline bool has_vi_global_50004() const;
  inline void clear_vi_global_50004();
  static const int kViGlobal50004FieldNumber = 87;
  inline const ::OPMessage::voiceItem& vi_global_50004() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_50004();
  inline ::OPMessage::voiceItem* release_vi_global_50004();
  inline void set_allocated_vi_global_50004(::OPMessage::voiceItem* vi_global_50004);

  // optional .OPMessage.voiceItem vi_global_50005 = 88;
  inline bool has_vi_global_50005() const;
  inline void clear_vi_global_50005();
  static const int kViGlobal50005FieldNumber = 88;
  inline const ::OPMessage::voiceItem& vi_global_50005() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_50005();
  inline ::OPMessage::voiceItem* release_vi_global_50005();
  inline void set_allocated_vi_global_50005(::OPMessage::voiceItem* vi_global_50005);

  // optional .OPMessage.voiceItem vi_global_50006 = 89;
  inline bool has_vi_global_50006() const;
  inline void clear_vi_global_50006();
  static const int kViGlobal50006FieldNumber = 89;
  inline const ::OPMessage::voiceItem& vi_global_50006() const;
  inline ::OPMessage::voiceItem* mutable_vi_global_50006();
  inline ::OPMessage::voiceItem* release_vi_global_50006();
  inline void set_allocated_vi_global_50006(::OPMessage::voiceItem* vi_global_50006);

  // optional .OPMessage.voiceItem vi_41600_not_flash_near_far = 90;
  inline bool has_vi_41600_not_flash_near_far() const;
  inline void clear_vi_41600_not_flash_near_far();
  static const int kVi41600NotFlashNearFarFieldNumber = 90;
  inline const ::OPMessage::voiceItem& vi_41600_not_flash_near_far() const;
  inline ::OPMessage::voiceItem* mutable_vi_41600_not_flash_near_far();
  inline ::OPMessage::voiceItem* release_vi_41600_not_flash_near_far();
  inline void set_allocated_vi_41600_not_flash_near_far(::OPMessage::voiceItem* vi_41600_not_flash_near_far);

  // optional .OPMessage.voiceItem vi_41600_not_open_near = 91;
  inline bool has_vi_41600_not_open_near() const;
  inline void clear_vi_41600_not_open_near();
  static const int kVi41600NotOpenNearFieldNumber = 91;
  inline const ::OPMessage::voiceItem& vi_41600_not_open_near() const;
  inline ::OPMessage::voiceItem* mutable_vi_41600_not_open_near();
  inline ::OPMessage::voiceItem* release_vi_41600_not_open_near();
  inline void set_allocated_vi_41600_not_open_near(::OPMessage::voiceItem* vi_41600_not_open_near);

  // optional .OPMessage.voiceItem vi_41600_open_far = 92;
  inline bool has_vi_41600_open_far() const;
  inline void clear_vi_41600_open_far();
  static const int kVi41600OpenFarFieldNumber = 92;
  inline const ::OPMessage::voiceItem& vi_41600_open_far() const;
  inline ::OPMessage::voiceItem* mutable_vi_41600_open_far();
  inline ::OPMessage::voiceItem* release_vi_41600_open_far();
  inline void set_allocated_vi_41600_open_far(::OPMessage::voiceItem* vi_41600_open_far);

  // optional .OPMessage.voiceItem vi_41600_not_open_lamp = 93;
  inline bool has_vi_41600_not_open_lamp() const;
  inline void clear_vi_41600_not_open_lamp();
  static const int kVi41600NotOpenLampFieldNumber = 93;
  inline const ::OPMessage::voiceItem& vi_41600_not_open_lamp() const;
  inline ::OPMessage::voiceItem* mutable_vi_41600_not_open_lamp();
  inline ::OPMessage::voiceItem* release_vi_41600_not_open_lamp();
  inline void set_allocated_vi_41600_not_open_lamp(::OPMessage::voiceItem* vi_41600_not_open_lamp);

  // @@protoc_insertion_point(class_scope:OPMessage.Judge0)
 private:
  inline void set_has_itemcode();
  inline void clear_has_itemcode();
  inline void set_has_itemname();
  inline void clear_has_itemname();
  inline void set_has_max_time();
  inline void clear_has_max_time();
  inline void set_has_max_stop_speed();
  inline void clear_has_max_stop_speed();
  inline void set_has_max_speed();
  inline void clear_has_max_speed();
  inline void set_has_max_off_course_distance();
  inline void clear_has_max_off_course_distance();
  inline void set_has_max_near_lamp_off_time();
  inline void clear_has_max_near_lamp_off_time();
  inline void set_has_max_far_lamp_on_time();
  inline void clear_has_max_far_lamp_on_time();
  inline void set_has_auto_gear();
  inline void clear_has_auto_gear();
  inline void set_has_max_first_gear_distance_once();
  inline void clear_has_max_first_gear_distance_once();
  inline void set_has_max_second_gear_distance_once();
  inline void clear_has_max_second_gear_distance_once();
  inline void set_has_max_first_gear_distance_global();
  inline void clear_has_max_first_gear_distance_global();
  inline void set_has_max_second_gear_distance_global();
  inline void clear_has_max_second_gear_distance_global();
  inline void set_has_min_third_gear_distance_global();
  inline void clear_has_min_third_gear_distance_global();
  inline void set_has_global_reach_speed();
  inline void clear_has_global_reach_speed();
  inline void set_has_min_global_reach_speed_distance();
  inline void clear_has_min_global_reach_speed_distance();
  inline void set_has_max_rpm();
  inline void clear_has_max_rpm();
  inline void set_has_max_neutral_distance_once();
  inline void clear_has_max_neutral_distance_once();
  inline void set_has_gear_speed_match_0();
  inline void clear_has_gear_speed_match_0();
  inline void set_has_gear_speed_match_1();
  inline void clear_has_gear_speed_match_1();
  inline void set_has_gear_speed_match_2();
  inline void clear_has_gear_speed_match_2();
  inline void set_has_gear_speed_match_3();
  inline void clear_has_gear_speed_match_3();
  inline void set_has_gear_speed_match_4();
  inline void clear_has_gear_speed_match_4();
  inline void set_has_gear_speed_match_5();
  inline void clear_has_gear_speed_match_5();
  inline void set_has_max_turn_lamp_on_time();
  inline void clear_has_max_turn_lamp_on_time();
  inline void set_has_max_neutral_time_once();
  inline void clear_has_max_neutral_time_once();
  inline void set_has_gear_speed_match_time();
  inline void clear_has_gear_speed_match_time();
  inline void set_has_foot_brake_beep();
  inline void clear_has_foot_brake_beep();
  inline void set_has_deduct_voice_speak_mode();
  inline void clear_has_deduct_voice_speak_mode();
  inline void set_has_car_shake_rpm_threshold();
  inline void clear_has_car_shake_rpm_threshold();
  inline void set_has_car_shake_time_threshold();
  inline void clear_has_car_shake_time_threshold();
  inline void set_has_repeat_voice_time_delay();
  inline void clear_has_repeat_voice_time_delay();
  inline void set_has_min_fourth_gear_distance_global();
  inline void clear_has_min_fourth_gear_distance_global();
  inline void set_has_vi_global_app_start();
  inline void clear_has_vi_global_app_start();
  inline void set_has_vi_global_not_wear_seat_belts();
  inline void clear_has_vi_global_not_wear_seat_belts();
  inline void set_has_vi_global_not_close_door();
  inline void clear_has_vi_global_not_close_door();
  inline void set_has_vi_global_falmeout();
  inline void clear_has_vi_global_falmeout();
  inline void set_has_vi_global_overspeed();
  inline void clear_has_vi_global_overspeed();
  inline void set_has_vi_global_first_gear_distance_overrange_once();
  inline void clear_has_vi_global_first_gear_distance_overrange_once();
  inline void set_has_vi_global_second_gear_distance_overrange_once();
  inline void clear_has_vi_global_second_gear_distance_overrange_once();
  inline void set_has_vi_global_first_gear_distance_overrange_global();
  inline void clear_has_vi_global_first_gear_distance_overrange_global();
  inline void set_has_vi_global_second_gear_distance_overrange_global();
  inline void clear_has_vi_global_second_gear_distance_overrange_global();
  inline void set_has_vi_global_third_gear_distance_not_enough();
  inline void clear_has_vi_global_third_gear_distance_not_enough();
  inline void set_has_vi_global_fourth_gear_distance_not_enough();
  inline void clear_has_vi_global_fourth_gear_distance_not_enough();
  inline void set_has_vi_global_neutral_driving();
  inline void clear_has_vi_global_neutral_driving();
  inline void set_has_vi_global_high_speed_not_enough();
  inline void clear_has_vi_global_high_speed_not_enough();
  inline void set_has_vi_global_rpm_overrange();
  inline void clear_has_vi_global_rpm_overrange();
  inline void set_has_vi_global_gear_speed_not_match();
  inline void clear_has_vi_global_gear_speed_not_match();
  inline void set_has_vi_global_exam_timeout();
  inline void clear_has_vi_global_exam_timeout();
  inline void set_has_vi_global_turn_lamp_long_time_on();
  inline void clear_has_vi_global_turn_lamp_long_time_on();
  inline void set_has_vi_global_road_error();
  inline void clear_has_vi_global_road_error();
  inline void set_has_vi_global_exam_over_pass();
  inline void clear_has_vi_global_exam_over_pass();
  inline void set_has_vi_global_exam_over_not_pass();
  inline void clear_has_vi_global_exam_over_not_pass();
  inline void set_has_vi_global_delay_speak_start();
  inline void clear_has_vi_global_delay_speak_start();
  inline void set_has_vi_global_delay_speak_stop();
  inline void clear_has_vi_global_delay_speak_stop();
  inline void set_has_vi_global_delay_speak_none();
  inline void clear_has_vi_global_delay_speak_none();
  inline void set_has_vi_global_whole_exam_timeout();
  inline void clear_has_vi_global_whole_exam_timeout();
  inline void set_has_vi_global_start_driving_with_error_gear();
  inline void clear_has_vi_global_start_driving_with_error_gear();
  inline void set_has_vi_global_start_driving_not_release_handbrake();
  inline void clear_has_vi_global_start_driving_not_release_handbrake();
  inline void set_has_vi_global_jump_gear();
  inline void clear_has_vi_global_jump_gear();
  inline void set_has_vi_global_car_shake();
  inline void clear_has_vi_global_car_shake();
  inline void set_has_vi_global_firingup_timeout();
  inline void clear_has_vi_global_firingup_timeout();
  inline void set_has_vi_global_notify_push_fingerprint();
  inline void clear_has_vi_global_notify_push_fingerprint();
  inline void set_has_vi_global_fingerprint_pass();
  inline void clear_has_vi_global_fingerprint_pass();
  inline void set_has_vi_global_global();
  inline void clear_has_vi_global_global();
  inline void set_has_vi_global_40100();
  inline void clear_has_vi_global_40100();
  inline void set_has_vi_global_40200();
  inline void clear_has_vi_global_40200();
  inline void set_has_vi_global_40300();
  inline void clear_has_vi_global_40300();
  inline void set_has_vi_global_40400();
  inline void clear_has_vi_global_40400();
  inline void set_has_vi_global_40500();
  inline void clear_has_vi_global_40500();
  inline void set_has_vi_global_40600();
  inline void clear_has_vi_global_40600();
  inline void set_has_vi_global_40601();
  inline void clear_has_vi_global_40601();
  inline void set_has_vi_global_40700();
  inline void clear_has_vi_global_40700();
  inline void set_has_vi_global_40800();
  inline void clear_has_vi_global_40800();
  inline void set_has_vi_global_40900();
  inline void clear_has_vi_global_40900();
  inline void set_has_vi_global_41000();
  inline void clear_has_vi_global_41000();
  inline void set_has_vi_global_41001();
  inline void clear_has_vi_global_41001();
  inline void set_has_vi_global_41100();
  inline void clear_has_vi_global_41100();
  inline void set_has_vi_global_41200();
  inline void clear_has_vi_global_41200();
  inline void set_has_vi_global_41300();
  inline void clear_has_vi_global_41300();
  inline void set_has_vi_global_41400();
  inline void clear_has_vi_global_41400();
  inline void set_has_vi_global_41500();
  inline void clear_has_vi_global_41500();
  inline void set_has_vi_global_41600();
  inline void clear_has_vi_global_41600();
  inline void set_has_vi_global_50001();
  inline void clear_has_vi_global_50001();
  inline void set_has_vi_global_50002();
  inline void clear_has_vi_global_50002();
  inline void set_has_vi_global_50003();
  inline void clear_has_vi_global_50003();
  inline void set_has_vi_global_50004();
  inline void clear_has_vi_global_50004();
  inline void set_has_vi_global_50005();
  inline void clear_has_vi_global_50005();
  inline void set_has_vi_global_50006();
  inline void clear_has_vi_global_50006();
  inline void set_has_vi_41600_not_flash_near_far();
  inline void clear_has_vi_41600_not_flash_near_far();
  inline void set_has_vi_41600_not_open_near();
  inline void clear_has_vi_41600_not_open_near();
  inline void set_has_vi_41600_open_far();
  inline void clear_has_vi_41600_open_far();
  inline void set_has_vi_41600_not_open_lamp();
  inline void clear_has_vi_41600_not_open_lamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[3];
  mutable int _cached_size_;
  ::std::string* itemname_;
  ::OPMessage::judgeItem* max_time_;
  ::OPMessage::judgeItem* max_stop_speed_;
  ::OPMessage::judgeItem* max_speed_;
  ::OPMessage::judgeItem* max_off_course_distance_;
  ::OPMessage::judgeItem* max_near_lamp_off_time_;
  ::OPMessage::judgeItem* max_far_lamp_on_time_;
  ::OPMessage::judgeItem* auto_gear_;
  ::OPMessage::judgeItem* max_first_gear_distance_once_;
  ::OPMessage::judgeItem* max_second_gear_distance_once_;
  ::OPMessage::judgeItem* max_first_gear_distance_global_;
  ::OPMessage::judgeItem* max_second_gear_distance_global_;
  ::OPMessage::judgeItem* min_third_gear_distance_global_;
  ::OPMessage::judgeItem* global_reach_speed_;
  ::OPMessage::judgeItem* min_global_reach_speed_distance_;
  ::OPMessage::judgeItem* max_rpm_;
  ::OPMessage::judgeItem* max_neutral_distance_once_;
  ::OPMessage::judgeItem* gear_speed_match_0_;
  ::OPMessage::judgeItem* gear_speed_match_1_;
  ::OPMessage::judgeItem* gear_speed_match_2_;
  ::OPMessage::judgeItem* gear_speed_match_3_;
  ::OPMessage::judgeItem* gear_speed_match_4_;
  ::OPMessage::judgeItem* gear_speed_match_5_;
  ::OPMessage::judgeItem* max_turn_lamp_on_time_;
  ::OPMessage::judgeItem* max_neutral_time_once_;
  ::OPMessage::judgeItem* gear_speed_match_time_;
  ::OPMessage::judgeItem* foot_brake_beep_;
  ::OPMessage::judgeItem* deduct_voice_speak_mode_;
  ::OPMessage::judgeItem* car_shake_rpm_threshold_;
  ::OPMessage::judgeItem* car_shake_time_threshold_;
  ::OPMessage::judgeItem* repeat_voice_time_delay_;
  ::OPMessage::judgeItem* min_fourth_gear_distance_global_;
  ::OPMessage::voiceItem* vi_global_app_start_;
  ::OPMessage::voiceItem* vi_global_not_wear_seat_belts_;
  ::OPMessage::voiceItem* vi_global_not_close_door_;
  ::OPMessage::voiceItem* vi_global_falmeout_;
  ::OPMessage::voiceItem* vi_global_overspeed_;
  ::OPMessage::voiceItem* vi_global_first_gear_distance_overrange_once_;
  ::OPMessage::voiceItem* vi_global_second_gear_distance_overrange_once_;
  ::OPMessage::voiceItem* vi_global_first_gear_distance_overrange_global_;
  ::OPMessage::voiceItem* vi_global_second_gear_distance_overrange_global_;
  ::OPMessage::voiceItem* vi_global_third_gear_distance_not_enough_;
  ::OPMessage::voiceItem* vi_global_fourth_gear_distance_not_enough_;
  ::OPMessage::voiceItem* vi_global_neutral_driving_;
  ::OPMessage::voiceItem* vi_global_high_speed_not_enough_;
  ::OPMessage::voiceItem* vi_global_rpm_overrange_;
  ::OPMessage::voiceItem* vi_global_gear_speed_not_match_;
  ::OPMessage::voiceItem* vi_global_exam_timeout_;
  ::OPMessage::voiceItem* vi_global_turn_lamp_long_time_on_;
  ::OPMessage::voiceItem* vi_global_road_error_;
  ::OPMessage::voiceItem* vi_global_exam_over_pass_;
  ::OPMessage::voiceItem* vi_global_exam_over_not_pass_;
  ::OPMessage::voiceItem* vi_global_delay_speak_start_;
  ::OPMessage::voiceItem* vi_global_delay_speak_stop_;
  ::OPMessage::voiceItem* vi_global_delay_speak_none_;
  ::OPMessage::voiceItem* vi_global_whole_exam_timeout_;
  ::OPMessage::voiceItem* vi_global_start_driving_with_error_gear_;
  ::OPMessage::voiceItem* vi_global_start_driving_not_release_handbrake_;
  ::OPMessage::voiceItem* vi_global_jump_gear_;
  ::OPMessage::voiceItem* vi_global_car_shake_;
  ::OPMessage::voiceItem* vi_global_firingup_timeout_;
  ::OPMessage::voiceItem* vi_global_notify_push_fingerprint_;
  ::OPMessage::voiceItem* vi_global_fingerprint_pass_;
  ::OPMessage::voiceItem* vi_global_global_;
  ::OPMessage::voiceItem* vi_global_40100_;
  ::OPMessage::voiceItem* vi_global_40200_;
  ::OPMessage::voiceItem* vi_global_40300_;
  ::OPMessage::voiceItem* vi_global_40400_;
  ::OPMessage::voiceItem* vi_global_40500_;
  ::OPMessage::voiceItem* vi_global_40600_;
  ::OPMessage::voiceItem* vi_global_40601_;
  ::OPMessage::voiceItem* vi_global_40700_;
  ::OPMessage::voiceItem* vi_global_40800_;
  ::OPMessage::voiceItem* vi_global_40900_;
  ::OPMessage::voiceItem* vi_global_41000_;
  ::OPMessage::voiceItem* vi_global_41001_;
  ::OPMessage::voiceItem* vi_global_41100_;
  ::OPMessage::voiceItem* vi_global_41200_;
  ::OPMessage::voiceItem* vi_global_41300_;
  ::OPMessage::voiceItem* vi_global_41400_;
  ::OPMessage::voiceItem* vi_global_41500_;
  ::OPMessage::voiceItem* vi_global_41600_;
  ::OPMessage::voiceItem* vi_global_50001_;
  ::OPMessage::voiceItem* vi_global_50002_;
  ::OPMessage::voiceItem* vi_global_50003_;
  ::OPMessage::voiceItem* vi_global_50004_;
  ::OPMessage::voiceItem* vi_global_50005_;
  ::OPMessage::voiceItem* vi_global_50006_;
  ::OPMessage::voiceItem* vi_41600_not_flash_near_far_;
  ::OPMessage::voiceItem* vi_41600_not_open_near_;
  ::OPMessage::voiceItem* vi_41600_open_far_;
  ::OPMessage::voiceItem* vi_41600_not_open_lamp_;
  ::google::protobuf::int32 itemcode_;
  friend void  protobuf_AddDesc_MessageKm3Config_2eproto();
  friend void protobuf_AssignDesc_MessageKm3Config_2eproto();
  friend void protobuf_ShutdownFile_MessageKm3Config_2eproto();

  void InitAsDefaultInstance();
  static Judge0* default_instance_;
};
// -------------------------------------------------------------------

class Judge40100 : public ::google::protobuf::Message {
 public:
  Judge40100();
  virtual ~Judge40100();

  Judge40100(const Judge40100& from);

  inline Judge40100& operator=(const Judge40100& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Judge40100& default_instance();

  void Swap(Judge40100* other);

  // implements Message ----------------------------------------------

  Judge40100* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Judge40100& from);
  void MergeFrom(const Judge40100& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 itemCode = 1;
  inline bool has_itemcode() const;
  inline void clear_itemcode();
  static const int kItemCodeFieldNumber = 1;
  inline ::google::protobuf::int32 itemcode() const;
  inline void set_itemcode(::google::protobuf::int32 value);

  // optional string itemName = 2;
  inline bool has_itemname() const;
  inline void clear_itemname();
  static const int kItemNameFieldNumber = 2;
  inline const ::std::string& itemname() const;
  inline void set_itemname(const ::std::string& value);
  inline void set_itemname(const char* value);
  inline void set_itemname(const char* value, size_t size);
  inline ::std::string* mutable_itemname();
  inline ::std::string* release_itemname();
  inline void set_allocated_itemname(::std::string* itemname);

  // optional .OPMessage.judgeItem max_time = 3;
  inline bool has_max_time() const;
  inline void clear_max_time();
  static const int kMaxTimeFieldNumber = 3;
  inline const ::OPMessage::judgeItem& max_time() const;
  inline ::OPMessage::judgeItem* mutable_max_time();
  inline ::OPMessage::judgeItem* release_max_time();
  inline void set_allocated_max_time(::OPMessage::judgeItem* max_time);

  // optional .OPMessage.judgeItem need_speak_touch_surround_sensor_voice = 4;
  inline bool has_need_speak_touch_surround_sensor_voice() const;
  inline void clear_need_speak_touch_surround_sensor_voice();
  static const int kNeedSpeakTouchSurroundSensorVoiceFieldNumber = 4;
  inline const ::OPMessage::judgeItem& need_speak_touch_surround_sensor_voice() const;
  inline ::OPMessage::judgeItem* mutable_need_speak_touch_surround_sensor_voice();
  inline ::OPMessage::judgeItem* release_need_speak_touch_surround_sensor_voice();
  inline void set_allocated_need_speak_touch_surround_sensor_voice(::OPMessage::judgeItem* need_speak_touch_surround_sensor_voice);

  // optional .OPMessage.judgeItem check_surround_sensor_count = 5;
  inline bool has_check_surround_sensor_count() const;
  inline void clear_check_surround_sensor_count();
  static const int kCheckSurroundSensorCountFieldNumber = 5;
  inline const ::OPMessage::judgeItem& check_surround_sensor_count() const;
  inline ::OPMessage::judgeItem* mutable_check_surround_sensor_count();
  inline ::OPMessage::judgeItem* release_check_surround_sensor_count();
  inline void set_allocated_check_surround_sensor_count(::OPMessage::judgeItem* check_surround_sensor_count);

  // optional .OPMessage.judgeItem need_close_door_before_round_car = 6;
  inline bool has_need_close_door_before_round_car() const;
  inline void clear_need_close_door_before_round_car();
  static const int kNeedCloseDoorBeforeRoundCarFieldNumber = 6;
  inline const ::OPMessage::judgeItem& need_close_door_before_round_car() const;
  inline ::OPMessage::judgeItem* mutable_need_close_door_before_round_car();
  inline ::OPMessage::judgeItem* release_need_close_door_before_round_car();
  inline void set_allocated_need_close_door_before_round_car(::OPMessage::judgeItem* need_close_door_before_round_car);

  // optional .OPMessage.judgeItem finish_exam_type = 7;
  inline bool has_finish_exam_type() const;
  inline void clear_finish_exam_type();
  static const int kFinishExamTypeFieldNumber = 7;
  inline const ::OPMessage::judgeItem& finish_exam_type() const;
  inline ::OPMessage::judgeItem* mutable_finish_exam_type();
  inline ::OPMessage::judgeItem* release_finish_exam_type();
  inline void set_allocated_finish_exam_type(::OPMessage::judgeItem* finish_exam_type);

  // optional .OPMessage.voiceItem vi_40100_start_exam = 8;
  inline bool has_vi_40100_start_exam() const;
  inline void clear_vi_40100_start_exam();
  static const int kVi40100StartExamFieldNumber = 8;
  inline const ::OPMessage::voiceItem& vi_40100_start_exam() const;
  inline ::OPMessage::voiceItem* mutable_vi_40100_start_exam();
  inline ::OPMessage::voiceItem* release_vi_40100_start_exam();
  inline void set_allocated_vi_40100_start_exam(::OPMessage::voiceItem* vi_40100_start_exam);

  // optional .OPMessage.voiceItem vi_40100_end_exam = 9;
  inline bool has_vi_40100_end_exam() const;
  inline void clear_vi_40100_end_exam();
  static const int kVi40100EndExamFieldNumber = 9;
  inline const ::OPMessage::voiceItem& vi_40100_end_exam() const;
  inline ::OPMessage::voiceItem* mutable_vi_40100_end_exam();
  inline ::OPMessage::voiceItem* release_vi_40100_end_exam();
  inline void set_allocated_vi_40100_end_exam(::OPMessage::voiceItem* vi_40100_end_exam);

  // optional .OPMessage.voiceItem vi_40100_stop_car_before = 10;
  inline bool has_vi_40100_stop_car_before() const;
  inline void clear_vi_40100_stop_car_before();
  static const int kVi40100StopCarBeforeFieldNumber = 10;
  inline const ::OPMessage::voiceItem& vi_40100_stop_car_before() const;
  inline ::OPMessage::voiceItem* mutable_vi_40100_stop_car_before();
  inline ::OPMessage::voiceItem* release_vi_40100_stop_car_before();
  inline void set_allocated_vi_40100_stop_car_before(::OPMessage::voiceItem* vi_40100_stop_car_before);

  // optional .OPMessage.voiceItem vi_40100_operation_flag_voice_before = 11;
  inline bool has_vi_40100_operation_flag_voice_before() const;
  inline void clear_vi_40100_operation_flag_voice_before();
  static const int kVi40100OperationFlagVoiceBeforeFieldNumber = 11;
  inline const ::OPMessage::voiceItem& vi_40100_operation_flag_voice_before() const;
  inline ::OPMessage::voiceItem* mutable_vi_40100_operation_flag_voice_before();
  inline ::OPMessage::voiceItem* release_vi_40100_operation_flag_voice_before();
  inline void set_allocated_vi_40100_operation_flag_voice_before(::OPMessage::voiceItem* vi_40100_operation_flag_voice_before);

  // optional .OPMessage.voiceItem vi_40100_operation_flag_voice_over = 12;
  inline bool has_vi_40100_operation_flag_voice_over() const;
  inline void clear_vi_40100_operation_flag_voice_over();
  static const int kVi40100OperationFlagVoiceOverFieldNumber = 12;
  inline const ::OPMessage::voiceItem& vi_40100_operation_flag_voice_over() const;
  inline ::OPMessage::voiceItem* mutable_vi_40100_operation_flag_voice_over();
  inline ::OPMessage::voiceItem* release_vi_40100_operation_flag_voice_over();
  inline void set_allocated_vi_40100_operation_flag_voice_over(::OPMessage::voiceItem* vi_40100_operation_flag_voice_over);

  // optional .OPMessage.voiceItem vi_40100_operation_flag_notify_flameout = 13;
  inline bool has_vi_40100_operation_flag_notify_flameout() const;
  inline void clear_vi_40100_operation_flag_notify_flameout();
  static const int kVi40100OperationFlagNotifyFlameoutFieldNumber = 13;
  inline const ::OPMessage::voiceItem& vi_40100_operation_flag_notify_flameout() const;
  inline ::OPMessage::voiceItem* mutable_vi_40100_operation_flag_notify_flameout();
  inline ::OPMessage::voiceItem* release_vi_40100_operation_flag_notify_flameout();
  inline void set_allocated_vi_40100_operation_flag_notify_flameout(::OPMessage::voiceItem* vi_40100_operation_flag_notify_flameout);

  // optional .OPMessage.voiceItem vi_40100_operation_flag_notify_handbrake = 14;
  inline bool has_vi_40100_operation_flag_notify_handbrake() const;
  inline void clear_vi_40100_operation_flag_notify_handbrake();
  static const int kVi40100OperationFlagNotifyHandbrakeFieldNumber = 14;
  inline const ::OPMessage::voiceItem& vi_40100_operation_flag_notify_handbrake() const;
  inline ::OPMessage::voiceItem* mutable_vi_40100_operation_flag_notify_handbrake();
  inline ::OPMessage::voiceItem* release_vi_40100_operation_flag_notify_handbrake();
  inline void set_allocated_vi_40100_operation_flag_notify_handbrake(::OPMessage::voiceItem* vi_40100_operation_flag_notify_handbrake);

  // optional .OPMessage.voiceItem vi_40100_round_car_lf = 15;
  inline bool has_vi_40100_round_car_lf() const;
  inline void clear_vi_40100_round_car_lf();
  static const int kVi40100RoundCarLfFieldNumber = 15;
  inline const ::OPMessage::voiceItem& vi_40100_round_car_lf() const;
  inline ::OPMessage::voiceItem* mutable_vi_40100_round_car_lf();
  inline ::OPMessage::voiceItem* release_vi_40100_round_car_lf();
  inline void set_allocated_vi_40100_round_car_lf(::OPMessage::voiceItem* vi_40100_round_car_lf);

  // optional .OPMessage.voiceItem vi_40100_round_car_rf = 16;
  inline bool has_vi_40100_round_car_rf() const;
  inline void clear_vi_40100_round_car_rf();
  static const int kVi40100RoundCarRfFieldNumber = 16;
  inline const ::OPMessage::voiceItem& vi_40100_round_car_rf() const;
  inline ::OPMessage::voiceItem* mutable_vi_40100_round_car_rf();
  inline ::OPMessage::voiceItem* release_vi_40100_round_car_rf();
  inline void set_allocated_vi_40100_round_car_rf(::OPMessage::voiceItem* vi_40100_round_car_rf);

  // optional .OPMessage.voiceItem vi_40100_round_car_lb = 17;
  inline bool has_vi_40100_round_car_lb() const;
  inline void clear_vi_40100_round_car_lb();
  static const int kVi40100RoundCarLbFieldNumber = 17;
  inline const ::OPMessage::voiceItem& vi_40100_round_car_lb() const;
  inline ::OPMessage::voiceItem* mutable_vi_40100_round_car_lb();
  inline ::OPMessage::voiceItem* release_vi_40100_round_car_lb();
  inline void set_allocated_vi_40100_round_car_lb(::OPMessage::voiceItem* vi_40100_round_car_lb);

  // optional .OPMessage.voiceItem vi_40100_round_car_rb = 18;
  inline bool has_vi_40100_round_car_rb() const;
  inline void clear_vi_40100_round_car_rb();
  static const int kVi40100RoundCarRbFieldNumber = 18;
  inline const ::OPMessage::voiceItem& vi_40100_round_car_rb() const;
  inline ::OPMessage::voiceItem* mutable_vi_40100_round_car_rb();
  inline ::OPMessage::voiceItem* release_vi_40100_round_car_rb();
  inline void set_allocated_vi_40100_round_car_rb(::OPMessage::voiceItem* vi_40100_round_car_rb);

  // optional .OPMessage.voiceItem vi_40100_operation_flag_notify_close_door = 19;
  inline bool has_vi_40100_operation_flag_notify_close_door() const;
  inline void clear_vi_40100_operation_flag_notify_close_door();
  static const int kVi40100OperationFlagNotifyCloseDoorFieldNumber = 19;
  inline const ::OPMessage::voiceItem& vi_40100_operation_flag_notify_close_door() const;
  inline ::OPMessage::voiceItem* mutable_vi_40100_operation_flag_notify_close_door();
  inline ::OPMessage::voiceItem* release_vi_40100_operation_flag_notify_close_door();
  inline void set_allocated_vi_40100_operation_flag_notify_close_door(::OPMessage::voiceItem* vi_40100_operation_flag_notify_close_door);

  // optional .OPMessage.voiceItem vi_40100_round_car_not_close_door = 20;
  inline bool has_vi_40100_round_car_not_close_door() const;
  inline void clear_vi_40100_round_car_not_close_door();
  static const int kVi40100RoundCarNotCloseDoorFieldNumber = 20;
  inline const ::OPMessage::voiceItem& vi_40100_round_car_not_close_door() const;
  inline ::OPMessage::voiceItem* mutable_vi_40100_round_car_not_close_door();
  inline ::OPMessage::voiceItem* release_vi_40100_round_car_not_close_door();
  inline void set_allocated_vi_40100_round_car_not_close_door(::OPMessage::voiceItem* vi_40100_round_car_not_close_door);

  // optional .OPMessage.voiceItem vi_40100_round_car_order_error = 21;
  inline bool has_vi_40100_round_car_order_error() const;
  inline void clear_vi_40100_round_car_order_error();
  static const int kVi40100RoundCarOrderErrorFieldNumber = 21;
  inline const ::OPMessage::voiceItem& vi_40100_round_car_order_error() const;
  inline ::OPMessage::voiceItem* mutable_vi_40100_round_car_order_error();
  inline ::OPMessage::voiceItem* release_vi_40100_round_car_order_error();
  inline void set_allocated_vi_40100_round_car_order_error(::OPMessage::voiceItem* vi_40100_round_car_order_error);

  // optional .OPMessage.voiceItem vi_40100_runnin_befor_finish_test = 22;
  inline bool has_vi_40100_runnin_befor_finish_test() const;
  inline void clear_vi_40100_runnin_befor_finish_test();
  static const int kVi40100RunninBeforFinishTestFieldNumber = 22;
  inline const ::OPMessage::voiceItem& vi_40100_runnin_befor_finish_test() const;
  inline ::OPMessage::voiceItem* mutable_vi_40100_runnin_befor_finish_test();
  inline ::OPMessage::voiceItem* release_vi_40100_runnin_befor_finish_test();
  inline void set_allocated_vi_40100_runnin_befor_finish_test(::OPMessage::voiceItem* vi_40100_runnin_befor_finish_test);

  // optional .OPMessage.voiceItem vi_40100_not_close_door = 23;
  inline bool has_vi_40100_not_close_door() const;
  inline void clear_vi_40100_not_close_door();
  static const int kVi40100NotCloseDoorFieldNumber = 23;
  inline const ::OPMessage::voiceItem& vi_40100_not_close_door() const;
  inline ::OPMessage::voiceItem* mutable_vi_40100_not_close_door();
  inline ::OPMessage::voiceItem* release_vi_40100_not_close_door();
  inline void set_allocated_vi_40100_not_close_door(::OPMessage::voiceItem* vi_40100_not_close_door);

  // optional .OPMessage.voiceItem vi_40100_not_round_car = 24;
  inline bool has_vi_40100_not_round_car() const;
  inline void clear_vi_40100_not_round_car();
  static const int kVi40100NotRoundCarFieldNumber = 24;
  inline const ::OPMessage::voiceItem& vi_40100_not_round_car() const;
  inline ::OPMessage::voiceItem* mutable_vi_40100_not_round_car();
  inline ::OPMessage::voiceItem* release_vi_40100_not_round_car();
  inline void set_allocated_vi_40100_not_round_car(::OPMessage::voiceItem* vi_40100_not_round_car);

  // @@protoc_insertion_point(class_scope:OPMessage.Judge40100)
 private:
  inline void set_has_itemcode();
  inline void clear_has_itemcode();
  inline void set_has_itemname();
  inline void clear_has_itemname();
  inline void set_has_max_time();
  inline void clear_has_max_time();
  inline void set_has_need_speak_touch_surround_sensor_voice();
  inline void clear_has_need_speak_touch_surround_sensor_voice();
  inline void set_has_check_surround_sensor_count();
  inline void clear_has_check_surround_sensor_count();
  inline void set_has_need_close_door_before_round_car();
  inline void clear_has_need_close_door_before_round_car();
  inline void set_has_finish_exam_type();
  inline void clear_has_finish_exam_type();
  inline void set_has_vi_40100_start_exam();
  inline void clear_has_vi_40100_start_exam();
  inline void set_has_vi_40100_end_exam();
  inline void clear_has_vi_40100_end_exam();
  inline void set_has_vi_40100_stop_car_before();
  inline void clear_has_vi_40100_stop_car_before();
  inline void set_has_vi_40100_operation_flag_voice_before();
  inline void clear_has_vi_40100_operation_flag_voice_before();
  inline void set_has_vi_40100_operation_flag_voice_over();
  inline void clear_has_vi_40100_operation_flag_voice_over();
  inline void set_has_vi_40100_operation_flag_notify_flameout();
  inline void clear_has_vi_40100_operation_flag_notify_flameout();
  inline void set_has_vi_40100_operation_flag_notify_handbrake();
  inline void clear_has_vi_40100_operation_flag_notify_handbrake();
  inline void set_has_vi_40100_round_car_lf();
  inline void clear_has_vi_40100_round_car_lf();
  inline void set_has_vi_40100_round_car_rf();
  inline void clear_has_vi_40100_round_car_rf();
  inline void set_has_vi_40100_round_car_lb();
  inline void clear_has_vi_40100_round_car_lb();
  inline void set_has_vi_40100_round_car_rb();
  inline void clear_has_vi_40100_round_car_rb();
  inline void set_has_vi_40100_operation_flag_notify_close_door();
  inline void clear_has_vi_40100_operation_flag_notify_close_door();
  inline void set_has_vi_40100_round_car_not_close_door();
  inline void clear_has_vi_40100_round_car_not_close_door();
  inline void set_has_vi_40100_round_car_order_error();
  inline void clear_has_vi_40100_round_car_order_error();
  inline void set_has_vi_40100_runnin_befor_finish_test();
  inline void clear_has_vi_40100_runnin_befor_finish_test();
  inline void set_has_vi_40100_not_close_door();
  inline void clear_has_vi_40100_not_close_door();
  inline void set_has_vi_40100_not_round_car();
  inline void clear_has_vi_40100_not_round_car();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* itemname_;
  ::OPMessage::judgeItem* max_time_;
  ::OPMessage::judgeItem* need_speak_touch_surround_sensor_voice_;
  ::OPMessage::judgeItem* check_surround_sensor_count_;
  ::OPMessage::judgeItem* need_close_door_before_round_car_;
  ::OPMessage::judgeItem* finish_exam_type_;
  ::OPMessage::voiceItem* vi_40100_start_exam_;
  ::OPMessage::voiceItem* vi_40100_end_exam_;
  ::OPMessage::voiceItem* vi_40100_stop_car_before_;
  ::OPMessage::voiceItem* vi_40100_operation_flag_voice_before_;
  ::OPMessage::voiceItem* vi_40100_operation_flag_voice_over_;
  ::OPMessage::voiceItem* vi_40100_operation_flag_notify_flameout_;
  ::OPMessage::voiceItem* vi_40100_operation_flag_notify_handbrake_;
  ::OPMessage::voiceItem* vi_40100_round_car_lf_;
  ::OPMessage::voiceItem* vi_40100_round_car_rf_;
  ::OPMessage::voiceItem* vi_40100_round_car_lb_;
  ::OPMessage::voiceItem* vi_40100_round_car_rb_;
  ::OPMessage::voiceItem* vi_40100_operation_flag_notify_close_door_;
  ::OPMessage::voiceItem* vi_40100_round_car_not_close_door_;
  ::OPMessage::voiceItem* vi_40100_round_car_order_error_;
  ::OPMessage::voiceItem* vi_40100_runnin_befor_finish_test_;
  ::OPMessage::voiceItem* vi_40100_not_close_door_;
  ::OPMessage::voiceItem* vi_40100_not_round_car_;
  ::google::protobuf::int32 itemcode_;
  friend void  protobuf_AddDesc_MessageKm3Config_2eproto();
  friend void protobuf_AssignDesc_MessageKm3Config_2eproto();
  friend void protobuf_ShutdownFile_MessageKm3Config_2eproto();

  void InitAsDefaultInstance();
  static Judge40100* default_instance_;
};
// -------------------------------------------------------------------

class Judge41600 : public ::google::protobuf::Message {
 public:
  Judge41600();
  virtual ~Judge41600();

  Judge41600(const Judge41600& from);

  inline Judge41600& operator=(const Judge41600& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Judge41600& default_instance();

  void Swap(Judge41600* other);

  // implements Message ----------------------------------------------

  Judge41600* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Judge41600& from);
  void MergeFrom(const Judge41600& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 itemCode = 1;
  inline bool has_itemcode() const;
  inline void clear_itemcode();
  static const int kItemCodeFieldNumber = 1;
  inline ::google::protobuf::int32 itemcode() const;
  inline void set_itemcode(::google::protobuf::int32 value);

  // optional string itemName = 2;
  inline bool has_itemname() const;
  inline void clear_itemname();
  static const int kItemNameFieldNumber = 2;
  inline const ::std::string& itemname() const;
  inline void set_itemname(const ::std::string& value);
  inline void set_itemname(const char* value);
  inline void set_itemname(const char* value, size_t size);
  inline ::std::string* mutable_itemname();
  inline ::std::string* release_itemname();
  inline void set_allocated_itemname(::std::string* itemname);

  // optional .OPMessage.judgeItem min_near_lamp_flash_count = 3;
  inline bool has_min_near_lamp_flash_count() const;
  inline void clear_min_near_lamp_flash_count();
  static const int kMinNearLampFlashCountFieldNumber = 3;
  inline const ::OPMessage::judgeItem& min_near_lamp_flash_count() const;
  inline ::OPMessage::judgeItem* mutable_min_near_lamp_flash_count();
  inline ::OPMessage::judgeItem* release_min_near_lamp_flash_count();
  inline void set_allocated_min_near_lamp_flash_count(::OPMessage::judgeItem* min_near_lamp_flash_count);

  // optional .OPMessage.judgeItem min_far_lamp_flash_count = 4;
  inline bool has_min_far_lamp_flash_count() const;
  inline void clear_min_far_lamp_flash_count();
  static const int kMinFarLampFlashCountFieldNumber = 4;
  inline const ::OPMessage::judgeItem& min_far_lamp_flash_count() const;
  inline ::OPMessage::judgeItem* mutable_min_far_lamp_flash_count();
  inline ::OPMessage::judgeItem* release_min_far_lamp_flash_count();
  inline void set_allocated_min_far_lamp_flash_count(::OPMessage::judgeItem* min_far_lamp_flash_count);

  // @@protoc_insertion_point(class_scope:OPMessage.Judge41600)
 private:
  inline void set_has_itemcode();
  inline void clear_has_itemcode();
  inline void set_has_itemname();
  inline void clear_has_itemname();
  inline void set_has_min_near_lamp_flash_count();
  inline void clear_has_min_near_lamp_flash_count();
  inline void set_has_min_far_lamp_flash_count();
  inline void clear_has_min_far_lamp_flash_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* itemname_;
  ::OPMessage::judgeItem* min_near_lamp_flash_count_;
  ::OPMessage::judgeItem* min_far_lamp_flash_count_;
  ::google::protobuf::int32 itemcode_;
  friend void  protobuf_AddDesc_MessageKm3Config_2eproto();
  friend void protobuf_AssignDesc_MessageKm3Config_2eproto();
  friend void protobuf_ShutdownFile_MessageKm3Config_2eproto();

  void InitAsDefaultInstance();
  static Judge41600* default_instance_;
};
// -------------------------------------------------------------------

class Judge40200 : public ::google::protobuf::Message {
 public:
  Judge40200();
  virtual ~Judge40200();

  Judge40200(const Judge40200& from);

  inline Judge40200& operator=(const Judge40200& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Judge40200& default_instance();

  void Swap(Judge40200* other);

  // implements Message ----------------------------------------------

  Judge40200* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Judge40200& from);
  void MergeFrom(const Judge40200& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 itemCode = 1;
  inline bool has_itemcode() const;
  inline void clear_itemcode();
  static const int kItemCodeFieldNumber = 1;
  inline ::google::protobuf::int32 itemcode() const;
  inline void set_itemcode(::google::protobuf::int32 value);

  // optional string itemName = 2;
  inline bool has_itemname() const;
  inline void clear_itemname();
  static const int kItemNameFieldNumber = 2;
  inline const ::std::string& itemname() const;
  inline void set_itemname(const ::std::string& value);
  inline void set_itemname(const char* value);
  inline void set_itemname(const char* value, size_t size);
  inline ::std::string* mutable_itemname();
  inline ::std::string* release_itemname();
  inline void set_allocated_itemname(::std::string* itemname);

  // optional .OPMessage.judgeItem max_time = 3;
  inline bool has_max_time() const;
  inline void clear_max_time();
  static const int kMaxTimeFieldNumber = 3;
  inline const ::OPMessage::judgeItem& max_time() const;
  inline ::OPMessage::judgeItem* mutable_max_time();
  inline ::OPMessage::judgeItem* release_max_time();
  inline void set_allocated_max_time(::OPMessage::judgeItem* max_time);

  // optional .OPMessage.judgeItem max_trigger_distance = 4;
  inline bool has_max_trigger_distance() const;
  inline void clear_max_trigger_distance();
  static const int kMaxTriggerDistanceFieldNumber = 4;
  inline const ::OPMessage::judgeItem& max_trigger_distance() const;
  inline ::OPMessage::judgeItem* mutable_max_trigger_distance();
  inline ::OPMessage::judgeItem* release_max_trigger_distance();
  inline void set_allocated_max_trigger_distance(::OPMessage::judgeItem* max_trigger_distance);

  // optional .OPMessage.judgeItem min_horn_time = 5;
  inline bool has_min_horn_time() const;
  inline void clear_min_horn_time();
  static const int kMinHornTimeFieldNumber = 5;
  inline const ::OPMessage::judgeItem& min_horn_time() const;
  inline ::OPMessage::judgeItem* mutable_min_horn_time();
  inline ::OPMessage::judgeItem* release_min_horn_time();
  inline void set_allocated_min_horn_time(::OPMessage::judgeItem* min_horn_time);

  // optional .OPMessage.judgeItem min_turn_signal_time = 6;
  inline bool has_min_turn_signal_time() const;
  inline void clear_min_turn_signal_time();
  static const int kMinTurnSignalTimeFieldNumber = 6;
  inline const ::OPMessage::judgeItem& min_turn_signal_time() const;
  inline ::OPMessage::judgeItem* mutable_min_turn_signal_time();
  inline ::OPMessage::judgeItem* release_min_turn_signal_time();
  inline void set_allocated_min_turn_signal_time(::OPMessage::judgeItem* min_turn_signal_time);

  // optional .OPMessage.voiceItem vi_40200_start_exam = 7;
  inline bool has_vi_40200_start_exam() const;
  inline void clear_vi_40200_start_exam();
  static const int kVi40200StartExamFieldNumber = 7;
  inline const ::OPMessage::voiceItem& vi_40200_start_exam() const;
  inline ::OPMessage::voiceItem* mutable_vi_40200_start_exam();
  inline ::OPMessage::voiceItem* release_vi_40200_start_exam();
  inline void set_allocated_vi_40200_start_exam(::OPMessage::voiceItem* vi_40200_start_exam);

  // optional .OPMessage.voiceItem vi_40200_end_exam = 8;
  inline bool has_vi_40200_end_exam() const;
  inline void clear_vi_40200_end_exam();
  static const int kVi40200EndExamFieldNumber = 8;
  inline const ::OPMessage::voiceItem& vi_40200_end_exam() const;
  inline ::OPMessage::voiceItem* mutable_vi_40200_end_exam();
  inline ::OPMessage::voiceItem* release_vi_40200_end_exam();
  inline void set_allocated_vi_40200_end_exam(::OPMessage::voiceItem* vi_40200_end_exam);

  // optional .OPMessage.voiceItem vi_40200_turn_lamp_use_error = 9;
  inline bool has_vi_40200_turn_lamp_use_error() const;
  inline void clear_vi_40200_turn_lamp_use_error();
  static const int kVi40200TurnLampUseErrorFieldNumber = 9;
  inline const ::OPMessage::voiceItem& vi_40200_turn_lamp_use_error() const;
  inline ::OPMessage::voiceItem* mutable_vi_40200_turn_lamp_use_error();
  inline ::OPMessage::voiceItem* release_vi_40200_turn_lamp_use_error();
  inline void set_allocated_vi_40200_turn_lamp_use_error(::OPMessage::voiceItem* vi_40200_turn_lamp_use_error);

  // optional .OPMessage.voiceItem vi_40200_turn_lamp_not_use = 10;
  inline bool has_vi_40200_turn_lamp_not_use() const;
  inline void clear_vi_40200_turn_lamp_not_use();
  static const int kVi40200TurnLampNotUseFieldNumber = 10;
  inline const ::OPMessage::voiceItem& vi_40200_turn_lamp_not_use() const;
  inline ::OPMessage::voiceItem* mutable_vi_40200_turn_lamp_not_use();
  inline ::OPMessage::voiceItem* release_vi_40200_turn_lamp_not_use();
  inline void set_allocated_vi_40200_turn_lamp_not_use(::OPMessage::voiceItem* vi_40200_turn_lamp_not_use);

  // optional .OPMessage.voiceItem vi_40200_horn_not_use = 11;
  inline bool has_vi_40200_horn_not_use() const;
  inline void clear_vi_40200_horn_not_use();
  static const int kVi40200HornNotUseFieldNumber = 11;
  inline const ::OPMessage::voiceItem& vi_40200_horn_not_use() const;
  inline ::OPMessage::voiceItem* mutable_vi_40200_horn_not_use();
  inline ::OPMessage::voiceItem* release_vi_40200_horn_not_use();
  inline void set_allocated_vi_40200_horn_not_use(::OPMessage::voiceItem* vi_40200_horn_not_use);

  // @@protoc_insertion_point(class_scope:OPMessage.Judge40200)
 private:
  inline void set_has_itemcode();
  inline void clear_has_itemcode();
  inline void set_has_itemname();
  inline void clear_has_itemname();
  inline void set_has_max_time();
  inline void clear_has_max_time();
  inline void set_has_max_trigger_distance();
  inline void clear_has_max_trigger_distance();
  inline void set_has_min_horn_time();
  inline void clear_has_min_horn_time();
  inline void set_has_min_turn_signal_time();
  inline void clear_has_min_turn_signal_time();
  inline void set_has_vi_40200_start_exam();
  inline void clear_has_vi_40200_start_exam();
  inline void set_has_vi_40200_end_exam();
  inline void clear_has_vi_40200_end_exam();
  inline void set_has_vi_40200_turn_lamp_use_error();
  inline void clear_has_vi_40200_turn_lamp_use_error();
  inline void set_has_vi_40200_turn_lamp_not_use();
  inline void clear_has_vi_40200_turn_lamp_not_use();
  inline void set_has_vi_40200_horn_not_use();
  inline void clear_has_vi_40200_horn_not_use();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* itemname_;
  ::OPMessage::judgeItem* max_time_;
  ::OPMessage::judgeItem* max_trigger_distance_;
  ::OPMessage::judgeItem* min_horn_time_;
  ::OPMessage::judgeItem* min_turn_signal_time_;
  ::OPMessage::voiceItem* vi_40200_start_exam_;
  ::OPMessage::voiceItem* vi_40200_end_exam_;
  ::OPMessage::voiceItem* vi_40200_turn_lamp_use_error_;
  ::OPMessage::voiceItem* vi_40200_turn_lamp_not_use_;
  ::OPMessage::voiceItem* vi_40200_horn_not_use_;
  ::google::protobuf::int32 itemcode_;
  friend void  protobuf_AddDesc_MessageKm3Config_2eproto();
  friend void protobuf_AssignDesc_MessageKm3Config_2eproto();
  friend void protobuf_ShutdownFile_MessageKm3Config_2eproto();

  void InitAsDefaultInstance();
  static Judge40200* default_instance_;
};
// -------------------------------------------------------------------

class Judge40400 : public ::google::protobuf::Message {
 public:
  Judge40400();
  virtual ~Judge40400();

  Judge40400(const Judge40400& from);

  inline Judge40400& operator=(const Judge40400& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Judge40400& default_instance();

  void Swap(Judge40400* other);

  // implements Message ----------------------------------------------

  Judge40400* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Judge40400& from);
  void MergeFrom(const Judge40400& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 itemCode = 1;
  inline bool has_itemcode() const;
  inline void clear_itemcode();
  static const int kItemCodeFieldNumber = 1;
  inline ::google::protobuf::int32 itemcode() const;
  inline void set_itemcode(::google::protobuf::int32 value);

  // optional string itemName = 2;
  inline bool has_itemname() const;
  inline void clear_itemname();
  static const int kItemNameFieldNumber = 2;
  inline const ::std::string& itemname() const;
  inline void set_itemname(const ::std::string& value);
  inline void set_itemname(const char* value);
  inline void set_itemname(const char* value, size_t size);
  inline ::std::string* mutable_itemname();
  inline ::std::string* release_itemname();
  inline void set_allocated_itemname(::std::string* itemname);

  // optional .OPMessage.judgeItem max_time = 3;
  inline bool has_max_time() const;
  inline void clear_max_time();
  static const int kMaxTimeFieldNumber = 3;
  inline const ::OPMessage::judgeItem& max_time() const;
  inline ::OPMessage::judgeItem* mutable_max_time();
  inline ::OPMessage::judgeItem* release_max_time();
  inline void set_allocated_max_time(::OPMessage::judgeItem* max_time);

  // optional .OPMessage.judgeItem max_trigger_distance = 4;
  inline bool has_max_trigger_distance() const;
  inline void clear_max_trigger_distance();
  static const int kMaxTriggerDistanceFieldNumber = 4;
  inline const ::OPMessage::judgeItem& max_trigger_distance() const;
  inline ::OPMessage::judgeItem* mutable_max_trigger_distance();
  inline ::OPMessage::judgeItem* release_max_trigger_distance();
  inline void set_allocated_max_trigger_distance(::OPMessage::judgeItem* max_trigger_distance);

  // optional .OPMessage.judgeItem max_gear_finish_time = 5;
  inline bool has_max_gear_finish_time() const;
  inline void clear_max_gear_finish_time();
  static const int kMaxGearFinishTimeFieldNumber = 5;
  inline const ::OPMessage::judgeItem& max_gear_finish_time() const;
  inline ::OPMessage::judgeItem* mutable_max_gear_finish_time();
  inline ::OPMessage::judgeItem* release_max_gear_finish_time();
  inline void set_allocated_max_gear_finish_time(::OPMessage::judgeItem* max_gear_finish_time);

  // optional .OPMessage.judgeItem gear_actions_0 = 6;
  inline bool has_gear_actions_0() const;
  inline void clear_gear_actions_0();
  static const int kGearActions0FieldNumber = 6;
  inline const ::OPMessage::judgeItem& gear_actions_0() const;
  inline ::OPMessage::judgeItem* mutable_gear_actions_0();
  inline ::OPMessage::judgeItem* release_gear_actions_0();
  inline void set_allocated_gear_actions_0(::OPMessage::judgeItem* gear_actions_0);

  // optional .OPMessage.judgeItem gear_actions_1 = 7;
  inline bool has_gear_actions_1() const;
  inline void clear_gear_actions_1();
  static const int kGearActions1FieldNumber = 7;
  inline const ::OPMessage::judgeItem& gear_actions_1() const;
  inline ::OPMessage::judgeItem* mutable_gear_actions_1();
  inline ::OPMessage::judgeItem* release_gear_actions_1();
  inline void set_allocated_gear_actions_1(::OPMessage::judgeItem* gear_actions_1);

  // optional .OPMessage.judgeItem gear_actions_2 = 8;
  inline bool has_gear_actions_2() const;
  inline void clear_gear_actions_2();
  static const int kGearActions2FieldNumber = 8;
  inline const ::OPMessage::judgeItem& gear_actions_2() const;
  inline ::OPMessage::judgeItem* mutable_gear_actions_2();
  inline ::OPMessage::judgeItem* release_gear_actions_2();
  inline void set_allocated_gear_actions_2(::OPMessage::judgeItem* gear_actions_2);

  // optional .OPMessage.judgeItem gear_actions_3 = 9;
  inline bool has_gear_actions_3() const;
  inline void clear_gear_actions_3();
  static const int kGearActions3FieldNumber = 9;
  inline const ::OPMessage::judgeItem& gear_actions_3() const;
  inline ::OPMessage::judgeItem* mutable_gear_actions_3();
  inline ::OPMessage::judgeItem* release_gear_actions_3();
  inline void set_allocated_gear_actions_3(::OPMessage::judgeItem* gear_actions_3);

  // optional .OPMessage.judgeItem gear_actions_4 = 10;
  inline bool has_gear_actions_4() const;
  inline void clear_gear_actions_4();
  static const int kGearActions4FieldNumber = 10;
  inline const ::OPMessage::judgeItem& gear_actions_4() const;
  inline ::OPMessage::judgeItem* mutable_gear_actions_4();
  inline ::OPMessage::judgeItem* release_gear_actions_4();
  inline void set_allocated_gear_actions_4(::OPMessage::judgeItem* gear_actions_4);

  // optional .OPMessage.judgeItem notify_after_clutch_down = 11;
  inline bool has_notify_after_clutch_down() const;
  inline void clear_notify_after_clutch_down();
  static const int kNotifyAfterClutchDownFieldNumber = 11;
  inline const ::OPMessage::judgeItem& notify_after_clutch_down() const;
  inline ::OPMessage::judgeItem* mutable_notify_after_clutch_down();
  inline ::OPMessage::judgeItem* release_notify_after_clutch_down();
  inline void set_allocated_notify_after_clutch_down(::OPMessage::judgeItem* notify_after_clutch_down);

  // optional .OPMessage.judgeItem check_after_clutch_up = 12;
  inline bool has_check_after_clutch_up() const;
  inline void clear_check_after_clutch_up();
  static const int kCheckAfterClutchUpFieldNumber = 12;
  inline const ::OPMessage::judgeItem& check_after_clutch_up() const;
  inline ::OPMessage::judgeItem* mutable_check_after_clutch_up();
  inline ::OPMessage::judgeItem* release_check_after_clutch_up();
  inline void set_allocated_check_after_clutch_up(::OPMessage::judgeItem* check_after_clutch_up);

  // optional .OPMessage.voiceItem vi_40400_start_exam = 13;
  inline bool has_vi_40400_start_exam() const;
  inline void clear_vi_40400_start_exam();
  static const int kVi40400StartExamFieldNumber = 13;
  inline const ::OPMessage::voiceItem& vi_40400_start_exam() const;
  inline ::OPMessage::voiceItem* mutable_vi_40400_start_exam();
  inline ::OPMessage::voiceItem* release_vi_40400_start_exam();
  inline void set_allocated_vi_40400_start_exam(::OPMessage::voiceItem* vi_40400_start_exam);

  // optional .OPMessage.voiceItem vi_40400_end_exam = 14;
  inline bool has_vi_40400_end_exam() const;
  inline void clear_vi_40400_end_exam();
  static const int kVi40400EndExamFieldNumber = 14;
  inline const ::OPMessage::voiceItem& vi_40400_end_exam() const;
  inline ::OPMessage::voiceItem* mutable_vi_40400_end_exam();
  inline ::OPMessage::voiceItem* release_vi_40400_end_exam();
  inline void set_allocated_vi_40400_end_exam(::OPMessage::voiceItem* vi_40400_end_exam);

  // optional .OPMessage.voiceItem vi_40400_upto_2 = 15;
  inline bool has_vi_40400_upto_2() const;
  inline void clear_vi_40400_upto_2();
  static const int kVi40400Upto2FieldNumber = 15;
  inline const ::OPMessage::voiceItem& vi_40400_upto_2() const;
  inline ::OPMessage::voiceItem* mutable_vi_40400_upto_2();
  inline ::OPMessage::voiceItem* release_vi_40400_upto_2();
  inline void set_allocated_vi_40400_upto_2(::OPMessage::voiceItem* vi_40400_upto_2);

  // optional .OPMessage.voiceItem vi_40400_upto_3 = 16;
  inline bool has_vi_40400_upto_3() const;
  inline void clear_vi_40400_upto_3();
  static const int kVi40400Upto3FieldNumber = 16;
  inline const ::OPMessage::voiceItem& vi_40400_upto_3() const;
  inline ::OPMessage::voiceItem* mutable_vi_40400_upto_3();
  inline ::OPMessage::voiceItem* release_vi_40400_upto_3();
  inline void set_allocated_vi_40400_upto_3(::OPMessage::voiceItem* vi_40400_upto_3);

  // optional .OPMessage.voiceItem vi_40400_upto_4 = 17;
  inline bool has_vi_40400_upto_4() const;
  inline void clear_vi_40400_upto_4();
  static const int kVi40400Upto4FieldNumber = 17;
  inline const ::OPMessage::voiceItem& vi_40400_upto_4() const;
  inline ::OPMessage::voiceItem* mutable_vi_40400_upto_4();
  inline ::OPMessage::voiceItem* release_vi_40400_upto_4();
  inline void set_allocated_vi_40400_upto_4(::OPMessage::voiceItem* vi_40400_upto_4);

  // optional .OPMessage.voiceItem vi_40400_upto_5 = 18;
  inline bool has_vi_40400_upto_5() const;
  inline void clear_vi_40400_upto_5();
  static const int kVi40400Upto5FieldNumber = 18;
  inline const ::OPMessage::voiceItem& vi_40400_upto_5() const;
  inline ::OPMessage::voiceItem* mutable_vi_40400_upto_5();
  inline ::OPMessage::voiceItem* release_vi_40400_upto_5();
  inline void set_allocated_vi_40400_upto_5(::OPMessage::voiceItem* vi_40400_upto_5);

  // optional .OPMessage.voiceItem vi_40400_downto_1 = 19;
  inline bool has_vi_40400_downto_1() const;
  inline void clear_vi_40400_downto_1();
  static const int kVi40400Downto1FieldNumber = 19;
  inline const ::OPMessage::voiceItem& vi_40400_downto_1() const;
  inline ::OPMessage::voiceItem* mutable_vi_40400_downto_1();
  inline ::OPMessage::voiceItem* release_vi_40400_downto_1();
  inline void set_allocated_vi_40400_downto_1(::OPMessage::voiceItem* vi_40400_downto_1);

  // optional .OPMessage.voiceItem vi_40400_downto_2 = 20;
  inline bool has_vi_40400_downto_2() const;
  inline void clear_vi_40400_downto_2();
  static const int kVi40400Downto2FieldNumber = 20;
  inline const ::OPMessage::voiceItem& vi_40400_downto_2() const;
  inline ::OPMessage::voiceItem* mutable_vi_40400_downto_2();
  inline ::OPMessage::voiceItem* release_vi_40400_downto_2();
  inline void set_allocated_vi_40400_downto_2(::OPMessage::voiceItem* vi_40400_downto_2);

  // optional .OPMessage.voiceItem vi_40400_downto_3 = 21;
  inline bool has_vi_40400_downto_3() const;
  inline void clear_vi_40400_downto_3();
  static const int kVi40400Downto3FieldNumber = 21;
  inline const ::OPMessage::voiceItem& vi_40400_downto_3() const;
  inline ::OPMessage::voiceItem* mutable_vi_40400_downto_3();
  inline ::OPMessage::voiceItem* release_vi_40400_downto_3();
  inline void set_allocated_vi_40400_downto_3(::OPMessage::voiceItem* vi_40400_downto_3);

  // optional .OPMessage.voiceItem vi_40400_downto_4 = 22;
  inline bool has_vi_40400_downto_4() const;
  inline void clear_vi_40400_downto_4();
  static const int kVi40400Downto4FieldNumber = 22;
  inline const ::OPMessage::voiceItem& vi_40400_downto_4() const;
  inline ::OPMessage::voiceItem* mutable_vi_40400_downto_4();
  inline ::OPMessage::voiceItem* release_vi_40400_downto_4();
  inline void set_allocated_vi_40400_downto_4(::OPMessage::voiceItem* vi_40400_downto_4);

  // optional .OPMessage.voiceItem vi_40400_gear_error = 23;
  inline bool has_vi_40400_gear_error() const;
  inline void clear_vi_40400_gear_error();
  static const int kVi40400GearErrorFieldNumber = 23;
  inline const ::OPMessage::voiceItem& vi_40400_gear_error() const;
  inline ::OPMessage::voiceItem* mutable_vi_40400_gear_error();
  inline ::OPMessage::voiceItem* release_vi_40400_gear_error();
  inline void set_allocated_vi_40400_gear_error(::OPMessage::voiceItem* vi_40400_gear_error);

  // optional .OPMessage.voiceItem vi_40400_not_finish_operation = 24;
  inline bool has_vi_40400_not_finish_operation() const;
  inline void clear_vi_40400_not_finish_operation();
  static const int kVi40400NotFinishOperationFieldNumber = 24;
  inline const ::OPMessage::voiceItem& vi_40400_not_finish_operation() const;
  inline ::OPMessage::voiceItem* mutable_vi_40400_not_finish_operation();
  inline ::OPMessage::voiceItem* release_vi_40400_not_finish_operation();
  inline void set_allocated_vi_40400_not_finish_operation(::OPMessage::voiceItem* vi_40400_not_finish_operation);

  // optional .OPMessage.voiceItem vi_40400_enter_gear_error = 25;
  inline bool has_vi_40400_enter_gear_error() const;
  inline void clear_vi_40400_enter_gear_error();
  static const int kVi40400EnterGearErrorFieldNumber = 25;
  inline const ::OPMessage::voiceItem& vi_40400_enter_gear_error() const;
  inline ::OPMessage::voiceItem* mutable_vi_40400_enter_gear_error();
  inline ::OPMessage::voiceItem* release_vi_40400_enter_gear_error();
  inline void set_allocated_vi_40400_enter_gear_error(::OPMessage::voiceItem* vi_40400_enter_gear_error);

  // @@protoc_insertion_point(class_scope:OPMessage.Judge40400)
 private:
  inline void set_has_itemcode();
  inline void clear_has_itemcode();
  inline void set_has_itemname();
  inline void clear_has_itemname();
  inline void set_has_max_time();
  inline void clear_has_max_time();
  inline void set_has_max_trigger_distance();
  inline void clear_has_max_trigger_distance();
  inline void set_has_max_gear_finish_time();
  inline void clear_has_max_gear_finish_time();
  inline void set_has_gear_actions_0();
  inline void clear_has_gear_actions_0();
  inline void set_has_gear_actions_1();
  inline void clear_has_gear_actions_1();
  inline void set_has_gear_actions_2();
  inline void clear_has_gear_actions_2();
  inline void set_has_gear_actions_3();
  inline void clear_has_gear_actions_3();
  inline void set_has_gear_actions_4();
  inline void clear_has_gear_actions_4();
  inline void set_has_notify_after_clutch_down();
  inline void clear_has_notify_after_clutch_down();
  inline void set_has_check_after_clutch_up();
  inline void clear_has_check_after_clutch_up();
  inline void set_has_vi_40400_start_exam();
  inline void clear_has_vi_40400_start_exam();
  inline void set_has_vi_40400_end_exam();
  inline void clear_has_vi_40400_end_exam();
  inline void set_has_vi_40400_upto_2();
  inline void clear_has_vi_40400_upto_2();
  inline void set_has_vi_40400_upto_3();
  inline void clear_has_vi_40400_upto_3();
  inline void set_has_vi_40400_upto_4();
  inline void clear_has_vi_40400_upto_4();
  inline void set_has_vi_40400_upto_5();
  inline void clear_has_vi_40400_upto_5();
  inline void set_has_vi_40400_downto_1();
  inline void clear_has_vi_40400_downto_1();
  inline void set_has_vi_40400_downto_2();
  inline void clear_has_vi_40400_downto_2();
  inline void set_has_vi_40400_downto_3();
  inline void clear_has_vi_40400_downto_3();
  inline void set_has_vi_40400_downto_4();
  inline void clear_has_vi_40400_downto_4();
  inline void set_has_vi_40400_gear_error();
  inline void clear_has_vi_40400_gear_error();
  inline void set_has_vi_40400_not_finish_operation();
  inline void clear_has_vi_40400_not_finish_operation();
  inline void set_has_vi_40400_enter_gear_error();
  inline void clear_has_vi_40400_enter_gear_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* itemname_;
  ::OPMessage::judgeItem* max_time_;
  ::OPMessage::judgeItem* max_trigger_distance_;
  ::OPMessage::judgeItem* max_gear_finish_time_;
  ::OPMessage::judgeItem* gear_actions_0_;
  ::OPMessage::judgeItem* gear_actions_1_;
  ::OPMessage::judgeItem* gear_actions_2_;
  ::OPMessage::judgeItem* gear_actions_3_;
  ::OPMessage::judgeItem* gear_actions_4_;
  ::OPMessage::judgeItem* notify_after_clutch_down_;
  ::OPMessage::judgeItem* check_after_clutch_up_;
  ::OPMessage::voiceItem* vi_40400_start_exam_;
  ::OPMessage::voiceItem* vi_40400_end_exam_;
  ::OPMessage::voiceItem* vi_40400_upto_2_;
  ::OPMessage::voiceItem* vi_40400_upto_3_;
  ::OPMessage::voiceItem* vi_40400_upto_4_;
  ::OPMessage::voiceItem* vi_40400_upto_5_;
  ::OPMessage::voiceItem* vi_40400_downto_1_;
  ::OPMessage::voiceItem* vi_40400_downto_2_;
  ::OPMessage::voiceItem* vi_40400_downto_3_;
  ::OPMessage::voiceItem* vi_40400_downto_4_;
  ::OPMessage::voiceItem* vi_40400_gear_error_;
  ::OPMessage::voiceItem* vi_40400_not_finish_operation_;
  ::OPMessage::voiceItem* vi_40400_enter_gear_error_;
  ::google::protobuf::int32 itemcode_;
  friend void  protobuf_AddDesc_MessageKm3Config_2eproto();
  friend void protobuf_AssignDesc_MessageKm3Config_2eproto();
  friend void protobuf_ShutdownFile_MessageKm3Config_2eproto();

  void InitAsDefaultInstance();
  static Judge40400* default_instance_;
};
// -------------------------------------------------------------------

class Judge41000 : public ::google::protobuf::Message {
 public:
  Judge41000();
  virtual ~Judge41000();

  Judge41000(const Judge41000& from);

  inline Judge41000& operator=(const Judge41000& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Judge41000& default_instance();

  void Swap(Judge41000* other);

  // implements Message ----------------------------------------------

  Judge41000* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Judge41000& from);
  void MergeFrom(const Judge41000& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 itemCode = 1;
  inline bool has_itemcode() const;
  inline void clear_itemcode();
  static const int kItemCodeFieldNumber = 1;
  inline ::google::protobuf::int32 itemcode() const;
  inline void set_itemcode(::google::protobuf::int32 value);

  // optional string itemName = 2;
  inline bool has_itemname() const;
  inline void clear_itemname();
  static const int kItemNameFieldNumber = 2;
  inline const ::std::string& itemname() const;
  inline void set_itemname(const ::std::string& value);
  inline void set_itemname(const char* value);
  inline void set_itemname(const char* value, size_t size);
  inline ::std::string* mutable_itemname();
  inline ::std::string* release_itemname();
  inline void set_allocated_itemname(::std::string* itemname);

  // optional .OPMessage.judgeItem max_time = 3;
  inline bool has_max_time() const;
  inline void clear_max_time();
  static const int kMaxTimeFieldNumber = 3;
  inline const ::OPMessage::judgeItem& max_time() const;
  inline ::OPMessage::judgeItem* mutable_max_time();
  inline ::OPMessage::judgeItem* release_max_time();
  inline void set_allocated_max_time(::OPMessage::judgeItem* max_time);

  // optional .OPMessage.judgeItem max_trigger_distance = 4;
  inline bool has_max_trigger_distance() const;
  inline void clear_max_trigger_distance();
  static const int kMaxTriggerDistanceFieldNumber = 4;
  inline const ::OPMessage::judgeItem& max_trigger_distance() const;
  inline ::OPMessage::judgeItem* mutable_max_trigger_distance();
  inline ::OPMessage::judgeItem* release_max_trigger_distance();
  inline void set_allocated_max_trigger_distance(::OPMessage::judgeItem* max_trigger_distance);

  // optional .OPMessage.judgeItem max_speed = 5;
  inline bool has_max_speed() const;
  inline void clear_max_speed();
  static const int kMaxSpeedFieldNumber = 5;
  inline const ::OPMessage::judgeItem& max_speed() const;
  inline ::OPMessage::judgeItem* mutable_max_speed();
  inline ::OPMessage::judgeItem* release_max_speed();
  inline void set_allocated_max_speed(::OPMessage::judgeItem* max_speed);

  // optional .OPMessage.judgeItem min_horn_time = 6;
  inline bool has_min_horn_time() const;
  inline void clear_min_horn_time();
  static const int kMinHornTimeFieldNumber = 6;
  inline const ::OPMessage::judgeItem& min_horn_time() const;
  inline ::OPMessage::judgeItem* mutable_min_horn_time();
  inline ::OPMessage::judgeItem* release_min_horn_time();
  inline void set_allocated_min_horn_time(::OPMessage::judgeItem* min_horn_time);

  // optional .OPMessage.judgeItem min_turn_signal_time = 7;
  inline bool has_min_turn_signal_time() const;
  inline void clear_min_turn_signal_time();
  static const int kMinTurnSignalTimeFieldNumber = 7;
  inline const ::OPMessage::judgeItem& min_turn_signal_time() const;
  inline ::OPMessage::judgeItem* mutable_min_turn_signal_time();
  inline ::OPMessage::judgeItem* release_min_turn_signal_time();
  inline void set_allocated_min_turn_signal_time(::OPMessage::judgeItem* min_turn_signal_time);

  // optional .OPMessage.judgeItem judge_mode = 8;
  inline bool has_judge_mode() const;
  inline void clear_judge_mode();
  static const int kJudgeModeFieldNumber = 8;
  inline const ::OPMessage::judgeItem& judge_mode() const;
  inline ::OPMessage::judgeItem* mutable_judge_mode();
  inline ::OPMessage::judgeItem* release_judge_mode();
  inline void set_allocated_judge_mode(::OPMessage::judgeItem* judge_mode);

  // optional .OPMessage.judgeItem need_near_far_lamp_flash = 9;
  inline bool has_need_near_far_lamp_flash() const;
  inline void clear_need_near_far_lamp_flash();
  static const int kNeedNearFarLampFlashFieldNumber = 9;
  inline const ::OPMessage::judgeItem& need_near_far_lamp_flash() const;
  inline ::OPMessage::judgeItem* mutable_need_near_far_lamp_flash();
  inline ::OPMessage::judgeItem* release_need_near_far_lamp_flash();
  inline void set_allocated_need_near_far_lamp_flash(::OPMessage::judgeItem* need_near_far_lamp_flash);

  // optional .OPMessage.voiceItem vi_41000_start_exam = 10;
  inline bool has_vi_41000_start_exam() const;
  inline void clear_vi_41000_start_exam();
  static const int kVi41000StartExamFieldNumber = 10;
  inline const ::OPMessage::voiceItem& vi_41000_start_exam() const;
  inline ::OPMessage::voiceItem* mutable_vi_41000_start_exam();
  inline ::OPMessage::voiceItem* release_vi_41000_start_exam();
  inline void set_allocated_vi_41000_start_exam(::OPMessage::voiceItem* vi_41000_start_exam);

  // optional .OPMessage.voiceItem vi_41000_end_exam = 11;
  inline bool has_vi_41000_end_exam() const;
  inline void clear_vi_41000_end_exam();
  static const int kVi41000EndExamFieldNumber = 11;
  inline const ::OPMessage::voiceItem& vi_41000_end_exam() const;
  inline ::OPMessage::voiceItem* mutable_vi_41000_end_exam();
  inline ::OPMessage::voiceItem* release_vi_41000_end_exam();
  inline void set_allocated_vi_41000_end_exam(::OPMessage::voiceItem* vi_41000_end_exam);

  // optional .OPMessage.voiceItem vi_41000_horn_not_use = 12;
  inline bool has_vi_41000_horn_not_use() const;
  inline void clear_vi_41000_horn_not_use();
  static const int kVi41000HornNotUseFieldNumber = 12;
  inline const ::OPMessage::voiceItem& vi_41000_horn_not_use() const;
  inline ::OPMessage::voiceItem* mutable_vi_41000_horn_not_use();
  inline ::OPMessage::voiceItem* release_vi_41000_horn_not_use();
  inline void set_allocated_vi_41000_horn_not_use(::OPMessage::voiceItem* vi_41000_horn_not_use);

  // optional .OPMessage.voiceItem vi_41000_not_slowdown = 13;
  inline bool has_vi_41000_not_slowdown() const;
  inline void clear_vi_41000_not_slowdown();
  static const int kVi41000NotSlowdownFieldNumber = 13;
  inline const ::OPMessage::voiceItem& vi_41000_not_slowdown() const;
  inline ::OPMessage::voiceItem* mutable_vi_41000_not_slowdown();
  inline ::OPMessage::voiceItem* release_vi_41000_not_slowdown();
  inline void set_allocated_vi_41000_not_slowdown(::OPMessage::voiceItem* vi_41000_not_slowdown);

  // @@protoc_insertion_point(class_scope:OPMessage.Judge41000)
 private:
  inline void set_has_itemcode();
  inline void clear_has_itemcode();
  inline void set_has_itemname();
  inline void clear_has_itemname();
  inline void set_has_max_time();
  inline void clear_has_max_time();
  inline void set_has_max_trigger_distance();
  inline void clear_has_max_trigger_distance();
  inline void set_has_max_speed();
  inline void clear_has_max_speed();
  inline void set_has_min_horn_time();
  inline void clear_has_min_horn_time();
  inline void set_has_min_turn_signal_time();
  inline void clear_has_min_turn_signal_time();
  inline void set_has_judge_mode();
  inline void clear_has_judge_mode();
  inline void set_has_need_near_far_lamp_flash();
  inline void clear_has_need_near_far_lamp_flash();
  inline void set_has_vi_41000_start_exam();
  inline void clear_has_vi_41000_start_exam();
  inline void set_has_vi_41000_end_exam();
  inline void clear_has_vi_41000_end_exam();
  inline void set_has_vi_41000_horn_not_use();
  inline void clear_has_vi_41000_horn_not_use();
  inline void set_has_vi_41000_not_slowdown();
  inline void clear_has_vi_41000_not_slowdown();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* itemname_;
  ::OPMessage::judgeItem* max_time_;
  ::OPMessage::judgeItem* max_trigger_distance_;
  ::OPMessage::judgeItem* max_speed_;
  ::OPMessage::judgeItem* min_horn_time_;
  ::OPMessage::judgeItem* min_turn_signal_time_;
  ::OPMessage::judgeItem* judge_mode_;
  ::OPMessage::judgeItem* need_near_far_lamp_flash_;
  ::OPMessage::voiceItem* vi_41000_start_exam_;
  ::OPMessage::voiceItem* vi_41000_end_exam_;
  ::OPMessage::voiceItem* vi_41000_horn_not_use_;
  ::OPMessage::voiceItem* vi_41000_not_slowdown_;
  ::google::protobuf::int32 itemcode_;
  friend void  protobuf_AddDesc_MessageKm3Config_2eproto();
  friend void protobuf_AssignDesc_MessageKm3Config_2eproto();
  friend void protobuf_ShutdownFile_MessageKm3Config_2eproto();

  void InitAsDefaultInstance();
  static Judge41000* default_instance_;
};
// -------------------------------------------------------------------

class Judge41001 : public ::google::protobuf::Message {
 public:
  Judge41001();
  virtual ~Judge41001();

  Judge41001(const Judge41001& from);

  inline Judge41001& operator=(const Judge41001& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Judge41001& default_instance();

  void Swap(Judge41001* other);

  // implements Message ----------------------------------------------

  Judge41001* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Judge41001& from);
  void MergeFrom(const Judge41001& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 itemCode = 1;
  inline bool has_itemcode() const;
  inline void clear_itemcode();
  static const int kItemCodeFieldNumber = 1;
  inline ::google::protobuf::int32 itemcode() const;
  inline void set_itemcode(::google::protobuf::int32 value);

  // optional string itemName = 2;
  inline bool has_itemname() const;
  inline void clear_itemname();
  static const int kItemNameFieldNumber = 2;
  inline const ::std::string& itemname() const;
  inline void set_itemname(const ::std::string& value);
  inline void set_itemname(const char* value);
  inline void set_itemname(const char* value, size_t size);
  inline ::std::string* mutable_itemname();
  inline ::std::string* release_itemname();
  inline void set_allocated_itemname(::std::string* itemname);

  // optional .OPMessage.judgeItem max_time = 3;
  inline bool has_max_time() const;
  inline void clear_max_time();
  static const int kMaxTimeFieldNumber = 3;
  inline const ::OPMessage::judgeItem& max_time() const;
  inline ::OPMessage::judgeItem* mutable_max_time();
  inline ::OPMessage::judgeItem* release_max_time();
  inline void set_allocated_max_time(::OPMessage::judgeItem* max_time);

  // optional .OPMessage.judgeItem max_trigger_distance = 4;
  inline bool has_max_trigger_distance() const;
  inline void clear_max_trigger_distance();
  static const int kMaxTriggerDistanceFieldNumber = 4;
  inline const ::OPMessage::judgeItem& max_trigger_distance() const;
  inline ::OPMessage::judgeItem* mutable_max_trigger_distance();
  inline ::OPMessage::judgeItem* release_max_trigger_distance();
  inline void set_allocated_max_trigger_distance(::OPMessage::judgeItem* max_trigger_distance);

  // optional .OPMessage.judgeItem need_near_far_lamp_flash = 5;
  inline bool has_need_near_far_lamp_flash() const;
  inline void clear_need_near_far_lamp_flash();
  static const int kNeedNearFarLampFlashFieldNumber = 5;
  inline const ::OPMessage::judgeItem& need_near_far_lamp_flash() const;
  inline ::OPMessage::judgeItem* mutable_need_near_far_lamp_flash();
  inline ::OPMessage::judgeItem* release_need_near_far_lamp_flash();
  inline void set_allocated_need_near_far_lamp_flash(::OPMessage::judgeItem* need_near_far_lamp_flash);

  // optional .OPMessage.voiceItem vi_41001_start_exam = 6;
  inline bool has_vi_41001_start_exam() const;
  inline void clear_vi_41001_start_exam();
  static const int kVi41001StartExamFieldNumber = 6;
  inline const ::OPMessage::voiceItem& vi_41001_start_exam() const;
  inline ::OPMessage::voiceItem* mutable_vi_41001_start_exam();
  inline ::OPMessage::voiceItem* release_vi_41001_start_exam();
  inline void set_allocated_vi_41001_start_exam(::OPMessage::voiceItem* vi_41001_start_exam);

  // optional .OPMessage.voiceItem vi_41001_end_exam = 7;
  inline bool has_vi_41001_end_exam() const;
  inline void clear_vi_41001_end_exam();
  static const int kVi41001EndExamFieldNumber = 7;
  inline const ::OPMessage::voiceItem& vi_41001_end_exam() const;
  inline ::OPMessage::voiceItem* mutable_vi_41001_end_exam();
  inline ::OPMessage::voiceItem* release_vi_41001_end_exam();
  inline void set_allocated_vi_41001_end_exam(::OPMessage::voiceItem* vi_41001_end_exam);

  // optional .OPMessage.voiceItem vi_41001_not_finish_operation = 8;
  inline bool has_vi_41001_not_finish_operation() const;
  inline void clear_vi_41001_not_finish_operation();
  static const int kVi41001NotFinishOperationFieldNumber = 8;
  inline const ::OPMessage::voiceItem& vi_41001_not_finish_operation() const;
  inline ::OPMessage::voiceItem* mutable_vi_41001_not_finish_operation();
  inline ::OPMessage::voiceItem* release_vi_41001_not_finish_operation();
  inline void set_allocated_vi_41001_not_finish_operation(::OPMessage::voiceItem* vi_41001_not_finish_operation);

  // optional .OPMessage.voiceItem vi_41001_start_drive = 9;
  inline bool has_vi_41001_start_drive() const;
  inline void clear_vi_41001_start_drive();
  static const int kVi41001StartDriveFieldNumber = 9;
  inline const ::OPMessage::voiceItem& vi_41001_start_drive() const;
  inline ::OPMessage::voiceItem* mutable_vi_41001_start_drive();
  inline ::OPMessage::voiceItem* release_vi_41001_start_drive();
  inline void set_allocated_vi_41001_start_drive(::OPMessage::voiceItem* vi_41001_start_drive);

  // @@protoc_insertion_point(class_scope:OPMessage.Judge41001)
 private:
  inline void set_has_itemcode();
  inline void clear_has_itemcode();
  inline void set_has_itemname();
  inline void clear_has_itemname();
  inline void set_has_max_time();
  inline void clear_has_max_time();
  inline void set_has_max_trigger_distance();
  inline void clear_has_max_trigger_distance();
  inline void set_has_need_near_far_lamp_flash();
  inline void clear_has_need_near_far_lamp_flash();
  inline void set_has_vi_41001_start_exam();
  inline void clear_has_vi_41001_start_exam();
  inline void set_has_vi_41001_end_exam();
  inline void clear_has_vi_41001_end_exam();
  inline void set_has_vi_41001_not_finish_operation();
  inline void clear_has_vi_41001_not_finish_operation();
  inline void set_has_vi_41001_start_drive();
  inline void clear_has_vi_41001_start_drive();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* itemname_;
  ::OPMessage::judgeItem* max_time_;
  ::OPMessage::judgeItem* max_trigger_distance_;
  ::OPMessage::judgeItem* need_near_far_lamp_flash_;
  ::OPMessage::voiceItem* vi_41001_start_exam_;
  ::OPMessage::voiceItem* vi_41001_end_exam_;
  ::OPMessage::voiceItem* vi_41001_not_finish_operation_;
  ::OPMessage::voiceItem* vi_41001_start_drive_;
  ::google::protobuf::int32 itemcode_;
  friend void  protobuf_AddDesc_MessageKm3Config_2eproto();
  friend void protobuf_AssignDesc_MessageKm3Config_2eproto();
  friend void protobuf_ShutdownFile_MessageKm3Config_2eproto();

  void InitAsDefaultInstance();
  static Judge41001* default_instance_;
};
// -------------------------------------------------------------------

class Judge41200 : public ::google::protobuf::Message {
 public:
  Judge41200();
  virtual ~Judge41200();

  Judge41200(const Judge41200& from);

  inline Judge41200& operator=(const Judge41200& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Judge41200& default_instance();

  void Swap(Judge41200* other);

  // implements Message ----------------------------------------------

  Judge41200* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Judge41200& from);
  void MergeFrom(const Judge41200& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 itemCode = 1;
  inline bool has_itemcode() const;
  inline void clear_itemcode();
  static const int kItemCodeFieldNumber = 1;
  inline ::google::protobuf::int32 itemcode() const;
  inline void set_itemcode(::google::protobuf::int32 value);

  // optional string itemName = 2;
  inline bool has_itemname() const;
  inline void clear_itemname();
  static const int kItemNameFieldNumber = 2;
  inline const ::std::string& itemname() const;
  inline void set_itemname(const ::std::string& value);
  inline void set_itemname(const char* value);
  inline void set_itemname(const char* value, size_t size);
  inline ::std::string* mutable_itemname();
  inline ::std::string* release_itemname();
  inline void set_allocated_itemname(::std::string* itemname);

  // optional .OPMessage.judgeItem max_time = 3;
  inline bool has_max_time() const;
  inline void clear_max_time();
  static const int kMaxTimeFieldNumber = 3;
  inline const ::OPMessage::judgeItem& max_time() const;
  inline ::OPMessage::judgeItem* mutable_max_time();
  inline ::OPMessage::judgeItem* release_max_time();
  inline void set_allocated_max_time(::OPMessage::judgeItem* max_time);

  // optional .OPMessage.judgeItem max_trigger_distance = 4;
  inline bool has_max_trigger_distance() const;
  inline void clear_max_trigger_distance();
  static const int kMaxTriggerDistanceFieldNumber = 4;
  inline const ::OPMessage::judgeItem& max_trigger_distance() const;
  inline ::OPMessage::judgeItem* mutable_max_trigger_distance();
  inline ::OPMessage::judgeItem* release_max_trigger_distance();
  inline void set_allocated_max_trigger_distance(::OPMessage::judgeItem* max_trigger_distance);

  // optional .OPMessage.judgeItem max_speed = 5;
  inline bool has_max_speed() const;
  inline void clear_max_speed();
  static const int kMaxSpeedFieldNumber = 5;
  inline const ::OPMessage::judgeItem& max_speed() const;
  inline ::OPMessage::judgeItem* mutable_max_speed();
  inline ::OPMessage::judgeItem* release_max_speed();
  inline void set_allocated_max_speed(::OPMessage::judgeItem* max_speed);

  // optional .OPMessage.judgeItem min_horn_time = 6;
  inline bool has_min_horn_time() const;
  inline void clear_min_horn_time();
  static const int kMinHornTimeFieldNumber = 6;
  inline const ::OPMessage::judgeItem& min_horn_time() const;
  inline ::OPMessage::judgeItem* mutable_min_horn_time();
  inline ::OPMessage::judgeItem* release_min_horn_time();
  inline void set_allocated_min_horn_time(::OPMessage::judgeItem* min_horn_time);

  // optional .OPMessage.judgeItem judge_mode = 7;
  inline bool has_judge_mode() const;
  inline void clear_judge_mode();
  static const int kJudgeModeFieldNumber = 7;
  inline const ::OPMessage::judgeItem& judge_mode() const;
  inline ::OPMessage::judgeItem* mutable_judge_mode();
  inline ::OPMessage::judgeItem* release_judge_mode();
  inline void set_allocated_judge_mode(::OPMessage::judgeItem* judge_mode);

  // optional .OPMessage.judgeItem need_near_far_lamp_flash = 8;
  inline bool has_need_near_far_lamp_flash() const;
  inline void clear_need_near_far_lamp_flash();
  static const int kNeedNearFarLampFlashFieldNumber = 8;
  inline const ::OPMessage::judgeItem& need_near_far_lamp_flash() const;
  inline ::OPMessage::judgeItem* mutable_need_near_far_lamp_flash();
  inline ::OPMessage::judgeItem* release_need_near_far_lamp_flash();
  inline void set_allocated_need_near_far_lamp_flash(::OPMessage::judgeItem* need_near_far_lamp_flash);

  // optional .OPMessage.voiceItem vi_41200_start_exam = 9;
  inline bool has_vi_41200_start_exam() const;
  inline void clear_vi_41200_start_exam();
  static const int kVi41200StartExamFieldNumber = 9;
  inline const ::OPMessage::voiceItem& vi_41200_start_exam() const;
  inline ::OPMessage::voiceItem* mutable_vi_41200_start_exam();
  inline ::OPMessage::voiceItem* release_vi_41200_start_exam();
  inline void set_allocated_vi_41200_start_exam(::OPMessage::voiceItem* vi_41200_start_exam);

  // optional .OPMessage.voiceItem vi_41200_end_exam = 10;
  inline bool has_vi_41200_end_exam() const;
  inline void clear_vi_41200_end_exam();
  static const int kVi41200EndExamFieldNumber = 10;
  inline const ::OPMessage::voiceItem& vi_41200_end_exam() const;
  inline ::OPMessage::voiceItem* mutable_vi_41200_end_exam();
  inline ::OPMessage::voiceItem* release_vi_41200_end_exam();
  inline void set_allocated_vi_41200_end_exam(::OPMessage::voiceItem* vi_41200_end_exam);

  // optional .OPMessage.voiceItem vi_41200_horn_not_use = 11;
  inline bool has_vi_41200_horn_not_use() const;
  inline void clear_vi_41200_horn_not_use();
  static const int kVi41200HornNotUseFieldNumber = 11;
  inline const ::OPMessage::voiceItem& vi_41200_horn_not_use() const;
  inline ::OPMessage::voiceItem* mutable_vi_41200_horn_not_use();
  inline ::OPMessage::voiceItem* release_vi_41200_horn_not_use();
  inline void set_allocated_vi_41200_horn_not_use(::OPMessage::voiceItem* vi_41200_horn_not_use);

  // optional .OPMessage.voiceItem vi_41200_not_slowdown = 12;
  inline bool has_vi_41200_not_slowdown() const;
  inline void clear_vi_41200_not_slowdown();
  static const int kVi41200NotSlowdownFieldNumber = 12;
  inline const ::OPMessage::voiceItem& vi_41200_not_slowdown() const;
  inline ::OPMessage::voiceItem* mutable_vi_41200_not_slowdown();
  inline ::OPMessage::voiceItem* release_vi_41200_not_slowdown();
  inline void set_allocated_vi_41200_not_slowdown(::OPMessage::voiceItem* vi_41200_not_slowdown);

  // @@protoc_insertion_point(class_scope:OPMessage.Judge41200)
 private:
  inline void set_has_itemcode();
  inline void clear_has_itemcode();
  inline void set_has_itemname();
  inline void clear_has_itemname();
  inline void set_has_max_time();
  inline void clear_has_max_time();
  inline void set_has_max_trigger_distance();
  inline void clear_has_max_trigger_distance();
  inline void set_has_max_speed();
  inline void clear_has_max_speed();
  inline void set_has_min_horn_time();
  inline void clear_has_min_horn_time();
  inline void set_has_judge_mode();
  inline void clear_has_judge_mode();
  inline void set_has_need_near_far_lamp_flash();
  inline void clear_has_need_near_far_lamp_flash();
  inline void set_has_vi_41200_start_exam();
  inline void clear_has_vi_41200_start_exam();
  inline void set_has_vi_41200_end_exam();
  inline void clear_has_vi_41200_end_exam();
  inline void set_has_vi_41200_horn_not_use();
  inline void clear_has_vi_41200_horn_not_use();
  inline void set_has_vi_41200_not_slowdown();
  inline void clear_has_vi_41200_not_slowdown();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* itemname_;
  ::OPMessage::judgeItem* max_time_;
  ::OPMessage::judgeItem* max_trigger_distance_;
  ::OPMessage::judgeItem* max_speed_;
  ::OPMessage::judgeItem* min_horn_time_;
  ::OPMessage::judgeItem* judge_mode_;
  ::OPMessage::judgeItem* need_near_far_lamp_flash_;
  ::OPMessage::voiceItem* vi_41200_start_exam_;
  ::OPMessage::voiceItem* vi_41200_end_exam_;
  ::OPMessage::voiceItem* vi_41200_horn_not_use_;
  ::OPMessage::voiceItem* vi_41200_not_slowdown_;
  ::google::protobuf::int32 itemcode_;
  friend void  protobuf_AddDesc_MessageKm3Config_2eproto();
  friend void protobuf_AssignDesc_MessageKm3Config_2eproto();
  friend void protobuf_ShutdownFile_MessageKm3Config_2eproto();

  void InitAsDefaultInstance();
  static Judge41200* default_instance_;
};
// -------------------------------------------------------------------

class Judge41100 : public ::google::protobuf::Message {
 public:
  Judge41100();
  virtual ~Judge41100();

  Judge41100(const Judge41100& from);

  inline Judge41100& operator=(const Judge41100& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Judge41100& default_instance();

  void Swap(Judge41100* other);

  // implements Message ----------------------------------------------

  Judge41100* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Judge41100& from);
  void MergeFrom(const Judge41100& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 itemCode = 1;
  inline bool has_itemcode() const;
  inline void clear_itemcode();
  static const int kItemCodeFieldNumber = 1;
  inline ::google::protobuf::int32 itemcode() const;
  inline void set_itemcode(::google::protobuf::int32 value);

  // optional string itemName = 2;
  inline bool has_itemname() const;
  inline void clear_itemname();
  static const int kItemNameFieldNumber = 2;
  inline const ::std::string& itemname() const;
  inline void set_itemname(const ::std::string& value);
  inline void set_itemname(const char* value);
  inline void set_itemname(const char* value, size_t size);
  inline ::std::string* mutable_itemname();
  inline ::std::string* release_itemname();
  inline void set_allocated_itemname(::std::string* itemname);

  // optional .OPMessage.judgeItem max_time = 3;
  inline bool has_max_time() const;
  inline void clear_max_time();
  static const int kMaxTimeFieldNumber = 3;
  inline const ::OPMessage::judgeItem& max_time() const;
  inline ::OPMessage::judgeItem* mutable_max_time();
  inline ::OPMessage::judgeItem* release_max_time();
  inline void set_allocated_max_time(::OPMessage::judgeItem* max_time);

  // optional .OPMessage.judgeItem max_trigger_distance = 4;
  inline bool has_max_trigger_distance() const;
  inline void clear_max_trigger_distance();
  static const int kMaxTriggerDistanceFieldNumber = 4;
  inline const ::OPMessage::judgeItem& max_trigger_distance() const;
  inline ::OPMessage::judgeItem* mutable_max_trigger_distance();
  inline ::OPMessage::judgeItem* release_max_trigger_distance();
  inline void set_allocated_max_trigger_distance(::OPMessage::judgeItem* max_trigger_distance);

  // optional .OPMessage.judgeItem max_speed = 5;
  inline bool has_max_speed() const;
  inline void clear_max_speed();
  static const int kMaxSpeedFieldNumber = 5;
  inline const ::OPMessage::judgeItem& max_speed() const;
  inline ::OPMessage::judgeItem* mutable_max_speed();
  inline ::OPMessage::judgeItem* release_max_speed();
  inline void set_allocated_max_speed(::OPMessage::judgeItem* max_speed);

  // optional .OPMessage.judgeItem min_horn_time = 6;
  inline bool has_min_horn_time() const;
  inline void clear_min_horn_time();
  static const int kMinHornTimeFieldNumber = 6;
  inline const ::OPMessage::judgeItem& min_horn_time() const;
  inline ::OPMessage::judgeItem* mutable_min_horn_time();
  inline ::OPMessage::judgeItem* release_min_horn_time();
  inline void set_allocated_min_horn_time(::OPMessage::judgeItem* min_horn_time);

  // optional .OPMessage.judgeItem judge_mode = 7;
  inline bool has_judge_mode() const;
  inline void clear_judge_mode();
  static const int kJudgeModeFieldNumber = 7;
  inline const ::OPMessage::judgeItem& judge_mode() const;
  inline ::OPMessage::judgeItem* mutable_judge_mode();
  inline ::OPMessage::judgeItem* release_judge_mode();
  inline void set_allocated_judge_mode(::OPMessage::judgeItem* judge_mode);

  // optional .OPMessage.judgeItem need_near_far_lamp_flash = 8;
  inline bool has_need_near_far_lamp_flash() const;
  inline void clear_need_near_far_lamp_flash();
  static const int kNeedNearFarLampFlashFieldNumber = 8;
  inline const ::OPMessage::judgeItem& need_near_far_lamp_flash() const;
  inline ::OPMessage::judgeItem* mutable_need_near_far_lamp_flash();
  inline ::OPMessage::judgeItem* release_need_near_far_lamp_flash();
  inline void set_allocated_need_near_far_lamp_flash(::OPMessage::judgeItem* need_near_far_lamp_flash);

  // optional .OPMessage.voiceItem vi_41100_start_exam = 9;
  inline bool has_vi_41100_start_exam() const;
  inline void clear_vi_41100_start_exam();
  static const int kVi41100StartExamFieldNumber = 9;
  inline const ::OPMessage::voiceItem& vi_41100_start_exam() const;
  inline ::OPMessage::voiceItem* mutable_vi_41100_start_exam();
  inline ::OPMessage::voiceItem* release_vi_41100_start_exam();
  inline void set_allocated_vi_41100_start_exam(::OPMessage::voiceItem* vi_41100_start_exam);

  // optional .OPMessage.voiceItem vi_41100_end_exam = 10;
  inline bool has_vi_41100_end_exam() const;
  inline void clear_vi_41100_end_exam();
  static const int kVi41100EndExamFieldNumber = 10;
  inline const ::OPMessage::voiceItem& vi_41100_end_exam() const;
  inline ::OPMessage::voiceItem* mutable_vi_41100_end_exam();
  inline ::OPMessage::voiceItem* release_vi_41100_end_exam();
  inline void set_allocated_vi_41100_end_exam(::OPMessage::voiceItem* vi_41100_end_exam);

  // optional .OPMessage.voiceItem vi_41100_horn_not_use = 11;
  inline bool has_vi_41100_horn_not_use() const;
  inline void clear_vi_41100_horn_not_use();
  static const int kVi41100HornNotUseFieldNumber = 11;
  inline const ::OPMessage::voiceItem& vi_41100_horn_not_use() const;
  inline ::OPMessage::voiceItem* mutable_vi_41100_horn_not_use();
  inline ::OPMessage::voiceItem* release_vi_41100_horn_not_use();
  inline void set_allocated_vi_41100_horn_not_use(::OPMessage::voiceItem* vi_41100_horn_not_use);

  // optional .OPMessage.voiceItem vi_41100_not_slowdown = 12;
  inline bool has_vi_41100_not_slowdown() const;
  inline void clear_vi_41100_not_slowdown();
  static const int kVi41100NotSlowdownFieldNumber = 12;
  inline const ::OPMessage::voiceItem& vi_41100_not_slowdown() const;
  inline ::OPMessage::voiceItem* mutable_vi_41100_not_slowdown();
  inline ::OPMessage::voiceItem* release_vi_41100_not_slowdown();
  inline void set_allocated_vi_41100_not_slowdown(::OPMessage::voiceItem* vi_41100_not_slowdown);

  // @@protoc_insertion_point(class_scope:OPMessage.Judge41100)
 private:
  inline void set_has_itemcode();
  inline void clear_has_itemcode();
  inline void set_has_itemname();
  inline void clear_has_itemname();
  inline void set_has_max_time();
  inline void clear_has_max_time();
  inline void set_has_max_trigger_distance();
  inline void clear_has_max_trigger_distance();
  inline void set_has_max_speed();
  inline void clear_has_max_speed();
  inline void set_has_min_horn_time();
  inline void clear_has_min_horn_time();
  inline void set_has_judge_mode();
  inline void clear_has_judge_mode();
  inline void set_has_need_near_far_lamp_flash();
  inline void clear_has_need_near_far_lamp_flash();
  inline void set_has_vi_41100_start_exam();
  inline void clear_has_vi_41100_start_exam();
  inline void set_has_vi_41100_end_exam();
  inline void clear_has_vi_41100_end_exam();
  inline void set_has_vi_41100_horn_not_use();
  inline void clear_has_vi_41100_horn_not_use();
  inline void set_has_vi_41100_not_slowdown();
  inline void clear_has_vi_41100_not_slowdown();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* itemname_;
  ::OPMessage::judgeItem* max_time_;
  ::OPMessage::judgeItem* max_trigger_distance_;
  ::OPMessage::judgeItem* max_speed_;
  ::OPMessage::judgeItem* min_horn_time_;
  ::OPMessage::judgeItem* judge_mode_;
  ::OPMessage::judgeItem* need_near_far_lamp_flash_;
  ::OPMessage::voiceItem* vi_41100_start_exam_;
  ::OPMessage::voiceItem* vi_41100_end_exam_;
  ::OPMessage::voiceItem* vi_41100_horn_not_use_;
  ::OPMessage::voiceItem* vi_41100_not_slowdown_;
  ::google::protobuf::int32 itemcode_;
  friend void  protobuf_AddDesc_MessageKm3Config_2eproto();
  friend void protobuf_AssignDesc_MessageKm3Config_2eproto();
  friend void protobuf_ShutdownFile_MessageKm3Config_2eproto();

  void InitAsDefaultInstance();
  static Judge41100* default_instance_;
};
// -------------------------------------------------------------------

class Judge40700 : public ::google::protobuf::Message {
 public:
  Judge40700();
  virtual ~Judge40700();

  Judge40700(const Judge40700& from);

  inline Judge40700& operator=(const Judge40700& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Judge40700& default_instance();

  void Swap(Judge40700* other);

  // implements Message ----------------------------------------------

  Judge40700* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Judge40700& from);
  void MergeFrom(const Judge40700& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 itemCode = 1;
  inline bool has_itemcode() const;
  inline void clear_itemcode();
  static const int kItemCodeFieldNumber = 1;
  inline ::google::protobuf::int32 itemcode() const;
  inline void set_itemcode(::google::protobuf::int32 value);

  // optional string itemName = 2;
  inline bool has_itemname() const;
  inline void clear_itemname();
  static const int kItemNameFieldNumber = 2;
  inline const ::std::string& itemname() const;
  inline void set_itemname(const ::std::string& value);
  inline void set_itemname(const char* value);
  inline void set_itemname(const char* value, size_t size);
  inline ::std::string* mutable_itemname();
  inline ::std::string* release_itemname();
  inline void set_allocated_itemname(::std::string* itemname);

  // optional .OPMessage.judgeItem max_time = 3;
  inline bool has_max_time() const;
  inline void clear_max_time();
  static const int kMaxTimeFieldNumber = 3;
  inline const ::OPMessage::judgeItem& max_time() const;
  inline ::OPMessage::judgeItem* mutable_max_time();
  inline ::OPMessage::judgeItem* release_max_time();
  inline void set_allocated_max_time(::OPMessage::judgeItem* max_time);

  // optional .OPMessage.judgeItem max_trigger_distance = 4;
  inline bool has_max_trigger_distance() const;
  inline void clear_max_trigger_distance();
  static const int kMaxTriggerDistanceFieldNumber = 4;
  inline const ::OPMessage::judgeItem& max_trigger_distance() const;
  inline ::OPMessage::judgeItem* mutable_max_trigger_distance();
  inline ::OPMessage::judgeItem* release_max_trigger_distance();
  inline void set_allocated_max_trigger_distance(::OPMessage::judgeItem* max_trigger_distance);

  // optional .OPMessage.judgeItem max_speed = 5;
  inline bool has_max_speed() const;
  inline void clear_max_speed();
  static const int kMaxSpeedFieldNumber = 5;
  inline const ::OPMessage::judgeItem& max_speed() const;
  inline ::OPMessage::judgeItem* mutable_max_speed();
  inline ::OPMessage::judgeItem* release_max_speed();
  inline void set_allocated_max_speed(::OPMessage::judgeItem* max_speed);

  // optional .OPMessage.judgeItem min_horn_time = 6;
  inline bool has_min_horn_time() const;
  inline void clear_min_horn_time();
  static const int kMinHornTimeFieldNumber = 6;
  inline const ::OPMessage::judgeItem& min_horn_time() const;
  inline ::OPMessage::judgeItem* mutable_min_horn_time();
  inline ::OPMessage::judgeItem* release_min_horn_time();
  inline void set_allocated_min_horn_time(::OPMessage::judgeItem* min_horn_time);

  // optional .OPMessage.judgeItem min_turn_signal_time = 7;
  inline bool has_min_turn_signal_time() const;
  inline void clear_min_turn_signal_time();
  static const int kMinTurnSignalTimeFieldNumber = 7;
  inline const ::OPMessage::judgeItem& min_turn_signal_time() const;
  inline ::OPMessage::judgeItem* mutable_min_turn_signal_time();
  inline ::OPMessage::judgeItem* release_min_turn_signal_time();
  inline void set_allocated_min_turn_signal_time(::OPMessage::judgeItem* min_turn_signal_time);

  // optional .OPMessage.judgeItem judge_mode = 8;
  inline bool has_judge_mode() const;
  inline void clear_judge_mode();
  static const int kJudgeModeFieldNumber = 8;
  inline const ::OPMessage::judgeItem& judge_mode() const;
  inline ::OPMessage::judgeItem* mutable_judge_mode();
  inline ::OPMessage::judgeItem* release_judge_mode();
  inline void set_allocated_judge_mode(::OPMessage::judgeItem* judge_mode);

  // optional .OPMessage.judgeItem need_near_far_lamp_flash = 9;
  inline bool has_need_near_far_lamp_flash() const;
  inline void clear_need_near_far_lamp_flash();
  static const int kNeedNearFarLampFlashFieldNumber = 9;
  inline const ::OPMessage::judgeItem& need_near_far_lamp_flash() const;
  inline ::OPMessage::judgeItem* mutable_need_near_far_lamp_flash();
  inline ::OPMessage::judgeItem* release_need_near_far_lamp_flash();
  inline void set_allocated_need_near_far_lamp_flash(::OPMessage::judgeItem* need_near_far_lamp_flash);

  // optional .OPMessage.voiceItem vi_40700_start_exam = 10;
  inline bool has_vi_40700_start_exam() const;
  inline void clear_vi_40700_start_exam();
  static const int kVi40700StartExamFieldNumber = 10;
  inline const ::OPMessage::voiceItem& vi_40700_start_exam() const;
  inline ::OPMessage::voiceItem* mutable_vi_40700_start_exam();
  inline ::OPMessage::voiceItem* release_vi_40700_start_exam();
  inline void set_allocated_vi_40700_start_exam(::OPMessage::voiceItem* vi_40700_start_exam);

  // optional .OPMessage.voiceItem vi_40700_end_exam = 11;
  inline bool has_vi_40700_end_exam() const;
  inline void clear_vi_40700_end_exam();
  static const int kVi40700EndExamFieldNumber = 11;
  inline const ::OPMessage::voiceItem& vi_40700_end_exam() const;
  inline ::OPMessage::voiceItem* mutable_vi_40700_end_exam();
  inline ::OPMessage::voiceItem* release_vi_40700_end_exam();
  inline void set_allocated_vi_40700_end_exam(::OPMessage::voiceItem* vi_40700_end_exam);

  // optional .OPMessage.voiceItem vi_40700_horn_not_use = 12;
  inline bool has_vi_40700_horn_not_use() const;
  inline void clear_vi_40700_horn_not_use();
  static const int kVi40700HornNotUseFieldNumber = 12;
  inline const ::OPMessage::voiceItem& vi_40700_horn_not_use() const;
  inline ::OPMessage::voiceItem* mutable_vi_40700_horn_not_use();
  inline ::OPMessage::voiceItem* release_vi_40700_horn_not_use();
  inline void set_allocated_vi_40700_horn_not_use(::OPMessage::voiceItem* vi_40700_horn_not_use);

  // optional .OPMessage.voiceItem vi_40700_not_slowdown = 13;
  inline bool has_vi_40700_not_slowdown() const;
  inline void clear_vi_40700_not_slowdown();
  static const int kVi40700NotSlowdownFieldNumber = 13;
  inline const ::OPMessage::voiceItem& vi_40700_not_slowdown() const;
  inline ::OPMessage::voiceItem* mutable_vi_40700_not_slowdown();
  inline ::OPMessage::voiceItem* release_vi_40700_not_slowdown();
  inline void set_allocated_vi_40700_not_slowdown(::OPMessage::voiceItem* vi_40700_not_slowdown);

  // @@protoc_insertion_point(class_scope:OPMessage.Judge40700)
 private:
  inline void set_has_itemcode();
  inline void clear_has_itemcode();
  inline void set_has_itemname();
  inline void clear_has_itemname();
  inline void set_has_max_time();
  inline void clear_has_max_time();
  inline void set_has_max_trigger_distance();
  inline void clear_has_max_trigger_distance();
  inline void set_has_max_speed();
  inline void clear_has_max_speed();
  inline void set_has_min_horn_time();
  inline void clear_has_min_horn_time();
  inline void set_has_min_turn_signal_time();
  inline void clear_has_min_turn_signal_time();
  inline void set_has_judge_mode();
  inline void clear_has_judge_mode();
  inline void set_has_need_near_far_lamp_flash();
  inline void clear_has_need_near_far_lamp_flash();
  inline void set_has_vi_40700_start_exam();
  inline void clear_has_vi_40700_start_exam();
  inline void set_has_vi_40700_end_exam();
  inline void clear_has_vi_40700_end_exam();
  inline void set_has_vi_40700_horn_not_use();
  inline void clear_has_vi_40700_horn_not_use();
  inline void set_has_vi_40700_not_slowdown();
  inline void clear_has_vi_40700_not_slowdown();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* itemname_;
  ::OPMessage::judgeItem* max_time_;
  ::OPMessage::judgeItem* max_trigger_distance_;
  ::OPMessage::judgeItem* max_speed_;
  ::OPMessage::judgeItem* min_horn_time_;
  ::OPMessage::judgeItem* min_turn_signal_time_;
  ::OPMessage::judgeItem* judge_mode_;
  ::OPMessage::judgeItem* need_near_far_lamp_flash_;
  ::OPMessage::voiceItem* vi_40700_start_exam_;
  ::OPMessage::voiceItem* vi_40700_end_exam_;
  ::OPMessage::voiceItem* vi_40700_horn_not_use_;
  ::OPMessage::voiceItem* vi_40700_not_slowdown_;
  ::google::protobuf::int32 itemcode_;
  friend void  protobuf_AddDesc_MessageKm3Config_2eproto();
  friend void protobuf_AssignDesc_MessageKm3Config_2eproto();
  friend void protobuf_ShutdownFile_MessageKm3Config_2eproto();

  void InitAsDefaultInstance();
  static Judge40700* default_instance_;
};
// -------------------------------------------------------------------

class Judge41500 : public ::google::protobuf::Message {
 public:
  Judge41500();
  virtual ~Judge41500();

  Judge41500(const Judge41500& from);

  inline Judge41500& operator=(const Judge41500& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Judge41500& default_instance();

  void Swap(Judge41500* other);

  // implements Message ----------------------------------------------

  Judge41500* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Judge41500& from);
  void MergeFrom(const Judge41500& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 itemCode = 1;
  inline bool has_itemcode() const;
  inline void clear_itemcode();
  static const int kItemCodeFieldNumber = 1;
  inline ::google::protobuf::int32 itemcode() const;
  inline void set_itemcode(::google::protobuf::int32 value);

  // optional string itemName = 2;
  inline bool has_itemname() const;
  inline void clear_itemname();
  static const int kItemNameFieldNumber = 2;
  inline const ::std::string& itemname() const;
  inline void set_itemname(const ::std::string& value);
  inline void set_itemname(const char* value);
  inline void set_itemname(const char* value, size_t size);
  inline ::std::string* mutable_itemname();
  inline ::std::string* release_itemname();
  inline void set_allocated_itemname(::std::string* itemname);

  // optional .OPMessage.judgeItem max_time = 3;
  inline bool has_max_time() const;
  inline void clear_max_time();
  static const int kMaxTimeFieldNumber = 3;
  inline const ::OPMessage::judgeItem& max_time() const;
  inline ::OPMessage::judgeItem* mutable_max_time();
  inline ::OPMessage::judgeItem* release_max_time();
  inline void set_allocated_max_time(::OPMessage::judgeItem* max_time);

  // optional .OPMessage.judgeItem max_trigger_distance = 4;
  inline bool has_max_trigger_distance() const;
  inline void clear_max_trigger_distance();
  static const int kMaxTriggerDistanceFieldNumber = 4;
  inline const ::OPMessage::judgeItem& max_trigger_distance() const;
  inline ::OPMessage::judgeItem* mutable_max_trigger_distance();
  inline ::OPMessage::judgeItem* release_max_trigger_distance();
  inline void set_allocated_max_trigger_distance(::OPMessage::judgeItem* max_trigger_distance);

  // optional .OPMessage.judgeItem min_turn_signal_time = 5;
  inline bool has_min_turn_signal_time() const;
  inline void clear_min_turn_signal_time();
  static const int kMinTurnSignalTimeFieldNumber = 5;
  inline const ::OPMessage::judgeItem& min_turn_signal_time() const;
  inline ::OPMessage::judgeItem* mutable_min_turn_signal_time();
  inline ::OPMessage::judgeItem* release_min_turn_signal_time();
  inline void set_allocated_min_turn_signal_time(::OPMessage::judgeItem* min_turn_signal_time);

  // optional .OPMessage.judgeItem max_speed = 6;
  inline bool has_max_speed() const;
  inline void clear_max_speed();
  static const int kMaxSpeedFieldNumber = 6;
  inline const ::OPMessage::judgeItem& max_speed() const;
  inline ::OPMessage::judgeItem* mutable_max_speed();
  inline ::OPMessage::judgeItem* release_max_speed();
  inline void set_allocated_max_speed(::OPMessage::judgeItem* max_speed);

  // optional .OPMessage.judgeItem judge_mode = 7;
  inline bool has_judge_mode() const;
  inline void clear_judge_mode();
  static const int kJudgeModeFieldNumber = 7;
  inline const ::OPMessage::judgeItem& judge_mode() const;
  inline ::OPMessage::judgeItem* mutable_judge_mode();
  inline ::OPMessage::judgeItem* release_judge_mode();
  inline void set_allocated_judge_mode(::OPMessage::judgeItem* judge_mode);

  // optional .OPMessage.voiceItem vi_41500_start_exam = 8;
  inline bool has_vi_41500_start_exam() const;
  inline void clear_vi_41500_start_exam();
  static const int kVi41500StartExamFieldNumber = 8;
  inline const ::OPMessage::voiceItem& vi_41500_start_exam() const;
  inline ::OPMessage::voiceItem* mutable_vi_41500_start_exam();
  inline ::OPMessage::voiceItem* release_vi_41500_start_exam();
  inline void set_allocated_vi_41500_start_exam(::OPMessage::voiceItem* vi_41500_start_exam);

  // optional .OPMessage.voiceItem vi_41500_end_exam = 9;
  inline bool has_vi_41500_end_exam() const;
  inline void clear_vi_41500_end_exam();
  static const int kVi41500EndExamFieldNumber = 9;
  inline const ::OPMessage::voiceItem& vi_41500_end_exam() const;
  inline ::OPMessage::voiceItem* mutable_vi_41500_end_exam();
  inline ::OPMessage::voiceItem* release_vi_41500_end_exam();
  inline void set_allocated_vi_41500_end_exam(::OPMessage::voiceItem* vi_41500_end_exam);

  // optional .OPMessage.voiceItem vi_41500_not_slowdown = 10;
  inline bool has_vi_41500_not_slowdown() const;
  inline void clear_vi_41500_not_slowdown();
  static const int kVi41500NotSlowdownFieldNumber = 10;
  inline const ::OPMessage::voiceItem& vi_41500_not_slowdown() const;
  inline ::OPMessage::voiceItem* mutable_vi_41500_not_slowdown();
  inline ::OPMessage::voiceItem* release_vi_41500_not_slowdown();
  inline void set_allocated_vi_41500_not_slowdown(::OPMessage::voiceItem* vi_41500_not_slowdown);

  // optional .OPMessage.voiceItem vi_41500_turn_lamp_use_error = 11;
  inline bool has_vi_41500_turn_lamp_use_error() const;
  inline void clear_vi_41500_turn_lamp_use_error();
  static const int kVi41500TurnLampUseErrorFieldNumber = 11;
  inline const ::OPMessage::voiceItem& vi_41500_turn_lamp_use_error() const;
  inline ::OPMessage::voiceItem* mutable_vi_41500_turn_lamp_use_error();
  inline ::OPMessage::voiceItem* release_vi_41500_turn_lamp_use_error();
  inline void set_allocated_vi_41500_turn_lamp_use_error(::OPMessage::voiceItem* vi_41500_turn_lamp_use_error);

  // optional .OPMessage.voiceItem vi_41500_turn_lamp_not_use = 12;
  inline bool has_vi_41500_turn_lamp_not_use() const;
  inline void clear_vi_41500_turn_lamp_not_use();
  static const int kVi41500TurnLampNotUseFieldNumber = 12;
  inline const ::OPMessage::voiceItem& vi_41500_turn_lamp_not_use() const;
  inline ::OPMessage::voiceItem* mutable_vi_41500_turn_lamp_not_use();
  inline ::OPMessage::voiceItem* release_vi_41500_turn_lamp_not_use();
  inline void set_allocated_vi_41500_turn_lamp_not_use(::OPMessage::voiceItem* vi_41500_turn_lamp_not_use);

  // @@protoc_insertion_point(class_scope:OPMessage.Judge41500)
 private:
  inline void set_has_itemcode();
  inline void clear_has_itemcode();
  inline void set_has_itemname();
  inline void clear_has_itemname();
  inline void set_has_max_time();
  inline void clear_has_max_time();
  inline void set_has_max_trigger_distance();
  inline void clear_has_max_trigger_distance();
  inline void set_has_min_turn_signal_time();
  inline void clear_has_min_turn_signal_time();
  inline void set_has_max_speed();
  inline void clear_has_max_speed();
  inline void set_has_judge_mode();
  inline void clear_has_judge_mode();
  inline void set_has_vi_41500_start_exam();
  inline void clear_has_vi_41500_start_exam();
  inline void set_has_vi_41500_end_exam();
  inline void clear_has_vi_41500_end_exam();
  inline void set_has_vi_41500_not_slowdown();
  inline void clear_has_vi_41500_not_slowdown();
  inline void set_has_vi_41500_turn_lamp_use_error();
  inline void clear_has_vi_41500_turn_lamp_use_error();
  inline void set_has_vi_41500_turn_lamp_not_use();
  inline void clear_has_vi_41500_turn_lamp_not_use();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* itemname_;
  ::OPMessage::judgeItem* max_time_;
  ::OPMessage::judgeItem* max_trigger_distance_;
  ::OPMessage::judgeItem* min_turn_signal_time_;
  ::OPMessage::judgeItem* max_speed_;
  ::OPMessage::judgeItem* judge_mode_;
  ::OPMessage::voiceItem* vi_41500_start_exam_;
  ::OPMessage::voiceItem* vi_41500_end_exam_;
  ::OPMessage::voiceItem* vi_41500_not_slowdown_;
  ::OPMessage::voiceItem* vi_41500_turn_lamp_use_error_;
  ::OPMessage::voiceItem* vi_41500_turn_lamp_not_use_;
  ::google::protobuf::int32 itemcode_;
  friend void  protobuf_AddDesc_MessageKm3Config_2eproto();
  friend void protobuf_AssignDesc_MessageKm3Config_2eproto();
  friend void protobuf_ShutdownFile_MessageKm3Config_2eproto();

  void InitAsDefaultInstance();
  static Judge41500* default_instance_;
};
// -------------------------------------------------------------------

class Judge40800 : public ::google::protobuf::Message {
 public:
  Judge40800();
  virtual ~Judge40800();

  Judge40800(const Judge40800& from);

  inline Judge40800& operator=(const Judge40800& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Judge40800& default_instance();

  void Swap(Judge40800* other);

  // implements Message ----------------------------------------------

  Judge40800* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Judge40800& from);
  void MergeFrom(const Judge40800& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 itemCode = 1;
  inline bool has_itemcode() const;
  inline void clear_itemcode();
  static const int kItemCodeFieldNumber = 1;
  inline ::google::protobuf::int32 itemcode() const;
  inline void set_itemcode(::google::protobuf::int32 value);

  // optional string itemName = 2;
  inline bool has_itemname() const;
  inline void clear_itemname();
  static const int kItemNameFieldNumber = 2;
  inline const ::std::string& itemname() const;
  inline void set_itemname(const ::std::string& value);
  inline void set_itemname(const char* value);
  inline void set_itemname(const char* value, size_t size);
  inline ::std::string* mutable_itemname();
  inline ::std::string* release_itemname();
  inline void set_allocated_itemname(::std::string* itemname);

  // optional .OPMessage.judgeItem max_time = 3;
  inline bool has_max_time() const;
  inline void clear_max_time();
  static const int kMaxTimeFieldNumber = 3;
  inline const ::OPMessage::judgeItem& max_time() const;
  inline ::OPMessage::judgeItem* mutable_max_time();
  inline ::OPMessage::judgeItem* release_max_time();
  inline void set_allocated_max_time(::OPMessage::judgeItem* max_time);

  // optional .OPMessage.judgeItem max_trigger_distance = 4;
  inline bool has_max_trigger_distance() const;
  inline void clear_max_trigger_distance();
  static const int kMaxTriggerDistanceFieldNumber = 4;
  inline const ::OPMessage::judgeItem& max_trigger_distance() const;
  inline ::OPMessage::judgeItem* mutable_max_trigger_distance();
  inline ::OPMessage::judgeItem* release_max_trigger_distance();
  inline void set_allocated_max_trigger_distance(::OPMessage::judgeItem* max_trigger_distance);

  // optional .OPMessage.judgeItem max_speed = 5;
  inline bool has_max_speed() const;
  inline void clear_max_speed();
  static const int kMaxSpeedFieldNumber = 5;
  inline const ::OPMessage::judgeItem& max_speed() const;
  inline ::OPMessage::judgeItem* mutable_max_speed();
  inline ::OPMessage::judgeItem* release_max_speed();
  inline void set_allocated_max_speed(::OPMessage::judgeItem* max_speed);

  // optional .OPMessage.judgeItem min_horn_time = 6;
  inline bool has_min_horn_time() const;
  inline void clear_min_horn_time();
  static const int kMinHornTimeFieldNumber = 6;
  inline const ::OPMessage::judgeItem& min_horn_time() const;
  inline ::OPMessage::judgeItem* mutable_min_horn_time();
  inline ::OPMessage::judgeItem* release_min_horn_time();
  inline void set_allocated_min_horn_time(::OPMessage::judgeItem* min_horn_time);

  // optional .OPMessage.judgeItem min_turn_signal_time = 7;
  inline bool has_min_turn_signal_time() const;
  inline void clear_min_turn_signal_time();
  static const int kMinTurnSignalTimeFieldNumber = 7;
  inline const ::OPMessage::judgeItem& min_turn_signal_time() const;
  inline ::OPMessage::judgeItem* mutable_min_turn_signal_time();
  inline ::OPMessage::judgeItem* release_min_turn_signal_time();
  inline void set_allocated_min_turn_signal_time(::OPMessage::judgeItem* min_turn_signal_time);

  // optional .OPMessage.judgeItem judge_mode = 8;
  inline bool has_judge_mode() const;
  inline void clear_judge_mode();
  static const int kJudgeModeFieldNumber = 8;
  inline const ::OPMessage::judgeItem& judge_mode() const;
  inline ::OPMessage::judgeItem* mutable_judge_mode();
  inline ::OPMessage::judgeItem* release_judge_mode();
  inline void set_allocated_judge_mode(::OPMessage::judgeItem* judge_mode);

  // optional .OPMessage.judgeItem need_near_far_lamp_flash = 9;
  inline bool has_need_near_far_lamp_flash() const;
  inline void clear_need_near_far_lamp_flash();
  static const int kNeedNearFarLampFlashFieldNumber = 9;
  inline const ::OPMessage::judgeItem& need_near_far_lamp_flash() const;
  inline ::OPMessage::judgeItem* mutable_need_near_far_lamp_flash();
  inline ::OPMessage::judgeItem* release_need_near_far_lamp_flash();
  inline void set_allocated_need_near_far_lamp_flash(::OPMessage::judgeItem* need_near_far_lamp_flash);

  // optional .OPMessage.voiceItem vi_40800_start_exam = 10;
  inline bool has_vi_40800_start_exam() const;
  inline void clear_vi_40800_start_exam();
  static const int kVi40800StartExamFieldNumber = 10;
  inline const ::OPMessage::voiceItem& vi_40800_start_exam() const;
  inline ::OPMessage::voiceItem* mutable_vi_40800_start_exam();
  inline ::OPMessage::voiceItem* release_vi_40800_start_exam();
  inline void set_allocated_vi_40800_start_exam(::OPMessage::voiceItem* vi_40800_start_exam);

  // optional .OPMessage.voiceItem vi_40800_end_exam = 11;
  inline bool has_vi_40800_end_exam() const;
  inline void clear_vi_40800_end_exam();
  static const int kVi40800EndExamFieldNumber = 11;
  inline const ::OPMessage::voiceItem& vi_40800_end_exam() const;
  inline ::OPMessage::voiceItem* mutable_vi_40800_end_exam();
  inline ::OPMessage::voiceItem* release_vi_40800_end_exam();
  inline void set_allocated_vi_40800_end_exam(::OPMessage::voiceItem* vi_40800_end_exam);

  // optional .OPMessage.voiceItem vi_40800_horn_not_use = 12;
  inline bool has_vi_40800_horn_not_use() const;
  inline void clear_vi_40800_horn_not_use();
  static const int kVi40800HornNotUseFieldNumber = 12;
  inline const ::OPMessage::voiceItem& vi_40800_horn_not_use() const;
  inline ::OPMessage::voiceItem* mutable_vi_40800_horn_not_use();
  inline ::OPMessage::voiceItem* release_vi_40800_horn_not_use();
  inline void set_allocated_vi_40800_horn_not_use(::OPMessage::voiceItem* vi_40800_horn_not_use);

  // optional .OPMessage.voiceItem vi_40800_turn_lamp_use_error = 13;
  inline bool has_vi_40800_turn_lamp_use_error() const;
  inline void clear_vi_40800_turn_lamp_use_error();
  static const int kVi40800TurnLampUseErrorFieldNumber = 13;
  inline const ::OPMessage::voiceItem& vi_40800_turn_lamp_use_error() const;
  inline ::OPMessage::voiceItem* mutable_vi_40800_turn_lamp_use_error();
  inline ::OPMessage::voiceItem* release_vi_40800_turn_lamp_use_error();
  inline void set_allocated_vi_40800_turn_lamp_use_error(::OPMessage::voiceItem* vi_40800_turn_lamp_use_error);

  // optional .OPMessage.voiceItem vi_40800_turn_lamp_not_use = 14;
  inline bool has_vi_40800_turn_lamp_not_use() const;
  inline void clear_vi_40800_turn_lamp_not_use();
  static const int kVi40800TurnLampNotUseFieldNumber = 14;
  inline const ::OPMessage::voiceItem& vi_40800_turn_lamp_not_use() const;
  inline ::OPMessage::voiceItem* mutable_vi_40800_turn_lamp_not_use();
  inline ::OPMessage::voiceItem* release_vi_40800_turn_lamp_not_use();
  inline void set_allocated_vi_40800_turn_lamp_not_use(::OPMessage::voiceItem* vi_40800_turn_lamp_not_use);

  // optional .OPMessage.voiceItem vi_40800_not_slowdown = 15;
  inline bool has_vi_40800_not_slowdown() const;
  inline void clear_vi_40800_not_slowdown();
  static const int kVi40800NotSlowdownFieldNumber = 15;
  inline const ::OPMessage::voiceItem& vi_40800_not_slowdown() const;
  inline ::OPMessage::voiceItem* mutable_vi_40800_not_slowdown();
  inline ::OPMessage::voiceItem* release_vi_40800_not_slowdown();
  inline void set_allocated_vi_40800_not_slowdown(::OPMessage::voiceItem* vi_40800_not_slowdown);

  // @@protoc_insertion_point(class_scope:OPMessage.Judge40800)
 private:
  inline void set_has_itemcode();
  inline void clear_has_itemcode();
  inline void set_has_itemname();
  inline void clear_has_itemname();
  inline void set_has_max_time();
  inline void clear_has_max_time();
  inline void set_has_max_trigger_distance();
  inline void clear_has_max_trigger_distance();
  inline void set_has_max_speed();
  inline void clear_has_max_speed();
  inline void set_has_min_horn_time();
  inline void clear_has_min_horn_time();
  inline void set_has_min_turn_signal_time();
  inline void clear_has_min_turn_signal_time();
  inline void set_has_judge_mode();
  inline void clear_has_judge_mode();
  inline void set_has_need_near_far_lamp_flash();
  inline void clear_has_need_near_far_lamp_flash();
  inline void set_has_vi_40800_start_exam();
  inline void clear_has_vi_40800_start_exam();
  inline void set_has_vi_40800_end_exam();
  inline void clear_has_vi_40800_end_exam();
  inline void set_has_vi_40800_horn_not_use();
  inline void clear_has_vi_40800_horn_not_use();
  inline void set_has_vi_40800_turn_lamp_use_error();
  inline void clear_has_vi_40800_turn_lamp_use_error();
  inline void set_has_vi_40800_turn_lamp_not_use();
  inline void clear_has_vi_40800_turn_lamp_not_use();
  inline void set_has_vi_40800_not_slowdown();
  inline void clear_has_vi_40800_not_slowdown();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* itemname_;
  ::OPMessage::judgeItem* max_time_;
  ::OPMessage::judgeItem* max_trigger_distance_;
  ::OPMessage::judgeItem* max_speed_;
  ::OPMessage::judgeItem* min_horn_time_;
  ::OPMessage::judgeItem* min_turn_signal_time_;
  ::OPMessage::judgeItem* judge_mode_;
  ::OPMessage::judgeItem* need_near_far_lamp_flash_;
  ::OPMessage::voiceItem* vi_40800_start_exam_;
  ::OPMessage::voiceItem* vi_40800_end_exam_;
  ::OPMessage::voiceItem* vi_40800_horn_not_use_;
  ::OPMessage::voiceItem* vi_40800_turn_lamp_use_error_;
  ::OPMessage::voiceItem* vi_40800_turn_lamp_not_use_;
  ::OPMessage::voiceItem* vi_40800_not_slowdown_;
  ::google::protobuf::int32 itemcode_;
  friend void  protobuf_AddDesc_MessageKm3Config_2eproto();
  friend void protobuf_AssignDesc_MessageKm3Config_2eproto();
  friend void protobuf_ShutdownFile_MessageKm3Config_2eproto();

  void InitAsDefaultInstance();
  static Judge40800* default_instance_;
};
// -------------------------------------------------------------------

class Judge40900 : public ::google::protobuf::Message {
 public:
  Judge40900();
  virtual ~Judge40900();

  Judge40900(const Judge40900& from);

  inline Judge40900& operator=(const Judge40900& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Judge40900& default_instance();

  void Swap(Judge40900* other);

  // implements Message ----------------------------------------------

  Judge40900* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Judge40900& from);
  void MergeFrom(const Judge40900& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 itemCode = 1;
  inline bool has_itemcode() const;
  inline void clear_itemcode();
  static const int kItemCodeFieldNumber = 1;
  inline ::google::protobuf::int32 itemcode() const;
  inline void set_itemcode(::google::protobuf::int32 value);

  // optional string itemName = 2;
  inline bool has_itemname() const;
  inline void clear_itemname();
  static const int kItemNameFieldNumber = 2;
  inline const ::std::string& itemname() const;
  inline void set_itemname(const ::std::string& value);
  inline void set_itemname(const char* value);
  inline void set_itemname(const char* value, size_t size);
  inline ::std::string* mutable_itemname();
  inline ::std::string* release_itemname();
  inline void set_allocated_itemname(::std::string* itemname);

  // optional .OPMessage.judgeItem max_time = 3;
  inline bool has_max_time() const;
  inline void clear_max_time();
  static const int kMaxTimeFieldNumber = 3;
  inline const ::OPMessage::judgeItem& max_time() const;
  inline ::OPMessage::judgeItem* mutable_max_time();
  inline ::OPMessage::judgeItem* release_max_time();
  inline void set_allocated_max_time(::OPMessage::judgeItem* max_time);

  // optional .OPMessage.judgeItem max_trigger_distance = 4;
  inline bool has_max_trigger_distance() const;
  inline void clear_max_trigger_distance();
  static const int kMaxTriggerDistanceFieldNumber = 4;
  inline const ::OPMessage::judgeItem& max_trigger_distance() const;
  inline ::OPMessage::judgeItem* mutable_max_trigger_distance();
  inline ::OPMessage::judgeItem* release_max_trigger_distance();
  inline void set_allocated_max_trigger_distance(::OPMessage::judgeItem* max_trigger_distance);

  // optional .OPMessage.judgeItem max_speed = 5;
  inline bool has_max_speed() const;
  inline void clear_max_speed();
  static const int kMaxSpeedFieldNumber = 5;
  inline const ::OPMessage::judgeItem& max_speed() const;
  inline ::OPMessage::judgeItem* mutable_max_speed();
  inline ::OPMessage::judgeItem* release_max_speed();
  inline void set_allocated_max_speed(::OPMessage::judgeItem* max_speed);

  // optional .OPMessage.judgeItem min_horn_time = 6;
  inline bool has_min_horn_time() const;
  inline void clear_min_horn_time();
  static const int kMinHornTimeFieldNumber = 6;
  inline const ::OPMessage::judgeItem& min_horn_time() const;
  inline ::OPMessage::judgeItem* mutable_min_horn_time();
  inline ::OPMessage::judgeItem* release_min_horn_time();
  inline void set_allocated_min_horn_time(::OPMessage::judgeItem* min_horn_time);

  // optional .OPMessage.judgeItem min_turn_signal_time = 7;
  inline bool has_min_turn_signal_time() const;
  inline void clear_min_turn_signal_time();
  static const int kMinTurnSignalTimeFieldNumber = 7;
  inline const ::OPMessage::judgeItem& min_turn_signal_time() const;
  inline ::OPMessage::judgeItem* mutable_min_turn_signal_time();
  inline ::OPMessage::judgeItem* release_min_turn_signal_time();
  inline void set_allocated_min_turn_signal_time(::OPMessage::judgeItem* min_turn_signal_time);

  // optional .OPMessage.judgeItem judge_mode = 8;
  inline bool has_judge_mode() const;
  inline void clear_judge_mode();
  static const int kJudgeModeFieldNumber = 8;
  inline const ::OPMessage::judgeItem& judge_mode() const;
  inline ::OPMessage::judgeItem* mutable_judge_mode();
  inline ::OPMessage::judgeItem* release_judge_mode();
  inline void set_allocated_judge_mode(::OPMessage::judgeItem* judge_mode);

  // optional .OPMessage.judgeItem need_near_far_lamp_flash = 9;
  inline bool has_need_near_far_lamp_flash() const;
  inline void clear_need_near_far_lamp_flash();
  static const int kNeedNearFarLampFlashFieldNumber = 9;
  inline const ::OPMessage::judgeItem& need_near_far_lamp_flash() const;
  inline ::OPMessage::judgeItem* mutable_need_near_far_lamp_flash();
  inline ::OPMessage::judgeItem* release_need_near_far_lamp_flash();
  inline void set_allocated_need_near_far_lamp_flash(::OPMessage::judgeItem* need_near_far_lamp_flash);

  // optional .OPMessage.voiceItem vi_40900_start_exam = 10;
  inline bool has_vi_40900_start_exam() const;
  inline void clear_vi_40900_start_exam();
  static const int kVi40900StartExamFieldNumber = 10;
  inline const ::OPMessage::voiceItem& vi_40900_start_exam() const;
  inline ::OPMessage::voiceItem* mutable_vi_40900_start_exam();
  inline ::OPMessage::voiceItem* release_vi_40900_start_exam();
  inline void set_allocated_vi_40900_start_exam(::OPMessage::voiceItem* vi_40900_start_exam);

  // optional .OPMessage.voiceItem vi_40900_end_exam = 11;
  inline bool has_vi_40900_end_exam() const;
  inline void clear_vi_40900_end_exam();
  static const int kVi40900EndExamFieldNumber = 11;
  inline const ::OPMessage::voiceItem& vi_40900_end_exam() const;
  inline ::OPMessage::voiceItem* mutable_vi_40900_end_exam();
  inline ::OPMessage::voiceItem* release_vi_40900_end_exam();
  inline void set_allocated_vi_40900_end_exam(::OPMessage::voiceItem* vi_40900_end_exam);

  // optional .OPMessage.voiceItem vi_40900_horn_not_use = 12;
  inline bool has_vi_40900_horn_not_use() const;
  inline void clear_vi_40900_horn_not_use();
  static const int kVi40900HornNotUseFieldNumber = 12;
  inline const ::OPMessage::voiceItem& vi_40900_horn_not_use() const;
  inline ::OPMessage::voiceItem* mutable_vi_40900_horn_not_use();
  inline ::OPMessage::voiceItem* release_vi_40900_horn_not_use();
  inline void set_allocated_vi_40900_horn_not_use(::OPMessage::voiceItem* vi_40900_horn_not_use);

  // optional .OPMessage.voiceItem vi_40900_turn_lamp_use_error = 13;
  inline bool has_vi_40900_turn_lamp_use_error() const;
  inline void clear_vi_40900_turn_lamp_use_error();
  static const int kVi40900TurnLampUseErrorFieldNumber = 13;
  inline const ::OPMessage::voiceItem& vi_40900_turn_lamp_use_error() const;
  inline ::OPMessage::voiceItem* mutable_vi_40900_turn_lamp_use_error();
  inline ::OPMessage::voiceItem* release_vi_40900_turn_lamp_use_error();
  inline void set_allocated_vi_40900_turn_lamp_use_error(::OPMessage::voiceItem* vi_40900_turn_lamp_use_error);

  // optional .OPMessage.voiceItem vi_40900_turn_lamp_not_use = 14;
  inline bool has_vi_40900_turn_lamp_not_use() const;
  inline void clear_vi_40900_turn_lamp_not_use();
  static const int kVi40900TurnLampNotUseFieldNumber = 14;
  inline const ::OPMessage::voiceItem& vi_40900_turn_lamp_not_use() const;
  inline ::OPMessage::voiceItem* mutable_vi_40900_turn_lamp_not_use();
  inline ::OPMessage::voiceItem* release_vi_40900_turn_lamp_not_use();
  inline void set_allocated_vi_40900_turn_lamp_not_use(::OPMessage::voiceItem* vi_40900_turn_lamp_not_use);

  // optional .OPMessage.voiceItem vi_40900_not_slowdown = 15;
  inline bool has_vi_40900_not_slowdown() const;
  inline void clear_vi_40900_not_slowdown();
  static const int kVi40900NotSlowdownFieldNumber = 15;
  inline const ::OPMessage::voiceItem& vi_40900_not_slowdown() const;
  inline ::OPMessage::voiceItem* mutable_vi_40900_not_slowdown();
  inline ::OPMessage::voiceItem* release_vi_40900_not_slowdown();
  inline void set_allocated_vi_40900_not_slowdown(::OPMessage::voiceItem* vi_40900_not_slowdown);

  // @@protoc_insertion_point(class_scope:OPMessage.Judge40900)
 private:
  inline void set_has_itemcode();
  inline void clear_has_itemcode();
  inline void set_has_itemname();
  inline void clear_has_itemname();
  inline void set_has_max_time();
  inline void clear_has_max_time();
  inline void set_has_max_trigger_distance();
  inline void clear_has_max_trigger_distance();
  inline void set_has_max_speed();
  inline void clear_has_max_speed();
  inline void set_has_min_horn_time();
  inline void clear_has_min_horn_time();
  inline void set_has_min_turn_signal_time();
  inline void clear_has_min_turn_signal_time();
  inline void set_has_judge_mode();
  inline void clear_has_judge_mode();
  inline void set_has_need_near_far_lamp_flash();
  inline void clear_has_need_near_far_lamp_flash();
  inline void set_has_vi_40900_start_exam();
  inline void clear_has_vi_40900_start_exam();
  inline void set_has_vi_40900_end_exam();
  inline void clear_has_vi_40900_end_exam();
  inline void set_has_vi_40900_horn_not_use();
  inline void clear_has_vi_40900_horn_not_use();
  inline void set_has_vi_40900_turn_lamp_use_error();
  inline void clear_has_vi_40900_turn_lamp_use_error();
  inline void set_has_vi_40900_turn_lamp_not_use();
  inline void clear_has_vi_40900_turn_lamp_not_use();
  inline void set_has_vi_40900_not_slowdown();
  inline void clear_has_vi_40900_not_slowdown();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* itemname_;
  ::OPMessage::judgeItem* max_time_;
  ::OPMessage::judgeItem* max_trigger_distance_;
  ::OPMessage::judgeItem* max_speed_;
  ::OPMessage::judgeItem* min_horn_time_;
  ::OPMessage::judgeItem* min_turn_signal_time_;
  ::OPMessage::judgeItem* judge_mode_;
  ::OPMessage::judgeItem* need_near_far_lamp_flash_;
  ::OPMessage::voiceItem* vi_40900_start_exam_;
  ::OPMessage::voiceItem* vi_40900_end_exam_;
  ::OPMessage::voiceItem* vi_40900_horn_not_use_;
  ::OPMessage::voiceItem* vi_40900_turn_lamp_use_error_;
  ::OPMessage::voiceItem* vi_40900_turn_lamp_not_use_;
  ::OPMessage::voiceItem* vi_40900_not_slowdown_;
  ::google::protobuf::int32 itemcode_;
  friend void  protobuf_AddDesc_MessageKm3Config_2eproto();
  friend void protobuf_AssignDesc_MessageKm3Config_2eproto();
  friend void protobuf_ShutdownFile_MessageKm3Config_2eproto();

  void InitAsDefaultInstance();
  static Judge40900* default_instance_;
};
// -------------------------------------------------------------------

class Judge41400 : public ::google::protobuf::Message {
 public:
  Judge41400();
  virtual ~Judge41400();

  Judge41400(const Judge41400& from);

  inline Judge41400& operator=(const Judge41400& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Judge41400& default_instance();

  void Swap(Judge41400* other);

  // implements Message ----------------------------------------------

  Judge41400* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Judge41400& from);
  void MergeFrom(const Judge41400& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 itemCode = 1;
  inline bool has_itemcode() const;
  inline void clear_itemcode();
  static const int kItemCodeFieldNumber = 1;
  inline ::google::protobuf::int32 itemcode() const;
  inline void set_itemcode(::google::protobuf::int32 value);

  // optional string itemName = 2;
  inline bool has_itemname() const;
  inline void clear_itemname();
  static const int kItemNameFieldNumber = 2;
  inline const ::std::string& itemname() const;
  inline void set_itemname(const ::std::string& value);
  inline void set_itemname(const char* value);
  inline void set_itemname(const char* value, size_t size);
  inline ::std::string* mutable_itemname();
  inline ::std::string* release_itemname();
  inline void set_allocated_itemname(::std::string* itemname);

  // optional .OPMessage.judgeItem max_time = 3;
  inline bool has_max_time() const;
  inline void clear_max_time();
  static const int kMaxTimeFieldNumber = 3;
  inline const ::OPMessage::judgeItem& max_time() const;
  inline ::OPMessage::judgeItem* mutable_max_time();
  inline ::OPMessage::judgeItem* release_max_time();
  inline void set_allocated_max_time(::OPMessage::judgeItem* max_time);

  // optional .OPMessage.judgeItem max_trigger_distance = 4;
  inline bool has_max_trigger_distance() const;
  inline void clear_max_trigger_distance();
  static const int kMaxTriggerDistanceFieldNumber = 4;
  inline const ::OPMessage::judgeItem& max_trigger_distance() const;
  inline ::OPMessage::judgeItem* mutable_max_trigger_distance();
  inline ::OPMessage::judgeItem* release_max_trigger_distance();
  inline void set_allocated_max_trigger_distance(::OPMessage::judgeItem* max_trigger_distance);

  // optional .OPMessage.judgeItem min_turn_signal_time = 5;
  inline bool has_min_turn_signal_time() const;
  inline void clear_min_turn_signal_time();
  static const int kMinTurnSignalTimeFieldNumber = 5;
  inline const ::OPMessage::judgeItem& min_turn_signal_time() const;
  inline ::OPMessage::judgeItem* mutable_min_turn_signal_time();
  inline ::OPMessage::judgeItem* release_min_turn_signal_time();
  inline void set_allocated_min_turn_signal_time(::OPMessage::judgeItem* min_turn_signal_time);

  // optional .OPMessage.judgeItem lane_width = 6;
  inline bool has_lane_width() const;
  inline void clear_lane_width();
  static const int kLaneWidthFieldNumber = 6;
  inline const ::OPMessage::judgeItem& lane_width() const;
  inline ::OPMessage::judgeItem* mutable_lane_width();
  inline ::OPMessage::judgeItem* release_lane_width();
  inline void set_allocated_lane_width(::OPMessage::judgeItem* lane_width);

  // optional .OPMessage.judgeItem check_change_lane = 7;
  inline bool has_check_change_lane() const;
  inline void clear_check_change_lane();
  static const int kCheckChangeLaneFieldNumber = 7;
  inline const ::OPMessage::judgeItem& check_change_lane() const;
  inline ::OPMessage::judgeItem* mutable_check_change_lane();
  inline ::OPMessage::judgeItem* release_check_change_lane();
  inline void set_allocated_check_change_lane(::OPMessage::judgeItem* check_change_lane);

  // optional .OPMessage.judgeItem start_change_lane_time_delay = 8;
  inline bool has_start_change_lane_time_delay() const;
  inline void clear_start_change_lane_time_delay();
  static const int kStartChangeLaneTimeDelayFieldNumber = 8;
  inline const ::OPMessage::judgeItem& start_change_lane_time_delay() const;
  inline ::OPMessage::judgeItem* mutable_start_change_lane_time_delay();
  inline ::OPMessage::judgeItem* release_start_change_lane_time_delay();
  inline void set_allocated_start_change_lane_time_delay(::OPMessage::judgeItem* start_change_lane_time_delay);

  // optional .OPMessage.judgeItem start_change_lane_distance_delay = 9;
  inline bool has_start_change_lane_distance_delay() const;
  inline void clear_start_change_lane_distance_delay();
  static const int kStartChangeLaneDistanceDelayFieldNumber = 9;
  inline const ::OPMessage::judgeItem& start_change_lane_distance_delay() const;
  inline ::OPMessage::judgeItem* mutable_start_change_lane_distance_delay();
  inline ::OPMessage::judgeItem* release_start_change_lane_distance_delay();
  inline void set_allocated_start_change_lane_distance_delay(::OPMessage::judgeItem* start_change_lane_distance_delay);

  // optional .OPMessage.judgeItem finish_change_lane_time_delay = 10;
  inline bool has_finish_change_lane_time_delay() const;
  inline void clear_finish_change_lane_time_delay();
  static const int kFinishChangeLaneTimeDelayFieldNumber = 10;
  inline const ::OPMessage::judgeItem& finish_change_lane_time_delay() const;
  inline ::OPMessage::judgeItem* mutable_finish_change_lane_time_delay();
  inline ::OPMessage::judgeItem* release_finish_change_lane_time_delay();
  inline void set_allocated_finish_change_lane_time_delay(::OPMessage::judgeItem* finish_change_lane_time_delay);

  // optional .OPMessage.judgeItem finish_change_lane_distance_delay = 11;
  inline bool has_finish_change_lane_distance_delay() const;
  inline void clear_finish_change_lane_distance_delay();
  static const int kFinishChangeLaneDistanceDelayFieldNumber = 11;
  inline const ::OPMessage::judgeItem& finish_change_lane_distance_delay() const;
  inline ::OPMessage::judgeItem* mutable_finish_change_lane_distance_delay();
  inline ::OPMessage::judgeItem* release_finish_change_lane_distance_delay();
  inline void set_allocated_finish_change_lane_distance_delay(::OPMessage::judgeItem* finish_change_lane_distance_delay);

  // optional .OPMessage.judgeItem need_near_far_lamp_flash = 12;
  inline bool has_need_near_far_lamp_flash() const;
  inline void clear_need_near_far_lamp_flash();
  static const int kNeedNearFarLampFlashFieldNumber = 12;
  inline const ::OPMessage::judgeItem& need_near_far_lamp_flash() const;
  inline ::OPMessage::judgeItem* mutable_need_near_far_lamp_flash();
  inline ::OPMessage::judgeItem* release_need_near_far_lamp_flash();
  inline void set_allocated_need_near_far_lamp_flash(::OPMessage::judgeItem* need_near_far_lamp_flash);

  // optional .OPMessage.judgeItem need_return_lane = 13;
  inline bool has_need_return_lane() const;
  inline void clear_need_return_lane();
  static const int kNeedReturnLaneFieldNumber = 13;
  inline const ::OPMessage::judgeItem& need_return_lane() const;
  inline ::OPMessage::judgeItem* mutable_need_return_lane();
  inline ::OPMessage::judgeItem* release_need_return_lane();
  inline void set_allocated_need_return_lane(::OPMessage::judgeItem* need_return_lane);

  // optional .OPMessage.judgeItem return_lane_time_dealy = 14;
  inline bool has_return_lane_time_dealy() const;
  inline void clear_return_lane_time_dealy();
  static const int kReturnLaneTimeDealyFieldNumber = 14;
  inline const ::OPMessage::judgeItem& return_lane_time_dealy() const;
  inline ::OPMessage::judgeItem* mutable_return_lane_time_dealy();
  inline ::OPMessage::judgeItem* release_return_lane_time_dealy();
  inline void set_allocated_return_lane_time_dealy(::OPMessage::judgeItem* return_lane_time_dealy);

  // optional .OPMessage.voiceItem vi_41400_start_exam = 15;
  inline bool has_vi_41400_start_exam() const;
  inline void clear_vi_41400_start_exam();
  static const int kVi41400StartExamFieldNumber = 15;
  inline const ::OPMessage::voiceItem& vi_41400_start_exam() const;
  inline ::OPMessage::voiceItem* mutable_vi_41400_start_exam();
  inline ::OPMessage::voiceItem* release_vi_41400_start_exam();
  inline void set_allocated_vi_41400_start_exam(::OPMessage::voiceItem* vi_41400_start_exam);

  // optional .OPMessage.voiceItem vi_41400_end_exam = 16;
  inline bool has_vi_41400_end_exam() const;
  inline void clear_vi_41400_end_exam();
  static const int kVi41400EndExamFieldNumber = 16;
  inline const ::OPMessage::voiceItem& vi_41400_end_exam() const;
  inline ::OPMessage::voiceItem* mutable_vi_41400_end_exam();
  inline ::OPMessage::voiceItem* release_vi_41400_end_exam();
  inline void set_allocated_vi_41400_end_exam(::OPMessage::voiceItem* vi_41400_end_exam);

  // optional .OPMessage.voiceItem vi_41400_driving_in_one_lane = 17;
  inline bool has_vi_41400_driving_in_one_lane() const;
  inline void clear_vi_41400_driving_in_one_lane();
  static const int kVi41400DrivingInOneLaneFieldNumber = 17;
  inline const ::OPMessage::voiceItem& vi_41400_driving_in_one_lane() const;
  inline ::OPMessage::voiceItem* mutable_vi_41400_driving_in_one_lane();
  inline ::OPMessage::voiceItem* release_vi_41400_driving_in_one_lane();
  inline void set_allocated_vi_41400_driving_in_one_lane(::OPMessage::voiceItem* vi_41400_driving_in_one_lane);

  // optional .OPMessage.voiceItem vi_41400_notify_change_lane = 18;
  inline bool has_vi_41400_notify_change_lane() const;
  inline void clear_vi_41400_notify_change_lane();
  static const int kVi41400NotifyChangeLaneFieldNumber = 18;
  inline const ::OPMessage::voiceItem& vi_41400_notify_change_lane() const;
  inline ::OPMessage::voiceItem* mutable_vi_41400_notify_change_lane();
  inline ::OPMessage::voiceItem* release_vi_41400_notify_change_lane();
  inline void set_allocated_vi_41400_notify_change_lane(::OPMessage::voiceItem* vi_41400_notify_change_lane);

  // optional .OPMessage.voiceItem vi_41400_notify_return_lane = 19;
  inline bool has_vi_41400_notify_return_lane() const;
  inline void clear_vi_41400_notify_return_lane();
  static const int kVi41400NotifyReturnLaneFieldNumber = 19;
  inline const ::OPMessage::voiceItem& vi_41400_notify_return_lane() const;
  inline ::OPMessage::voiceItem* mutable_vi_41400_notify_return_lane();
  inline ::OPMessage::voiceItem* release_vi_41400_notify_return_lane();
  inline void set_allocated_vi_41400_notify_return_lane(::OPMessage::voiceItem* vi_41400_notify_return_lane);

  // optional .OPMessage.voiceItem vi_41400_not_finish = 20;
  inline bool has_vi_41400_not_finish() const;
  inline void clear_vi_41400_not_finish();
  static const int kVi41400NotFinishFieldNumber = 20;
  inline const ::OPMessage::voiceItem& vi_41400_not_finish() const;
  inline ::OPMessage::voiceItem* mutable_vi_41400_not_finish();
  inline ::OPMessage::voiceItem* release_vi_41400_not_finish();
  inline void set_allocated_vi_41400_not_finish(::OPMessage::voiceItem* vi_41400_not_finish);

  // optional .OPMessage.voiceItem vi_41400_change_lane_error = 21;
  inline bool has_vi_41400_change_lane_error() const;
  inline void clear_vi_41400_change_lane_error();
  static const int kVi41400ChangeLaneErrorFieldNumber = 21;
  inline const ::OPMessage::voiceItem& vi_41400_change_lane_error() const;
  inline ::OPMessage::voiceItem* mutable_vi_41400_change_lane_error();
  inline ::OPMessage::voiceItem* release_vi_41400_change_lane_error();
  inline void set_allocated_vi_41400_change_lane_error(::OPMessage::voiceItem* vi_41400_change_lane_error);

  // optional .OPMessage.voiceItem vi_41400_return_lane_error = 22;
  inline bool has_vi_41400_return_lane_error() const;
  inline void clear_vi_41400_return_lane_error();
  static const int kVi41400ReturnLaneErrorFieldNumber = 22;
  inline const ::OPMessage::voiceItem& vi_41400_return_lane_error() const;
  inline ::OPMessage::voiceItem* mutable_vi_41400_return_lane_error();
  inline ::OPMessage::voiceItem* release_vi_41400_return_lane_error();
  inline void set_allocated_vi_41400_return_lane_error(::OPMessage::voiceItem* vi_41400_return_lane_error);

  // optional .OPMessage.voiceItem vi_41400_turn_lamp_use_error = 23;
  inline bool has_vi_41400_turn_lamp_use_error() const;
  inline void clear_vi_41400_turn_lamp_use_error();
  static const int kVi41400TurnLampUseErrorFieldNumber = 23;
  inline const ::OPMessage::voiceItem& vi_41400_turn_lamp_use_error() const;
  inline ::OPMessage::voiceItem* mutable_vi_41400_turn_lamp_use_error();
  inline ::OPMessage::voiceItem* release_vi_41400_turn_lamp_use_error();
  inline void set_allocated_vi_41400_turn_lamp_use_error(::OPMessage::voiceItem* vi_41400_turn_lamp_use_error);

  // optional .OPMessage.voiceItem vi_41400_not_keep_enough_distance = 24;
  inline bool has_vi_41400_not_keep_enough_distance() const;
  inline void clear_vi_41400_not_keep_enough_distance();
  static const int kVi41400NotKeepEnoughDistanceFieldNumber = 24;
  inline const ::OPMessage::voiceItem& vi_41400_not_keep_enough_distance() const;
  inline ::OPMessage::voiceItem* mutable_vi_41400_not_keep_enough_distance();
  inline ::OPMessage::voiceItem* release_vi_41400_not_keep_enough_distance();
  inline void set_allocated_vi_41400_not_keep_enough_distance(::OPMessage::voiceItem* vi_41400_not_keep_enough_distance);

  // optional .OPMessage.voiceItem vi_41400_turn_lamp_not_use = 25;
  inline bool has_vi_41400_turn_lamp_not_use() const;
  inline void clear_vi_41400_turn_lamp_not_use();
  static const int kVi41400TurnLampNotUseFieldNumber = 25;
  inline const ::OPMessage::voiceItem& vi_41400_turn_lamp_not_use() const;
  inline ::OPMessage::voiceItem* mutable_vi_41400_turn_lamp_not_use();
  inline ::OPMessage::voiceItem* release_vi_41400_turn_lamp_not_use();
  inline void set_allocated_vi_41400_turn_lamp_not_use(::OPMessage::voiceItem* vi_41400_turn_lamp_not_use);

  // optional .OPMessage.voiceItem vi_41400_not_reach_min_speed = 26;
  inline bool has_vi_41400_not_reach_min_speed() const;
  inline void clear_vi_41400_not_reach_min_speed();
  static const int kVi41400NotReachMinSpeedFieldNumber = 26;
  inline const ::OPMessage::voiceItem& vi_41400_not_reach_min_speed() const;
  inline ::OPMessage::voiceItem* mutable_vi_41400_not_reach_min_speed();
  inline ::OPMessage::voiceItem* release_vi_41400_not_reach_min_speed();
  inline void set_allocated_vi_41400_not_reach_min_speed(::OPMessage::voiceItem* vi_41400_not_reach_min_speed);

  // @@protoc_insertion_point(class_scope:OPMessage.Judge41400)
 private:
  inline void set_has_itemcode();
  inline void clear_has_itemcode();
  inline void set_has_itemname();
  inline void clear_has_itemname();
  inline void set_has_max_time();
  inline void clear_has_max_time();
  inline void set_has_max_trigger_distance();
  inline void clear_has_max_trigger_distance();
  inline void set_has_min_turn_signal_time();
  inline void clear_has_min_turn_signal_time();
  inline void set_has_lane_width();
  inline void clear_has_lane_width();
  inline void set_has_check_change_lane();
  inline void clear_has_check_change_lane();
  inline void set_has_start_change_lane_time_delay();
  inline void clear_has_start_change_lane_time_delay();
  inline void set_has_start_change_lane_distance_delay();
  inline void clear_has_start_change_lane_distance_delay();
  inline void set_has_finish_change_lane_time_delay();
  inline void clear_has_finish_change_lane_time_delay();
  inline void set_has_finish_change_lane_distance_delay();
  inline void clear_has_finish_change_lane_distance_delay();
  inline void set_has_need_near_far_lamp_flash();
  inline void clear_has_need_near_far_lamp_flash();
  inline void set_has_need_return_lane();
  inline void clear_has_need_return_lane();
  inline void set_has_return_lane_time_dealy();
  inline void clear_has_return_lane_time_dealy();
  inline void set_has_vi_41400_start_exam();
  inline void clear_has_vi_41400_start_exam();
  inline void set_has_vi_41400_end_exam();
  inline void clear_has_vi_41400_end_exam();
  inline void set_has_vi_41400_driving_in_one_lane();
  inline void clear_has_vi_41400_driving_in_one_lane();
  inline void set_has_vi_41400_notify_change_lane();
  inline void clear_has_vi_41400_notify_change_lane();
  inline void set_has_vi_41400_notify_return_lane();
  inline void clear_has_vi_41400_notify_return_lane();
  inline void set_has_vi_41400_not_finish();
  inline void clear_has_vi_41400_not_finish();
  inline void set_has_vi_41400_change_lane_error();
  inline void clear_has_vi_41400_change_lane_error();
  inline void set_has_vi_41400_return_lane_error();
  inline void clear_has_vi_41400_return_lane_error();
  inline void set_has_vi_41400_turn_lamp_use_error();
  inline void clear_has_vi_41400_turn_lamp_use_error();
  inline void set_has_vi_41400_not_keep_enough_distance();
  inline void clear_has_vi_41400_not_keep_enough_distance();
  inline void set_has_vi_41400_turn_lamp_not_use();
  inline void clear_has_vi_41400_turn_lamp_not_use();
  inline void set_has_vi_41400_not_reach_min_speed();
  inline void clear_has_vi_41400_not_reach_min_speed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* itemname_;
  ::OPMessage::judgeItem* max_time_;
  ::OPMessage::judgeItem* max_trigger_distance_;
  ::OPMessage::judgeItem* min_turn_signal_time_;
  ::OPMessage::judgeItem* lane_width_;
  ::OPMessage::judgeItem* check_change_lane_;
  ::OPMessage::judgeItem* start_change_lane_time_delay_;
  ::OPMessage::judgeItem* start_change_lane_distance_delay_;
  ::OPMessage::judgeItem* finish_change_lane_time_delay_;
  ::OPMessage::judgeItem* finish_change_lane_distance_delay_;
  ::OPMessage::judgeItem* need_near_far_lamp_flash_;
  ::OPMessage::judgeItem* need_return_lane_;
  ::OPMessage::judgeItem* return_lane_time_dealy_;
  ::OPMessage::voiceItem* vi_41400_start_exam_;
  ::OPMessage::voiceItem* vi_41400_end_exam_;
  ::OPMessage::voiceItem* vi_41400_driving_in_one_lane_;
  ::OPMessage::voiceItem* vi_41400_notify_change_lane_;
  ::OPMessage::voiceItem* vi_41400_notify_return_lane_;
  ::OPMessage::voiceItem* vi_41400_not_finish_;
  ::OPMessage::voiceItem* vi_41400_change_lane_error_;
  ::OPMessage::voiceItem* vi_41400_return_lane_error_;
  ::OPMessage::voiceItem* vi_41400_turn_lamp_use_error_;
  ::OPMessage::voiceItem* vi_41400_not_keep_enough_distance_;
  ::OPMessage::voiceItem* vi_41400_turn_lamp_not_use_;
  ::OPMessage::voiceItem* vi_41400_not_reach_min_speed_;
  ::google::protobuf::int32 itemcode_;
  friend void  protobuf_AddDesc_MessageKm3Config_2eproto();
  friend void protobuf_AssignDesc_MessageKm3Config_2eproto();
  friend void protobuf_ShutdownFile_MessageKm3Config_2eproto();

  void InitAsDefaultInstance();
  static Judge41400* default_instance_;
};
// -------------------------------------------------------------------

class Judge40500 : public ::google::protobuf::Message {
 public:
  Judge40500();
  virtual ~Judge40500();

  Judge40500(const Judge40500& from);

  inline Judge40500& operator=(const Judge40500& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Judge40500& default_instance();

  void Swap(Judge40500* other);

  // implements Message ----------------------------------------------

  Judge40500* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Judge40500& from);
  void MergeFrom(const Judge40500& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 itemCode = 1;
  inline bool has_itemcode() const;
  inline void clear_itemcode();
  static const int kItemCodeFieldNumber = 1;
  inline ::google::protobuf::int32 itemcode() const;
  inline void set_itemcode(::google::protobuf::int32 value);

  // optional string itemName = 2;
  inline bool has_itemname() const;
  inline void clear_itemname();
  static const int kItemNameFieldNumber = 2;
  inline const ::std::string& itemname() const;
  inline void set_itemname(const ::std::string& value);
  inline void set_itemname(const char* value);
  inline void set_itemname(const char* value, size_t size);
  inline ::std::string* mutable_itemname();
  inline ::std::string* release_itemname();
  inline void set_allocated_itemname(::std::string* itemname);

  // optional .OPMessage.judgeItem max_time = 3;
  inline bool has_max_time() const;
  inline void clear_max_time();
  static const int kMaxTimeFieldNumber = 3;
  inline const ::OPMessage::judgeItem& max_time() const;
  inline ::OPMessage::judgeItem* mutable_max_time();
  inline ::OPMessage::judgeItem* release_max_time();
  inline void set_allocated_max_time(::OPMessage::judgeItem* max_time);

  // optional .OPMessage.judgeItem max_trigger_distance = 4;
  inline bool has_max_trigger_distance() const;
  inline void clear_max_trigger_distance();
  static const int kMaxTriggerDistanceFieldNumber = 4;
  inline const ::OPMessage::judgeItem& max_trigger_distance() const;
  inline ::OPMessage::judgeItem* mutable_max_trigger_distance();
  inline ::OPMessage::judgeItem* release_max_trigger_distance();
  inline void set_allocated_max_trigger_distance(::OPMessage::judgeItem* max_trigger_distance);

  // optional .OPMessage.judgeItem min_turn_signal_time = 5;
  inline bool has_min_turn_signal_time() const;
  inline void clear_min_turn_signal_time();
  static const int kMinTurnSignalTimeFieldNumber = 5;
  inline const ::OPMessage::judgeItem& min_turn_signal_time() const;
  inline ::OPMessage::judgeItem* mutable_min_turn_signal_time();
  inline ::OPMessage::judgeItem* release_min_turn_signal_time();
  inline void set_allocated_min_turn_signal_time(::OPMessage::judgeItem* min_turn_signal_time);

  // optional .OPMessage.judgeItem lane_width = 6;
  inline bool has_lane_width() const;
  inline void clear_lane_width();
  static const int kLaneWidthFieldNumber = 6;
  inline const ::OPMessage::judgeItem& lane_width() const;
  inline ::OPMessage::judgeItem* mutable_lane_width();
  inline ::OPMessage::judgeItem* release_lane_width();
  inline void set_allocated_lane_width(::OPMessage::judgeItem* lane_width);

  // optional .OPMessage.judgeItem check_change_lane = 7;
  inline bool has_check_change_lane() const;
  inline void clear_check_change_lane();
  static const int kCheckChangeLaneFieldNumber = 7;
  inline const ::OPMessage::judgeItem& check_change_lane() const;
  inline ::OPMessage::judgeItem* mutable_check_change_lane();
  inline ::OPMessage::judgeItem* release_check_change_lane();
  inline void set_allocated_check_change_lane(::OPMessage::judgeItem* check_change_lane);

  // optional .OPMessage.judgeItem start_change_lane_time_delay = 8;
  inline bool has_start_change_lane_time_delay() const;
  inline void clear_start_change_lane_time_delay();
  static const int kStartChangeLaneTimeDelayFieldNumber = 8;
  inline const ::OPMessage::judgeItem& start_change_lane_time_delay() const;
  inline ::OPMessage::judgeItem* mutable_start_change_lane_time_delay();
  inline ::OPMessage::judgeItem* release_start_change_lane_time_delay();
  inline void set_allocated_start_change_lane_time_delay(::OPMessage::judgeItem* start_change_lane_time_delay);

  // optional .OPMessage.judgeItem start_change_lane_distance_delay = 9;
  inline bool has_start_change_lane_distance_delay() const;
  inline void clear_start_change_lane_distance_delay();
  static const int kStartChangeLaneDistanceDelayFieldNumber = 9;
  inline const ::OPMessage::judgeItem& start_change_lane_distance_delay() const;
  inline ::OPMessage::judgeItem* mutable_start_change_lane_distance_delay();
  inline ::OPMessage::judgeItem* release_start_change_lane_distance_delay();
  inline void set_allocated_start_change_lane_distance_delay(::OPMessage::judgeItem* start_change_lane_distance_delay);

  // optional .OPMessage.judgeItem finish_change_lane_time_delay = 10;
  inline bool has_finish_change_lane_time_delay() const;
  inline void clear_finish_change_lane_time_delay();
  static const int kFinishChangeLaneTimeDelayFieldNumber = 10;
  inline const ::OPMessage::judgeItem& finish_change_lane_time_delay() const;
  inline ::OPMessage::judgeItem* mutable_finish_change_lane_time_delay();
  inline ::OPMessage::judgeItem* release_finish_change_lane_time_delay();
  inline void set_allocated_finish_change_lane_time_delay(::OPMessage::judgeItem* finish_change_lane_time_delay);

  // optional .OPMessage.judgeItem finish_change_lane_distance_delay = 11;
  inline bool has_finish_change_lane_distance_delay() const;
  inline void clear_finish_change_lane_distance_delay();
  static const int kFinishChangeLaneDistanceDelayFieldNumber = 11;
  inline const ::OPMessage::judgeItem& finish_change_lane_distance_delay() const;
  inline ::OPMessage::judgeItem* mutable_finish_change_lane_distance_delay();
  inline ::OPMessage::judgeItem* release_finish_change_lane_distance_delay();
  inline void set_allocated_finish_change_lane_distance_delay(::OPMessage::judgeItem* finish_change_lane_distance_delay);

  // optional .OPMessage.voiceItem vi_40500_start_exam = 12;
  inline bool has_vi_40500_start_exam() const;
  inline void clear_vi_40500_start_exam();
  static const int kVi40500StartExamFieldNumber = 12;
  inline const ::OPMessage::voiceItem& vi_40500_start_exam() const;
  inline ::OPMessage::voiceItem* mutable_vi_40500_start_exam();
  inline ::OPMessage::voiceItem* release_vi_40500_start_exam();
  inline void set_allocated_vi_40500_start_exam(::OPMessage::voiceItem* vi_40500_start_exam);

  // optional .OPMessage.voiceItem vi_40500_end_exam = 13;
  inline bool has_vi_40500_end_exam() const;
  inline void clear_vi_40500_end_exam();
  static const int kVi40500EndExamFieldNumber = 13;
  inline const ::OPMessage::voiceItem& vi_40500_end_exam() const;
  inline ::OPMessage::voiceItem* mutable_vi_40500_end_exam();
  inline ::OPMessage::voiceItem* release_vi_40500_end_exam();
  inline void set_allocated_vi_40500_end_exam(::OPMessage::voiceItem* vi_40500_end_exam);

  // optional .OPMessage.voiceItem vi_40500_driving_in_one_lane = 14;
  inline bool has_vi_40500_driving_in_one_lane() const;
  inline void clear_vi_40500_driving_in_one_lane();
  static const int kVi40500DrivingInOneLaneFieldNumber = 14;
  inline const ::OPMessage::voiceItem& vi_40500_driving_in_one_lane() const;
  inline ::OPMessage::voiceItem* mutable_vi_40500_driving_in_one_lane();
  inline ::OPMessage::voiceItem* release_vi_40500_driving_in_one_lane();
  inline void set_allocated_vi_40500_driving_in_one_lane(::OPMessage::voiceItem* vi_40500_driving_in_one_lane);

  // optional .OPMessage.voiceItem vi_40500_notify_change_lane = 15;
  inline bool has_vi_40500_notify_change_lane() const;
  inline void clear_vi_40500_notify_change_lane();
  static const int kVi40500NotifyChangeLaneFieldNumber = 15;
  inline const ::OPMessage::voiceItem& vi_40500_notify_change_lane() const;
  inline ::OPMessage::voiceItem* mutable_vi_40500_notify_change_lane();
  inline ::OPMessage::voiceItem* release_vi_40500_notify_change_lane();
  inline void set_allocated_vi_40500_notify_change_lane(::OPMessage::voiceItem* vi_40500_notify_change_lane);

  // optional .OPMessage.voiceItem vi_40500_not_finish_change_lane = 16;
  inline bool has_vi_40500_not_finish_change_lane() const;
  inline void clear_vi_40500_not_finish_change_lane();
  static const int kVi40500NotFinishChangeLaneFieldNumber = 16;
  inline const ::OPMessage::voiceItem& vi_40500_not_finish_change_lane() const;
  inline ::OPMessage::voiceItem* mutable_vi_40500_not_finish_change_lane();
  inline ::OPMessage::voiceItem* release_vi_40500_not_finish_change_lane();
  inline void set_allocated_vi_40500_not_finish_change_lane(::OPMessage::voiceItem* vi_40500_not_finish_change_lane);

  // optional .OPMessage.voiceItem vi_40500_turn_lamp_use_error = 17;
  inline bool has_vi_40500_turn_lamp_use_error() const;
  inline void clear_vi_40500_turn_lamp_use_error();
  static const int kVi40500TurnLampUseErrorFieldNumber = 17;
  inline const ::OPMessage::voiceItem& vi_40500_turn_lamp_use_error() const;
  inline ::OPMessage::voiceItem* mutable_vi_40500_turn_lamp_use_error();
  inline ::OPMessage::voiceItem* release_vi_40500_turn_lamp_use_error();
  inline void set_allocated_vi_40500_turn_lamp_use_error(::OPMessage::voiceItem* vi_40500_turn_lamp_use_error);

  // optional .OPMessage.voiceItem vi_40500_turn_lamp_not_use = 18;
  inline bool has_vi_40500_turn_lamp_not_use() const;
  inline void clear_vi_40500_turn_lamp_not_use();
  static const int kVi40500TurnLampNotUseFieldNumber = 18;
  inline const ::OPMessage::voiceItem& vi_40500_turn_lamp_not_use() const;
  inline ::OPMessage::voiceItem* mutable_vi_40500_turn_lamp_not_use();
  inline ::OPMessage::voiceItem* release_vi_40500_turn_lamp_not_use();
  inline void set_allocated_vi_40500_turn_lamp_not_use(::OPMessage::voiceItem* vi_40500_turn_lamp_not_use);

  // @@protoc_insertion_point(class_scope:OPMessage.Judge40500)
 private:
  inline void set_has_itemcode();
  inline void clear_has_itemcode();
  inline void set_has_itemname();
  inline void clear_has_itemname();
  inline void set_has_max_time();
  inline void clear_has_max_time();
  inline void set_has_max_trigger_distance();
  inline void clear_has_max_trigger_distance();
  inline void set_has_min_turn_signal_time();
  inline void clear_has_min_turn_signal_time();
  inline void set_has_lane_width();
  inline void clear_has_lane_width();
  inline void set_has_check_change_lane();
  inline void clear_has_check_change_lane();
  inline void set_has_start_change_lane_time_delay();
  inline void clear_has_start_change_lane_time_delay();
  inline void set_has_start_change_lane_distance_delay();
  inline void clear_has_start_change_lane_distance_delay();
  inline void set_has_finish_change_lane_time_delay();
  inline void clear_has_finish_change_lane_time_delay();
  inline void set_has_finish_change_lane_distance_delay();
  inline void clear_has_finish_change_lane_distance_delay();
  inline void set_has_vi_40500_start_exam();
  inline void clear_has_vi_40500_start_exam();
  inline void set_has_vi_40500_end_exam();
  inline void clear_has_vi_40500_end_exam();
  inline void set_has_vi_40500_driving_in_one_lane();
  inline void clear_has_vi_40500_driving_in_one_lane();
  inline void set_has_vi_40500_notify_change_lane();
  inline void clear_has_vi_40500_notify_change_lane();
  inline void set_has_vi_40500_not_finish_change_lane();
  inline void clear_has_vi_40500_not_finish_change_lane();
  inline void set_has_vi_40500_turn_lamp_use_error();
  inline void clear_has_vi_40500_turn_lamp_use_error();
  inline void set_has_vi_40500_turn_lamp_not_use();
  inline void clear_has_vi_40500_turn_lamp_not_use();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* itemname_;
  ::OPMessage::judgeItem* max_time_;
  ::OPMessage::judgeItem* max_trigger_distance_;
  ::OPMessage::judgeItem* min_turn_signal_time_;
  ::OPMessage::judgeItem* lane_width_;
  ::OPMessage::judgeItem* check_change_lane_;
  ::OPMessage::judgeItem* start_change_lane_time_delay_;
  ::OPMessage::judgeItem* start_change_lane_distance_delay_;
  ::OPMessage::judgeItem* finish_change_lane_time_delay_;
  ::OPMessage::judgeItem* finish_change_lane_distance_delay_;
  ::OPMessage::voiceItem* vi_40500_start_exam_;
  ::OPMessage::voiceItem* vi_40500_end_exam_;
  ::OPMessage::voiceItem* vi_40500_driving_in_one_lane_;
  ::OPMessage::voiceItem* vi_40500_notify_change_lane_;
  ::OPMessage::voiceItem* vi_40500_not_finish_change_lane_;
  ::OPMessage::voiceItem* vi_40500_turn_lamp_use_error_;
  ::OPMessage::voiceItem* vi_40500_turn_lamp_not_use_;
  ::google::protobuf::int32 itemcode_;
  friend void  protobuf_AddDesc_MessageKm3Config_2eproto();
  friend void protobuf_AssignDesc_MessageKm3Config_2eproto();
  friend void protobuf_ShutdownFile_MessageKm3Config_2eproto();

  void InitAsDefaultInstance();
  static Judge40500* default_instance_;
};
// -------------------------------------------------------------------

class Judge41300 : public ::google::protobuf::Message {
 public:
  Judge41300();
  virtual ~Judge41300();

  Judge41300(const Judge41300& from);

  inline Judge41300& operator=(const Judge41300& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Judge41300& default_instance();

  void Swap(Judge41300* other);

  // implements Message ----------------------------------------------

  Judge41300* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Judge41300& from);
  void MergeFrom(const Judge41300& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 itemCode = 1;
  inline bool has_itemcode() const;
  inline void clear_itemcode();
  static const int kItemCodeFieldNumber = 1;
  inline ::google::protobuf::int32 itemcode() const;
  inline void set_itemcode(::google::protobuf::int32 value);

  // optional string itemName = 2;
  inline bool has_itemname() const;
  inline void clear_itemname();
  static const int kItemNameFieldNumber = 2;
  inline const ::std::string& itemname() const;
  inline void set_itemname(const ::std::string& value);
  inline void set_itemname(const char* value);
  inline void set_itemname(const char* value, size_t size);
  inline ::std::string* mutable_itemname();
  inline ::std::string* release_itemname();
  inline void set_allocated_itemname(::std::string* itemname);

  // optional .OPMessage.judgeItem max_time = 3;
  inline bool has_max_time() const;
  inline void clear_max_time();
  static const int kMaxTimeFieldNumber = 3;
  inline const ::OPMessage::judgeItem& max_time() const;
  inline ::OPMessage::judgeItem* mutable_max_time();
  inline ::OPMessage::judgeItem* release_max_time();
  inline void set_allocated_max_time(::OPMessage::judgeItem* max_time);

  // optional .OPMessage.judgeItem max_trigger_distance = 4;
  inline bool has_max_trigger_distance() const;
  inline void clear_max_trigger_distance();
  static const int kMaxTriggerDistanceFieldNumber = 4;
  inline const ::OPMessage::judgeItem& max_trigger_distance() const;
  inline ::OPMessage::judgeItem* mutable_max_trigger_distance();
  inline ::OPMessage::judgeItem* release_max_trigger_distance();
  inline void set_allocated_max_trigger_distance(::OPMessage::judgeItem* max_trigger_distance);

  // optional .OPMessage.judgeItem max_speed = 5;
  inline bool has_max_speed() const;
  inline void clear_max_speed();
  static const int kMaxSpeedFieldNumber = 5;
  inline const ::OPMessage::judgeItem& max_speed() const;
  inline ::OPMessage::judgeItem* mutable_max_speed();
  inline ::OPMessage::judgeItem* release_max_speed();
  inline void set_allocated_max_speed(::OPMessage::judgeItem* max_speed);

  // optional .OPMessage.judgeItem judge_mode = 6;
  inline bool has_judge_mode() const;
  inline void clear_judge_mode();
  static const int kJudgeModeFieldNumber = 6;
  inline const ::OPMessage::judgeItem& judge_mode() const;
  inline ::OPMessage::judgeItem* mutable_judge_mode();
  inline ::OPMessage::judgeItem* release_judge_mode();
  inline void set_allocated_judge_mode(::OPMessage::judgeItem* judge_mode);

  // optional .OPMessage.voiceItem vi_41300_start_exam = 7;
  inline bool has_vi_41300_start_exam() const;
  inline void clear_vi_41300_start_exam();
  static const int kVi41300StartExamFieldNumber = 7;
  inline const ::OPMessage::voiceItem& vi_41300_start_exam() const;
  inline ::OPMessage::voiceItem* mutable_vi_41300_start_exam();
  inline ::OPMessage::voiceItem* release_vi_41300_start_exam();
  inline void set_allocated_vi_41300_start_exam(::OPMessage::voiceItem* vi_41300_start_exam);

  // optional .OPMessage.voiceItem vi_41300_end_exam = 8;
  inline bool has_vi_41300_end_exam() const;
  inline void clear_vi_41300_end_exam();
  static const int kVi41300EndExamFieldNumber = 8;
  inline const ::OPMessage::voiceItem& vi_41300_end_exam() const;
  inline ::OPMessage::voiceItem* mutable_vi_41300_end_exam();
  inline ::OPMessage::voiceItem* release_vi_41300_end_exam();
  inline void set_allocated_vi_41300_end_exam(::OPMessage::voiceItem* vi_41300_end_exam);

  // optional .OPMessage.voiceItem vi_41300_not_slowdown = 9;
  inline bool has_vi_41300_not_slowdown() const;
  inline void clear_vi_41300_not_slowdown();
  static const int kVi41300NotSlowdownFieldNumber = 9;
  inline const ::OPMessage::voiceItem& vi_41300_not_slowdown() const;
  inline ::OPMessage::voiceItem* mutable_vi_41300_not_slowdown();
  inline ::OPMessage::voiceItem* release_vi_41300_not_slowdown();
  inline void set_allocated_vi_41300_not_slowdown(::OPMessage::voiceItem* vi_41300_not_slowdown);

  // @@protoc_insertion_point(class_scope:OPMessage.Judge41300)
 private:
  inline void set_has_itemcode();
  inline void clear_has_itemcode();
  inline void set_has_itemname();
  inline void clear_has_itemname();
  inline void set_has_max_time();
  inline void clear_has_max_time();
  inline void set_has_max_trigger_distance();
  inline void clear_has_max_trigger_distance();
  inline void set_has_max_speed();
  inline void clear_has_max_speed();
  inline void set_has_judge_mode();
  inline void clear_has_judge_mode();
  inline void set_has_vi_41300_start_exam();
  inline void clear_has_vi_41300_start_exam();
  inline void set_has_vi_41300_end_exam();
  inline void clear_has_vi_41300_end_exam();
  inline void set_has_vi_41300_not_slowdown();
  inline void clear_has_vi_41300_not_slowdown();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* itemname_;
  ::OPMessage::judgeItem* max_time_;
  ::OPMessage::judgeItem* max_trigger_distance_;
  ::OPMessage::judgeItem* max_speed_;
  ::OPMessage::judgeItem* judge_mode_;
  ::OPMessage::voiceItem* vi_41300_start_exam_;
  ::OPMessage::voiceItem* vi_41300_end_exam_;
  ::OPMessage::voiceItem* vi_41300_not_slowdown_;
  ::google::protobuf::int32 itemcode_;
  friend void  protobuf_AddDesc_MessageKm3Config_2eproto();
  friend void protobuf_AssignDesc_MessageKm3Config_2eproto();
  friend void protobuf_ShutdownFile_MessageKm3Config_2eproto();

  void InitAsDefaultInstance();
  static Judge41300* default_instance_;
};
// -------------------------------------------------------------------

class Judge40300 : public ::google::protobuf::Message {
 public:
  Judge40300();
  virtual ~Judge40300();

  Judge40300(const Judge40300& from);

  inline Judge40300& operator=(const Judge40300& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Judge40300& default_instance();

  void Swap(Judge40300* other);

  // implements Message ----------------------------------------------

  Judge40300* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Judge40300& from);
  void MergeFrom(const Judge40300& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 itemCode = 1;
  inline bool has_itemcode() const;
  inline void clear_itemcode();
  static const int kItemCodeFieldNumber = 1;
  inline ::google::protobuf::int32 itemcode() const;
  inline void set_itemcode(::google::protobuf::int32 value);

  // optional string itemName = 2;
  inline bool has_itemname() const;
  inline void clear_itemname();
  static const int kItemNameFieldNumber = 2;
  inline const ::std::string& itemname() const;
  inline void set_itemname(const ::std::string& value);
  inline void set_itemname(const char* value);
  inline void set_itemname(const char* value, size_t size);
  inline ::std::string* mutable_itemname();
  inline ::std::string* release_itemname();
  inline void set_allocated_itemname(::std::string* itemname);

  // optional .OPMessage.judgeItem max_time = 3;
  inline bool has_max_time() const;
  inline void clear_max_time();
  static const int kMaxTimeFieldNumber = 3;
  inline const ::OPMessage::judgeItem& max_time() const;
  inline ::OPMessage::judgeItem* mutable_max_time();
  inline ::OPMessage::judgeItem* release_max_time();
  inline void set_allocated_max_time(::OPMessage::judgeItem* max_time);

  // optional .OPMessage.judgeItem min_speed = 4;
  inline bool has_min_speed() const;
  inline void clear_min_speed();
  static const int kMinSpeedFieldNumber = 4;
  inline const ::OPMessage::judgeItem& min_speed() const;
  inline ::OPMessage::judgeItem* mutable_min_speed();
  inline ::OPMessage::judgeItem* release_min_speed();
  inline void set_allocated_min_speed(::OPMessage::judgeItem* min_speed);

  // optional .OPMessage.judgeItem max_trigger_distance = 5;
  inline bool has_max_trigger_distance() const;
  inline void clear_max_trigger_distance();
  static const int kMaxTriggerDistanceFieldNumber = 5;
  inline const ::OPMessage::judgeItem& max_trigger_distance() const;
  inline ::OPMessage::judgeItem* mutable_max_trigger_distance();
  inline ::OPMessage::judgeItem* release_max_trigger_distance();
  inline void set_allocated_max_trigger_distance(::OPMessage::judgeItem* max_trigger_distance);

  // optional .OPMessage.judgeItem max_error_distance = 6;
  inline bool has_max_error_distance() const;
  inline void clear_max_error_distance();
  static const int kMaxErrorDistanceFieldNumber = 6;
  inline const ::OPMessage::judgeItem& max_error_distance() const;
  inline ::OPMessage::judgeItem* mutable_max_error_distance();
  inline ::OPMessage::judgeItem* release_max_error_distance();
  inline void set_allocated_max_error_distance(::OPMessage::judgeItem* max_error_distance);

  // optional .OPMessage.judgeItem enable_steering = 7;
  inline bool has_enable_steering() const;
  inline void clear_enable_steering();
  static const int kEnableSteeringFieldNumber = 7;
  inline const ::OPMessage::judgeItem& enable_steering() const;
  inline ::OPMessage::judgeItem* mutable_enable_steering();
  inline ::OPMessage::judgeItem* release_enable_steering();
  inline void set_allocated_enable_steering(::OPMessage::judgeItem* enable_steering);

  // optional .OPMessage.judgeItem max_error_steering_angle = 8;
  inline bool has_max_error_steering_angle() const;
  inline void clear_max_error_steering_angle();
  static const int kMaxErrorSteeringAngleFieldNumber = 8;
  inline const ::OPMessage::judgeItem& max_error_steering_angle() const;
  inline ::OPMessage::judgeItem* mutable_max_error_steering_angle();
  inline ::OPMessage::judgeItem* release_max_error_steering_angle();
  inline void set_allocated_max_error_steering_angle(::OPMessage::judgeItem* max_error_steering_angle);

  // optional .OPMessage.voiceItem vi_40300_start_exam = 9;
  inline bool has_vi_40300_start_exam() const;
  inline void clear_vi_40300_start_exam();
  static const int kVi40300StartExamFieldNumber = 9;
  inline const ::OPMessage::voiceItem& vi_40300_start_exam() const;
  inline ::OPMessage::voiceItem* mutable_vi_40300_start_exam();
  inline ::OPMessage::voiceItem* release_vi_40300_start_exam();
  inline void set_allocated_vi_40300_start_exam(::OPMessage::voiceItem* vi_40300_start_exam);

  // optional .OPMessage.voiceItem vi_40300_end_exam = 10;
  inline bool has_vi_40300_end_exam() const;
  inline void clear_vi_40300_end_exam();
  static const int kVi40300EndExamFieldNumber = 10;
  inline const ::OPMessage::voiceItem& vi_40300_end_exam() const;
  inline ::OPMessage::voiceItem* mutable_vi_40300_end_exam();
  inline ::OPMessage::voiceItem* release_vi_40300_end_exam();
  inline void set_allocated_vi_40300_end_exam(::OPMessage::voiceItem* vi_40300_end_exam);

  // optional .OPMessage.voiceItem vi_40300_not_go_straight = 11;
  inline bool has_vi_40300_not_go_straight() const;
  inline void clear_vi_40300_not_go_straight();
  static const int kVi40300NotGoStraightFieldNumber = 11;
  inline const ::OPMessage::voiceItem& vi_40300_not_go_straight() const;
  inline ::OPMessage::voiceItem* mutable_vi_40300_not_go_straight();
  inline ::OPMessage::voiceItem* release_vi_40300_not_go_straight();
  inline void set_allocated_vi_40300_not_go_straight(::OPMessage::voiceItem* vi_40300_not_go_straight);

  // optional .OPMessage.voiceItem vi_40300_not_reach_speed = 12;
  inline bool has_vi_40300_not_reach_speed() const;
  inline void clear_vi_40300_not_reach_speed();
  static const int kVi40300NotReachSpeedFieldNumber = 12;
  inline const ::OPMessage::voiceItem& vi_40300_not_reach_speed() const;
  inline ::OPMessage::voiceItem* mutable_vi_40300_not_reach_speed();
  inline ::OPMessage::voiceItem* release_vi_40300_not_reach_speed();
  inline void set_allocated_vi_40300_not_reach_speed(::OPMessage::voiceItem* vi_40300_not_reach_speed);

  // @@protoc_insertion_point(class_scope:OPMessage.Judge40300)
 private:
  inline void set_has_itemcode();
  inline void clear_has_itemcode();
  inline void set_has_itemname();
  inline void clear_has_itemname();
  inline void set_has_max_time();
  inline void clear_has_max_time();
  inline void set_has_min_speed();
  inline void clear_has_min_speed();
  inline void set_has_max_trigger_distance();
  inline void clear_has_max_trigger_distance();
  inline void set_has_max_error_distance();
  inline void clear_has_max_error_distance();
  inline void set_has_enable_steering();
  inline void clear_has_enable_steering();
  inline void set_has_max_error_steering_angle();
  inline void clear_has_max_error_steering_angle();
  inline void set_has_vi_40300_start_exam();
  inline void clear_has_vi_40300_start_exam();
  inline void set_has_vi_40300_end_exam();
  inline void clear_has_vi_40300_end_exam();
  inline void set_has_vi_40300_not_go_straight();
  inline void clear_has_vi_40300_not_go_straight();
  inline void set_has_vi_40300_not_reach_speed();
  inline void clear_has_vi_40300_not_reach_speed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* itemname_;
  ::OPMessage::judgeItem* max_time_;
  ::OPMessage::judgeItem* min_speed_;
  ::OPMessage::judgeItem* max_trigger_distance_;
  ::OPMessage::judgeItem* max_error_distance_;
  ::OPMessage::judgeItem* enable_steering_;
  ::OPMessage::judgeItem* max_error_steering_angle_;
  ::OPMessage::voiceItem* vi_40300_start_exam_;
  ::OPMessage::voiceItem* vi_40300_end_exam_;
  ::OPMessage::voiceItem* vi_40300_not_go_straight_;
  ::OPMessage::voiceItem* vi_40300_not_reach_speed_;
  ::google::protobuf::int32 itemcode_;
  friend void  protobuf_AddDesc_MessageKm3Config_2eproto();
  friend void protobuf_AssignDesc_MessageKm3Config_2eproto();
  friend void protobuf_ShutdownFile_MessageKm3Config_2eproto();

  void InitAsDefaultInstance();
  static Judge40300* default_instance_;
};
// -------------------------------------------------------------------

class Judge40600 : public ::google::protobuf::Message {
 public:
  Judge40600();
  virtual ~Judge40600();

  Judge40600(const Judge40600& from);

  inline Judge40600& operator=(const Judge40600& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Judge40600& default_instance();

  void Swap(Judge40600* other);

  // implements Message ----------------------------------------------

  Judge40600* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Judge40600& from);
  void MergeFrom(const Judge40600& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 itemCode = 1;
  inline bool has_itemcode() const;
  inline void clear_itemcode();
  static const int kItemCodeFieldNumber = 1;
  inline ::google::protobuf::int32 itemcode() const;
  inline void set_itemcode(::google::protobuf::int32 value);

  // optional string itemName = 2;
  inline bool has_itemname() const;
  inline void clear_itemname();
  static const int kItemNameFieldNumber = 2;
  inline const ::std::string& itemname() const;
  inline void set_itemname(const ::std::string& value);
  inline void set_itemname(const char* value);
  inline void set_itemname(const char* value, size_t size);
  inline ::std::string* mutable_itemname();
  inline ::std::string* release_itemname();
  inline void set_allocated_itemname(::std::string* itemname);

  // optional .OPMessage.judgeItem max_time = 3;
  inline bool has_max_time() const;
  inline void clear_max_time();
  static const int kMaxTimeFieldNumber = 3;
  inline const ::OPMessage::judgeItem& max_time() const;
  inline ::OPMessage::judgeItem* mutable_max_time();
  inline ::OPMessage::judgeItem* release_max_time();
  inline void set_allocated_max_time(::OPMessage::judgeItem* max_time);

  // optional .OPMessage.judgeItem max_trigger_distance = 4;
  inline bool has_max_trigger_distance() const;
  inline void clear_max_trigger_distance();
  static const int kMaxTriggerDistanceFieldNumber = 4;
  inline const ::OPMessage::judgeItem& max_trigger_distance() const;
  inline ::OPMessage::judgeItem* mutable_max_trigger_distance();
  inline ::OPMessage::judgeItem* release_max_trigger_distance();
  inline void set_allocated_max_trigger_distance(::OPMessage::judgeItem* max_trigger_distance);

  // optional .OPMessage.judgeItem min_turn_signal_time = 5;
  inline bool has_min_turn_signal_time() const;
  inline void clear_min_turn_signal_time();
  static const int kMinTurnSignalTimeFieldNumber = 5;
  inline const ::OPMessage::judgeItem& min_turn_signal_time() const;
  inline ::OPMessage::judgeItem* mutable_min_turn_signal_time();
  inline ::OPMessage::judgeItem* release_min_turn_signal_time();
  inline void set_allocated_min_turn_signal_time(::OPMessage::judgeItem* min_turn_signal_time);

  // optional .OPMessage.judgeItem finish_mode = 6;
  inline bool has_finish_mode() const;
  inline void clear_finish_mode();
  static const int kFinishModeFieldNumber = 6;
  inline const ::OPMessage::judgeItem& finish_mode() const;
  inline ::OPMessage::judgeItem* mutable_finish_mode();
  inline ::OPMessage::judgeItem* release_finish_mode();
  inline void set_allocated_finish_mode(::OPMessage::judgeItem* finish_mode);

  // optional .OPMessage.judgeItem get_off_close_door_time = 7;
  inline bool has_get_off_close_door_time() const;
  inline void clear_get_off_close_door_time();
  static const int kGetOffCloseDoorTimeFieldNumber = 7;
  inline const ::OPMessage::judgeItem& get_off_close_door_time() const;
  inline ::OPMessage::judgeItem* mutable_get_off_close_door_time();
  inline ::OPMessage::judgeItem* release_get_off_close_door_time();
  inline void set_allocated_get_off_close_door_time(::OPMessage::judgeItem* get_off_close_door_time);

  // optional .OPMessage.judgeItem sideline_check_sensor = 8;
  inline bool has_sideline_check_sensor() const;
  inline void clear_sideline_check_sensor();
  static const int kSidelineCheckSensorFieldNumber = 8;
  inline const ::OPMessage::judgeItem& sideline_check_sensor() const;
  inline ::OPMessage::judgeItem* mutable_sideline_check_sensor();
  inline ::OPMessage::judgeItem* release_sideline_check_sensor();
  inline void set_allocated_sideline_check_sensor(::OPMessage::judgeItem* sideline_check_sensor);

  // optional .OPMessage.voiceItem vi_40600_start_exam = 9;
  inline bool has_vi_40600_start_exam() const;
  inline void clear_vi_40600_start_exam();
  static const int kVi40600StartExamFieldNumber = 9;
  inline const ::OPMessage::voiceItem& vi_40600_start_exam() const;
  inline ::OPMessage::voiceItem* mutable_vi_40600_start_exam();
  inline ::OPMessage::voiceItem* release_vi_40600_start_exam();
  inline void set_allocated_vi_40600_start_exam(::OPMessage::voiceItem* vi_40600_start_exam);

  // optional .OPMessage.voiceItem vi_40600_end_exam = 10;
  inline bool has_vi_40600_end_exam() const;
  inline void clear_vi_40600_end_exam();
  static const int kVi40600EndExamFieldNumber = 10;
  inline const ::OPMessage::voiceItem& vi_40600_end_exam() const;
  inline ::OPMessage::voiceItem* mutable_vi_40600_end_exam();
  inline ::OPMessage::voiceItem* release_vi_40600_end_exam();
  inline void set_allocated_vi_40600_end_exam(::OPMessage::voiceItem* vi_40600_end_exam);

  // optional .OPMessage.voiceItem vi_40600_not_finish = 11;
  inline bool has_vi_40600_not_finish() const;
  inline void clear_vi_40600_not_finish();
  static const int kVi40600NotFinishFieldNumber = 11;
  inline const ::OPMessage::voiceItem& vi_40600_not_finish() const;
  inline ::OPMessage::voiceItem* mutable_vi_40600_not_finish();
  inline ::OPMessage::voiceItem* release_vi_40600_not_finish();
  inline void set_allocated_vi_40600_not_finish(::OPMessage::voiceItem* vi_40600_not_finish);

  // optional .OPMessage.voiceItem vi_40600_not_handbrake = 12;
  inline bool has_vi_40600_not_handbrake() const;
  inline void clear_vi_40600_not_handbrake();
  static const int kVi40600NotHandbrakeFieldNumber = 12;
  inline const ::OPMessage::voiceItem& vi_40600_not_handbrake() const;
  inline ::OPMessage::voiceItem* mutable_vi_40600_not_handbrake();
  inline ::OPMessage::voiceItem* release_vi_40600_not_handbrake();
  inline void set_allocated_vi_40600_not_handbrake(::OPMessage::voiceItem* vi_40600_not_handbrake);

  // optional .OPMessage.voiceItem vi_40600_not_close_door = 13;
  inline bool has_vi_40600_not_close_door() const;
  inline void clear_vi_40600_not_close_door();
  static const int kVi40600NotCloseDoorFieldNumber = 13;
  inline const ::OPMessage::voiceItem& vi_40600_not_close_door() const;
  inline ::OPMessage::voiceItem* mutable_vi_40600_not_close_door();
  inline ::OPMessage::voiceItem* release_vi_40600_not_close_door();
  inline void set_allocated_vi_40600_not_close_door(::OPMessage::voiceItem* vi_40600_not_close_door);

  // optional .OPMessage.voiceItem vi_40600_not_flameout = 14;
  inline bool has_vi_40600_not_flameout() const;
  inline void clear_vi_40600_not_flameout();
  static const int kVi40600NotFlameoutFieldNumber = 14;
  inline const ::OPMessage::voiceItem& vi_40600_not_flameout() const;
  inline ::OPMessage::voiceItem* mutable_vi_40600_not_flameout();
  inline ::OPMessage::voiceItem* release_vi_40600_not_flameout();
  inline void set_allocated_vi_40600_not_flameout(::OPMessage::voiceItem* vi_40600_not_flameout);

  // optional .OPMessage.voiceItem vi_40600_turn_lamp_use_error = 15;
  inline bool has_vi_40600_turn_lamp_use_error() const;
  inline void clear_vi_40600_turn_lamp_use_error();
  static const int kVi40600TurnLampUseErrorFieldNumber = 15;
  inline const ::OPMessage::voiceItem& vi_40600_turn_lamp_use_error() const;
  inline ::OPMessage::voiceItem* mutable_vi_40600_turn_lamp_use_error();
  inline ::OPMessage::voiceItem* release_vi_40600_turn_lamp_use_error();
  inline void set_allocated_vi_40600_turn_lamp_use_error(::OPMessage::voiceItem* vi_40600_turn_lamp_use_error);

  // optional .OPMessage.voiceItem vi_40600_turn_lamp_not_use = 16;
  inline bool has_vi_40600_turn_lamp_not_use() const;
  inline void clear_vi_40600_turn_lamp_not_use();
  static const int kVi40600TurnLampNotUseFieldNumber = 16;
  inline const ::OPMessage::voiceItem& vi_40600_turn_lamp_not_use() const;
  inline ::OPMessage::voiceItem* mutable_vi_40600_turn_lamp_not_use();
  inline ::OPMessage::voiceItem* release_vi_40600_turn_lamp_not_use();
  inline void set_allocated_vi_40600_turn_lamp_not_use(::OPMessage::voiceItem* vi_40600_turn_lamp_not_use);

  // optional .OPMessage.voiceItem vi_40600_handbrake_footbrake_order_error = 17;
  inline bool has_vi_40600_handbrake_footbrake_order_error() const;
  inline void clear_vi_40600_handbrake_footbrake_order_error();
  static const int kVi40600HandbrakeFootbrakeOrderErrorFieldNumber = 17;
  inline const ::OPMessage::voiceItem& vi_40600_handbrake_footbrake_order_error() const;
  inline ::OPMessage::voiceItem* mutable_vi_40600_handbrake_footbrake_order_error();
  inline ::OPMessage::voiceItem* release_vi_40600_handbrake_footbrake_order_error();
  inline void set_allocated_vi_40600_handbrake_footbrake_order_error(::OPMessage::voiceItem* vi_40600_handbrake_footbrake_order_error);

  // @@protoc_insertion_point(class_scope:OPMessage.Judge40600)
 private:
  inline void set_has_itemcode();
  inline void clear_has_itemcode();
  inline void set_has_itemname();
  inline void clear_has_itemname();
  inline void set_has_max_time();
  inline void clear_has_max_time();
  inline void set_has_max_trigger_distance();
  inline void clear_has_max_trigger_distance();
  inline void set_has_min_turn_signal_time();
  inline void clear_has_min_turn_signal_time();
  inline void set_has_finish_mode();
  inline void clear_has_finish_mode();
  inline void set_has_get_off_close_door_time();
  inline void clear_has_get_off_close_door_time();
  inline void set_has_sideline_check_sensor();
  inline void clear_has_sideline_check_sensor();
  inline void set_has_vi_40600_start_exam();
  inline void clear_has_vi_40600_start_exam();
  inline void set_has_vi_40600_end_exam();
  inline void clear_has_vi_40600_end_exam();
  inline void set_has_vi_40600_not_finish();
  inline void clear_has_vi_40600_not_finish();
  inline void set_has_vi_40600_not_handbrake();
  inline void clear_has_vi_40600_not_handbrake();
  inline void set_has_vi_40600_not_close_door();
  inline void clear_has_vi_40600_not_close_door();
  inline void set_has_vi_40600_not_flameout();
  inline void clear_has_vi_40600_not_flameout();
  inline void set_has_vi_40600_turn_lamp_use_error();
  inline void clear_has_vi_40600_turn_lamp_use_error();
  inline void set_has_vi_40600_turn_lamp_not_use();
  inline void clear_has_vi_40600_turn_lamp_not_use();
  inline void set_has_vi_40600_handbrake_footbrake_order_error();
  inline void clear_has_vi_40600_handbrake_footbrake_order_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* itemname_;
  ::OPMessage::judgeItem* max_time_;
  ::OPMessage::judgeItem* max_trigger_distance_;
  ::OPMessage::judgeItem* min_turn_signal_time_;
  ::OPMessage::judgeItem* finish_mode_;
  ::OPMessage::judgeItem* get_off_close_door_time_;
  ::OPMessage::judgeItem* sideline_check_sensor_;
  ::OPMessage::voiceItem* vi_40600_start_exam_;
  ::OPMessage::voiceItem* vi_40600_end_exam_;
  ::OPMessage::voiceItem* vi_40600_not_finish_;
  ::OPMessage::voiceItem* vi_40600_not_handbrake_;
  ::OPMessage::voiceItem* vi_40600_not_close_door_;
  ::OPMessage::voiceItem* vi_40600_not_flameout_;
  ::OPMessage::voiceItem* vi_40600_turn_lamp_use_error_;
  ::OPMessage::voiceItem* vi_40600_turn_lamp_not_use_;
  ::OPMessage::voiceItem* vi_40600_handbrake_footbrake_order_error_;
  ::google::protobuf::int32 itemcode_;
  friend void  protobuf_AddDesc_MessageKm3Config_2eproto();
  friend void protobuf_AssignDesc_MessageKm3Config_2eproto();
  friend void protobuf_ShutdownFile_MessageKm3Config_2eproto();

  void InitAsDefaultInstance();
  static Judge40600* default_instance_;
};
// -------------------------------------------------------------------

class Judge40601 : public ::google::protobuf::Message {
 public:
  Judge40601();
  virtual ~Judge40601();

  Judge40601(const Judge40601& from);

  inline Judge40601& operator=(const Judge40601& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Judge40601& default_instance();

  void Swap(Judge40601* other);

  // implements Message ----------------------------------------------

  Judge40601* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Judge40601& from);
  void MergeFrom(const Judge40601& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 itemCode = 1;
  inline bool has_itemcode() const;
  inline void clear_itemcode();
  static const int kItemCodeFieldNumber = 1;
  inline ::google::protobuf::int32 itemcode() const;
  inline void set_itemcode(::google::protobuf::int32 value);

  // optional string itemName = 2;
  inline bool has_itemname() const;
  inline void clear_itemname();
  static const int kItemNameFieldNumber = 2;
  inline const ::std::string& itemname() const;
  inline void set_itemname(const ::std::string& value);
  inline void set_itemname(const char* value);
  inline void set_itemname(const char* value, size_t size);
  inline ::std::string* mutable_itemname();
  inline ::std::string* release_itemname();
  inline void set_allocated_itemname(::std::string* itemname);

  // optional .OPMessage.judgeItem max_time = 3;
  inline bool has_max_time() const;
  inline void clear_max_time();
  static const int kMaxTimeFieldNumber = 3;
  inline const ::OPMessage::judgeItem& max_time() const;
  inline ::OPMessage::judgeItem* mutable_max_time();
  inline ::OPMessage::judgeItem* release_max_time();
  inline void set_allocated_max_time(::OPMessage::judgeItem* max_time);

  // optional .OPMessage.judgeItem max_trigger_distance = 4;
  inline bool has_max_trigger_distance() const;
  inline void clear_max_trigger_distance();
  static const int kMaxTriggerDistanceFieldNumber = 4;
  inline const ::OPMessage::judgeItem& max_trigger_distance() const;
  inline ::OPMessage::judgeItem* mutable_max_trigger_distance();
  inline ::OPMessage::judgeItem* release_max_trigger_distance();
  inline void set_allocated_max_trigger_distance(::OPMessage::judgeItem* max_trigger_distance);

  // optional .OPMessage.judgeItem min_turn_signal_time = 5;
  inline bool has_min_turn_signal_time() const;
  inline void clear_min_turn_signal_time();
  static const int kMinTurnSignalTimeFieldNumber = 5;
  inline const ::OPMessage::judgeItem& min_turn_signal_time() const;
  inline ::OPMessage::judgeItem* mutable_min_turn_signal_time();
  inline ::OPMessage::judgeItem* release_min_turn_signal_time();
  inline void set_allocated_min_turn_signal_time(::OPMessage::judgeItem* min_turn_signal_time);

  // optional .OPMessage.judgeItem finish_mode = 6;
  inline bool has_finish_mode() const;
  inline void clear_finish_mode();
  static const int kFinishModeFieldNumber = 6;
  inline const ::OPMessage::judgeItem& finish_mode() const;
  inline ::OPMessage::judgeItem* mutable_finish_mode();
  inline ::OPMessage::judgeItem* release_finish_mode();
  inline void set_allocated_finish_mode(::OPMessage::judgeItem* finish_mode);

  // optional .OPMessage.judgeItem min_horn_time = 7;
  inline bool has_min_horn_time() const;
  inline void clear_min_horn_time();
  static const int kMinHornTimeFieldNumber = 7;
  inline const ::OPMessage::judgeItem& min_horn_time() const;
  inline ::OPMessage::judgeItem* mutable_min_horn_time();
  inline ::OPMessage::judgeItem* release_min_horn_time();
  inline void set_allocated_min_horn_time(::OPMessage::judgeItem* min_horn_time);

  // optional .OPMessage.judgeItem sideline_check_sensor = 8;
  inline bool has_sideline_check_sensor() const;
  inline void clear_sideline_check_sensor();
  static const int kSidelineCheckSensorFieldNumber = 8;
  inline const ::OPMessage::judgeItem& sideline_check_sensor() const;
  inline ::OPMessage::judgeItem* mutable_sideline_check_sensor();
  inline ::OPMessage::judgeItem* release_sideline_check_sensor();
  inline void set_allocated_sideline_check_sensor(::OPMessage::judgeItem* sideline_check_sensor);

  // optional .OPMessage.voiceItem vi_40600_sideline_error = 9;
  inline bool has_vi_40600_sideline_error() const;
  inline void clear_vi_40600_sideline_error();
  static const int kVi40600SidelineErrorFieldNumber = 9;
  inline const ::OPMessage::voiceItem& vi_40600_sideline_error() const;
  inline ::OPMessage::voiceItem* mutable_vi_40600_sideline_error();
  inline ::OPMessage::voiceItem* release_vi_40600_sideline_error();
  inline void set_allocated_vi_40600_sideline_error(::OPMessage::voiceItem* vi_40600_sideline_error);

  // optional .OPMessage.voiceItem vi_40601_start_exam = 10;
  inline bool has_vi_40601_start_exam() const;
  inline void clear_vi_40601_start_exam();
  static const int kVi40601StartExamFieldNumber = 10;
  inline const ::OPMessage::voiceItem& vi_40601_start_exam() const;
  inline ::OPMessage::voiceItem* mutable_vi_40601_start_exam();
  inline ::OPMessage::voiceItem* release_vi_40601_start_exam();
  inline void set_allocated_vi_40601_start_exam(::OPMessage::voiceItem* vi_40601_start_exam);

  // optional .OPMessage.voiceItem vi_40601_end_exam = 11;
  inline bool has_vi_40601_end_exam() const;
  inline void clear_vi_40601_end_exam();
  static const int kVi40601EndExamFieldNumber = 11;
  inline const ::OPMessage::voiceItem& vi_40601_end_exam() const;
  inline ::OPMessage::voiceItem* mutable_vi_40601_end_exam();
  inline ::OPMessage::voiceItem* release_vi_40601_end_exam();
  inline void set_allocated_vi_40601_end_exam(::OPMessage::voiceItem* vi_40601_end_exam);

  // optional .OPMessage.voiceItem vi_40601_start_driving = 12;
  inline bool has_vi_40601_start_driving() const;
  inline void clear_vi_40601_start_driving();
  static const int kVi40601StartDrivingFieldNumber = 12;
  inline const ::OPMessage::voiceItem& vi_40601_start_driving() const;
  inline ::OPMessage::voiceItem* mutable_vi_40601_start_driving();
  inline ::OPMessage::voiceItem* release_vi_40601_start_driving();
  inline void set_allocated_vi_40601_start_driving(::OPMessage::voiceItem* vi_40601_start_driving);

  // optional .OPMessage.voiceItem vi_40601_finish_driving = 13;
  inline bool has_vi_40601_finish_driving() const;
  inline void clear_vi_40601_finish_driving();
  static const int kVi40601FinishDrivingFieldNumber = 13;
  inline const ::OPMessage::voiceItem& vi_40601_finish_driving() const;
  inline ::OPMessage::voiceItem* mutable_vi_40601_finish_driving();
  inline ::OPMessage::voiceItem* release_vi_40601_finish_driving();
  inline void set_allocated_vi_40601_finish_driving(::OPMessage::voiceItem* vi_40601_finish_driving);

  // optional .OPMessage.voiceItem vi_40601_not_finish = 14;
  inline bool has_vi_40601_not_finish() const;
  inline void clear_vi_40601_not_finish();
  static const int kVi40601NotFinishFieldNumber = 14;
  inline const ::OPMessage::voiceItem& vi_40601_not_finish() const;
  inline ::OPMessage::voiceItem* mutable_vi_40601_not_finish();
  inline ::OPMessage::voiceItem* release_vi_40601_not_finish();
  inline void set_allocated_vi_40601_not_finish(::OPMessage::voiceItem* vi_40601_not_finish);

  // optional .OPMessage.voiceItem vi_40601_turn_lamp_use_error = 15;
  inline bool has_vi_40601_turn_lamp_use_error() const;
  inline void clear_vi_40601_turn_lamp_use_error();
  static const int kVi40601TurnLampUseErrorFieldNumber = 15;
  inline const ::OPMessage::voiceItem& vi_40601_turn_lamp_use_error() const;
  inline ::OPMessage::voiceItem* mutable_vi_40601_turn_lamp_use_error();
  inline ::OPMessage::voiceItem* release_vi_40601_turn_lamp_use_error();
  inline void set_allocated_vi_40601_turn_lamp_use_error(::OPMessage::voiceItem* vi_40601_turn_lamp_use_error);

  // optional .OPMessage.voiceItem vi_40601_turn_lamp_not_use = 16;
  inline bool has_vi_40601_turn_lamp_not_use() const;
  inline void clear_vi_40601_turn_lamp_not_use();
  static const int kVi40601TurnLampNotUseFieldNumber = 16;
  inline const ::OPMessage::voiceItem& vi_40601_turn_lamp_not_use() const;
  inline ::OPMessage::voiceItem* mutable_vi_40601_turn_lamp_not_use();
  inline ::OPMessage::voiceItem* release_vi_40601_turn_lamp_not_use();
  inline void set_allocated_vi_40601_turn_lamp_not_use(::OPMessage::voiceItem* vi_40601_turn_lamp_not_use);

  // optional .OPMessage.voiceItem vi_40601_not_handbrake = 17;
  inline bool has_vi_40601_not_handbrake() const;
  inline void clear_vi_40601_not_handbrake();
  static const int kVi40601NotHandbrakeFieldNumber = 17;
  inline const ::OPMessage::voiceItem& vi_40601_not_handbrake() const;
  inline ::OPMessage::voiceItem* mutable_vi_40601_not_handbrake();
  inline ::OPMessage::voiceItem* release_vi_40601_not_handbrake();
  inline void set_allocated_vi_40601_not_handbrake(::OPMessage::voiceItem* vi_40601_not_handbrake);

  // optional .OPMessage.voiceItem vi_40601_handbrake_footbrake_order_error = 18;
  inline bool has_vi_40601_handbrake_footbrake_order_error() const;
  inline void clear_vi_40601_handbrake_footbrake_order_error();
  static const int kVi40601HandbrakeFootbrakeOrderErrorFieldNumber = 18;
  inline const ::OPMessage::voiceItem& vi_40601_handbrake_footbrake_order_error() const;
  inline ::OPMessage::voiceItem* mutable_vi_40601_handbrake_footbrake_order_error();
  inline ::OPMessage::voiceItem* release_vi_40601_handbrake_footbrake_order_error();
  inline void set_allocated_vi_40601_handbrake_footbrake_order_error(::OPMessage::voiceItem* vi_40601_handbrake_footbrake_order_error);

  // optional .OPMessage.voiceItem vi_40601_horn_not_use = 19;
  inline bool has_vi_40601_horn_not_use() const;
  inline void clear_vi_40601_horn_not_use();
  static const int kVi40601HornNotUseFieldNumber = 19;
  inline const ::OPMessage::voiceItem& vi_40601_horn_not_use() const;
  inline ::OPMessage::voiceItem* mutable_vi_40601_horn_not_use();
  inline ::OPMessage::voiceItem* release_vi_40601_horn_not_use();
  inline void set_allocated_vi_40601_horn_not_use(::OPMessage::voiceItem* vi_40601_horn_not_use);

  // optional .OPMessage.voiceItem vi_40601_sideline_error = 20;
  inline bool has_vi_40601_sideline_error() const;
  inline void clear_vi_40601_sideline_error();
  static const int kVi40601SidelineErrorFieldNumber = 20;
  inline const ::OPMessage::voiceItem& vi_40601_sideline_error() const;
  inline ::OPMessage::voiceItem* mutable_vi_40601_sideline_error();
  inline ::OPMessage::voiceItem* release_vi_40601_sideline_error();
  inline void set_allocated_vi_40601_sideline_error(::OPMessage::voiceItem* vi_40601_sideline_error);

  // @@protoc_insertion_point(class_scope:OPMessage.Judge40601)
 private:
  inline void set_has_itemcode();
  inline void clear_has_itemcode();
  inline void set_has_itemname();
  inline void clear_has_itemname();
  inline void set_has_max_time();
  inline void clear_has_max_time();
  inline void set_has_max_trigger_distance();
  inline void clear_has_max_trigger_distance();
  inline void set_has_min_turn_signal_time();
  inline void clear_has_min_turn_signal_time();
  inline void set_has_finish_mode();
  inline void clear_has_finish_mode();
  inline void set_has_min_horn_time();
  inline void clear_has_min_horn_time();
  inline void set_has_sideline_check_sensor();
  inline void clear_has_sideline_check_sensor();
  inline void set_has_vi_40600_sideline_error();
  inline void clear_has_vi_40600_sideline_error();
  inline void set_has_vi_40601_start_exam();
  inline void clear_has_vi_40601_start_exam();
  inline void set_has_vi_40601_end_exam();
  inline void clear_has_vi_40601_end_exam();
  inline void set_has_vi_40601_start_driving();
  inline void clear_has_vi_40601_start_driving();
  inline void set_has_vi_40601_finish_driving();
  inline void clear_has_vi_40601_finish_driving();
  inline void set_has_vi_40601_not_finish();
  inline void clear_has_vi_40601_not_finish();
  inline void set_has_vi_40601_turn_lamp_use_error();
  inline void clear_has_vi_40601_turn_lamp_use_error();
  inline void set_has_vi_40601_turn_lamp_not_use();
  inline void clear_has_vi_40601_turn_lamp_not_use();
  inline void set_has_vi_40601_not_handbrake();
  inline void clear_has_vi_40601_not_handbrake();
  inline void set_has_vi_40601_handbrake_footbrake_order_error();
  inline void clear_has_vi_40601_handbrake_footbrake_order_error();
  inline void set_has_vi_40601_horn_not_use();
  inline void clear_has_vi_40601_horn_not_use();
  inline void set_has_vi_40601_sideline_error();
  inline void clear_has_vi_40601_sideline_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* itemname_;
  ::OPMessage::judgeItem* max_time_;
  ::OPMessage::judgeItem* max_trigger_distance_;
  ::OPMessage::judgeItem* min_turn_signal_time_;
  ::OPMessage::judgeItem* finish_mode_;
  ::OPMessage::judgeItem* min_horn_time_;
  ::OPMessage::judgeItem* sideline_check_sensor_;
  ::OPMessage::voiceItem* vi_40600_sideline_error_;
  ::OPMessage::voiceItem* vi_40601_start_exam_;
  ::OPMessage::voiceItem* vi_40601_end_exam_;
  ::OPMessage::voiceItem* vi_40601_start_driving_;
  ::OPMessage::voiceItem* vi_40601_finish_driving_;
  ::OPMessage::voiceItem* vi_40601_not_finish_;
  ::OPMessage::voiceItem* vi_40601_turn_lamp_use_error_;
  ::OPMessage::voiceItem* vi_40601_turn_lamp_not_use_;
  ::OPMessage::voiceItem* vi_40601_not_handbrake_;
  ::OPMessage::voiceItem* vi_40601_handbrake_footbrake_order_error_;
  ::OPMessage::voiceItem* vi_40601_horn_not_use_;
  ::OPMessage::voiceItem* vi_40601_sideline_error_;
  ::google::protobuf::int32 itemcode_;
  friend void  protobuf_AddDesc_MessageKm3Config_2eproto();
  friend void protobuf_AssignDesc_MessageKm3Config_2eproto();
  friend void protobuf_ShutdownFile_MessageKm3Config_2eproto();

  void InitAsDefaultInstance();
  static Judge40601* default_instance_;
};
// -------------------------------------------------------------------

class Judge50001 : public ::google::protobuf::Message {
 public:
  Judge50001();
  virtual ~Judge50001();

  Judge50001(const Judge50001& from);

  inline Judge50001& operator=(const Judge50001& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Judge50001& default_instance();

  void Swap(Judge50001* other);

  // implements Message ----------------------------------------------

  Judge50001* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Judge50001& from);
  void MergeFrom(const Judge50001& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 itemCode = 1;
  inline bool has_itemcode() const;
  inline void clear_itemcode();
  static const int kItemCodeFieldNumber = 1;
  inline ::google::protobuf::int32 itemcode() const;
  inline void set_itemcode(::google::protobuf::int32 value);

  // optional string itemName = 2;
  inline bool has_itemname() const;
  inline void clear_itemname();
  static const int kItemNameFieldNumber = 2;
  inline const ::std::string& itemname() const;
  inline void set_itemname(const ::std::string& value);
  inline void set_itemname(const char* value);
  inline void set_itemname(const char* value, size_t size);
  inline ::std::string* mutable_itemname();
  inline ::std::string* release_itemname();
  inline void set_allocated_itemname(::std::string* itemname);

  // optional .OPMessage.judgeItem max_time = 3;
  inline bool has_max_time() const;
  inline void clear_max_time();
  static const int kMaxTimeFieldNumber = 3;
  inline const ::OPMessage::judgeItem& max_time() const;
  inline ::OPMessage::judgeItem* mutable_max_time();
  inline ::OPMessage::judgeItem* release_max_time();
  inline void set_allocated_max_time(::OPMessage::judgeItem* max_time);

  // optional .OPMessage.judgeItem max_speed = 4;
  inline bool has_max_speed() const;
  inline void clear_max_speed();
  static const int kMaxSpeedFieldNumber = 4;
  inline const ::OPMessage::judgeItem& max_speed() const;
  inline ::OPMessage::judgeItem* mutable_max_speed();
  inline ::OPMessage::judgeItem* release_max_speed();
  inline void set_allocated_max_speed(::OPMessage::judgeItem* max_speed);

  // optional .OPMessage.judgeItem judge_mode = 5;
  inline bool has_judge_mode() const;
  inline void clear_judge_mode();
  static const int kJudgeModeFieldNumber = 5;
  inline const ::OPMessage::judgeItem& judge_mode() const;
  inline ::OPMessage::judgeItem* mutable_judge_mode();
  inline ::OPMessage::judgeItem* release_judge_mode();
  inline void set_allocated_judge_mode(::OPMessage::judgeItem* judge_mode);

  // optional .OPMessage.judgeItem min_left_turn_signal_time = 6;
  inline bool has_min_left_turn_signal_time() const;
  inline void clear_min_left_turn_signal_time();
  static const int kMinLeftTurnSignalTimeFieldNumber = 6;
  inline const ::OPMessage::judgeItem& min_left_turn_signal_time() const;
  inline ::OPMessage::judgeItem* mutable_min_left_turn_signal_time();
  inline ::OPMessage::judgeItem* release_min_left_turn_signal_time();
  inline void set_allocated_min_left_turn_signal_time(::OPMessage::judgeItem* min_left_turn_signal_time);

  // optional .OPMessage.judgeItem min_right_turn_signal_time = 7;
  inline bool has_min_right_turn_signal_time() const;
  inline void clear_min_right_turn_signal_time();
  static const int kMinRightTurnSignalTimeFieldNumber = 7;
  inline const ::OPMessage::judgeItem& min_right_turn_signal_time() const;
  inline ::OPMessage::judgeItem* mutable_min_right_turn_signal_time();
  inline ::OPMessage::judgeItem* release_min_right_turn_signal_time();
  inline void set_allocated_min_right_turn_signal_time(::OPMessage::judgeItem* min_right_turn_signal_time);

  // optional .OPMessage.judgeItem need_near_far_lamp_flash = 8;
  inline bool has_need_near_far_lamp_flash() const;
  inline void clear_need_near_far_lamp_flash();
  static const int kNeedNearFarLampFlashFieldNumber = 8;
  inline const ::OPMessage::judgeItem& need_near_far_lamp_flash() const;
  inline ::OPMessage::judgeItem* mutable_need_near_far_lamp_flash();
  inline ::OPMessage::judgeItem* release_need_near_far_lamp_flash();
  inline void set_allocated_need_near_far_lamp_flash(::OPMessage::judgeItem* need_near_far_lamp_flash);

  // optional .OPMessage.judgeItem check_far_lamp = 9;
  inline bool has_check_far_lamp() const;
  inline void clear_check_far_lamp();
  static const int kCheckFarLampFieldNumber = 9;
  inline const ::OPMessage::judgeItem& check_far_lamp() const;
  inline ::OPMessage::judgeItem* mutable_check_far_lamp();
  inline ::OPMessage::judgeItem* release_check_far_lamp();
  inline void set_allocated_check_far_lamp(::OPMessage::judgeItem* check_far_lamp);

  // optional .OPMessage.judgeItem check_near_lamp = 10;
  inline bool has_check_near_lamp() const;
  inline void clear_check_near_lamp();
  static const int kCheckNearLampFieldNumber = 10;
  inline const ::OPMessage::judgeItem& check_near_lamp() const;
  inline ::OPMessage::judgeItem* mutable_check_near_lamp();
  inline ::OPMessage::judgeItem* release_check_near_lamp();
  inline void set_allocated_check_near_lamp(::OPMessage::judgeItem* check_near_lamp);

  // optional .OPMessage.voiceItem vi_50001_start_exam = 11;
  inline bool has_vi_50001_start_exam() const;
  inline void clear_vi_50001_start_exam();
  static const int kVi50001StartExamFieldNumber = 11;
  inline const ::OPMessage::voiceItem& vi_50001_start_exam() const;
  inline ::OPMessage::voiceItem* mutable_vi_50001_start_exam();
  inline ::OPMessage::voiceItem* release_vi_50001_start_exam();
  inline void set_allocated_vi_50001_start_exam(::OPMessage::voiceItem* vi_50001_start_exam);

  // optional .OPMessage.voiceItem vi_50001_end_exam = 12;
  inline bool has_vi_50001_end_exam() const;
  inline void clear_vi_50001_end_exam();
  static const int kVi50001EndExamFieldNumber = 12;
  inline const ::OPMessage::voiceItem& vi_50001_end_exam() const;
  inline ::OPMessage::voiceItem* mutable_vi_50001_end_exam();
  inline ::OPMessage::voiceItem* release_vi_50001_end_exam();
  inline void set_allocated_vi_50001_end_exam(::OPMessage::voiceItem* vi_50001_end_exam);

  // optional .OPMessage.voiceItem vi_50001_not_slowdown = 13;
  inline bool has_vi_50001_not_slowdown() const;
  inline void clear_vi_50001_not_slowdown();
  static const int kVi50001NotSlowdownFieldNumber = 13;
  inline const ::OPMessage::voiceItem& vi_50001_not_slowdown() const;
  inline ::OPMessage::voiceItem* mutable_vi_50001_not_slowdown();
  inline ::OPMessage::voiceItem* release_vi_50001_not_slowdown();
  inline void set_allocated_vi_50001_not_slowdown(::OPMessage::voiceItem* vi_50001_not_slowdown);

  // optional .OPMessage.voiceItem vi_50001_turn_lamp_use_error = 14;
  inline bool has_vi_50001_turn_lamp_use_error() const;
  inline void clear_vi_50001_turn_lamp_use_error();
  static const int kVi50001TurnLampUseErrorFieldNumber = 14;
  inline const ::OPMessage::voiceItem& vi_50001_turn_lamp_use_error() const;
  inline ::OPMessage::voiceItem* mutable_vi_50001_turn_lamp_use_error();
  inline ::OPMessage::voiceItem* release_vi_50001_turn_lamp_use_error();
  inline void set_allocated_vi_50001_turn_lamp_use_error(::OPMessage::voiceItem* vi_50001_turn_lamp_use_error);

  // optional .OPMessage.voiceItem vi_50001_turn_lamp_not_use = 15;
  inline bool has_vi_50001_turn_lamp_not_use() const;
  inline void clear_vi_50001_turn_lamp_not_use();
  static const int kVi50001TurnLampNotUseFieldNumber = 15;
  inline const ::OPMessage::voiceItem& vi_50001_turn_lamp_not_use() const;
  inline ::OPMessage::voiceItem* mutable_vi_50001_turn_lamp_not_use();
  inline ::OPMessage::voiceItem* release_vi_50001_turn_lamp_not_use();
  inline void set_allocated_vi_50001_turn_lamp_not_use(::OPMessage::voiceItem* vi_50001_turn_lamp_not_use);

  // optional .OPMessage.voiceItem vi_50001_horn_not_use = 16;
  inline bool has_vi_50001_horn_not_use() const;
  inline void clear_vi_50001_horn_not_use();
  static const int kVi50001HornNotUseFieldNumber = 16;
  inline const ::OPMessage::voiceItem& vi_50001_horn_not_use() const;
  inline ::OPMessage::voiceItem* mutable_vi_50001_horn_not_use();
  inline ::OPMessage::voiceItem* release_vi_50001_horn_not_use();
  inline void set_allocated_vi_50001_horn_not_use(::OPMessage::voiceItem* vi_50001_horn_not_use);

  // optional .OPMessage.voiceItem vi_50001_not_open_near_lamp = 17;
  inline bool has_vi_50001_not_open_near_lamp() const;
  inline void clear_vi_50001_not_open_near_lamp();
  static const int kVi50001NotOpenNearLampFieldNumber = 17;
  inline const ::OPMessage::voiceItem& vi_50001_not_open_near_lamp() const;
  inline ::OPMessage::voiceItem* mutable_vi_50001_not_open_near_lamp();
  inline ::OPMessage::voiceItem* release_vi_50001_not_open_near_lamp();
  inline void set_allocated_vi_50001_not_open_near_lamp(::OPMessage::voiceItem* vi_50001_not_open_near_lamp);

  // optional .OPMessage.voiceItem vi_50001_not_open_far_lamp = 18;
  inline bool has_vi_50001_not_open_far_lamp() const;
  inline void clear_vi_50001_not_open_far_lamp();
  static const int kVi50001NotOpenFarLampFieldNumber = 18;
  inline const ::OPMessage::voiceItem& vi_50001_not_open_far_lamp() const;
  inline ::OPMessage::voiceItem* mutable_vi_50001_not_open_far_lamp();
  inline ::OPMessage::voiceItem* release_vi_50001_not_open_far_lamp();
  inline void set_allocated_vi_50001_not_open_far_lamp(::OPMessage::voiceItem* vi_50001_not_open_far_lamp);

  // @@protoc_insertion_point(class_scope:OPMessage.Judge50001)
 private:
  inline void set_has_itemcode();
  inline void clear_has_itemcode();
  inline void set_has_itemname();
  inline void clear_has_itemname();
  inline void set_has_max_time();
  inline void clear_has_max_time();
  inline void set_has_max_speed();
  inline void clear_has_max_speed();
  inline void set_has_judge_mode();
  inline void clear_has_judge_mode();
  inline void set_has_min_left_turn_signal_time();
  inline void clear_has_min_left_turn_signal_time();
  inline void set_has_min_right_turn_signal_time();
  inline void clear_has_min_right_turn_signal_time();
  inline void set_has_need_near_far_lamp_flash();
  inline void clear_has_need_near_far_lamp_flash();
  inline void set_has_check_far_lamp();
  inline void clear_has_check_far_lamp();
  inline void set_has_check_near_lamp();
  inline void clear_has_check_near_lamp();
  inline void set_has_vi_50001_start_exam();
  inline void clear_has_vi_50001_start_exam();
  inline void set_has_vi_50001_end_exam();
  inline void clear_has_vi_50001_end_exam();
  inline void set_has_vi_50001_not_slowdown();
  inline void clear_has_vi_50001_not_slowdown();
  inline void set_has_vi_50001_turn_lamp_use_error();
  inline void clear_has_vi_50001_turn_lamp_use_error();
  inline void set_has_vi_50001_turn_lamp_not_use();
  inline void clear_has_vi_50001_turn_lamp_not_use();
  inline void set_has_vi_50001_horn_not_use();
  inline void clear_has_vi_50001_horn_not_use();
  inline void set_has_vi_50001_not_open_near_lamp();
  inline void clear_has_vi_50001_not_open_near_lamp();
  inline void set_has_vi_50001_not_open_far_lamp();
  inline void clear_has_vi_50001_not_open_far_lamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* itemname_;
  ::OPMessage::judgeItem* max_time_;
  ::OPMessage::judgeItem* max_speed_;
  ::OPMessage::judgeItem* judge_mode_;
  ::OPMessage::judgeItem* min_left_turn_signal_time_;
  ::OPMessage::judgeItem* min_right_turn_signal_time_;
  ::OPMessage::judgeItem* need_near_far_lamp_flash_;
  ::OPMessage::judgeItem* check_far_lamp_;
  ::OPMessage::judgeItem* check_near_lamp_;
  ::OPMessage::voiceItem* vi_50001_start_exam_;
  ::OPMessage::voiceItem* vi_50001_end_exam_;
  ::OPMessage::voiceItem* vi_50001_not_slowdown_;
  ::OPMessage::voiceItem* vi_50001_turn_lamp_use_error_;
  ::OPMessage::voiceItem* vi_50001_turn_lamp_not_use_;
  ::OPMessage::voiceItem* vi_50001_horn_not_use_;
  ::OPMessage::voiceItem* vi_50001_not_open_near_lamp_;
  ::OPMessage::voiceItem* vi_50001_not_open_far_lamp_;
  ::google::protobuf::int32 itemcode_;
  friend void  protobuf_AddDesc_MessageKm3Config_2eproto();
  friend void protobuf_AssignDesc_MessageKm3Config_2eproto();
  friend void protobuf_ShutdownFile_MessageKm3Config_2eproto();

  void InitAsDefaultInstance();
  static Judge50001* default_instance_;
};
// -------------------------------------------------------------------

class Judge50002 : public ::google::protobuf::Message {
 public:
  Judge50002();
  virtual ~Judge50002();

  Judge50002(const Judge50002& from);

  inline Judge50002& operator=(const Judge50002& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Judge50002& default_instance();

  void Swap(Judge50002* other);

  // implements Message ----------------------------------------------

  Judge50002* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Judge50002& from);
  void MergeFrom(const Judge50002& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 itemCode = 1;
  inline bool has_itemcode() const;
  inline void clear_itemcode();
  static const int kItemCodeFieldNumber = 1;
  inline ::google::protobuf::int32 itemcode() const;
  inline void set_itemcode(::google::protobuf::int32 value);

  // optional string itemName = 2;
  inline bool has_itemname() const;
  inline void clear_itemname();
  static const int kItemNameFieldNumber = 2;
  inline const ::std::string& itemname() const;
  inline void set_itemname(const ::std::string& value);
  inline void set_itemname(const char* value);
  inline void set_itemname(const char* value, size_t size);
  inline ::std::string* mutable_itemname();
  inline ::std::string* release_itemname();
  inline void set_allocated_itemname(::std::string* itemname);

  // optional .OPMessage.judgeItem max_time = 3;
  inline bool has_max_time() const;
  inline void clear_max_time();
  static const int kMaxTimeFieldNumber = 3;
  inline const ::OPMessage::judgeItem& max_time() const;
  inline ::OPMessage::judgeItem* mutable_max_time();
  inline ::OPMessage::judgeItem* release_max_time();
  inline void set_allocated_max_time(::OPMessage::judgeItem* max_time);

  // optional .OPMessage.judgeItem max_speed = 4;
  inline bool has_max_speed() const;
  inline void clear_max_speed();
  static const int kMaxSpeedFieldNumber = 4;
  inline const ::OPMessage::judgeItem& max_speed() const;
  inline ::OPMessage::judgeItem* mutable_max_speed();
  inline ::OPMessage::judgeItem* release_max_speed();
  inline void set_allocated_max_speed(::OPMessage::judgeItem* max_speed);

  // optional .OPMessage.judgeItem judge_mode = 5;
  inline bool has_judge_mode() const;
  inline void clear_judge_mode();
  static const int kJudgeModeFieldNumber = 5;
  inline const ::OPMessage::judgeItem& judge_mode() const;
  inline ::OPMessage::judgeItem* mutable_judge_mode();
  inline ::OPMessage::judgeItem* release_judge_mode();
  inline void set_allocated_judge_mode(::OPMessage::judgeItem* judge_mode);

  // optional .OPMessage.judgeItem min_left_turn_signal_time = 6;
  inline bool has_min_left_turn_signal_time() const;
  inline void clear_min_left_turn_signal_time();
  static const int kMinLeftTurnSignalTimeFieldNumber = 6;
  inline const ::OPMessage::judgeItem& min_left_turn_signal_time() const;
  inline ::OPMessage::judgeItem* mutable_min_left_turn_signal_time();
  inline ::OPMessage::judgeItem* release_min_left_turn_signal_time();
  inline void set_allocated_min_left_turn_signal_time(::OPMessage::judgeItem* min_left_turn_signal_time);

  // optional .OPMessage.judgeItem min_right_turn_signal_time = 7;
  inline bool has_min_right_turn_signal_time() const;
  inline void clear_min_right_turn_signal_time();
  static const int kMinRightTurnSignalTimeFieldNumber = 7;
  inline const ::OPMessage::judgeItem& min_right_turn_signal_time() const;
  inline ::OPMessage::judgeItem* mutable_min_right_turn_signal_time();
  inline ::OPMessage::judgeItem* release_min_right_turn_signal_time();
  inline void set_allocated_min_right_turn_signal_time(::OPMessage::judgeItem* min_right_turn_signal_time);

  // optional .OPMessage.judgeItem need_near_far_lamp_flash = 8;
  inline bool has_need_near_far_lamp_flash() const;
  inline void clear_need_near_far_lamp_flash();
  static const int kNeedNearFarLampFlashFieldNumber = 8;
  inline const ::OPMessage::judgeItem& need_near_far_lamp_flash() const;
  inline ::OPMessage::judgeItem* mutable_need_near_far_lamp_flash();
  inline ::OPMessage::judgeItem* release_need_near_far_lamp_flash();
  inline void set_allocated_need_near_far_lamp_flash(::OPMessage::judgeItem* need_near_far_lamp_flash);

  // optional .OPMessage.judgeItem check_far_lamp = 9;
  inline bool has_check_far_lamp() const;
  inline void clear_check_far_lamp();
  static const int kCheckFarLampFieldNumber = 9;
  inline const ::OPMessage::judgeItem& check_far_lamp() const;
  inline ::OPMessage::judgeItem* mutable_check_far_lamp();
  inline ::OPMessage::judgeItem* release_check_far_lamp();
  inline void set_allocated_check_far_lamp(::OPMessage::judgeItem* check_far_lamp);

  // optional .OPMessage.judgeItem check_near_lamp = 10;
  inline bool has_check_near_lamp() const;
  inline void clear_check_near_lamp();
  static const int kCheckNearLampFieldNumber = 10;
  inline const ::OPMessage::judgeItem& check_near_lamp() const;
  inline ::OPMessage::judgeItem* mutable_check_near_lamp();
  inline ::OPMessage::judgeItem* release_check_near_lamp();
  inline void set_allocated_check_near_lamp(::OPMessage::judgeItem* check_near_lamp);

  // optional .OPMessage.voiceItem vi_50002_start_exam = 11;
  inline bool has_vi_50002_start_exam() const;
  inline void clear_vi_50002_start_exam();
  static const int kVi50002StartExamFieldNumber = 11;
  inline const ::OPMessage::voiceItem& vi_50002_start_exam() const;
  inline ::OPMessage::voiceItem* mutable_vi_50002_start_exam();
  inline ::OPMessage::voiceItem* release_vi_50002_start_exam();
  inline void set_allocated_vi_50002_start_exam(::OPMessage::voiceItem* vi_50002_start_exam);

  // optional .OPMessage.voiceItem vi_50002_end_exam = 12;
  inline bool has_vi_50002_end_exam() const;
  inline void clear_vi_50002_end_exam();
  static const int kVi50002EndExamFieldNumber = 12;
  inline const ::OPMessage::voiceItem& vi_50002_end_exam() const;
  inline ::OPMessage::voiceItem* mutable_vi_50002_end_exam();
  inline ::OPMessage::voiceItem* release_vi_50002_end_exam();
  inline void set_allocated_vi_50002_end_exam(::OPMessage::voiceItem* vi_50002_end_exam);

  // optional .OPMessage.voiceItem vi_50002_not_slowdown = 13;
  inline bool has_vi_50002_not_slowdown() const;
  inline void clear_vi_50002_not_slowdown();
  static const int kVi50002NotSlowdownFieldNumber = 13;
  inline const ::OPMessage::voiceItem& vi_50002_not_slowdown() const;
  inline ::OPMessage::voiceItem* mutable_vi_50002_not_slowdown();
  inline ::OPMessage::voiceItem* release_vi_50002_not_slowdown();
  inline void set_allocated_vi_50002_not_slowdown(::OPMessage::voiceItem* vi_50002_not_slowdown);

  // optional .OPMessage.voiceItem vi_50002_turn_lamp_use_error = 14;
  inline bool has_vi_50002_turn_lamp_use_error() const;
  inline void clear_vi_50002_turn_lamp_use_error();
  static const int kVi50002TurnLampUseErrorFieldNumber = 14;
  inline const ::OPMessage::voiceItem& vi_50002_turn_lamp_use_error() const;
  inline ::OPMessage::voiceItem* mutable_vi_50002_turn_lamp_use_error();
  inline ::OPMessage::voiceItem* release_vi_50002_turn_lamp_use_error();
  inline void set_allocated_vi_50002_turn_lamp_use_error(::OPMessage::voiceItem* vi_50002_turn_lamp_use_error);

  // optional .OPMessage.voiceItem vi_50002_turn_lamp_not_use = 15;
  inline bool has_vi_50002_turn_lamp_not_use() const;
  inline void clear_vi_50002_turn_lamp_not_use();
  static const int kVi50002TurnLampNotUseFieldNumber = 15;
  inline const ::OPMessage::voiceItem& vi_50002_turn_lamp_not_use() const;
  inline ::OPMessage::voiceItem* mutable_vi_50002_turn_lamp_not_use();
  inline ::OPMessage::voiceItem* release_vi_50002_turn_lamp_not_use();
  inline void set_allocated_vi_50002_turn_lamp_not_use(::OPMessage::voiceItem* vi_50002_turn_lamp_not_use);

  // optional .OPMessage.voiceItem vi_50002_horn_not_use = 16;
  inline bool has_vi_50002_horn_not_use() const;
  inline void clear_vi_50002_horn_not_use();
  static const int kVi50002HornNotUseFieldNumber = 16;
  inline const ::OPMessage::voiceItem& vi_50002_horn_not_use() const;
  inline ::OPMessage::voiceItem* mutable_vi_50002_horn_not_use();
  inline ::OPMessage::voiceItem* release_vi_50002_horn_not_use();
  inline void set_allocated_vi_50002_horn_not_use(::OPMessage::voiceItem* vi_50002_horn_not_use);

  // optional .OPMessage.voiceItem vi_50002_not_open_near_lamp = 17;
  inline bool has_vi_50002_not_open_near_lamp() const;
  inline void clear_vi_50002_not_open_near_lamp();
  static const int kVi50002NotOpenNearLampFieldNumber = 17;
  inline const ::OPMessage::voiceItem& vi_50002_not_open_near_lamp() const;
  inline ::OPMessage::voiceItem* mutable_vi_50002_not_open_near_lamp();
  inline ::OPMessage::voiceItem* release_vi_50002_not_open_near_lamp();
  inline void set_allocated_vi_50002_not_open_near_lamp(::OPMessage::voiceItem* vi_50002_not_open_near_lamp);

  // optional .OPMessage.voiceItem vi_50002_not_open_far_lamp = 18;
  inline bool has_vi_50002_not_open_far_lamp() const;
  inline void clear_vi_50002_not_open_far_lamp();
  static const int kVi50002NotOpenFarLampFieldNumber = 18;
  inline const ::OPMessage::voiceItem& vi_50002_not_open_far_lamp() const;
  inline ::OPMessage::voiceItem* mutable_vi_50002_not_open_far_lamp();
  inline ::OPMessage::voiceItem* release_vi_50002_not_open_far_lamp();
  inline void set_allocated_vi_50002_not_open_far_lamp(::OPMessage::voiceItem* vi_50002_not_open_far_lamp);

  // @@protoc_insertion_point(class_scope:OPMessage.Judge50002)
 private:
  inline void set_has_itemcode();
  inline void clear_has_itemcode();
  inline void set_has_itemname();
  inline void clear_has_itemname();
  inline void set_has_max_time();
  inline void clear_has_max_time();
  inline void set_has_max_speed();
  inline void clear_has_max_speed();
  inline void set_has_judge_mode();
  inline void clear_has_judge_mode();
  inline void set_has_min_left_turn_signal_time();
  inline void clear_has_min_left_turn_signal_time();
  inline void set_has_min_right_turn_signal_time();
  inline void clear_has_min_right_turn_signal_time();
  inline void set_has_need_near_far_lamp_flash();
  inline void clear_has_need_near_far_lamp_flash();
  inline void set_has_check_far_lamp();
  inline void clear_has_check_far_lamp();
  inline void set_has_check_near_lamp();
  inline void clear_has_check_near_lamp();
  inline void set_has_vi_50002_start_exam();
  inline void clear_has_vi_50002_start_exam();
  inline void set_has_vi_50002_end_exam();
  inline void clear_has_vi_50002_end_exam();
  inline void set_has_vi_50002_not_slowdown();
  inline void clear_has_vi_50002_not_slowdown();
  inline void set_has_vi_50002_turn_lamp_use_error();
  inline void clear_has_vi_50002_turn_lamp_use_error();
  inline void set_has_vi_50002_turn_lamp_not_use();
  inline void clear_has_vi_50002_turn_lamp_not_use();
  inline void set_has_vi_50002_horn_not_use();
  inline void clear_has_vi_50002_horn_not_use();
  inline void set_has_vi_50002_not_open_near_lamp();
  inline void clear_has_vi_50002_not_open_near_lamp();
  inline void set_has_vi_50002_not_open_far_lamp();
  inline void clear_has_vi_50002_not_open_far_lamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* itemname_;
  ::OPMessage::judgeItem* max_time_;
  ::OPMessage::judgeItem* max_speed_;
  ::OPMessage::judgeItem* judge_mode_;
  ::OPMessage::judgeItem* min_left_turn_signal_time_;
  ::OPMessage::judgeItem* min_right_turn_signal_time_;
  ::OPMessage::judgeItem* need_near_far_lamp_flash_;
  ::OPMessage::judgeItem* check_far_lamp_;
  ::OPMessage::judgeItem* check_near_lamp_;
  ::OPMessage::voiceItem* vi_50002_start_exam_;
  ::OPMessage::voiceItem* vi_50002_end_exam_;
  ::OPMessage::voiceItem* vi_50002_not_slowdown_;
  ::OPMessage::voiceItem* vi_50002_turn_lamp_use_error_;
  ::OPMessage::voiceItem* vi_50002_turn_lamp_not_use_;
  ::OPMessage::voiceItem* vi_50002_horn_not_use_;
  ::OPMessage::voiceItem* vi_50002_not_open_near_lamp_;
  ::OPMessage::voiceItem* vi_50002_not_open_far_lamp_;
  ::google::protobuf::int32 itemcode_;
  friend void  protobuf_AddDesc_MessageKm3Config_2eproto();
  friend void protobuf_AssignDesc_MessageKm3Config_2eproto();
  friend void protobuf_ShutdownFile_MessageKm3Config_2eproto();

  void InitAsDefaultInstance();
  static Judge50002* default_instance_;
};
// -------------------------------------------------------------------

class Judge50003 : public ::google::protobuf::Message {
 public:
  Judge50003();
  virtual ~Judge50003();

  Judge50003(const Judge50003& from);

  inline Judge50003& operator=(const Judge50003& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Judge50003& default_instance();

  void Swap(Judge50003* other);

  // implements Message ----------------------------------------------

  Judge50003* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Judge50003& from);
  void MergeFrom(const Judge50003& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 itemCode = 1;
  inline bool has_itemcode() const;
  inline void clear_itemcode();
  static const int kItemCodeFieldNumber = 1;
  inline ::google::protobuf::int32 itemcode() const;
  inline void set_itemcode(::google::protobuf::int32 value);

  // optional string itemName = 2;
  inline bool has_itemname() const;
  inline void clear_itemname();
  static const int kItemNameFieldNumber = 2;
  inline const ::std::string& itemname() const;
  inline void set_itemname(const ::std::string& value);
  inline void set_itemname(const char* value);
  inline void set_itemname(const char* value, size_t size);
  inline ::std::string* mutable_itemname();
  inline ::std::string* release_itemname();
  inline void set_allocated_itemname(::std::string* itemname);

  // optional .OPMessage.judgeItem max_time = 3;
  inline bool has_max_time() const;
  inline void clear_max_time();
  static const int kMaxTimeFieldNumber = 3;
  inline const ::OPMessage::judgeItem& max_time() const;
  inline ::OPMessage::judgeItem* mutable_max_time();
  inline ::OPMessage::judgeItem* release_max_time();
  inline void set_allocated_max_time(::OPMessage::judgeItem* max_time);

  // optional .OPMessage.judgeItem max_speed = 4;
  inline bool has_max_speed() const;
  inline void clear_max_speed();
  static const int kMaxSpeedFieldNumber = 4;
  inline const ::OPMessage::judgeItem& max_speed() const;
  inline ::OPMessage::judgeItem* mutable_max_speed();
  inline ::OPMessage::judgeItem* release_max_speed();
  inline void set_allocated_max_speed(::OPMessage::judgeItem* max_speed);

  // optional .OPMessage.judgeItem judge_mode = 5;
  inline bool has_judge_mode() const;
  inline void clear_judge_mode();
  static const int kJudgeModeFieldNumber = 5;
  inline const ::OPMessage::judgeItem& judge_mode() const;
  inline ::OPMessage::judgeItem* mutable_judge_mode();
  inline ::OPMessage::judgeItem* release_judge_mode();
  inline void set_allocated_judge_mode(::OPMessage::judgeItem* judge_mode);

  // optional .OPMessage.judgeItem min_left_turn_signal_time = 6;
  inline bool has_min_left_turn_signal_time() const;
  inline void clear_min_left_turn_signal_time();
  static const int kMinLeftTurnSignalTimeFieldNumber = 6;
  inline const ::OPMessage::judgeItem& min_left_turn_signal_time() const;
  inline ::OPMessage::judgeItem* mutable_min_left_turn_signal_time();
  inline ::OPMessage::judgeItem* release_min_left_turn_signal_time();
  inline void set_allocated_min_left_turn_signal_time(::OPMessage::judgeItem* min_left_turn_signal_time);

  // optional .OPMessage.judgeItem min_right_turn_signal_time = 7;
  inline bool has_min_right_turn_signal_time() const;
  inline void clear_min_right_turn_signal_time();
  static const int kMinRightTurnSignalTimeFieldNumber = 7;
  inline const ::OPMessage::judgeItem& min_right_turn_signal_time() const;
  inline ::OPMessage::judgeItem* mutable_min_right_turn_signal_time();
  inline ::OPMessage::judgeItem* release_min_right_turn_signal_time();
  inline void set_allocated_min_right_turn_signal_time(::OPMessage::judgeItem* min_right_turn_signal_time);

  // optional .OPMessage.judgeItem need_near_far_lamp_flash = 8;
  inline bool has_need_near_far_lamp_flash() const;
  inline void clear_need_near_far_lamp_flash();
  static const int kNeedNearFarLampFlashFieldNumber = 8;
  inline const ::OPMessage::judgeItem& need_near_far_lamp_flash() const;
  inline ::OPMessage::judgeItem* mutable_need_near_far_lamp_flash();
  inline ::OPMessage::judgeItem* release_need_near_far_lamp_flash();
  inline void set_allocated_need_near_far_lamp_flash(::OPMessage::judgeItem* need_near_far_lamp_flash);

  // optional .OPMessage.judgeItem check_far_lamp = 9;
  inline bool has_check_far_lamp() const;
  inline void clear_check_far_lamp();
  static const int kCheckFarLampFieldNumber = 9;
  inline const ::OPMessage::judgeItem& check_far_lamp() const;
  inline ::OPMessage::judgeItem* mutable_check_far_lamp();
  inline ::OPMessage::judgeItem* release_check_far_lamp();
  inline void set_allocated_check_far_lamp(::OPMessage::judgeItem* check_far_lamp);

  // optional .OPMessage.judgeItem check_near_lamp = 10;
  inline bool has_check_near_lamp() const;
  inline void clear_check_near_lamp();
  static const int kCheckNearLampFieldNumber = 10;
  inline const ::OPMessage::judgeItem& check_near_lamp() const;
  inline ::OPMessage::judgeItem* mutable_check_near_lamp();
  inline ::OPMessage::judgeItem* release_check_near_lamp();
  inline void set_allocated_check_near_lamp(::OPMessage::judgeItem* check_near_lamp);

  // optional .OPMessage.voiceItem vi_50003_start_exam = 11;
  inline bool has_vi_50003_start_exam() const;
  inline void clear_vi_50003_start_exam();
  static const int kVi50003StartExamFieldNumber = 11;
  inline const ::OPMessage::voiceItem& vi_50003_start_exam() const;
  inline ::OPMessage::voiceItem* mutable_vi_50003_start_exam();
  inline ::OPMessage::voiceItem* release_vi_50003_start_exam();
  inline void set_allocated_vi_50003_start_exam(::OPMessage::voiceItem* vi_50003_start_exam);

  // optional .OPMessage.voiceItem vi_50003_end_exam = 12;
  inline bool has_vi_50003_end_exam() const;
  inline void clear_vi_50003_end_exam();
  static const int kVi50003EndExamFieldNumber = 12;
  inline const ::OPMessage::voiceItem& vi_50003_end_exam() const;
  inline ::OPMessage::voiceItem* mutable_vi_50003_end_exam();
  inline ::OPMessage::voiceItem* release_vi_50003_end_exam();
  inline void set_allocated_vi_50003_end_exam(::OPMessage::voiceItem* vi_50003_end_exam);

  // optional .OPMessage.voiceItem vi_50003_not_slowdown = 13;
  inline bool has_vi_50003_not_slowdown() const;
  inline void clear_vi_50003_not_slowdown();
  static const int kVi50003NotSlowdownFieldNumber = 13;
  inline const ::OPMessage::voiceItem& vi_50003_not_slowdown() const;
  inline ::OPMessage::voiceItem* mutable_vi_50003_not_slowdown();
  inline ::OPMessage::voiceItem* release_vi_50003_not_slowdown();
  inline void set_allocated_vi_50003_not_slowdown(::OPMessage::voiceItem* vi_50003_not_slowdown);

  // optional .OPMessage.voiceItem vi_50003_turn_lamp_use_error = 14;
  inline bool has_vi_50003_turn_lamp_use_error() const;
  inline void clear_vi_50003_turn_lamp_use_error();
  static const int kVi50003TurnLampUseErrorFieldNumber = 14;
  inline const ::OPMessage::voiceItem& vi_50003_turn_lamp_use_error() const;
  inline ::OPMessage::voiceItem* mutable_vi_50003_turn_lamp_use_error();
  inline ::OPMessage::voiceItem* release_vi_50003_turn_lamp_use_error();
  inline void set_allocated_vi_50003_turn_lamp_use_error(::OPMessage::voiceItem* vi_50003_turn_lamp_use_error);

  // optional .OPMessage.voiceItem vi_50003_turn_lamp_not_use = 15;
  inline bool has_vi_50003_turn_lamp_not_use() const;
  inline void clear_vi_50003_turn_lamp_not_use();
  static const int kVi50003TurnLampNotUseFieldNumber = 15;
  inline const ::OPMessage::voiceItem& vi_50003_turn_lamp_not_use() const;
  inline ::OPMessage::voiceItem* mutable_vi_50003_turn_lamp_not_use();
  inline ::OPMessage::voiceItem* release_vi_50003_turn_lamp_not_use();
  inline void set_allocated_vi_50003_turn_lamp_not_use(::OPMessage::voiceItem* vi_50003_turn_lamp_not_use);

  // optional .OPMessage.voiceItem vi_50003_horn_not_use = 16;
  inline bool has_vi_50003_horn_not_use() const;
  inline void clear_vi_50003_horn_not_use();
  static const int kVi50003HornNotUseFieldNumber = 16;
  inline const ::OPMessage::voiceItem& vi_50003_horn_not_use() const;
  inline ::OPMessage::voiceItem* mutable_vi_50003_horn_not_use();
  inline ::OPMessage::voiceItem* release_vi_50003_horn_not_use();
  inline void set_allocated_vi_50003_horn_not_use(::OPMessage::voiceItem* vi_50003_horn_not_use);

  // optional .OPMessage.voiceItem vi_50003_not_open_near_lamp = 17;
  inline bool has_vi_50003_not_open_near_lamp() const;
  inline void clear_vi_50003_not_open_near_lamp();
  static const int kVi50003NotOpenNearLampFieldNumber = 17;
  inline const ::OPMessage::voiceItem& vi_50003_not_open_near_lamp() const;
  inline ::OPMessage::voiceItem* mutable_vi_50003_not_open_near_lamp();
  inline ::OPMessage::voiceItem* release_vi_50003_not_open_near_lamp();
  inline void set_allocated_vi_50003_not_open_near_lamp(::OPMessage::voiceItem* vi_50003_not_open_near_lamp);

  // optional .OPMessage.voiceItem vi_50003_not_open_far_lamp = 18;
  inline bool has_vi_50003_not_open_far_lamp() const;
  inline void clear_vi_50003_not_open_far_lamp();
  static const int kVi50003NotOpenFarLampFieldNumber = 18;
  inline const ::OPMessage::voiceItem& vi_50003_not_open_far_lamp() const;
  inline ::OPMessage::voiceItem* mutable_vi_50003_not_open_far_lamp();
  inline ::OPMessage::voiceItem* release_vi_50003_not_open_far_lamp();
  inline void set_allocated_vi_50003_not_open_far_lamp(::OPMessage::voiceItem* vi_50003_not_open_far_lamp);

  // @@protoc_insertion_point(class_scope:OPMessage.Judge50003)
 private:
  inline void set_has_itemcode();
  inline void clear_has_itemcode();
  inline void set_has_itemname();
  inline void clear_has_itemname();
  inline void set_has_max_time();
  inline void clear_has_max_time();
  inline void set_has_max_speed();
  inline void clear_has_max_speed();
  inline void set_has_judge_mode();
  inline void clear_has_judge_mode();
  inline void set_has_min_left_turn_signal_time();
  inline void clear_has_min_left_turn_signal_time();
  inline void set_has_min_right_turn_signal_time();
  inline void clear_has_min_right_turn_signal_time();
  inline void set_has_need_near_far_lamp_flash();
  inline void clear_has_need_near_far_lamp_flash();
  inline void set_has_check_far_lamp();
  inline void clear_has_check_far_lamp();
  inline void set_has_check_near_lamp();
  inline void clear_has_check_near_lamp();
  inline void set_has_vi_50003_start_exam();
  inline void clear_has_vi_50003_start_exam();
  inline void set_has_vi_50003_end_exam();
  inline void clear_has_vi_50003_end_exam();
  inline void set_has_vi_50003_not_slowdown();
  inline void clear_has_vi_50003_not_slowdown();
  inline void set_has_vi_50003_turn_lamp_use_error();
  inline void clear_has_vi_50003_turn_lamp_use_error();
  inline void set_has_vi_50003_turn_lamp_not_use();
  inline void clear_has_vi_50003_turn_lamp_not_use();
  inline void set_has_vi_50003_horn_not_use();
  inline void clear_has_vi_50003_horn_not_use();
  inline void set_has_vi_50003_not_open_near_lamp();
  inline void clear_has_vi_50003_not_open_near_lamp();
  inline void set_has_vi_50003_not_open_far_lamp();
  inline void clear_has_vi_50003_not_open_far_lamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* itemname_;
  ::OPMessage::judgeItem* max_time_;
  ::OPMessage::judgeItem* max_speed_;
  ::OPMessage::judgeItem* judge_mode_;
  ::OPMessage::judgeItem* min_left_turn_signal_time_;
  ::OPMessage::judgeItem* min_right_turn_signal_time_;
  ::OPMessage::judgeItem* need_near_far_lamp_flash_;
  ::OPMessage::judgeItem* check_far_lamp_;
  ::OPMessage::judgeItem* check_near_lamp_;
  ::OPMessage::voiceItem* vi_50003_start_exam_;
  ::OPMessage::voiceItem* vi_50003_end_exam_;
  ::OPMessage::voiceItem* vi_50003_not_slowdown_;
  ::OPMessage::voiceItem* vi_50003_turn_lamp_use_error_;
  ::OPMessage::voiceItem* vi_50003_turn_lamp_not_use_;
  ::OPMessage::voiceItem* vi_50003_horn_not_use_;
  ::OPMessage::voiceItem* vi_50003_not_open_near_lamp_;
  ::OPMessage::voiceItem* vi_50003_not_open_far_lamp_;
  ::google::protobuf::int32 itemcode_;
  friend void  protobuf_AddDesc_MessageKm3Config_2eproto();
  friend void protobuf_AssignDesc_MessageKm3Config_2eproto();
  friend void protobuf_ShutdownFile_MessageKm3Config_2eproto();

  void InitAsDefaultInstance();
  static Judge50003* default_instance_;
};
// -------------------------------------------------------------------

class Judge50004 : public ::google::protobuf::Message {
 public:
  Judge50004();
  virtual ~Judge50004();

  Judge50004(const Judge50004& from);

  inline Judge50004& operator=(const Judge50004& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Judge50004& default_instance();

  void Swap(Judge50004* other);

  // implements Message ----------------------------------------------

  Judge50004* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Judge50004& from);
  void MergeFrom(const Judge50004& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 itemCode = 1;
  inline bool has_itemcode() const;
  inline void clear_itemcode();
  static const int kItemCodeFieldNumber = 1;
  inline ::google::protobuf::int32 itemcode() const;
  inline void set_itemcode(::google::protobuf::int32 value);

  // optional string itemName = 2;
  inline bool has_itemname() const;
  inline void clear_itemname();
  static const int kItemNameFieldNumber = 2;
  inline const ::std::string& itemname() const;
  inline void set_itemname(const ::std::string& value);
  inline void set_itemname(const char* value);
  inline void set_itemname(const char* value, size_t size);
  inline ::std::string* mutable_itemname();
  inline ::std::string* release_itemname();
  inline void set_allocated_itemname(::std::string* itemname);

  // optional .OPMessage.judgeItem max_time = 3;
  inline bool has_max_time() const;
  inline void clear_max_time();
  static const int kMaxTimeFieldNumber = 3;
  inline const ::OPMessage::judgeItem& max_time() const;
  inline ::OPMessage::judgeItem* mutable_max_time();
  inline ::OPMessage::judgeItem* release_max_time();
  inline void set_allocated_max_time(::OPMessage::judgeItem* max_time);

  // optional .OPMessage.judgeItem max_speed = 4;
  inline bool has_max_speed() const;
  inline void clear_max_speed();
  static const int kMaxSpeedFieldNumber = 4;
  inline const ::OPMessage::judgeItem& max_speed() const;
  inline ::OPMessage::judgeItem* mutable_max_speed();
  inline ::OPMessage::judgeItem* release_max_speed();
  inline void set_allocated_max_speed(::OPMessage::judgeItem* max_speed);

  // optional .OPMessage.judgeItem judge_mode = 5;
  inline bool has_judge_mode() const;
  inline void clear_judge_mode();
  static const int kJudgeModeFieldNumber = 5;
  inline const ::OPMessage::judgeItem& judge_mode() const;
  inline ::OPMessage::judgeItem* mutable_judge_mode();
  inline ::OPMessage::judgeItem* release_judge_mode();
  inline void set_allocated_judge_mode(::OPMessage::judgeItem* judge_mode);

  // optional .OPMessage.judgeItem min_left_turn_signal_time = 6;
  inline bool has_min_left_turn_signal_time() const;
  inline void clear_min_left_turn_signal_time();
  static const int kMinLeftTurnSignalTimeFieldNumber = 6;
  inline const ::OPMessage::judgeItem& min_left_turn_signal_time() const;
  inline ::OPMessage::judgeItem* mutable_min_left_turn_signal_time();
  inline ::OPMessage::judgeItem* release_min_left_turn_signal_time();
  inline void set_allocated_min_left_turn_signal_time(::OPMessage::judgeItem* min_left_turn_signal_time);

  // optional .OPMessage.judgeItem min_right_turn_signal_time = 7;
  inline bool has_min_right_turn_signal_time() const;
  inline void clear_min_right_turn_signal_time();
  static const int kMinRightTurnSignalTimeFieldNumber = 7;
  inline const ::OPMessage::judgeItem& min_right_turn_signal_time() const;
  inline ::OPMessage::judgeItem* mutable_min_right_turn_signal_time();
  inline ::OPMessage::judgeItem* release_min_right_turn_signal_time();
  inline void set_allocated_min_right_turn_signal_time(::OPMessage::judgeItem* min_right_turn_signal_time);

  // optional .OPMessage.judgeItem need_near_far_lamp_flash = 8;
  inline bool has_need_near_far_lamp_flash() const;
  inline void clear_need_near_far_lamp_flash();
  static const int kNeedNearFarLampFlashFieldNumber = 8;
  inline const ::OPMessage::judgeItem& need_near_far_lamp_flash() const;
  inline ::OPMessage::judgeItem* mutable_need_near_far_lamp_flash();
  inline ::OPMessage::judgeItem* release_need_near_far_lamp_flash();
  inline void set_allocated_need_near_far_lamp_flash(::OPMessage::judgeItem* need_near_far_lamp_flash);

  // optional .OPMessage.judgeItem check_far_lamp = 9;
  inline bool has_check_far_lamp() const;
  inline void clear_check_far_lamp();
  static const int kCheckFarLampFieldNumber = 9;
  inline const ::OPMessage::judgeItem& check_far_lamp() const;
  inline ::OPMessage::judgeItem* mutable_check_far_lamp();
  inline ::OPMessage::judgeItem* release_check_far_lamp();
  inline void set_allocated_check_far_lamp(::OPMessage::judgeItem* check_far_lamp);

  // optional .OPMessage.judgeItem check_near_lamp = 10;
  inline bool has_check_near_lamp() const;
  inline void clear_check_near_lamp();
  static const int kCheckNearLampFieldNumber = 10;
  inline const ::OPMessage::judgeItem& check_near_lamp() const;
  inline ::OPMessage::judgeItem* mutable_check_near_lamp();
  inline ::OPMessage::judgeItem* release_check_near_lamp();
  inline void set_allocated_check_near_lamp(::OPMessage::judgeItem* check_near_lamp);

  // optional .OPMessage.voiceItem vi_50004_start_exam = 11;
  inline bool has_vi_50004_start_exam() const;
  inline void clear_vi_50004_start_exam();
  static const int kVi50004StartExamFieldNumber = 11;
  inline const ::OPMessage::voiceItem& vi_50004_start_exam() const;
  inline ::OPMessage::voiceItem* mutable_vi_50004_start_exam();
  inline ::OPMessage::voiceItem* release_vi_50004_start_exam();
  inline void set_allocated_vi_50004_start_exam(::OPMessage::voiceItem* vi_50004_start_exam);

  // optional .OPMessage.voiceItem vi_50004_end_exam = 12;
  inline bool has_vi_50004_end_exam() const;
  inline void clear_vi_50004_end_exam();
  static const int kVi50004EndExamFieldNumber = 12;
  inline const ::OPMessage::voiceItem& vi_50004_end_exam() const;
  inline ::OPMessage::voiceItem* mutable_vi_50004_end_exam();
  inline ::OPMessage::voiceItem* release_vi_50004_end_exam();
  inline void set_allocated_vi_50004_end_exam(::OPMessage::voiceItem* vi_50004_end_exam);

  // optional .OPMessage.voiceItem vi_50004_not_slowdown = 13;
  inline bool has_vi_50004_not_slowdown() const;
  inline void clear_vi_50004_not_slowdown();
  static const int kVi50004NotSlowdownFieldNumber = 13;
  inline const ::OPMessage::voiceItem& vi_50004_not_slowdown() const;
  inline ::OPMessage::voiceItem* mutable_vi_50004_not_slowdown();
  inline ::OPMessage::voiceItem* release_vi_50004_not_slowdown();
  inline void set_allocated_vi_50004_not_slowdown(::OPMessage::voiceItem* vi_50004_not_slowdown);

  // optional .OPMessage.voiceItem vi_50004_turn_lamp_use_error = 14;
  inline bool has_vi_50004_turn_lamp_use_error() const;
  inline void clear_vi_50004_turn_lamp_use_error();
  static const int kVi50004TurnLampUseErrorFieldNumber = 14;
  inline const ::OPMessage::voiceItem& vi_50004_turn_lamp_use_error() const;
  inline ::OPMessage::voiceItem* mutable_vi_50004_turn_lamp_use_error();
  inline ::OPMessage::voiceItem* release_vi_50004_turn_lamp_use_error();
  inline void set_allocated_vi_50004_turn_lamp_use_error(::OPMessage::voiceItem* vi_50004_turn_lamp_use_error);

  // optional .OPMessage.voiceItem vi_50004_turn_lamp_not_use = 15;
  inline bool has_vi_50004_turn_lamp_not_use() const;
  inline void clear_vi_50004_turn_lamp_not_use();
  static const int kVi50004TurnLampNotUseFieldNumber = 15;
  inline const ::OPMessage::voiceItem& vi_50004_turn_lamp_not_use() const;
  inline ::OPMessage::voiceItem* mutable_vi_50004_turn_lamp_not_use();
  inline ::OPMessage::voiceItem* release_vi_50004_turn_lamp_not_use();
  inline void set_allocated_vi_50004_turn_lamp_not_use(::OPMessage::voiceItem* vi_50004_turn_lamp_not_use);

  // optional .OPMessage.voiceItem vi_50004_horn_not_use = 16;
  inline bool has_vi_50004_horn_not_use() const;
  inline void clear_vi_50004_horn_not_use();
  static const int kVi50004HornNotUseFieldNumber = 16;
  inline const ::OPMessage::voiceItem& vi_50004_horn_not_use() const;
  inline ::OPMessage::voiceItem* mutable_vi_50004_horn_not_use();
  inline ::OPMessage::voiceItem* release_vi_50004_horn_not_use();
  inline void set_allocated_vi_50004_horn_not_use(::OPMessage::voiceItem* vi_50004_horn_not_use);

  // optional .OPMessage.voiceItem vi_50004_not_open_near_lamp = 17;
  inline bool has_vi_50004_not_open_near_lamp() const;
  inline void clear_vi_50004_not_open_near_lamp();
  static const int kVi50004NotOpenNearLampFieldNumber = 17;
  inline const ::OPMessage::voiceItem& vi_50004_not_open_near_lamp() const;
  inline ::OPMessage::voiceItem* mutable_vi_50004_not_open_near_lamp();
  inline ::OPMessage::voiceItem* release_vi_50004_not_open_near_lamp();
  inline void set_allocated_vi_50004_not_open_near_lamp(::OPMessage::voiceItem* vi_50004_not_open_near_lamp);

  // optional .OPMessage.voiceItem vi_50004_not_open_far_lamp = 18;
  inline bool has_vi_50004_not_open_far_lamp() const;
  inline void clear_vi_50004_not_open_far_lamp();
  static const int kVi50004NotOpenFarLampFieldNumber = 18;
  inline const ::OPMessage::voiceItem& vi_50004_not_open_far_lamp() const;
  inline ::OPMessage::voiceItem* mutable_vi_50004_not_open_far_lamp();
  inline ::OPMessage::voiceItem* release_vi_50004_not_open_far_lamp();
  inline void set_allocated_vi_50004_not_open_far_lamp(::OPMessage::voiceItem* vi_50004_not_open_far_lamp);

  // @@protoc_insertion_point(class_scope:OPMessage.Judge50004)
 private:
  inline void set_has_itemcode();
  inline void clear_has_itemcode();
  inline void set_has_itemname();
  inline void clear_has_itemname();
  inline void set_has_max_time();
  inline void clear_has_max_time();
  inline void set_has_max_speed();
  inline void clear_has_max_speed();
  inline void set_has_judge_mode();
  inline void clear_has_judge_mode();
  inline void set_has_min_left_turn_signal_time();
  inline void clear_has_min_left_turn_signal_time();
  inline void set_has_min_right_turn_signal_time();
  inline void clear_has_min_right_turn_signal_time();
  inline void set_has_need_near_far_lamp_flash();
  inline void clear_has_need_near_far_lamp_flash();
  inline void set_has_check_far_lamp();
  inline void clear_has_check_far_lamp();
  inline void set_has_check_near_lamp();
  inline void clear_has_check_near_lamp();
  inline void set_has_vi_50004_start_exam();
  inline void clear_has_vi_50004_start_exam();
  inline void set_has_vi_50004_end_exam();
  inline void clear_has_vi_50004_end_exam();
  inline void set_has_vi_50004_not_slowdown();
  inline void clear_has_vi_50004_not_slowdown();
  inline void set_has_vi_50004_turn_lamp_use_error();
  inline void clear_has_vi_50004_turn_lamp_use_error();
  inline void set_has_vi_50004_turn_lamp_not_use();
  inline void clear_has_vi_50004_turn_lamp_not_use();
  inline void set_has_vi_50004_horn_not_use();
  inline void clear_has_vi_50004_horn_not_use();
  inline void set_has_vi_50004_not_open_near_lamp();
  inline void clear_has_vi_50004_not_open_near_lamp();
  inline void set_has_vi_50004_not_open_far_lamp();
  inline void clear_has_vi_50004_not_open_far_lamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* itemname_;
  ::OPMessage::judgeItem* max_time_;
  ::OPMessage::judgeItem* max_speed_;
  ::OPMessage::judgeItem* judge_mode_;
  ::OPMessage::judgeItem* min_left_turn_signal_time_;
  ::OPMessage::judgeItem* min_right_turn_signal_time_;
  ::OPMessage::judgeItem* need_near_far_lamp_flash_;
  ::OPMessage::judgeItem* check_far_lamp_;
  ::OPMessage::judgeItem* check_near_lamp_;
  ::OPMessage::voiceItem* vi_50004_start_exam_;
  ::OPMessage::voiceItem* vi_50004_end_exam_;
  ::OPMessage::voiceItem* vi_50004_not_slowdown_;
  ::OPMessage::voiceItem* vi_50004_turn_lamp_use_error_;
  ::OPMessage::voiceItem* vi_50004_turn_lamp_not_use_;
  ::OPMessage::voiceItem* vi_50004_horn_not_use_;
  ::OPMessage::voiceItem* vi_50004_not_open_near_lamp_;
  ::OPMessage::voiceItem* vi_50004_not_open_far_lamp_;
  ::google::protobuf::int32 itemcode_;
  friend void  protobuf_AddDesc_MessageKm3Config_2eproto();
  friend void protobuf_AssignDesc_MessageKm3Config_2eproto();
  friend void protobuf_ShutdownFile_MessageKm3Config_2eproto();

  void InitAsDefaultInstance();
  static Judge50004* default_instance_;
};
// -------------------------------------------------------------------

class Judge50005 : public ::google::protobuf::Message {
 public:
  Judge50005();
  virtual ~Judge50005();

  Judge50005(const Judge50005& from);

  inline Judge50005& operator=(const Judge50005& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Judge50005& default_instance();

  void Swap(Judge50005* other);

  // implements Message ----------------------------------------------

  Judge50005* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Judge50005& from);
  void MergeFrom(const Judge50005& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 itemCode = 1;
  inline bool has_itemcode() const;
  inline void clear_itemcode();
  static const int kItemCodeFieldNumber = 1;
  inline ::google::protobuf::int32 itemcode() const;
  inline void set_itemcode(::google::protobuf::int32 value);

  // optional string itemName = 2;
  inline bool has_itemname() const;
  inline void clear_itemname();
  static const int kItemNameFieldNumber = 2;
  inline const ::std::string& itemname() const;
  inline void set_itemname(const ::std::string& value);
  inline void set_itemname(const char* value);
  inline void set_itemname(const char* value, size_t size);
  inline ::std::string* mutable_itemname();
  inline ::std::string* release_itemname();
  inline void set_allocated_itemname(::std::string* itemname);

  // optional .OPMessage.judgeItem max_time = 3;
  inline bool has_max_time() const;
  inline void clear_max_time();
  static const int kMaxTimeFieldNumber = 3;
  inline const ::OPMessage::judgeItem& max_time() const;
  inline ::OPMessage::judgeItem* mutable_max_time();
  inline ::OPMessage::judgeItem* release_max_time();
  inline void set_allocated_max_time(::OPMessage::judgeItem* max_time);

  // optional .OPMessage.judgeItem max_speed = 4;
  inline bool has_max_speed() const;
  inline void clear_max_speed();
  static const int kMaxSpeedFieldNumber = 4;
  inline const ::OPMessage::judgeItem& max_speed() const;
  inline ::OPMessage::judgeItem* mutable_max_speed();
  inline ::OPMessage::judgeItem* release_max_speed();
  inline void set_allocated_max_speed(::OPMessage::judgeItem* max_speed);

  // optional .OPMessage.judgeItem judge_mode = 5;
  inline bool has_judge_mode() const;
  inline void clear_judge_mode();
  static const int kJudgeModeFieldNumber = 5;
  inline const ::OPMessage::judgeItem& judge_mode() const;
  inline ::OPMessage::judgeItem* mutable_judge_mode();
  inline ::OPMessage::judgeItem* release_judge_mode();
  inline void set_allocated_judge_mode(::OPMessage::judgeItem* judge_mode);

  // optional .OPMessage.judgeItem min_left_turn_signal_time = 6;
  inline bool has_min_left_turn_signal_time() const;
  inline void clear_min_left_turn_signal_time();
  static const int kMinLeftTurnSignalTimeFieldNumber = 6;
  inline const ::OPMessage::judgeItem& min_left_turn_signal_time() const;
  inline ::OPMessage::judgeItem* mutable_min_left_turn_signal_time();
  inline ::OPMessage::judgeItem* release_min_left_turn_signal_time();
  inline void set_allocated_min_left_turn_signal_time(::OPMessage::judgeItem* min_left_turn_signal_time);

  // optional .OPMessage.judgeItem min_right_turn_signal_time = 7;
  inline bool has_min_right_turn_signal_time() const;
  inline void clear_min_right_turn_signal_time();
  static const int kMinRightTurnSignalTimeFieldNumber = 7;
  inline const ::OPMessage::judgeItem& min_right_turn_signal_time() const;
  inline ::OPMessage::judgeItem* mutable_min_right_turn_signal_time();
  inline ::OPMessage::judgeItem* release_min_right_turn_signal_time();
  inline void set_allocated_min_right_turn_signal_time(::OPMessage::judgeItem* min_right_turn_signal_time);

  // optional .OPMessage.judgeItem need_near_far_lamp_flash = 8;
  inline bool has_need_near_far_lamp_flash() const;
  inline void clear_need_near_far_lamp_flash();
  static const int kNeedNearFarLampFlashFieldNumber = 8;
  inline const ::OPMessage::judgeItem& need_near_far_lamp_flash() const;
  inline ::OPMessage::judgeItem* mutable_need_near_far_lamp_flash();
  inline ::OPMessage::judgeItem* release_need_near_far_lamp_flash();
  inline void set_allocated_need_near_far_lamp_flash(::OPMessage::judgeItem* need_near_far_lamp_flash);

  // optional .OPMessage.judgeItem check_far_lamp = 9;
  inline bool has_check_far_lamp() const;
  inline void clear_check_far_lamp();
  static const int kCheckFarLampFieldNumber = 9;
  inline const ::OPMessage::judgeItem& check_far_lamp() const;
  inline ::OPMessage::judgeItem* mutable_check_far_lamp();
  inline ::OPMessage::judgeItem* release_check_far_lamp();
  inline void set_allocated_check_far_lamp(::OPMessage::judgeItem* check_far_lamp);

  // optional .OPMessage.judgeItem check_near_lamp = 10;
  inline bool has_check_near_lamp() const;
  inline void clear_check_near_lamp();
  static const int kCheckNearLampFieldNumber = 10;
  inline const ::OPMessage::judgeItem& check_near_lamp() const;
  inline ::OPMessage::judgeItem* mutable_check_near_lamp();
  inline ::OPMessage::judgeItem* release_check_near_lamp();
  inline void set_allocated_check_near_lamp(::OPMessage::judgeItem* check_near_lamp);

  // optional .OPMessage.voiceItem vi_50005_start_exam = 11;
  inline bool has_vi_50005_start_exam() const;
  inline void clear_vi_50005_start_exam();
  static const int kVi50005StartExamFieldNumber = 11;
  inline const ::OPMessage::voiceItem& vi_50005_start_exam() const;
  inline ::OPMessage::voiceItem* mutable_vi_50005_start_exam();
  inline ::OPMessage::voiceItem* release_vi_50005_start_exam();
  inline void set_allocated_vi_50005_start_exam(::OPMessage::voiceItem* vi_50005_start_exam);

  // optional .OPMessage.voiceItem vi_50005_end_exam = 12;
  inline bool has_vi_50005_end_exam() const;
  inline void clear_vi_50005_end_exam();
  static const int kVi50005EndExamFieldNumber = 12;
  inline const ::OPMessage::voiceItem& vi_50005_end_exam() const;
  inline ::OPMessage::voiceItem* mutable_vi_50005_end_exam();
  inline ::OPMessage::voiceItem* release_vi_50005_end_exam();
  inline void set_allocated_vi_50005_end_exam(::OPMessage::voiceItem* vi_50005_end_exam);

  // optional .OPMessage.voiceItem vi_50005_not_slowdown = 13;
  inline bool has_vi_50005_not_slowdown() const;
  inline void clear_vi_50005_not_slowdown();
  static const int kVi50005NotSlowdownFieldNumber = 13;
  inline const ::OPMessage::voiceItem& vi_50005_not_slowdown() const;
  inline ::OPMessage::voiceItem* mutable_vi_50005_not_slowdown();
  inline ::OPMessage::voiceItem* release_vi_50005_not_slowdown();
  inline void set_allocated_vi_50005_not_slowdown(::OPMessage::voiceItem* vi_50005_not_slowdown);

  // optional .OPMessage.voiceItem vi_50005_turn_lamp_use_error = 14;
  inline bool has_vi_50005_turn_lamp_use_error() const;
  inline void clear_vi_50005_turn_lamp_use_error();
  static const int kVi50005TurnLampUseErrorFieldNumber = 14;
  inline const ::OPMessage::voiceItem& vi_50005_turn_lamp_use_error() const;
  inline ::OPMessage::voiceItem* mutable_vi_50005_turn_lamp_use_error();
  inline ::OPMessage::voiceItem* release_vi_50005_turn_lamp_use_error();
  inline void set_allocated_vi_50005_turn_lamp_use_error(::OPMessage::voiceItem* vi_50005_turn_lamp_use_error);

  // optional .OPMessage.voiceItem vi_50005_turn_lamp_not_use = 15;
  inline bool has_vi_50005_turn_lamp_not_use() const;
  inline void clear_vi_50005_turn_lamp_not_use();
  static const int kVi50005TurnLampNotUseFieldNumber = 15;
  inline const ::OPMessage::voiceItem& vi_50005_turn_lamp_not_use() const;
  inline ::OPMessage::voiceItem* mutable_vi_50005_turn_lamp_not_use();
  inline ::OPMessage::voiceItem* release_vi_50005_turn_lamp_not_use();
  inline void set_allocated_vi_50005_turn_lamp_not_use(::OPMessage::voiceItem* vi_50005_turn_lamp_not_use);

  // optional .OPMessage.voiceItem vi_50005_horn_not_use = 16;
  inline bool has_vi_50005_horn_not_use() const;
  inline void clear_vi_50005_horn_not_use();
  static const int kVi50005HornNotUseFieldNumber = 16;
  inline const ::OPMessage::voiceItem& vi_50005_horn_not_use() const;
  inline ::OPMessage::voiceItem* mutable_vi_50005_horn_not_use();
  inline ::OPMessage::voiceItem* release_vi_50005_horn_not_use();
  inline void set_allocated_vi_50005_horn_not_use(::OPMessage::voiceItem* vi_50005_horn_not_use);

  // optional .OPMessage.voiceItem vi_50005_not_open_near_lamp = 17;
  inline bool has_vi_50005_not_open_near_lamp() const;
  inline void clear_vi_50005_not_open_near_lamp();
  static const int kVi50005NotOpenNearLampFieldNumber = 17;
  inline const ::OPMessage::voiceItem& vi_50005_not_open_near_lamp() const;
  inline ::OPMessage::voiceItem* mutable_vi_50005_not_open_near_lamp();
  inline ::OPMessage::voiceItem* release_vi_50005_not_open_near_lamp();
  inline void set_allocated_vi_50005_not_open_near_lamp(::OPMessage::voiceItem* vi_50005_not_open_near_lamp);

  // optional .OPMessage.voiceItem vi_50005_not_open_far_lamp = 18;
  inline bool has_vi_50005_not_open_far_lamp() const;
  inline void clear_vi_50005_not_open_far_lamp();
  static const int kVi50005NotOpenFarLampFieldNumber = 18;
  inline const ::OPMessage::voiceItem& vi_50005_not_open_far_lamp() const;
  inline ::OPMessage::voiceItem* mutable_vi_50005_not_open_far_lamp();
  inline ::OPMessage::voiceItem* release_vi_50005_not_open_far_lamp();
  inline void set_allocated_vi_50005_not_open_far_lamp(::OPMessage::voiceItem* vi_50005_not_open_far_lamp);

  // @@protoc_insertion_point(class_scope:OPMessage.Judge50005)
 private:
  inline void set_has_itemcode();
  inline void clear_has_itemcode();
  inline void set_has_itemname();
  inline void clear_has_itemname();
  inline void set_has_max_time();
  inline void clear_has_max_time();
  inline void set_has_max_speed();
  inline void clear_has_max_speed();
  inline void set_has_judge_mode();
  inline void clear_has_judge_mode();
  inline void set_has_min_left_turn_signal_time();
  inline void clear_has_min_left_turn_signal_time();
  inline void set_has_min_right_turn_signal_time();
  inline void clear_has_min_right_turn_signal_time();
  inline void set_has_need_near_far_lamp_flash();
  inline void clear_has_need_near_far_lamp_flash();
  inline void set_has_check_far_lamp();
  inline void clear_has_check_far_lamp();
  inline void set_has_check_near_lamp();
  inline void clear_has_check_near_lamp();
  inline void set_has_vi_50005_start_exam();
  inline void clear_has_vi_50005_start_exam();
  inline void set_has_vi_50005_end_exam();
  inline void clear_has_vi_50005_end_exam();
  inline void set_has_vi_50005_not_slowdown();
  inline void clear_has_vi_50005_not_slowdown();
  inline void set_has_vi_50005_turn_lamp_use_error();
  inline void clear_has_vi_50005_turn_lamp_use_error();
  inline void set_has_vi_50005_turn_lamp_not_use();
  inline void clear_has_vi_50005_turn_lamp_not_use();
  inline void set_has_vi_50005_horn_not_use();
  inline void clear_has_vi_50005_horn_not_use();
  inline void set_has_vi_50005_not_open_near_lamp();
  inline void clear_has_vi_50005_not_open_near_lamp();
  inline void set_has_vi_50005_not_open_far_lamp();
  inline void clear_has_vi_50005_not_open_far_lamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* itemname_;
  ::OPMessage::judgeItem* max_time_;
  ::OPMessage::judgeItem* max_speed_;
  ::OPMessage::judgeItem* judge_mode_;
  ::OPMessage::judgeItem* min_left_turn_signal_time_;
  ::OPMessage::judgeItem* min_right_turn_signal_time_;
  ::OPMessage::judgeItem* need_near_far_lamp_flash_;
  ::OPMessage::judgeItem* check_far_lamp_;
  ::OPMessage::judgeItem* check_near_lamp_;
  ::OPMessage::voiceItem* vi_50005_start_exam_;
  ::OPMessage::voiceItem* vi_50005_end_exam_;
  ::OPMessage::voiceItem* vi_50005_not_slowdown_;
  ::OPMessage::voiceItem* vi_50005_turn_lamp_use_error_;
  ::OPMessage::voiceItem* vi_50005_turn_lamp_not_use_;
  ::OPMessage::voiceItem* vi_50005_horn_not_use_;
  ::OPMessage::voiceItem* vi_50005_not_open_near_lamp_;
  ::OPMessage::voiceItem* vi_50005_not_open_far_lamp_;
  ::google::protobuf::int32 itemcode_;
  friend void  protobuf_AddDesc_MessageKm3Config_2eproto();
  friend void protobuf_AssignDesc_MessageKm3Config_2eproto();
  friend void protobuf_ShutdownFile_MessageKm3Config_2eproto();

  void InitAsDefaultInstance();
  static Judge50005* default_instance_;
};
// -------------------------------------------------------------------

class Judge50006 : public ::google::protobuf::Message {
 public:
  Judge50006();
  virtual ~Judge50006();

  Judge50006(const Judge50006& from);

  inline Judge50006& operator=(const Judge50006& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Judge50006& default_instance();

  void Swap(Judge50006* other);

  // implements Message ----------------------------------------------

  Judge50006* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Judge50006& from);
  void MergeFrom(const Judge50006& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 itemCode = 1;
  inline bool has_itemcode() const;
  inline void clear_itemcode();
  static const int kItemCodeFieldNumber = 1;
  inline ::google::protobuf::int32 itemcode() const;
  inline void set_itemcode(::google::protobuf::int32 value);

  // optional string itemName = 2;
  inline bool has_itemname() const;
  inline void clear_itemname();
  static const int kItemNameFieldNumber = 2;
  inline const ::std::string& itemname() const;
  inline void set_itemname(const ::std::string& value);
  inline void set_itemname(const char* value);
  inline void set_itemname(const char* value, size_t size);
  inline ::std::string* mutable_itemname();
  inline ::std::string* release_itemname();
  inline void set_allocated_itemname(::std::string* itemname);

  // optional .OPMessage.judgeItem max_time = 3;
  inline bool has_max_time() const;
  inline void clear_max_time();
  static const int kMaxTimeFieldNumber = 3;
  inline const ::OPMessage::judgeItem& max_time() const;
  inline ::OPMessage::judgeItem* mutable_max_time();
  inline ::OPMessage::judgeItem* release_max_time();
  inline void set_allocated_max_time(::OPMessage::judgeItem* max_time);

  // optional .OPMessage.judgeItem max_speed = 4;
  inline bool has_max_speed() const;
  inline void clear_max_speed();
  static const int kMaxSpeedFieldNumber = 4;
  inline const ::OPMessage::judgeItem& max_speed() const;
  inline ::OPMessage::judgeItem* mutable_max_speed();
  inline ::OPMessage::judgeItem* release_max_speed();
  inline void set_allocated_max_speed(::OPMessage::judgeItem* max_speed);

  // optional .OPMessage.judgeItem judge_mode = 5;
  inline bool has_judge_mode() const;
  inline void clear_judge_mode();
  static const int kJudgeModeFieldNumber = 5;
  inline const ::OPMessage::judgeItem& judge_mode() const;
  inline ::OPMessage::judgeItem* mutable_judge_mode();
  inline ::OPMessage::judgeItem* release_judge_mode();
  inline void set_allocated_judge_mode(::OPMessage::judgeItem* judge_mode);

  // optional .OPMessage.judgeItem min_left_turn_signal_time = 6;
  inline bool has_min_left_turn_signal_time() const;
  inline void clear_min_left_turn_signal_time();
  static const int kMinLeftTurnSignalTimeFieldNumber = 6;
  inline const ::OPMessage::judgeItem& min_left_turn_signal_time() const;
  inline ::OPMessage::judgeItem* mutable_min_left_turn_signal_time();
  inline ::OPMessage::judgeItem* release_min_left_turn_signal_time();
  inline void set_allocated_min_left_turn_signal_time(::OPMessage::judgeItem* min_left_turn_signal_time);

  // optional .OPMessage.judgeItem min_right_turn_signal_time = 7;
  inline bool has_min_right_turn_signal_time() const;
  inline void clear_min_right_turn_signal_time();
  static const int kMinRightTurnSignalTimeFieldNumber = 7;
  inline const ::OPMessage::judgeItem& min_right_turn_signal_time() const;
  inline ::OPMessage::judgeItem* mutable_min_right_turn_signal_time();
  inline ::OPMessage::judgeItem* release_min_right_turn_signal_time();
  inline void set_allocated_min_right_turn_signal_time(::OPMessage::judgeItem* min_right_turn_signal_time);

  // optional .OPMessage.judgeItem need_near_far_lamp_flash = 8;
  inline bool has_need_near_far_lamp_flash() const;
  inline void clear_need_near_far_lamp_flash();
  static const int kNeedNearFarLampFlashFieldNumber = 8;
  inline const ::OPMessage::judgeItem& need_near_far_lamp_flash() const;
  inline ::OPMessage::judgeItem* mutable_need_near_far_lamp_flash();
  inline ::OPMessage::judgeItem* release_need_near_far_lamp_flash();
  inline void set_allocated_need_near_far_lamp_flash(::OPMessage::judgeItem* need_near_far_lamp_flash);

  // optional .OPMessage.judgeItem check_far_lamp = 9;
  inline bool has_check_far_lamp() const;
  inline void clear_check_far_lamp();
  static const int kCheckFarLampFieldNumber = 9;
  inline const ::OPMessage::judgeItem& check_far_lamp() const;
  inline ::OPMessage::judgeItem* mutable_check_far_lamp();
  inline ::OPMessage::judgeItem* release_check_far_lamp();
  inline void set_allocated_check_far_lamp(::OPMessage::judgeItem* check_far_lamp);

  // optional .OPMessage.judgeItem check_near_lamp = 10;
  inline bool has_check_near_lamp() const;
  inline void clear_check_near_lamp();
  static const int kCheckNearLampFieldNumber = 10;
  inline const ::OPMessage::judgeItem& check_near_lamp() const;
  inline ::OPMessage::judgeItem* mutable_check_near_lamp();
  inline ::OPMessage::judgeItem* release_check_near_lamp();
  inline void set_allocated_check_near_lamp(::OPMessage::judgeItem* check_near_lamp);

  // optional .OPMessage.voiceItem vi_50006_start_exam = 11;
  inline bool has_vi_50006_start_exam() const;
  inline void clear_vi_50006_start_exam();
  static const int kVi50006StartExamFieldNumber = 11;
  inline const ::OPMessage::voiceItem& vi_50006_start_exam() const;
  inline ::OPMessage::voiceItem* mutable_vi_50006_start_exam();
  inline ::OPMessage::voiceItem* release_vi_50006_start_exam();
  inline void set_allocated_vi_50006_start_exam(::OPMessage::voiceItem* vi_50006_start_exam);

  // optional .OPMessage.voiceItem vi_50006_end_exam = 12;
  inline bool has_vi_50006_end_exam() const;
  inline void clear_vi_50006_end_exam();
  static const int kVi50006EndExamFieldNumber = 12;
  inline const ::OPMessage::voiceItem& vi_50006_end_exam() const;
  inline ::OPMessage::voiceItem* mutable_vi_50006_end_exam();
  inline ::OPMessage::voiceItem* release_vi_50006_end_exam();
  inline void set_allocated_vi_50006_end_exam(::OPMessage::voiceItem* vi_50006_end_exam);

  // optional .OPMessage.voiceItem vi_50006_not_slowdown = 13;
  inline bool has_vi_50006_not_slowdown() const;
  inline void clear_vi_50006_not_slowdown();
  static const int kVi50006NotSlowdownFieldNumber = 13;
  inline const ::OPMessage::voiceItem& vi_50006_not_slowdown() const;
  inline ::OPMessage::voiceItem* mutable_vi_50006_not_slowdown();
  inline ::OPMessage::voiceItem* release_vi_50006_not_slowdown();
  inline void set_allocated_vi_50006_not_slowdown(::OPMessage::voiceItem* vi_50006_not_slowdown);

  // optional .OPMessage.voiceItem vi_50006_turn_lamp_use_error = 14;
  inline bool has_vi_50006_turn_lamp_use_error() const;
  inline void clear_vi_50006_turn_lamp_use_error();
  static const int kVi50006TurnLampUseErrorFieldNumber = 14;
  inline const ::OPMessage::voiceItem& vi_50006_turn_lamp_use_error() const;
  inline ::OPMessage::voiceItem* mutable_vi_50006_turn_lamp_use_error();
  inline ::OPMessage::voiceItem* release_vi_50006_turn_lamp_use_error();
  inline void set_allocated_vi_50006_turn_lamp_use_error(::OPMessage::voiceItem* vi_50006_turn_lamp_use_error);

  // optional .OPMessage.voiceItem vi_50006_turn_lamp_not_use = 15;
  inline bool has_vi_50006_turn_lamp_not_use() const;
  inline void clear_vi_50006_turn_lamp_not_use();
  static const int kVi50006TurnLampNotUseFieldNumber = 15;
  inline const ::OPMessage::voiceItem& vi_50006_turn_lamp_not_use() const;
  inline ::OPMessage::voiceItem* mutable_vi_50006_turn_lamp_not_use();
  inline ::OPMessage::voiceItem* release_vi_50006_turn_lamp_not_use();
  inline void set_allocated_vi_50006_turn_lamp_not_use(::OPMessage::voiceItem* vi_50006_turn_lamp_not_use);

  // optional .OPMessage.voiceItem vi_50006_horn_not_use = 16;
  inline bool has_vi_50006_horn_not_use() const;
  inline void clear_vi_50006_horn_not_use();
  static const int kVi50006HornNotUseFieldNumber = 16;
  inline const ::OPMessage::voiceItem& vi_50006_horn_not_use() const;
  inline ::OPMessage::voiceItem* mutable_vi_50006_horn_not_use();
  inline ::OPMessage::voiceItem* release_vi_50006_horn_not_use();
  inline void set_allocated_vi_50006_horn_not_use(::OPMessage::voiceItem* vi_50006_horn_not_use);

  // optional .OPMessage.voiceItem vi_50006_not_open_near_lamp = 17;
  inline bool has_vi_50006_not_open_near_lamp() const;
  inline void clear_vi_50006_not_open_near_lamp();
  static const int kVi50006NotOpenNearLampFieldNumber = 17;
  inline const ::OPMessage::voiceItem& vi_50006_not_open_near_lamp() const;
  inline ::OPMessage::voiceItem* mutable_vi_50006_not_open_near_lamp();
  inline ::OPMessage::voiceItem* release_vi_50006_not_open_near_lamp();
  inline void set_allocated_vi_50006_not_open_near_lamp(::OPMessage::voiceItem* vi_50006_not_open_near_lamp);

  // optional .OPMessage.voiceItem vi_50006_not_open_far_lamp = 18;
  inline bool has_vi_50006_not_open_far_lamp() const;
  inline void clear_vi_50006_not_open_far_lamp();
  static const int kVi50006NotOpenFarLampFieldNumber = 18;
  inline const ::OPMessage::voiceItem& vi_50006_not_open_far_lamp() const;
  inline ::OPMessage::voiceItem* mutable_vi_50006_not_open_far_lamp();
  inline ::OPMessage::voiceItem* release_vi_50006_not_open_far_lamp();
  inline void set_allocated_vi_50006_not_open_far_lamp(::OPMessage::voiceItem* vi_50006_not_open_far_lamp);

  // @@protoc_insertion_point(class_scope:OPMessage.Judge50006)
 private:
  inline void set_has_itemcode();
  inline void clear_has_itemcode();
  inline void set_has_itemname();
  inline void clear_has_itemname();
  inline void set_has_max_time();
  inline void clear_has_max_time();
  inline void set_has_max_speed();
  inline void clear_has_max_speed();
  inline void set_has_judge_mode();
  inline void clear_has_judge_mode();
  inline void set_has_min_left_turn_signal_time();
  inline void clear_has_min_left_turn_signal_time();
  inline void set_has_min_right_turn_signal_time();
  inline void clear_has_min_right_turn_signal_time();
  inline void set_has_need_near_far_lamp_flash();
  inline void clear_has_need_near_far_lamp_flash();
  inline void set_has_check_far_lamp();
  inline void clear_has_check_far_lamp();
  inline void set_has_check_near_lamp();
  inline void clear_has_check_near_lamp();
  inline void set_has_vi_50006_start_exam();
  inline void clear_has_vi_50006_start_exam();
  inline void set_has_vi_50006_end_exam();
  inline void clear_has_vi_50006_end_exam();
  inline void set_has_vi_50006_not_slowdown();
  inline void clear_has_vi_50006_not_slowdown();
  inline void set_has_vi_50006_turn_lamp_use_error();
  inline void clear_has_vi_50006_turn_lamp_use_error();
  inline void set_has_vi_50006_turn_lamp_not_use();
  inline void clear_has_vi_50006_turn_lamp_not_use();
  inline void set_has_vi_50006_horn_not_use();
  inline void clear_has_vi_50006_horn_not_use();
  inline void set_has_vi_50006_not_open_near_lamp();
  inline void clear_has_vi_50006_not_open_near_lamp();
  inline void set_has_vi_50006_not_open_far_lamp();
  inline void clear_has_vi_50006_not_open_far_lamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* itemname_;
  ::OPMessage::judgeItem* max_time_;
  ::OPMessage::judgeItem* max_speed_;
  ::OPMessage::judgeItem* judge_mode_;
  ::OPMessage::judgeItem* min_left_turn_signal_time_;
  ::OPMessage::judgeItem* min_right_turn_signal_time_;
  ::OPMessage::judgeItem* need_near_far_lamp_flash_;
  ::OPMessage::judgeItem* check_far_lamp_;
  ::OPMessage::judgeItem* check_near_lamp_;
  ::OPMessage::voiceItem* vi_50006_start_exam_;
  ::OPMessage::voiceItem* vi_50006_end_exam_;
  ::OPMessage::voiceItem* vi_50006_not_slowdown_;
  ::OPMessage::voiceItem* vi_50006_turn_lamp_use_error_;
  ::OPMessage::voiceItem* vi_50006_turn_lamp_not_use_;
  ::OPMessage::voiceItem* vi_50006_horn_not_use_;
  ::OPMessage::voiceItem* vi_50006_not_open_near_lamp_;
  ::OPMessage::voiceItem* vi_50006_not_open_far_lamp_;
  ::google::protobuf::int32 itemcode_;
  friend void  protobuf_AddDesc_MessageKm3Config_2eproto();
  friend void protobuf_AssignDesc_MessageKm3Config_2eproto();
  friend void protobuf_ShutdownFile_MessageKm3Config_2eproto();

  void InitAsDefaultInstance();
  static Judge50006* default_instance_;
};
// -------------------------------------------------------------------

class Km3Judge : public ::google::protobuf::Message {
 public:
  Km3Judge();
  virtual ~Km3Judge();

  Km3Judge(const Km3Judge& from);

  inline Km3Judge& operator=(const Km3Judge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Km3Judge& default_instance();

  void Swap(Km3Judge* other);

  // implements Message ----------------------------------------------

  Km3Judge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Km3Judge& from);
  void MergeFrom(const Km3Judge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .OPMessage.Judge0 judge0 = 1;
  inline bool has_judge0() const;
  inline void clear_judge0();
  static const int kJudge0FieldNumber = 1;
  inline const ::OPMessage::Judge0& judge0() const;
  inline ::OPMessage::Judge0* mutable_judge0();
  inline ::OPMessage::Judge0* release_judge0();
  inline void set_allocated_judge0(::OPMessage::Judge0* judge0);

  // optional .OPMessage.Judge40100 judge40100 = 2;
  inline bool has_judge40100() const;
  inline void clear_judge40100();
  static const int kJudge40100FieldNumber = 2;
  inline const ::OPMessage::Judge40100& judge40100() const;
  inline ::OPMessage::Judge40100* mutable_judge40100();
  inline ::OPMessage::Judge40100* release_judge40100();
  inline void set_allocated_judge40100(::OPMessage::Judge40100* judge40100);

  // optional .OPMessage.Judge41600 judge41600 = 3;
  inline bool has_judge41600() const;
  inline void clear_judge41600();
  static const int kJudge41600FieldNumber = 3;
  inline const ::OPMessage::Judge41600& judge41600() const;
  inline ::OPMessage::Judge41600* mutable_judge41600();
  inline ::OPMessage::Judge41600* release_judge41600();
  inline void set_allocated_judge41600(::OPMessage::Judge41600* judge41600);

  // optional .OPMessage.Judge40200 judge40200 = 4;
  inline bool has_judge40200() const;
  inline void clear_judge40200();
  static const int kJudge40200FieldNumber = 4;
  inline const ::OPMessage::Judge40200& judge40200() const;
  inline ::OPMessage::Judge40200* mutable_judge40200();
  inline ::OPMessage::Judge40200* release_judge40200();
  inline void set_allocated_judge40200(::OPMessage::Judge40200* judge40200);

  // optional .OPMessage.Judge40400 judge40400 = 5;
  inline bool has_judge40400() const;
  inline void clear_judge40400();
  static const int kJudge40400FieldNumber = 5;
  inline const ::OPMessage::Judge40400& judge40400() const;
  inline ::OPMessage::Judge40400* mutable_judge40400();
  inline ::OPMessage::Judge40400* release_judge40400();
  inline void set_allocated_judge40400(::OPMessage::Judge40400* judge40400);

  // optional .OPMessage.Judge41000 judge41000 = 6;
  inline bool has_judge41000() const;
  inline void clear_judge41000();
  static const int kJudge41000FieldNumber = 6;
  inline const ::OPMessage::Judge41000& judge41000() const;
  inline ::OPMessage::Judge41000* mutable_judge41000();
  inline ::OPMessage::Judge41000* release_judge41000();
  inline void set_allocated_judge41000(::OPMessage::Judge41000* judge41000);

  // optional .OPMessage.Judge41001 judge41001 = 7;
  inline bool has_judge41001() const;
  inline void clear_judge41001();
  static const int kJudge41001FieldNumber = 7;
  inline const ::OPMessage::Judge41001& judge41001() const;
  inline ::OPMessage::Judge41001* mutable_judge41001();
  inline ::OPMessage::Judge41001* release_judge41001();
  inline void set_allocated_judge41001(::OPMessage::Judge41001* judge41001);

  // optional .OPMessage.Judge41200 judge41200 = 8;
  inline bool has_judge41200() const;
  inline void clear_judge41200();
  static const int kJudge41200FieldNumber = 8;
  inline const ::OPMessage::Judge41200& judge41200() const;
  inline ::OPMessage::Judge41200* mutable_judge41200();
  inline ::OPMessage::Judge41200* release_judge41200();
  inline void set_allocated_judge41200(::OPMessage::Judge41200* judge41200);

  // optional .OPMessage.Judge41100 judge41100 = 9;
  inline bool has_judge41100() const;
  inline void clear_judge41100();
  static const int kJudge41100FieldNumber = 9;
  inline const ::OPMessage::Judge41100& judge41100() const;
  inline ::OPMessage::Judge41100* mutable_judge41100();
  inline ::OPMessage::Judge41100* release_judge41100();
  inline void set_allocated_judge41100(::OPMessage::Judge41100* judge41100);

  // optional .OPMessage.Judge40700 judge40700 = 10;
  inline bool has_judge40700() const;
  inline void clear_judge40700();
  static const int kJudge40700FieldNumber = 10;
  inline const ::OPMessage::Judge40700& judge40700() const;
  inline ::OPMessage::Judge40700* mutable_judge40700();
  inline ::OPMessage::Judge40700* release_judge40700();
  inline void set_allocated_judge40700(::OPMessage::Judge40700* judge40700);

  // optional .OPMessage.Judge41500 judge41500 = 11;
  inline bool has_judge41500() const;
  inline void clear_judge41500();
  static const int kJudge41500FieldNumber = 11;
  inline const ::OPMessage::Judge41500& judge41500() const;
  inline ::OPMessage::Judge41500* mutable_judge41500();
  inline ::OPMessage::Judge41500* release_judge41500();
  inline void set_allocated_judge41500(::OPMessage::Judge41500* judge41500);

  // optional .OPMessage.Judge40800 judge40800 = 12;
  inline bool has_judge40800() const;
  inline void clear_judge40800();
  static const int kJudge40800FieldNumber = 12;
  inline const ::OPMessage::Judge40800& judge40800() const;
  inline ::OPMessage::Judge40800* mutable_judge40800();
  inline ::OPMessage::Judge40800* release_judge40800();
  inline void set_allocated_judge40800(::OPMessage::Judge40800* judge40800);

  // optional .OPMessage.Judge40900 judge40900 = 13;
  inline bool has_judge40900() const;
  inline void clear_judge40900();
  static const int kJudge40900FieldNumber = 13;
  inline const ::OPMessage::Judge40900& judge40900() const;
  inline ::OPMessage::Judge40900* mutable_judge40900();
  inline ::OPMessage::Judge40900* release_judge40900();
  inline void set_allocated_judge40900(::OPMessage::Judge40900* judge40900);

  // optional .OPMessage.Judge41400 judge41400 = 14;
  inline bool has_judge41400() const;
  inline void clear_judge41400();
  static const int kJudge41400FieldNumber = 14;
  inline const ::OPMessage::Judge41400& judge41400() const;
  inline ::OPMessage::Judge41400* mutable_judge41400();
  inline ::OPMessage::Judge41400* release_judge41400();
  inline void set_allocated_judge41400(::OPMessage::Judge41400* judge41400);

  // optional .OPMessage.Judge40500 judge40500 = 15;
  inline bool has_judge40500() const;
  inline void clear_judge40500();
  static const int kJudge40500FieldNumber = 15;
  inline const ::OPMessage::Judge40500& judge40500() const;
  inline ::OPMessage::Judge40500* mutable_judge40500();
  inline ::OPMessage::Judge40500* release_judge40500();
  inline void set_allocated_judge40500(::OPMessage::Judge40500* judge40500);

  // optional .OPMessage.Judge41300 judge41300 = 16;
  inline bool has_judge41300() const;
  inline void clear_judge41300();
  static const int kJudge41300FieldNumber = 16;
  inline const ::OPMessage::Judge41300& judge41300() const;
  inline ::OPMessage::Judge41300* mutable_judge41300();
  inline ::OPMessage::Judge41300* release_judge41300();
  inline void set_allocated_judge41300(::OPMessage::Judge41300* judge41300);

  // optional .OPMessage.Judge40300 judge40300 = 17;
  inline bool has_judge40300() const;
  inline void clear_judge40300();
  static const int kJudge40300FieldNumber = 17;
  inline const ::OPMessage::Judge40300& judge40300() const;
  inline ::OPMessage::Judge40300* mutable_judge40300();
  inline ::OPMessage::Judge40300* release_judge40300();
  inline void set_allocated_judge40300(::OPMessage::Judge40300* judge40300);

  // optional .OPMessage.Judge40600 judge40600 = 18;
  inline bool has_judge40600() const;
  inline void clear_judge40600();
  static const int kJudge40600FieldNumber = 18;
  inline const ::OPMessage::Judge40600& judge40600() const;
  inline ::OPMessage::Judge40600* mutable_judge40600();
  inline ::OPMessage::Judge40600* release_judge40600();
  inline void set_allocated_judge40600(::OPMessage::Judge40600* judge40600);

  // optional .OPMessage.Judge40601 judge40601 = 19;
  inline bool has_judge40601() const;
  inline void clear_judge40601();
  static const int kJudge40601FieldNumber = 19;
  inline const ::OPMessage::Judge40601& judge40601() const;
  inline ::OPMessage::Judge40601* mutable_judge40601();
  inline ::OPMessage::Judge40601* release_judge40601();
  inline void set_allocated_judge40601(::OPMessage::Judge40601* judge40601);

  // optional .OPMessage.Judge50001 judge50001 = 20;
  inline bool has_judge50001() const;
  inline void clear_judge50001();
  static const int kJudge50001FieldNumber = 20;
  inline const ::OPMessage::Judge50001& judge50001() const;
  inline ::OPMessage::Judge50001* mutable_judge50001();
  inline ::OPMessage::Judge50001* release_judge50001();
  inline void set_allocated_judge50001(::OPMessage::Judge50001* judge50001);

  // optional .OPMessage.Judge50002 judge50002 = 21;
  inline bool has_judge50002() const;
  inline void clear_judge50002();
  static const int kJudge50002FieldNumber = 21;
  inline const ::OPMessage::Judge50002& judge50002() const;
  inline ::OPMessage::Judge50002* mutable_judge50002();
  inline ::OPMessage::Judge50002* release_judge50002();
  inline void set_allocated_judge50002(::OPMessage::Judge50002* judge50002);

  // optional .OPMessage.Judge50003 judge50003 = 22;
  inline bool has_judge50003() const;
  inline void clear_judge50003();
  static const int kJudge50003FieldNumber = 22;
  inline const ::OPMessage::Judge50003& judge50003() const;
  inline ::OPMessage::Judge50003* mutable_judge50003();
  inline ::OPMessage::Judge50003* release_judge50003();
  inline void set_allocated_judge50003(::OPMessage::Judge50003* judge50003);

  // optional .OPMessage.Judge50004 judge50004 = 23;
  inline bool has_judge50004() const;
  inline void clear_judge50004();
  static const int kJudge50004FieldNumber = 23;
  inline const ::OPMessage::Judge50004& judge50004() const;
  inline ::OPMessage::Judge50004* mutable_judge50004();
  inline ::OPMessage::Judge50004* release_judge50004();
  inline void set_allocated_judge50004(::OPMessage::Judge50004* judge50004);

  // optional .OPMessage.Judge50005 judge50005 = 24;
  inline bool has_judge50005() const;
  inline void clear_judge50005();
  static const int kJudge50005FieldNumber = 24;
  inline const ::OPMessage::Judge50005& judge50005() const;
  inline ::OPMessage::Judge50005* mutable_judge50005();
  inline ::OPMessage::Judge50005* release_judge50005();
  inline void set_allocated_judge50005(::OPMessage::Judge50005* judge50005);

  // optional .OPMessage.Judge50006 judge50006 = 25;
  inline bool has_judge50006() const;
  inline void clear_judge50006();
  static const int kJudge50006FieldNumber = 25;
  inline const ::OPMessage::Judge50006& judge50006() const;
  inline ::OPMessage::Judge50006* mutable_judge50006();
  inline ::OPMessage::Judge50006* release_judge50006();
  inline void set_allocated_judge50006(::OPMessage::Judge50006* judge50006);

  // @@protoc_insertion_point(class_scope:OPMessage.Km3Judge)
 private:
  inline void set_has_judge0();
  inline void clear_has_judge0();
  inline void set_has_judge40100();
  inline void clear_has_judge40100();
  inline void set_has_judge41600();
  inline void clear_has_judge41600();
  inline void set_has_judge40200();
  inline void clear_has_judge40200();
  inline void set_has_judge40400();
  inline void clear_has_judge40400();
  inline void set_has_judge41000();
  inline void clear_has_judge41000();
  inline void set_has_judge41001();
  inline void clear_has_judge41001();
  inline void set_has_judge41200();
  inline void clear_has_judge41200();
  inline void set_has_judge41100();
  inline void clear_has_judge41100();
  inline void set_has_judge40700();
  inline void clear_has_judge40700();
  inline void set_has_judge41500();
  inline void clear_has_judge41500();
  inline void set_has_judge40800();
  inline void clear_has_judge40800();
  inline void set_has_judge40900();
  inline void clear_has_judge40900();
  inline void set_has_judge41400();
  inline void clear_has_judge41400();
  inline void set_has_judge40500();
  inline void clear_has_judge40500();
  inline void set_has_judge41300();
  inline void clear_has_judge41300();
  inline void set_has_judge40300();
  inline void clear_has_judge40300();
  inline void set_has_judge40600();
  inline void clear_has_judge40600();
  inline void set_has_judge40601();
  inline void clear_has_judge40601();
  inline void set_has_judge50001();
  inline void clear_has_judge50001();
  inline void set_has_judge50002();
  inline void clear_has_judge50002();
  inline void set_has_judge50003();
  inline void clear_has_judge50003();
  inline void set_has_judge50004();
  inline void clear_has_judge50004();
  inline void set_has_judge50005();
  inline void clear_has_judge50005();
  inline void set_has_judge50006();
  inline void clear_has_judge50006();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::OPMessage::Judge0* judge0_;
  ::OPMessage::Judge40100* judge40100_;
  ::OPMessage::Judge41600* judge41600_;
  ::OPMessage::Judge40200* judge40200_;
  ::OPMessage::Judge40400* judge40400_;
  ::OPMessage::Judge41000* judge41000_;
  ::OPMessage::Judge41001* judge41001_;
  ::OPMessage::Judge41200* judge41200_;
  ::OPMessage::Judge41100* judge41100_;
  ::OPMessage::Judge40700* judge40700_;
  ::OPMessage::Judge41500* judge41500_;
  ::OPMessage::Judge40800* judge40800_;
  ::OPMessage::Judge40900* judge40900_;
  ::OPMessage::Judge41400* judge41400_;
  ::OPMessage::Judge40500* judge40500_;
  ::OPMessage::Judge41300* judge41300_;
  ::OPMessage::Judge40300* judge40300_;
  ::OPMessage::Judge40600* judge40600_;
  ::OPMessage::Judge40601* judge40601_;
  ::OPMessage::Judge50001* judge50001_;
  ::OPMessage::Judge50002* judge50002_;
  ::OPMessage::Judge50003* judge50003_;
  ::OPMessage::Judge50004* judge50004_;
  ::OPMessage::Judge50005* judge50005_;
  ::OPMessage::Judge50006* judge50006_;
  friend void  protobuf_AddDesc_MessageKm3Config_2eproto();
  friend void protobuf_AssignDesc_MessageKm3Config_2eproto();
  friend void protobuf_ShutdownFile_MessageKm3Config_2eproto();

  void InitAsDefaultInstance();
  static Km3Judge* default_instance_;
};
// ===================================================================


// ===================================================================

// judgeItem

// optional string configFileName = 1;
inline bool judgeItem::has_configfilename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void judgeItem::set_has_configfilename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void judgeItem::clear_has_configfilename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void judgeItem::clear_configfilename() {
  if (configfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    configfilename_->clear();
  }
  clear_has_configfilename();
}
inline const ::std::string& judgeItem::configfilename() const {
  // @@protoc_insertion_point(field_get:OPMessage.judgeItem.configFileName)
  return *configfilename_;
}
inline void judgeItem::set_configfilename(const ::std::string& value) {
  set_has_configfilename();
  if (configfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    configfilename_ = new ::std::string;
  }
  configfilename_->assign(value);
  // @@protoc_insertion_point(field_set:OPMessage.judgeItem.configFileName)
}
inline void judgeItem::set_configfilename(const char* value) {
  set_has_configfilename();
  if (configfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    configfilename_ = new ::std::string;
  }
  configfilename_->assign(value);
  // @@protoc_insertion_point(field_set_char:OPMessage.judgeItem.configFileName)
}
inline void judgeItem::set_configfilename(const char* value, size_t size) {
  set_has_configfilename();
  if (configfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    configfilename_ = new ::std::string;
  }
  configfilename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OPMessage.judgeItem.configFileName)
}
inline ::std::string* judgeItem::mutable_configfilename() {
  set_has_configfilename();
  if (configfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    configfilename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:OPMessage.judgeItem.configFileName)
  return configfilename_;
}
inline ::std::string* judgeItem::release_configfilename() {
  clear_has_configfilename();
  if (configfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = configfilename_;
    configfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void judgeItem::set_allocated_configfilename(::std::string* configfilename) {
  if (configfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete configfilename_;
  }
  if (configfilename) {
    set_has_configfilename();
    configfilename_ = configfilename;
  } else {
    clear_has_configfilename();
    configfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.judgeItem.configFileName)
}

// optional string configItem = 2;
inline bool judgeItem::has_configitem() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void judgeItem::set_has_configitem() {
  _has_bits_[0] |= 0x00000002u;
}
inline void judgeItem::clear_has_configitem() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void judgeItem::clear_configitem() {
  if (configitem_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    configitem_->clear();
  }
  clear_has_configitem();
}
inline const ::std::string& judgeItem::configitem() const {
  // @@protoc_insertion_point(field_get:OPMessage.judgeItem.configItem)
  return *configitem_;
}
inline void judgeItem::set_configitem(const ::std::string& value) {
  set_has_configitem();
  if (configitem_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    configitem_ = new ::std::string;
  }
  configitem_->assign(value);
  // @@protoc_insertion_point(field_set:OPMessage.judgeItem.configItem)
}
inline void judgeItem::set_configitem(const char* value) {
  set_has_configitem();
  if (configitem_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    configitem_ = new ::std::string;
  }
  configitem_->assign(value);
  // @@protoc_insertion_point(field_set_char:OPMessage.judgeItem.configItem)
}
inline void judgeItem::set_configitem(const char* value, size_t size) {
  set_has_configitem();
  if (configitem_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    configitem_ = new ::std::string;
  }
  configitem_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OPMessage.judgeItem.configItem)
}
inline ::std::string* judgeItem::mutable_configitem() {
  set_has_configitem();
  if (configitem_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    configitem_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:OPMessage.judgeItem.configItem)
  return configitem_;
}
inline ::std::string* judgeItem::release_configitem() {
  clear_has_configitem();
  if (configitem_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = configitem_;
    configitem_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void judgeItem::set_allocated_configitem(::std::string* configitem) {
  if (configitem_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete configitem_;
  }
  if (configitem) {
    set_has_configitem();
    configitem_ = configitem;
  } else {
    clear_has_configitem();
    configitem_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.judgeItem.configItem)
}

// optional string configName = 3;
inline bool judgeItem::has_configname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void judgeItem::set_has_configname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void judgeItem::clear_has_configname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void judgeItem::clear_configname() {
  if (configname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    configname_->clear();
  }
  clear_has_configname();
}
inline const ::std::string& judgeItem::configname() const {
  // @@protoc_insertion_point(field_get:OPMessage.judgeItem.configName)
  return *configname_;
}
inline void judgeItem::set_configname(const ::std::string& value) {
  set_has_configname();
  if (configname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    configname_ = new ::std::string;
  }
  configname_->assign(value);
  // @@protoc_insertion_point(field_set:OPMessage.judgeItem.configName)
}
inline void judgeItem::set_configname(const char* value) {
  set_has_configname();
  if (configname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    configname_ = new ::std::string;
  }
  configname_->assign(value);
  // @@protoc_insertion_point(field_set_char:OPMessage.judgeItem.configName)
}
inline void judgeItem::set_configname(const char* value, size_t size) {
  set_has_configname();
  if (configname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    configname_ = new ::std::string;
  }
  configname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OPMessage.judgeItem.configName)
}
inline ::std::string* judgeItem::mutable_configname() {
  set_has_configname();
  if (configname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    configname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:OPMessage.judgeItem.configName)
  return configname_;
}
inline ::std::string* judgeItem::release_configname() {
  clear_has_configname();
  if (configname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = configname_;
    configname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void judgeItem::set_allocated_configname(::std::string* configname) {
  if (configname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete configname_;
  }
  if (configname) {
    set_has_configname();
    configname_ = configname;
  } else {
    clear_has_configname();
    configname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.judgeItem.configName)
}

// optional string detailStr = 4;
inline bool judgeItem::has_detailstr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void judgeItem::set_has_detailstr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void judgeItem::clear_has_detailstr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void judgeItem::clear_detailstr() {
  if (detailstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    detailstr_->clear();
  }
  clear_has_detailstr();
}
inline const ::std::string& judgeItem::detailstr() const {
  // @@protoc_insertion_point(field_get:OPMessage.judgeItem.detailStr)
  return *detailstr_;
}
inline void judgeItem::set_detailstr(const ::std::string& value) {
  set_has_detailstr();
  if (detailstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    detailstr_ = new ::std::string;
  }
  detailstr_->assign(value);
  // @@protoc_insertion_point(field_set:OPMessage.judgeItem.detailStr)
}
inline void judgeItem::set_detailstr(const char* value) {
  set_has_detailstr();
  if (detailstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    detailstr_ = new ::std::string;
  }
  detailstr_->assign(value);
  // @@protoc_insertion_point(field_set_char:OPMessage.judgeItem.detailStr)
}
inline void judgeItem::set_detailstr(const char* value, size_t size) {
  set_has_detailstr();
  if (detailstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    detailstr_ = new ::std::string;
  }
  detailstr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OPMessage.judgeItem.detailStr)
}
inline ::std::string* judgeItem::mutable_detailstr() {
  set_has_detailstr();
  if (detailstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    detailstr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:OPMessage.judgeItem.detailStr)
  return detailstr_;
}
inline ::std::string* judgeItem::release_detailstr() {
  clear_has_detailstr();
  if (detailstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = detailstr_;
    detailstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void judgeItem::set_allocated_detailstr(::std::string* detailstr) {
  if (detailstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete detailstr_;
  }
  if (detailstr) {
    set_has_detailstr();
    detailstr_ = detailstr;
  } else {
    clear_has_detailstr();
    detailstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.judgeItem.detailStr)
}

// optional double defValue = 5;
inline bool judgeItem::has_defvalue() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void judgeItem::set_has_defvalue() {
  _has_bits_[0] |= 0x00000010u;
}
inline void judgeItem::clear_has_defvalue() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void judgeItem::clear_defvalue() {
  defvalue_ = 0;
  clear_has_defvalue();
}
inline double judgeItem::defvalue() const {
  // @@protoc_insertion_point(field_get:OPMessage.judgeItem.defValue)
  return defvalue_;
}
inline void judgeItem::set_defvalue(double value) {
  set_has_defvalue();
  defvalue_ = value;
  // @@protoc_insertion_point(field_set:OPMessage.judgeItem.defValue)
}

// repeated int32 defValues = 6;
inline int judgeItem::defvalues_size() const {
  return defvalues_.size();
}
inline void judgeItem::clear_defvalues() {
  defvalues_.Clear();
}
inline ::google::protobuf::int32 judgeItem::defvalues(int index) const {
  // @@protoc_insertion_point(field_get:OPMessage.judgeItem.defValues)
  return defvalues_.Get(index);
}
inline void judgeItem::set_defvalues(int index, ::google::protobuf::int32 value) {
  defvalues_.Set(index, value);
  // @@protoc_insertion_point(field_set:OPMessage.judgeItem.defValues)
}
inline void judgeItem::add_defvalues(::google::protobuf::int32 value) {
  defvalues_.Add(value);
  // @@protoc_insertion_point(field_add:OPMessage.judgeItem.defValues)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
judgeItem::defvalues() const {
  // @@protoc_insertion_point(field_list:OPMessage.judgeItem.defValues)
  return defvalues_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
judgeItem::mutable_defvalues() {
  // @@protoc_insertion_point(field_mutable_list:OPMessage.judgeItem.defValues)
  return &defvalues_;
}

// repeated string strArr = 7;
inline int judgeItem::strarr_size() const {
  return strarr_.size();
}
inline void judgeItem::clear_strarr() {
  strarr_.Clear();
}
inline const ::std::string& judgeItem::strarr(int index) const {
  // @@protoc_insertion_point(field_get:OPMessage.judgeItem.strArr)
  return strarr_.Get(index);
}
inline ::std::string* judgeItem::mutable_strarr(int index) {
  // @@protoc_insertion_point(field_mutable:OPMessage.judgeItem.strArr)
  return strarr_.Mutable(index);
}
inline void judgeItem::set_strarr(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:OPMessage.judgeItem.strArr)
  strarr_.Mutable(index)->assign(value);
}
inline void judgeItem::set_strarr(int index, const char* value) {
  strarr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:OPMessage.judgeItem.strArr)
}
inline void judgeItem::set_strarr(int index, const char* value, size_t size) {
  strarr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OPMessage.judgeItem.strArr)
}
inline ::std::string* judgeItem::add_strarr() {
  return strarr_.Add();
}
inline void judgeItem::add_strarr(const ::std::string& value) {
  strarr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:OPMessage.judgeItem.strArr)
}
inline void judgeItem::add_strarr(const char* value) {
  strarr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:OPMessage.judgeItem.strArr)
}
inline void judgeItem::add_strarr(const char* value, size_t size) {
  strarr_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:OPMessage.judgeItem.strArr)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
judgeItem::strarr() const {
  // @@protoc_insertion_point(field_list:OPMessage.judgeItem.strArr)
  return strarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
judgeItem::mutable_strarr() {
  // @@protoc_insertion_point(field_mutable_list:OPMessage.judgeItem.strArr)
  return &strarr_;
}

// optional bool force = 8;
inline bool judgeItem::has_force() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void judgeItem::set_has_force() {
  _has_bits_[0] |= 0x00000080u;
}
inline void judgeItem::clear_has_force() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void judgeItem::clear_force() {
  force_ = false;
  clear_has_force();
}
inline bool judgeItem::force() const {
  // @@protoc_insertion_point(field_get:OPMessage.judgeItem.force)
  return force_;
}
inline void judgeItem::set_force(bool value) {
  set_has_force();
  force_ = value;
  // @@protoc_insertion_point(field_set:OPMessage.judgeItem.force)
}

// optional int32 gear = 9;
inline bool judgeItem::has_gear() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void judgeItem::set_has_gear() {
  _has_bits_[0] |= 0x00000100u;
}
inline void judgeItem::clear_has_gear() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void judgeItem::clear_gear() {
  gear_ = 0;
  clear_has_gear();
}
inline ::google::protobuf::int32 judgeItem::gear() const {
  // @@protoc_insertion_point(field_get:OPMessage.judgeItem.gear)
  return gear_;
}
inline void judgeItem::set_gear(::google::protobuf::int32 value) {
  set_has_gear();
  gear_ = value;
  // @@protoc_insertion_point(field_set:OPMessage.judgeItem.gear)
}

// optional int32 type = 10;
inline bool judgeItem::has_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void judgeItem::set_has_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void judgeItem::clear_has_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void judgeItem::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 judgeItem::type() const {
  // @@protoc_insertion_point(field_get:OPMessage.judgeItem.type)
  return type_;
}
inline void judgeItem::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:OPMessage.judgeItem.type)
}

// -------------------------------------------------------------------

// voiceItem

// optional string id = 1;
inline bool voiceItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void voiceItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void voiceItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void voiceItem::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& voiceItem::id() const {
  // @@protoc_insertion_point(field_get:OPMessage.voiceItem.id)
  return *id_;
}
inline void voiceItem::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:OPMessage.voiceItem.id)
}
inline void voiceItem::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:OPMessage.voiceItem.id)
}
inline void voiceItem::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OPMessage.voiceItem.id)
}
inline ::std::string* voiceItem::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:OPMessage.voiceItem.id)
  return id_;
}
inline ::std::string* voiceItem::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void voiceItem::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.voiceItem.id)
}

// optional int32 item = 2;
inline bool voiceItem::has_item() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void voiceItem::set_has_item() {
  _has_bits_[0] |= 0x00000002u;
}
inline void voiceItem::clear_has_item() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void voiceItem::clear_item() {
  item_ = 0;
  clear_has_item();
}
inline ::google::protobuf::int32 voiceItem::item() const {
  // @@protoc_insertion_point(field_get:OPMessage.voiceItem.item)
  return item_;
}
inline void voiceItem::set_item(::google::protobuf::int32 value) {
  set_has_item();
  item_ = value;
  // @@protoc_insertion_point(field_set:OPMessage.voiceItem.item)
}

// optional int32 mistake_enable = 3;
inline bool voiceItem::has_mistake_enable() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void voiceItem::set_has_mistake_enable() {
  _has_bits_[0] |= 0x00000004u;
}
inline void voiceItem::clear_has_mistake_enable() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void voiceItem::clear_mistake_enable() {
  mistake_enable_ = 0;
  clear_has_mistake_enable();
}
inline ::google::protobuf::int32 voiceItem::mistake_enable() const {
  // @@protoc_insertion_point(field_get:OPMessage.voiceItem.mistake_enable)
  return mistake_enable_;
}
inline void voiceItem::set_mistake_enable(::google::protobuf::int32 value) {
  set_has_mistake_enable();
  mistake_enable_ = value;
  // @@protoc_insertion_point(field_set:OPMessage.voiceItem.mistake_enable)
}

// optional int32 mistake_id = 4;
inline bool voiceItem::has_mistake_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void voiceItem::set_has_mistake_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void voiceItem::clear_has_mistake_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void voiceItem::clear_mistake_id() {
  mistake_id_ = 0;
  clear_has_mistake_id();
}
inline ::google::protobuf::int32 voiceItem::mistake_id() const {
  // @@protoc_insertion_point(field_get:OPMessage.voiceItem.mistake_id)
  return mistake_id_;
}
inline void voiceItem::set_mistake_id(::google::protobuf::int32 value) {
  set_has_mistake_id();
  mistake_id_ = value;
  // @@protoc_insertion_point(field_set:OPMessage.voiceItem.mistake_id)
}

// optional int32 mistake_point = 5;
inline bool voiceItem::has_mistake_point() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void voiceItem::set_has_mistake_point() {
  _has_bits_[0] |= 0x00000010u;
}
inline void voiceItem::clear_has_mistake_point() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void voiceItem::clear_mistake_point() {
  mistake_point_ = 0;
  clear_has_mistake_point();
}
inline ::google::protobuf::int32 voiceItem::mistake_point() const {
  // @@protoc_insertion_point(field_get:OPMessage.voiceItem.mistake_point)
  return mistake_point_;
}
inline void voiceItem::set_mistake_point(::google::protobuf::int32 value) {
  set_has_mistake_point();
  mistake_point_ = value;
  // @@protoc_insertion_point(field_set:OPMessage.voiceItem.mistake_point)
}

// optional string mistake_reason = 6;
inline bool voiceItem::has_mistake_reason() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void voiceItem::set_has_mistake_reason() {
  _has_bits_[0] |= 0x00000020u;
}
inline void voiceItem::clear_has_mistake_reason() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void voiceItem::clear_mistake_reason() {
  if (mistake_reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mistake_reason_->clear();
  }
  clear_has_mistake_reason();
}
inline const ::std::string& voiceItem::mistake_reason() const {
  // @@protoc_insertion_point(field_get:OPMessage.voiceItem.mistake_reason)
  return *mistake_reason_;
}
inline void voiceItem::set_mistake_reason(const ::std::string& value) {
  set_has_mistake_reason();
  if (mistake_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mistake_reason_ = new ::std::string;
  }
  mistake_reason_->assign(value);
  // @@protoc_insertion_point(field_set:OPMessage.voiceItem.mistake_reason)
}
inline void voiceItem::set_mistake_reason(const char* value) {
  set_has_mistake_reason();
  if (mistake_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mistake_reason_ = new ::std::string;
  }
  mistake_reason_->assign(value);
  // @@protoc_insertion_point(field_set_char:OPMessage.voiceItem.mistake_reason)
}
inline void voiceItem::set_mistake_reason(const char* value, size_t size) {
  set_has_mistake_reason();
  if (mistake_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mistake_reason_ = new ::std::string;
  }
  mistake_reason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OPMessage.voiceItem.mistake_reason)
}
inline ::std::string* voiceItem::mutable_mistake_reason() {
  set_has_mistake_reason();
  if (mistake_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mistake_reason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:OPMessage.voiceItem.mistake_reason)
  return mistake_reason_;
}
inline ::std::string* voiceItem::release_mistake_reason() {
  clear_has_mistake_reason();
  if (mistake_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mistake_reason_;
    mistake_reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void voiceItem::set_allocated_mistake_reason(::std::string* mistake_reason) {
  if (mistake_reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mistake_reason_;
  }
  if (mistake_reason) {
    set_has_mistake_reason();
    mistake_reason_ = mistake_reason;
  } else {
    clear_has_mistake_reason();
    mistake_reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.voiceItem.mistake_reason)
}

// optional int32 position = 7;
inline bool voiceItem::has_position() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void voiceItem::set_has_position() {
  _has_bits_[0] |= 0x00000040u;
}
inline void voiceItem::clear_has_position() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void voiceItem::clear_position() {
  position_ = 0;
  clear_has_position();
}
inline ::google::protobuf::int32 voiceItem::position() const {
  // @@protoc_insertion_point(field_get:OPMessage.voiceItem.position)
  return position_;
}
inline void voiceItem::set_position(::google::protobuf::int32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:OPMessage.voiceItem.position)
}

// optional string tips = 8;
inline bool voiceItem::has_tips() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void voiceItem::set_has_tips() {
  _has_bits_[0] |= 0x00000080u;
}
inline void voiceItem::clear_has_tips() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void voiceItem::clear_tips() {
  if (tips_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tips_->clear();
  }
  clear_has_tips();
}
inline const ::std::string& voiceItem::tips() const {
  // @@protoc_insertion_point(field_get:OPMessage.voiceItem.tips)
  return *tips_;
}
inline void voiceItem::set_tips(const ::std::string& value) {
  set_has_tips();
  if (tips_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tips_ = new ::std::string;
  }
  tips_->assign(value);
  // @@protoc_insertion_point(field_set:OPMessage.voiceItem.tips)
}
inline void voiceItem::set_tips(const char* value) {
  set_has_tips();
  if (tips_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tips_ = new ::std::string;
  }
  tips_->assign(value);
  // @@protoc_insertion_point(field_set_char:OPMessage.voiceItem.tips)
}
inline void voiceItem::set_tips(const char* value, size_t size) {
  set_has_tips();
  if (tips_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tips_ = new ::std::string;
  }
  tips_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OPMessage.voiceItem.tips)
}
inline ::std::string* voiceItem::mutable_tips() {
  set_has_tips();
  if (tips_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tips_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:OPMessage.voiceItem.tips)
  return tips_;
}
inline ::std::string* voiceItem::release_tips() {
  clear_has_tips();
  if (tips_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tips_;
    tips_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void voiceItem::set_allocated_tips(::std::string* tips) {
  if (tips_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tips_;
  }
  if (tips) {
    set_has_tips();
    tips_ = tips;
  } else {
    clear_has_tips();
    tips_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.voiceItem.tips)
}

// optional int32 title = 9;
inline bool voiceItem::has_title() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void voiceItem::set_has_title() {
  _has_bits_[0] |= 0x00000100u;
}
inline void voiceItem::clear_has_title() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void voiceItem::clear_title() {
  title_ = 0;
  clear_has_title();
}
inline ::google::protobuf::int32 voiceItem::title() const {
  // @@protoc_insertion_point(field_get:OPMessage.voiceItem.title)
  return title_;
}
inline void voiceItem::set_title(::google::protobuf::int32 value) {
  set_has_title();
  title_ = value;
  // @@protoc_insertion_point(field_set:OPMessage.voiceItem.title)
}

// optional string voice = 10;
inline bool voiceItem::has_voice() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void voiceItem::set_has_voice() {
  _has_bits_[0] |= 0x00000200u;
}
inline void voiceItem::clear_has_voice() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void voiceItem::clear_voice() {
  if (voice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    voice_->clear();
  }
  clear_has_voice();
}
inline const ::std::string& voiceItem::voice() const {
  // @@protoc_insertion_point(field_get:OPMessage.voiceItem.voice)
  return *voice_;
}
inline void voiceItem::set_voice(const ::std::string& value) {
  set_has_voice();
  if (voice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    voice_ = new ::std::string;
  }
  voice_->assign(value);
  // @@protoc_insertion_point(field_set:OPMessage.voiceItem.voice)
}
inline void voiceItem::set_voice(const char* value) {
  set_has_voice();
  if (voice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    voice_ = new ::std::string;
  }
  voice_->assign(value);
  // @@protoc_insertion_point(field_set_char:OPMessage.voiceItem.voice)
}
inline void voiceItem::set_voice(const char* value, size_t size) {
  set_has_voice();
  if (voice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    voice_ = new ::std::string;
  }
  voice_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OPMessage.voiceItem.voice)
}
inline ::std::string* voiceItem::mutable_voice() {
  set_has_voice();
  if (voice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    voice_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:OPMessage.voiceItem.voice)
  return voice_;
}
inline ::std::string* voiceItem::release_voice() {
  clear_has_voice();
  if (voice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = voice_;
    voice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void voiceItem::set_allocated_voice(::std::string* voice) {
  if (voice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete voice_;
  }
  if (voice) {
    set_has_voice();
    voice_ = voice;
  } else {
    clear_has_voice();
    voice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.voiceItem.voice)
}

// optional int32 voice_enable = 11;
inline bool voiceItem::has_voice_enable() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void voiceItem::set_has_voice_enable() {
  _has_bits_[0] |= 0x00000400u;
}
inline void voiceItem::clear_has_voice_enable() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void voiceItem::clear_voice_enable() {
  voice_enable_ = 0;
  clear_has_voice_enable();
}
inline ::google::protobuf::int32 voiceItem::voice_enable() const {
  // @@protoc_insertion_point(field_get:OPMessage.voiceItem.voice_enable)
  return voice_enable_;
}
inline void voiceItem::set_voice_enable(::google::protobuf::int32 value) {
  set_has_voice_enable();
  voice_enable_ = value;
  // @@protoc_insertion_point(field_set:OPMessage.voiceItem.voice_enable)
}

// -------------------------------------------------------------------

// Judge0

// optional int32 itemCode = 1;
inline bool Judge0::has_itemcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Judge0::set_has_itemcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Judge0::clear_has_itemcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Judge0::clear_itemcode() {
  itemcode_ = 0;
  clear_has_itemcode();
}
inline ::google::protobuf::int32 Judge0::itemcode() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.itemCode)
  return itemcode_;
}
inline void Judge0::set_itemcode(::google::protobuf::int32 value) {
  set_has_itemcode();
  itemcode_ = value;
  // @@protoc_insertion_point(field_set:OPMessage.Judge0.itemCode)
}

// optional string itemName = 2;
inline bool Judge0::has_itemname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Judge0::set_has_itemname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Judge0::clear_has_itemname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Judge0::clear_itemname() {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_->clear();
  }
  clear_has_itemname();
}
inline const ::std::string& Judge0::itemname() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.itemName)
  return *itemname_;
}
inline void Judge0::set_itemname(const ::std::string& value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
  // @@protoc_insertion_point(field_set:OPMessage.Judge0.itemName)
}
inline void Judge0::set_itemname(const char* value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
  // @@protoc_insertion_point(field_set_char:OPMessage.Judge0.itemName)
}
inline void Judge0::set_itemname(const char* value, size_t size) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OPMessage.Judge0.itemName)
}
inline ::std::string* Judge0::mutable_itemname() {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.itemName)
  return itemname_;
}
inline ::std::string* Judge0::release_itemname() {
  clear_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = itemname_;
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Judge0::set_allocated_itemname(::std::string* itemname) {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (itemname) {
    set_has_itemname();
    itemname_ = itemname;
  } else {
    clear_has_itemname();
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.itemName)
}

// optional .OPMessage.judgeItem max_time = 3;
inline bool Judge0::has_max_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Judge0::set_has_max_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Judge0::clear_has_max_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Judge0::clear_max_time() {
  if (max_time_ != NULL) max_time_->::OPMessage::judgeItem::Clear();
  clear_has_max_time();
}
inline const ::OPMessage::judgeItem& Judge0::max_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.max_time)
  return max_time_ != NULL ? *max_time_ : *default_instance_->max_time_;
}
inline ::OPMessage::judgeItem* Judge0::mutable_max_time() {
  set_has_max_time();
  if (max_time_ == NULL) max_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.max_time)
  return max_time_;
}
inline ::OPMessage::judgeItem* Judge0::release_max_time() {
  clear_has_max_time();
  ::OPMessage::judgeItem* temp = max_time_;
  max_time_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_max_time(::OPMessage::judgeItem* max_time) {
  delete max_time_;
  max_time_ = max_time;
  if (max_time) {
    set_has_max_time();
  } else {
    clear_has_max_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.max_time)
}

// optional .OPMessage.judgeItem max_stop_speed = 4;
inline bool Judge0::has_max_stop_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Judge0::set_has_max_stop_speed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Judge0::clear_has_max_stop_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Judge0::clear_max_stop_speed() {
  if (max_stop_speed_ != NULL) max_stop_speed_->::OPMessage::judgeItem::Clear();
  clear_has_max_stop_speed();
}
inline const ::OPMessage::judgeItem& Judge0::max_stop_speed() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.max_stop_speed)
  return max_stop_speed_ != NULL ? *max_stop_speed_ : *default_instance_->max_stop_speed_;
}
inline ::OPMessage::judgeItem* Judge0::mutable_max_stop_speed() {
  set_has_max_stop_speed();
  if (max_stop_speed_ == NULL) max_stop_speed_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.max_stop_speed)
  return max_stop_speed_;
}
inline ::OPMessage::judgeItem* Judge0::release_max_stop_speed() {
  clear_has_max_stop_speed();
  ::OPMessage::judgeItem* temp = max_stop_speed_;
  max_stop_speed_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_max_stop_speed(::OPMessage::judgeItem* max_stop_speed) {
  delete max_stop_speed_;
  max_stop_speed_ = max_stop_speed;
  if (max_stop_speed) {
    set_has_max_stop_speed();
  } else {
    clear_has_max_stop_speed();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.max_stop_speed)
}

// optional .OPMessage.judgeItem max_speed = 5;
inline bool Judge0::has_max_speed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Judge0::set_has_max_speed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Judge0::clear_has_max_speed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Judge0::clear_max_speed() {
  if (max_speed_ != NULL) max_speed_->::OPMessage::judgeItem::Clear();
  clear_has_max_speed();
}
inline const ::OPMessage::judgeItem& Judge0::max_speed() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.max_speed)
  return max_speed_ != NULL ? *max_speed_ : *default_instance_->max_speed_;
}
inline ::OPMessage::judgeItem* Judge0::mutable_max_speed() {
  set_has_max_speed();
  if (max_speed_ == NULL) max_speed_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.max_speed)
  return max_speed_;
}
inline ::OPMessage::judgeItem* Judge0::release_max_speed() {
  clear_has_max_speed();
  ::OPMessage::judgeItem* temp = max_speed_;
  max_speed_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_max_speed(::OPMessage::judgeItem* max_speed) {
  delete max_speed_;
  max_speed_ = max_speed;
  if (max_speed) {
    set_has_max_speed();
  } else {
    clear_has_max_speed();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.max_speed)
}

// optional .OPMessage.judgeItem max_off_course_distance = 6;
inline bool Judge0::has_max_off_course_distance() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Judge0::set_has_max_off_course_distance() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Judge0::clear_has_max_off_course_distance() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Judge0::clear_max_off_course_distance() {
  if (max_off_course_distance_ != NULL) max_off_course_distance_->::OPMessage::judgeItem::Clear();
  clear_has_max_off_course_distance();
}
inline const ::OPMessage::judgeItem& Judge0::max_off_course_distance() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.max_off_course_distance)
  return max_off_course_distance_ != NULL ? *max_off_course_distance_ : *default_instance_->max_off_course_distance_;
}
inline ::OPMessage::judgeItem* Judge0::mutable_max_off_course_distance() {
  set_has_max_off_course_distance();
  if (max_off_course_distance_ == NULL) max_off_course_distance_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.max_off_course_distance)
  return max_off_course_distance_;
}
inline ::OPMessage::judgeItem* Judge0::release_max_off_course_distance() {
  clear_has_max_off_course_distance();
  ::OPMessage::judgeItem* temp = max_off_course_distance_;
  max_off_course_distance_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_max_off_course_distance(::OPMessage::judgeItem* max_off_course_distance) {
  delete max_off_course_distance_;
  max_off_course_distance_ = max_off_course_distance;
  if (max_off_course_distance) {
    set_has_max_off_course_distance();
  } else {
    clear_has_max_off_course_distance();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.max_off_course_distance)
}

// optional .OPMessage.judgeItem max_near_lamp_off_time = 7;
inline bool Judge0::has_max_near_lamp_off_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Judge0::set_has_max_near_lamp_off_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Judge0::clear_has_max_near_lamp_off_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Judge0::clear_max_near_lamp_off_time() {
  if (max_near_lamp_off_time_ != NULL) max_near_lamp_off_time_->::OPMessage::judgeItem::Clear();
  clear_has_max_near_lamp_off_time();
}
inline const ::OPMessage::judgeItem& Judge0::max_near_lamp_off_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.max_near_lamp_off_time)
  return max_near_lamp_off_time_ != NULL ? *max_near_lamp_off_time_ : *default_instance_->max_near_lamp_off_time_;
}
inline ::OPMessage::judgeItem* Judge0::mutable_max_near_lamp_off_time() {
  set_has_max_near_lamp_off_time();
  if (max_near_lamp_off_time_ == NULL) max_near_lamp_off_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.max_near_lamp_off_time)
  return max_near_lamp_off_time_;
}
inline ::OPMessage::judgeItem* Judge0::release_max_near_lamp_off_time() {
  clear_has_max_near_lamp_off_time();
  ::OPMessage::judgeItem* temp = max_near_lamp_off_time_;
  max_near_lamp_off_time_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_max_near_lamp_off_time(::OPMessage::judgeItem* max_near_lamp_off_time) {
  delete max_near_lamp_off_time_;
  max_near_lamp_off_time_ = max_near_lamp_off_time;
  if (max_near_lamp_off_time) {
    set_has_max_near_lamp_off_time();
  } else {
    clear_has_max_near_lamp_off_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.max_near_lamp_off_time)
}

// optional .OPMessage.judgeItem max_far_lamp_on_time = 8;
inline bool Judge0::has_max_far_lamp_on_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Judge0::set_has_max_far_lamp_on_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Judge0::clear_has_max_far_lamp_on_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Judge0::clear_max_far_lamp_on_time() {
  if (max_far_lamp_on_time_ != NULL) max_far_lamp_on_time_->::OPMessage::judgeItem::Clear();
  clear_has_max_far_lamp_on_time();
}
inline const ::OPMessage::judgeItem& Judge0::max_far_lamp_on_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.max_far_lamp_on_time)
  return max_far_lamp_on_time_ != NULL ? *max_far_lamp_on_time_ : *default_instance_->max_far_lamp_on_time_;
}
inline ::OPMessage::judgeItem* Judge0::mutable_max_far_lamp_on_time() {
  set_has_max_far_lamp_on_time();
  if (max_far_lamp_on_time_ == NULL) max_far_lamp_on_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.max_far_lamp_on_time)
  return max_far_lamp_on_time_;
}
inline ::OPMessage::judgeItem* Judge0::release_max_far_lamp_on_time() {
  clear_has_max_far_lamp_on_time();
  ::OPMessage::judgeItem* temp = max_far_lamp_on_time_;
  max_far_lamp_on_time_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_max_far_lamp_on_time(::OPMessage::judgeItem* max_far_lamp_on_time) {
  delete max_far_lamp_on_time_;
  max_far_lamp_on_time_ = max_far_lamp_on_time;
  if (max_far_lamp_on_time) {
    set_has_max_far_lamp_on_time();
  } else {
    clear_has_max_far_lamp_on_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.max_far_lamp_on_time)
}

// optional .OPMessage.judgeItem auto_gear = 9;
inline bool Judge0::has_auto_gear() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Judge0::set_has_auto_gear() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Judge0::clear_has_auto_gear() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Judge0::clear_auto_gear() {
  if (auto_gear_ != NULL) auto_gear_->::OPMessage::judgeItem::Clear();
  clear_has_auto_gear();
}
inline const ::OPMessage::judgeItem& Judge0::auto_gear() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.auto_gear)
  return auto_gear_ != NULL ? *auto_gear_ : *default_instance_->auto_gear_;
}
inline ::OPMessage::judgeItem* Judge0::mutable_auto_gear() {
  set_has_auto_gear();
  if (auto_gear_ == NULL) auto_gear_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.auto_gear)
  return auto_gear_;
}
inline ::OPMessage::judgeItem* Judge0::release_auto_gear() {
  clear_has_auto_gear();
  ::OPMessage::judgeItem* temp = auto_gear_;
  auto_gear_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_auto_gear(::OPMessage::judgeItem* auto_gear) {
  delete auto_gear_;
  auto_gear_ = auto_gear;
  if (auto_gear) {
    set_has_auto_gear();
  } else {
    clear_has_auto_gear();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.auto_gear)
}

// optional .OPMessage.judgeItem max_first_gear_distance_once = 10;
inline bool Judge0::has_max_first_gear_distance_once() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Judge0::set_has_max_first_gear_distance_once() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Judge0::clear_has_max_first_gear_distance_once() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Judge0::clear_max_first_gear_distance_once() {
  if (max_first_gear_distance_once_ != NULL) max_first_gear_distance_once_->::OPMessage::judgeItem::Clear();
  clear_has_max_first_gear_distance_once();
}
inline const ::OPMessage::judgeItem& Judge0::max_first_gear_distance_once() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.max_first_gear_distance_once)
  return max_first_gear_distance_once_ != NULL ? *max_first_gear_distance_once_ : *default_instance_->max_first_gear_distance_once_;
}
inline ::OPMessage::judgeItem* Judge0::mutable_max_first_gear_distance_once() {
  set_has_max_first_gear_distance_once();
  if (max_first_gear_distance_once_ == NULL) max_first_gear_distance_once_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.max_first_gear_distance_once)
  return max_first_gear_distance_once_;
}
inline ::OPMessage::judgeItem* Judge0::release_max_first_gear_distance_once() {
  clear_has_max_first_gear_distance_once();
  ::OPMessage::judgeItem* temp = max_first_gear_distance_once_;
  max_first_gear_distance_once_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_max_first_gear_distance_once(::OPMessage::judgeItem* max_first_gear_distance_once) {
  delete max_first_gear_distance_once_;
  max_first_gear_distance_once_ = max_first_gear_distance_once;
  if (max_first_gear_distance_once) {
    set_has_max_first_gear_distance_once();
  } else {
    clear_has_max_first_gear_distance_once();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.max_first_gear_distance_once)
}

// optional .OPMessage.judgeItem max_second_gear_distance_once = 11;
inline bool Judge0::has_max_second_gear_distance_once() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Judge0::set_has_max_second_gear_distance_once() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Judge0::clear_has_max_second_gear_distance_once() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Judge0::clear_max_second_gear_distance_once() {
  if (max_second_gear_distance_once_ != NULL) max_second_gear_distance_once_->::OPMessage::judgeItem::Clear();
  clear_has_max_second_gear_distance_once();
}
inline const ::OPMessage::judgeItem& Judge0::max_second_gear_distance_once() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.max_second_gear_distance_once)
  return max_second_gear_distance_once_ != NULL ? *max_second_gear_distance_once_ : *default_instance_->max_second_gear_distance_once_;
}
inline ::OPMessage::judgeItem* Judge0::mutable_max_second_gear_distance_once() {
  set_has_max_second_gear_distance_once();
  if (max_second_gear_distance_once_ == NULL) max_second_gear_distance_once_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.max_second_gear_distance_once)
  return max_second_gear_distance_once_;
}
inline ::OPMessage::judgeItem* Judge0::release_max_second_gear_distance_once() {
  clear_has_max_second_gear_distance_once();
  ::OPMessage::judgeItem* temp = max_second_gear_distance_once_;
  max_second_gear_distance_once_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_max_second_gear_distance_once(::OPMessage::judgeItem* max_second_gear_distance_once) {
  delete max_second_gear_distance_once_;
  max_second_gear_distance_once_ = max_second_gear_distance_once;
  if (max_second_gear_distance_once) {
    set_has_max_second_gear_distance_once();
  } else {
    clear_has_max_second_gear_distance_once();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.max_second_gear_distance_once)
}

// optional .OPMessage.judgeItem max_first_gear_distance_global = 12;
inline bool Judge0::has_max_first_gear_distance_global() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Judge0::set_has_max_first_gear_distance_global() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Judge0::clear_has_max_first_gear_distance_global() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Judge0::clear_max_first_gear_distance_global() {
  if (max_first_gear_distance_global_ != NULL) max_first_gear_distance_global_->::OPMessage::judgeItem::Clear();
  clear_has_max_first_gear_distance_global();
}
inline const ::OPMessage::judgeItem& Judge0::max_first_gear_distance_global() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.max_first_gear_distance_global)
  return max_first_gear_distance_global_ != NULL ? *max_first_gear_distance_global_ : *default_instance_->max_first_gear_distance_global_;
}
inline ::OPMessage::judgeItem* Judge0::mutable_max_first_gear_distance_global() {
  set_has_max_first_gear_distance_global();
  if (max_first_gear_distance_global_ == NULL) max_first_gear_distance_global_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.max_first_gear_distance_global)
  return max_first_gear_distance_global_;
}
inline ::OPMessage::judgeItem* Judge0::release_max_first_gear_distance_global() {
  clear_has_max_first_gear_distance_global();
  ::OPMessage::judgeItem* temp = max_first_gear_distance_global_;
  max_first_gear_distance_global_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_max_first_gear_distance_global(::OPMessage::judgeItem* max_first_gear_distance_global) {
  delete max_first_gear_distance_global_;
  max_first_gear_distance_global_ = max_first_gear_distance_global;
  if (max_first_gear_distance_global) {
    set_has_max_first_gear_distance_global();
  } else {
    clear_has_max_first_gear_distance_global();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.max_first_gear_distance_global)
}

// optional .OPMessage.judgeItem max_second_gear_distance_global = 13;
inline bool Judge0::has_max_second_gear_distance_global() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Judge0::set_has_max_second_gear_distance_global() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Judge0::clear_has_max_second_gear_distance_global() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Judge0::clear_max_second_gear_distance_global() {
  if (max_second_gear_distance_global_ != NULL) max_second_gear_distance_global_->::OPMessage::judgeItem::Clear();
  clear_has_max_second_gear_distance_global();
}
inline const ::OPMessage::judgeItem& Judge0::max_second_gear_distance_global() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.max_second_gear_distance_global)
  return max_second_gear_distance_global_ != NULL ? *max_second_gear_distance_global_ : *default_instance_->max_second_gear_distance_global_;
}
inline ::OPMessage::judgeItem* Judge0::mutable_max_second_gear_distance_global() {
  set_has_max_second_gear_distance_global();
  if (max_second_gear_distance_global_ == NULL) max_second_gear_distance_global_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.max_second_gear_distance_global)
  return max_second_gear_distance_global_;
}
inline ::OPMessage::judgeItem* Judge0::release_max_second_gear_distance_global() {
  clear_has_max_second_gear_distance_global();
  ::OPMessage::judgeItem* temp = max_second_gear_distance_global_;
  max_second_gear_distance_global_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_max_second_gear_distance_global(::OPMessage::judgeItem* max_second_gear_distance_global) {
  delete max_second_gear_distance_global_;
  max_second_gear_distance_global_ = max_second_gear_distance_global;
  if (max_second_gear_distance_global) {
    set_has_max_second_gear_distance_global();
  } else {
    clear_has_max_second_gear_distance_global();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.max_second_gear_distance_global)
}

// optional .OPMessage.judgeItem min_third_gear_distance_global = 14;
inline bool Judge0::has_min_third_gear_distance_global() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Judge0::set_has_min_third_gear_distance_global() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Judge0::clear_has_min_third_gear_distance_global() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Judge0::clear_min_third_gear_distance_global() {
  if (min_third_gear_distance_global_ != NULL) min_third_gear_distance_global_->::OPMessage::judgeItem::Clear();
  clear_has_min_third_gear_distance_global();
}
inline const ::OPMessage::judgeItem& Judge0::min_third_gear_distance_global() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.min_third_gear_distance_global)
  return min_third_gear_distance_global_ != NULL ? *min_third_gear_distance_global_ : *default_instance_->min_third_gear_distance_global_;
}
inline ::OPMessage::judgeItem* Judge0::mutable_min_third_gear_distance_global() {
  set_has_min_third_gear_distance_global();
  if (min_third_gear_distance_global_ == NULL) min_third_gear_distance_global_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.min_third_gear_distance_global)
  return min_third_gear_distance_global_;
}
inline ::OPMessage::judgeItem* Judge0::release_min_third_gear_distance_global() {
  clear_has_min_third_gear_distance_global();
  ::OPMessage::judgeItem* temp = min_third_gear_distance_global_;
  min_third_gear_distance_global_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_min_third_gear_distance_global(::OPMessage::judgeItem* min_third_gear_distance_global) {
  delete min_third_gear_distance_global_;
  min_third_gear_distance_global_ = min_third_gear_distance_global;
  if (min_third_gear_distance_global) {
    set_has_min_third_gear_distance_global();
  } else {
    clear_has_min_third_gear_distance_global();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.min_third_gear_distance_global)
}

// optional .OPMessage.judgeItem global_reach_speed = 15;
inline bool Judge0::has_global_reach_speed() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Judge0::set_has_global_reach_speed() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Judge0::clear_has_global_reach_speed() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Judge0::clear_global_reach_speed() {
  if (global_reach_speed_ != NULL) global_reach_speed_->::OPMessage::judgeItem::Clear();
  clear_has_global_reach_speed();
}
inline const ::OPMessage::judgeItem& Judge0::global_reach_speed() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.global_reach_speed)
  return global_reach_speed_ != NULL ? *global_reach_speed_ : *default_instance_->global_reach_speed_;
}
inline ::OPMessage::judgeItem* Judge0::mutable_global_reach_speed() {
  set_has_global_reach_speed();
  if (global_reach_speed_ == NULL) global_reach_speed_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.global_reach_speed)
  return global_reach_speed_;
}
inline ::OPMessage::judgeItem* Judge0::release_global_reach_speed() {
  clear_has_global_reach_speed();
  ::OPMessage::judgeItem* temp = global_reach_speed_;
  global_reach_speed_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_global_reach_speed(::OPMessage::judgeItem* global_reach_speed) {
  delete global_reach_speed_;
  global_reach_speed_ = global_reach_speed;
  if (global_reach_speed) {
    set_has_global_reach_speed();
  } else {
    clear_has_global_reach_speed();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.global_reach_speed)
}

// optional .OPMessage.judgeItem min_global_reach_speed_distance = 16;
inline bool Judge0::has_min_global_reach_speed_distance() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Judge0::set_has_min_global_reach_speed_distance() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Judge0::clear_has_min_global_reach_speed_distance() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Judge0::clear_min_global_reach_speed_distance() {
  if (min_global_reach_speed_distance_ != NULL) min_global_reach_speed_distance_->::OPMessage::judgeItem::Clear();
  clear_has_min_global_reach_speed_distance();
}
inline const ::OPMessage::judgeItem& Judge0::min_global_reach_speed_distance() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.min_global_reach_speed_distance)
  return min_global_reach_speed_distance_ != NULL ? *min_global_reach_speed_distance_ : *default_instance_->min_global_reach_speed_distance_;
}
inline ::OPMessage::judgeItem* Judge0::mutable_min_global_reach_speed_distance() {
  set_has_min_global_reach_speed_distance();
  if (min_global_reach_speed_distance_ == NULL) min_global_reach_speed_distance_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.min_global_reach_speed_distance)
  return min_global_reach_speed_distance_;
}
inline ::OPMessage::judgeItem* Judge0::release_min_global_reach_speed_distance() {
  clear_has_min_global_reach_speed_distance();
  ::OPMessage::judgeItem* temp = min_global_reach_speed_distance_;
  min_global_reach_speed_distance_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_min_global_reach_speed_distance(::OPMessage::judgeItem* min_global_reach_speed_distance) {
  delete min_global_reach_speed_distance_;
  min_global_reach_speed_distance_ = min_global_reach_speed_distance;
  if (min_global_reach_speed_distance) {
    set_has_min_global_reach_speed_distance();
  } else {
    clear_has_min_global_reach_speed_distance();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.min_global_reach_speed_distance)
}

// optional .OPMessage.judgeItem max_rpm = 17;
inline bool Judge0::has_max_rpm() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Judge0::set_has_max_rpm() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Judge0::clear_has_max_rpm() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Judge0::clear_max_rpm() {
  if (max_rpm_ != NULL) max_rpm_->::OPMessage::judgeItem::Clear();
  clear_has_max_rpm();
}
inline const ::OPMessage::judgeItem& Judge0::max_rpm() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.max_rpm)
  return max_rpm_ != NULL ? *max_rpm_ : *default_instance_->max_rpm_;
}
inline ::OPMessage::judgeItem* Judge0::mutable_max_rpm() {
  set_has_max_rpm();
  if (max_rpm_ == NULL) max_rpm_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.max_rpm)
  return max_rpm_;
}
inline ::OPMessage::judgeItem* Judge0::release_max_rpm() {
  clear_has_max_rpm();
  ::OPMessage::judgeItem* temp = max_rpm_;
  max_rpm_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_max_rpm(::OPMessage::judgeItem* max_rpm) {
  delete max_rpm_;
  max_rpm_ = max_rpm;
  if (max_rpm) {
    set_has_max_rpm();
  } else {
    clear_has_max_rpm();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.max_rpm)
}

// optional .OPMessage.judgeItem max_neutral_distance_once = 18;
inline bool Judge0::has_max_neutral_distance_once() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Judge0::set_has_max_neutral_distance_once() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Judge0::clear_has_max_neutral_distance_once() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Judge0::clear_max_neutral_distance_once() {
  if (max_neutral_distance_once_ != NULL) max_neutral_distance_once_->::OPMessage::judgeItem::Clear();
  clear_has_max_neutral_distance_once();
}
inline const ::OPMessage::judgeItem& Judge0::max_neutral_distance_once() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.max_neutral_distance_once)
  return max_neutral_distance_once_ != NULL ? *max_neutral_distance_once_ : *default_instance_->max_neutral_distance_once_;
}
inline ::OPMessage::judgeItem* Judge0::mutable_max_neutral_distance_once() {
  set_has_max_neutral_distance_once();
  if (max_neutral_distance_once_ == NULL) max_neutral_distance_once_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.max_neutral_distance_once)
  return max_neutral_distance_once_;
}
inline ::OPMessage::judgeItem* Judge0::release_max_neutral_distance_once() {
  clear_has_max_neutral_distance_once();
  ::OPMessage::judgeItem* temp = max_neutral_distance_once_;
  max_neutral_distance_once_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_max_neutral_distance_once(::OPMessage::judgeItem* max_neutral_distance_once) {
  delete max_neutral_distance_once_;
  max_neutral_distance_once_ = max_neutral_distance_once;
  if (max_neutral_distance_once) {
    set_has_max_neutral_distance_once();
  } else {
    clear_has_max_neutral_distance_once();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.max_neutral_distance_once)
}

// optional .OPMessage.judgeItem gear_speed_match_0 = 19;
inline bool Judge0::has_gear_speed_match_0() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Judge0::set_has_gear_speed_match_0() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Judge0::clear_has_gear_speed_match_0() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Judge0::clear_gear_speed_match_0() {
  if (gear_speed_match_0_ != NULL) gear_speed_match_0_->::OPMessage::judgeItem::Clear();
  clear_has_gear_speed_match_0();
}
inline const ::OPMessage::judgeItem& Judge0::gear_speed_match_0() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.gear_speed_match_0)
  return gear_speed_match_0_ != NULL ? *gear_speed_match_0_ : *default_instance_->gear_speed_match_0_;
}
inline ::OPMessage::judgeItem* Judge0::mutable_gear_speed_match_0() {
  set_has_gear_speed_match_0();
  if (gear_speed_match_0_ == NULL) gear_speed_match_0_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.gear_speed_match_0)
  return gear_speed_match_0_;
}
inline ::OPMessage::judgeItem* Judge0::release_gear_speed_match_0() {
  clear_has_gear_speed_match_0();
  ::OPMessage::judgeItem* temp = gear_speed_match_0_;
  gear_speed_match_0_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_gear_speed_match_0(::OPMessage::judgeItem* gear_speed_match_0) {
  delete gear_speed_match_0_;
  gear_speed_match_0_ = gear_speed_match_0;
  if (gear_speed_match_0) {
    set_has_gear_speed_match_0();
  } else {
    clear_has_gear_speed_match_0();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.gear_speed_match_0)
}

// optional .OPMessage.judgeItem gear_speed_match_1 = 20;
inline bool Judge0::has_gear_speed_match_1() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Judge0::set_has_gear_speed_match_1() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Judge0::clear_has_gear_speed_match_1() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Judge0::clear_gear_speed_match_1() {
  if (gear_speed_match_1_ != NULL) gear_speed_match_1_->::OPMessage::judgeItem::Clear();
  clear_has_gear_speed_match_1();
}
inline const ::OPMessage::judgeItem& Judge0::gear_speed_match_1() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.gear_speed_match_1)
  return gear_speed_match_1_ != NULL ? *gear_speed_match_1_ : *default_instance_->gear_speed_match_1_;
}
inline ::OPMessage::judgeItem* Judge0::mutable_gear_speed_match_1() {
  set_has_gear_speed_match_1();
  if (gear_speed_match_1_ == NULL) gear_speed_match_1_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.gear_speed_match_1)
  return gear_speed_match_1_;
}
inline ::OPMessage::judgeItem* Judge0::release_gear_speed_match_1() {
  clear_has_gear_speed_match_1();
  ::OPMessage::judgeItem* temp = gear_speed_match_1_;
  gear_speed_match_1_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_gear_speed_match_1(::OPMessage::judgeItem* gear_speed_match_1) {
  delete gear_speed_match_1_;
  gear_speed_match_1_ = gear_speed_match_1;
  if (gear_speed_match_1) {
    set_has_gear_speed_match_1();
  } else {
    clear_has_gear_speed_match_1();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.gear_speed_match_1)
}

// optional .OPMessage.judgeItem gear_speed_match_2 = 21;
inline bool Judge0::has_gear_speed_match_2() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Judge0::set_has_gear_speed_match_2() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Judge0::clear_has_gear_speed_match_2() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Judge0::clear_gear_speed_match_2() {
  if (gear_speed_match_2_ != NULL) gear_speed_match_2_->::OPMessage::judgeItem::Clear();
  clear_has_gear_speed_match_2();
}
inline const ::OPMessage::judgeItem& Judge0::gear_speed_match_2() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.gear_speed_match_2)
  return gear_speed_match_2_ != NULL ? *gear_speed_match_2_ : *default_instance_->gear_speed_match_2_;
}
inline ::OPMessage::judgeItem* Judge0::mutable_gear_speed_match_2() {
  set_has_gear_speed_match_2();
  if (gear_speed_match_2_ == NULL) gear_speed_match_2_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.gear_speed_match_2)
  return gear_speed_match_2_;
}
inline ::OPMessage::judgeItem* Judge0::release_gear_speed_match_2() {
  clear_has_gear_speed_match_2();
  ::OPMessage::judgeItem* temp = gear_speed_match_2_;
  gear_speed_match_2_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_gear_speed_match_2(::OPMessage::judgeItem* gear_speed_match_2) {
  delete gear_speed_match_2_;
  gear_speed_match_2_ = gear_speed_match_2;
  if (gear_speed_match_2) {
    set_has_gear_speed_match_2();
  } else {
    clear_has_gear_speed_match_2();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.gear_speed_match_2)
}

// optional .OPMessage.judgeItem gear_speed_match_3 = 22;
inline bool Judge0::has_gear_speed_match_3() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Judge0::set_has_gear_speed_match_3() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Judge0::clear_has_gear_speed_match_3() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Judge0::clear_gear_speed_match_3() {
  if (gear_speed_match_3_ != NULL) gear_speed_match_3_->::OPMessage::judgeItem::Clear();
  clear_has_gear_speed_match_3();
}
inline const ::OPMessage::judgeItem& Judge0::gear_speed_match_3() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.gear_speed_match_3)
  return gear_speed_match_3_ != NULL ? *gear_speed_match_3_ : *default_instance_->gear_speed_match_3_;
}
inline ::OPMessage::judgeItem* Judge0::mutable_gear_speed_match_3() {
  set_has_gear_speed_match_3();
  if (gear_speed_match_3_ == NULL) gear_speed_match_3_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.gear_speed_match_3)
  return gear_speed_match_3_;
}
inline ::OPMessage::judgeItem* Judge0::release_gear_speed_match_3() {
  clear_has_gear_speed_match_3();
  ::OPMessage::judgeItem* temp = gear_speed_match_3_;
  gear_speed_match_3_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_gear_speed_match_3(::OPMessage::judgeItem* gear_speed_match_3) {
  delete gear_speed_match_3_;
  gear_speed_match_3_ = gear_speed_match_3;
  if (gear_speed_match_3) {
    set_has_gear_speed_match_3();
  } else {
    clear_has_gear_speed_match_3();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.gear_speed_match_3)
}

// optional .OPMessage.judgeItem gear_speed_match_4 = 23;
inline bool Judge0::has_gear_speed_match_4() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Judge0::set_has_gear_speed_match_4() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Judge0::clear_has_gear_speed_match_4() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Judge0::clear_gear_speed_match_4() {
  if (gear_speed_match_4_ != NULL) gear_speed_match_4_->::OPMessage::judgeItem::Clear();
  clear_has_gear_speed_match_4();
}
inline const ::OPMessage::judgeItem& Judge0::gear_speed_match_4() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.gear_speed_match_4)
  return gear_speed_match_4_ != NULL ? *gear_speed_match_4_ : *default_instance_->gear_speed_match_4_;
}
inline ::OPMessage::judgeItem* Judge0::mutable_gear_speed_match_4() {
  set_has_gear_speed_match_4();
  if (gear_speed_match_4_ == NULL) gear_speed_match_4_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.gear_speed_match_4)
  return gear_speed_match_4_;
}
inline ::OPMessage::judgeItem* Judge0::release_gear_speed_match_4() {
  clear_has_gear_speed_match_4();
  ::OPMessage::judgeItem* temp = gear_speed_match_4_;
  gear_speed_match_4_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_gear_speed_match_4(::OPMessage::judgeItem* gear_speed_match_4) {
  delete gear_speed_match_4_;
  gear_speed_match_4_ = gear_speed_match_4;
  if (gear_speed_match_4) {
    set_has_gear_speed_match_4();
  } else {
    clear_has_gear_speed_match_4();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.gear_speed_match_4)
}

// optional .OPMessage.judgeItem gear_speed_match_5 = 24;
inline bool Judge0::has_gear_speed_match_5() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Judge0::set_has_gear_speed_match_5() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Judge0::clear_has_gear_speed_match_5() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Judge0::clear_gear_speed_match_5() {
  if (gear_speed_match_5_ != NULL) gear_speed_match_5_->::OPMessage::judgeItem::Clear();
  clear_has_gear_speed_match_5();
}
inline const ::OPMessage::judgeItem& Judge0::gear_speed_match_5() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.gear_speed_match_5)
  return gear_speed_match_5_ != NULL ? *gear_speed_match_5_ : *default_instance_->gear_speed_match_5_;
}
inline ::OPMessage::judgeItem* Judge0::mutable_gear_speed_match_5() {
  set_has_gear_speed_match_5();
  if (gear_speed_match_5_ == NULL) gear_speed_match_5_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.gear_speed_match_5)
  return gear_speed_match_5_;
}
inline ::OPMessage::judgeItem* Judge0::release_gear_speed_match_5() {
  clear_has_gear_speed_match_5();
  ::OPMessage::judgeItem* temp = gear_speed_match_5_;
  gear_speed_match_5_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_gear_speed_match_5(::OPMessage::judgeItem* gear_speed_match_5) {
  delete gear_speed_match_5_;
  gear_speed_match_5_ = gear_speed_match_5;
  if (gear_speed_match_5) {
    set_has_gear_speed_match_5();
  } else {
    clear_has_gear_speed_match_5();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.gear_speed_match_5)
}

// optional .OPMessage.judgeItem max_turn_lamp_on_time = 25;
inline bool Judge0::has_max_turn_lamp_on_time() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Judge0::set_has_max_turn_lamp_on_time() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Judge0::clear_has_max_turn_lamp_on_time() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Judge0::clear_max_turn_lamp_on_time() {
  if (max_turn_lamp_on_time_ != NULL) max_turn_lamp_on_time_->::OPMessage::judgeItem::Clear();
  clear_has_max_turn_lamp_on_time();
}
inline const ::OPMessage::judgeItem& Judge0::max_turn_lamp_on_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.max_turn_lamp_on_time)
  return max_turn_lamp_on_time_ != NULL ? *max_turn_lamp_on_time_ : *default_instance_->max_turn_lamp_on_time_;
}
inline ::OPMessage::judgeItem* Judge0::mutable_max_turn_lamp_on_time() {
  set_has_max_turn_lamp_on_time();
  if (max_turn_lamp_on_time_ == NULL) max_turn_lamp_on_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.max_turn_lamp_on_time)
  return max_turn_lamp_on_time_;
}
inline ::OPMessage::judgeItem* Judge0::release_max_turn_lamp_on_time() {
  clear_has_max_turn_lamp_on_time();
  ::OPMessage::judgeItem* temp = max_turn_lamp_on_time_;
  max_turn_lamp_on_time_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_max_turn_lamp_on_time(::OPMessage::judgeItem* max_turn_lamp_on_time) {
  delete max_turn_lamp_on_time_;
  max_turn_lamp_on_time_ = max_turn_lamp_on_time;
  if (max_turn_lamp_on_time) {
    set_has_max_turn_lamp_on_time();
  } else {
    clear_has_max_turn_lamp_on_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.max_turn_lamp_on_time)
}

// optional .OPMessage.judgeItem max_neutral_time_once = 26;
inline bool Judge0::has_max_neutral_time_once() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Judge0::set_has_max_neutral_time_once() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Judge0::clear_has_max_neutral_time_once() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Judge0::clear_max_neutral_time_once() {
  if (max_neutral_time_once_ != NULL) max_neutral_time_once_->::OPMessage::judgeItem::Clear();
  clear_has_max_neutral_time_once();
}
inline const ::OPMessage::judgeItem& Judge0::max_neutral_time_once() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.max_neutral_time_once)
  return max_neutral_time_once_ != NULL ? *max_neutral_time_once_ : *default_instance_->max_neutral_time_once_;
}
inline ::OPMessage::judgeItem* Judge0::mutable_max_neutral_time_once() {
  set_has_max_neutral_time_once();
  if (max_neutral_time_once_ == NULL) max_neutral_time_once_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.max_neutral_time_once)
  return max_neutral_time_once_;
}
inline ::OPMessage::judgeItem* Judge0::release_max_neutral_time_once() {
  clear_has_max_neutral_time_once();
  ::OPMessage::judgeItem* temp = max_neutral_time_once_;
  max_neutral_time_once_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_max_neutral_time_once(::OPMessage::judgeItem* max_neutral_time_once) {
  delete max_neutral_time_once_;
  max_neutral_time_once_ = max_neutral_time_once;
  if (max_neutral_time_once) {
    set_has_max_neutral_time_once();
  } else {
    clear_has_max_neutral_time_once();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.max_neutral_time_once)
}

// optional .OPMessage.judgeItem gear_speed_match_time = 27;
inline bool Judge0::has_gear_speed_match_time() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void Judge0::set_has_gear_speed_match_time() {
  _has_bits_[0] |= 0x04000000u;
}
inline void Judge0::clear_has_gear_speed_match_time() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void Judge0::clear_gear_speed_match_time() {
  if (gear_speed_match_time_ != NULL) gear_speed_match_time_->::OPMessage::judgeItem::Clear();
  clear_has_gear_speed_match_time();
}
inline const ::OPMessage::judgeItem& Judge0::gear_speed_match_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.gear_speed_match_time)
  return gear_speed_match_time_ != NULL ? *gear_speed_match_time_ : *default_instance_->gear_speed_match_time_;
}
inline ::OPMessage::judgeItem* Judge0::mutable_gear_speed_match_time() {
  set_has_gear_speed_match_time();
  if (gear_speed_match_time_ == NULL) gear_speed_match_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.gear_speed_match_time)
  return gear_speed_match_time_;
}
inline ::OPMessage::judgeItem* Judge0::release_gear_speed_match_time() {
  clear_has_gear_speed_match_time();
  ::OPMessage::judgeItem* temp = gear_speed_match_time_;
  gear_speed_match_time_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_gear_speed_match_time(::OPMessage::judgeItem* gear_speed_match_time) {
  delete gear_speed_match_time_;
  gear_speed_match_time_ = gear_speed_match_time;
  if (gear_speed_match_time) {
    set_has_gear_speed_match_time();
  } else {
    clear_has_gear_speed_match_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.gear_speed_match_time)
}

// optional .OPMessage.judgeItem foot_brake_beep = 28;
inline bool Judge0::has_foot_brake_beep() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void Judge0::set_has_foot_brake_beep() {
  _has_bits_[0] |= 0x08000000u;
}
inline void Judge0::clear_has_foot_brake_beep() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void Judge0::clear_foot_brake_beep() {
  if (foot_brake_beep_ != NULL) foot_brake_beep_->::OPMessage::judgeItem::Clear();
  clear_has_foot_brake_beep();
}
inline const ::OPMessage::judgeItem& Judge0::foot_brake_beep() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.foot_brake_beep)
  return foot_brake_beep_ != NULL ? *foot_brake_beep_ : *default_instance_->foot_brake_beep_;
}
inline ::OPMessage::judgeItem* Judge0::mutable_foot_brake_beep() {
  set_has_foot_brake_beep();
  if (foot_brake_beep_ == NULL) foot_brake_beep_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.foot_brake_beep)
  return foot_brake_beep_;
}
inline ::OPMessage::judgeItem* Judge0::release_foot_brake_beep() {
  clear_has_foot_brake_beep();
  ::OPMessage::judgeItem* temp = foot_brake_beep_;
  foot_brake_beep_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_foot_brake_beep(::OPMessage::judgeItem* foot_brake_beep) {
  delete foot_brake_beep_;
  foot_brake_beep_ = foot_brake_beep;
  if (foot_brake_beep) {
    set_has_foot_brake_beep();
  } else {
    clear_has_foot_brake_beep();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.foot_brake_beep)
}

// optional .OPMessage.judgeItem deduct_voice_speak_mode = 29;
inline bool Judge0::has_deduct_voice_speak_mode() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void Judge0::set_has_deduct_voice_speak_mode() {
  _has_bits_[0] |= 0x10000000u;
}
inline void Judge0::clear_has_deduct_voice_speak_mode() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void Judge0::clear_deduct_voice_speak_mode() {
  if (deduct_voice_speak_mode_ != NULL) deduct_voice_speak_mode_->::OPMessage::judgeItem::Clear();
  clear_has_deduct_voice_speak_mode();
}
inline const ::OPMessage::judgeItem& Judge0::deduct_voice_speak_mode() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.deduct_voice_speak_mode)
  return deduct_voice_speak_mode_ != NULL ? *deduct_voice_speak_mode_ : *default_instance_->deduct_voice_speak_mode_;
}
inline ::OPMessage::judgeItem* Judge0::mutable_deduct_voice_speak_mode() {
  set_has_deduct_voice_speak_mode();
  if (deduct_voice_speak_mode_ == NULL) deduct_voice_speak_mode_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.deduct_voice_speak_mode)
  return deduct_voice_speak_mode_;
}
inline ::OPMessage::judgeItem* Judge0::release_deduct_voice_speak_mode() {
  clear_has_deduct_voice_speak_mode();
  ::OPMessage::judgeItem* temp = deduct_voice_speak_mode_;
  deduct_voice_speak_mode_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_deduct_voice_speak_mode(::OPMessage::judgeItem* deduct_voice_speak_mode) {
  delete deduct_voice_speak_mode_;
  deduct_voice_speak_mode_ = deduct_voice_speak_mode;
  if (deduct_voice_speak_mode) {
    set_has_deduct_voice_speak_mode();
  } else {
    clear_has_deduct_voice_speak_mode();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.deduct_voice_speak_mode)
}

// optional .OPMessage.judgeItem car_shake_rpm_threshold = 30;
inline bool Judge0::has_car_shake_rpm_threshold() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void Judge0::set_has_car_shake_rpm_threshold() {
  _has_bits_[0] |= 0x20000000u;
}
inline void Judge0::clear_has_car_shake_rpm_threshold() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void Judge0::clear_car_shake_rpm_threshold() {
  if (car_shake_rpm_threshold_ != NULL) car_shake_rpm_threshold_->::OPMessage::judgeItem::Clear();
  clear_has_car_shake_rpm_threshold();
}
inline const ::OPMessage::judgeItem& Judge0::car_shake_rpm_threshold() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.car_shake_rpm_threshold)
  return car_shake_rpm_threshold_ != NULL ? *car_shake_rpm_threshold_ : *default_instance_->car_shake_rpm_threshold_;
}
inline ::OPMessage::judgeItem* Judge0::mutable_car_shake_rpm_threshold() {
  set_has_car_shake_rpm_threshold();
  if (car_shake_rpm_threshold_ == NULL) car_shake_rpm_threshold_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.car_shake_rpm_threshold)
  return car_shake_rpm_threshold_;
}
inline ::OPMessage::judgeItem* Judge0::release_car_shake_rpm_threshold() {
  clear_has_car_shake_rpm_threshold();
  ::OPMessage::judgeItem* temp = car_shake_rpm_threshold_;
  car_shake_rpm_threshold_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_car_shake_rpm_threshold(::OPMessage::judgeItem* car_shake_rpm_threshold) {
  delete car_shake_rpm_threshold_;
  car_shake_rpm_threshold_ = car_shake_rpm_threshold;
  if (car_shake_rpm_threshold) {
    set_has_car_shake_rpm_threshold();
  } else {
    clear_has_car_shake_rpm_threshold();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.car_shake_rpm_threshold)
}

// optional .OPMessage.judgeItem car_shake_time_threshold = 31;
inline bool Judge0::has_car_shake_time_threshold() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void Judge0::set_has_car_shake_time_threshold() {
  _has_bits_[0] |= 0x40000000u;
}
inline void Judge0::clear_has_car_shake_time_threshold() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void Judge0::clear_car_shake_time_threshold() {
  if (car_shake_time_threshold_ != NULL) car_shake_time_threshold_->::OPMessage::judgeItem::Clear();
  clear_has_car_shake_time_threshold();
}
inline const ::OPMessage::judgeItem& Judge0::car_shake_time_threshold() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.car_shake_time_threshold)
  return car_shake_time_threshold_ != NULL ? *car_shake_time_threshold_ : *default_instance_->car_shake_time_threshold_;
}
inline ::OPMessage::judgeItem* Judge0::mutable_car_shake_time_threshold() {
  set_has_car_shake_time_threshold();
  if (car_shake_time_threshold_ == NULL) car_shake_time_threshold_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.car_shake_time_threshold)
  return car_shake_time_threshold_;
}
inline ::OPMessage::judgeItem* Judge0::release_car_shake_time_threshold() {
  clear_has_car_shake_time_threshold();
  ::OPMessage::judgeItem* temp = car_shake_time_threshold_;
  car_shake_time_threshold_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_car_shake_time_threshold(::OPMessage::judgeItem* car_shake_time_threshold) {
  delete car_shake_time_threshold_;
  car_shake_time_threshold_ = car_shake_time_threshold;
  if (car_shake_time_threshold) {
    set_has_car_shake_time_threshold();
  } else {
    clear_has_car_shake_time_threshold();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.car_shake_time_threshold)
}

// optional .OPMessage.judgeItem repeat_voice_time_delay = 32;
inline bool Judge0::has_repeat_voice_time_delay() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void Judge0::set_has_repeat_voice_time_delay() {
  _has_bits_[0] |= 0x80000000u;
}
inline void Judge0::clear_has_repeat_voice_time_delay() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void Judge0::clear_repeat_voice_time_delay() {
  if (repeat_voice_time_delay_ != NULL) repeat_voice_time_delay_->::OPMessage::judgeItem::Clear();
  clear_has_repeat_voice_time_delay();
}
inline const ::OPMessage::judgeItem& Judge0::repeat_voice_time_delay() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.repeat_voice_time_delay)
  return repeat_voice_time_delay_ != NULL ? *repeat_voice_time_delay_ : *default_instance_->repeat_voice_time_delay_;
}
inline ::OPMessage::judgeItem* Judge0::mutable_repeat_voice_time_delay() {
  set_has_repeat_voice_time_delay();
  if (repeat_voice_time_delay_ == NULL) repeat_voice_time_delay_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.repeat_voice_time_delay)
  return repeat_voice_time_delay_;
}
inline ::OPMessage::judgeItem* Judge0::release_repeat_voice_time_delay() {
  clear_has_repeat_voice_time_delay();
  ::OPMessage::judgeItem* temp = repeat_voice_time_delay_;
  repeat_voice_time_delay_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_repeat_voice_time_delay(::OPMessage::judgeItem* repeat_voice_time_delay) {
  delete repeat_voice_time_delay_;
  repeat_voice_time_delay_ = repeat_voice_time_delay;
  if (repeat_voice_time_delay) {
    set_has_repeat_voice_time_delay();
  } else {
    clear_has_repeat_voice_time_delay();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.repeat_voice_time_delay)
}

// optional .OPMessage.judgeItem min_fourth_gear_distance_global = 33;
inline bool Judge0::has_min_fourth_gear_distance_global() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void Judge0::set_has_min_fourth_gear_distance_global() {
  _has_bits_[1] |= 0x00000001u;
}
inline void Judge0::clear_has_min_fourth_gear_distance_global() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void Judge0::clear_min_fourth_gear_distance_global() {
  if (min_fourth_gear_distance_global_ != NULL) min_fourth_gear_distance_global_->::OPMessage::judgeItem::Clear();
  clear_has_min_fourth_gear_distance_global();
}
inline const ::OPMessage::judgeItem& Judge0::min_fourth_gear_distance_global() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.min_fourth_gear_distance_global)
  return min_fourth_gear_distance_global_ != NULL ? *min_fourth_gear_distance_global_ : *default_instance_->min_fourth_gear_distance_global_;
}
inline ::OPMessage::judgeItem* Judge0::mutable_min_fourth_gear_distance_global() {
  set_has_min_fourth_gear_distance_global();
  if (min_fourth_gear_distance_global_ == NULL) min_fourth_gear_distance_global_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.min_fourth_gear_distance_global)
  return min_fourth_gear_distance_global_;
}
inline ::OPMessage::judgeItem* Judge0::release_min_fourth_gear_distance_global() {
  clear_has_min_fourth_gear_distance_global();
  ::OPMessage::judgeItem* temp = min_fourth_gear_distance_global_;
  min_fourth_gear_distance_global_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_min_fourth_gear_distance_global(::OPMessage::judgeItem* min_fourth_gear_distance_global) {
  delete min_fourth_gear_distance_global_;
  min_fourth_gear_distance_global_ = min_fourth_gear_distance_global;
  if (min_fourth_gear_distance_global) {
    set_has_min_fourth_gear_distance_global();
  } else {
    clear_has_min_fourth_gear_distance_global();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.min_fourth_gear_distance_global)
}

// optional .OPMessage.voiceItem vi_global_app_start = 34;
inline bool Judge0::has_vi_global_app_start() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void Judge0::set_has_vi_global_app_start() {
  _has_bits_[1] |= 0x00000002u;
}
inline void Judge0::clear_has_vi_global_app_start() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void Judge0::clear_vi_global_app_start() {
  if (vi_global_app_start_ != NULL) vi_global_app_start_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_app_start();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_app_start() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_app_start)
  return vi_global_app_start_ != NULL ? *vi_global_app_start_ : *default_instance_->vi_global_app_start_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_app_start() {
  set_has_vi_global_app_start();
  if (vi_global_app_start_ == NULL) vi_global_app_start_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_app_start)
  return vi_global_app_start_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_app_start() {
  clear_has_vi_global_app_start();
  ::OPMessage::voiceItem* temp = vi_global_app_start_;
  vi_global_app_start_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_app_start(::OPMessage::voiceItem* vi_global_app_start) {
  delete vi_global_app_start_;
  vi_global_app_start_ = vi_global_app_start;
  if (vi_global_app_start) {
    set_has_vi_global_app_start();
  } else {
    clear_has_vi_global_app_start();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_app_start)
}

// optional .OPMessage.voiceItem vi_global_not_wear_seat_belts = 35;
inline bool Judge0::has_vi_global_not_wear_seat_belts() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void Judge0::set_has_vi_global_not_wear_seat_belts() {
  _has_bits_[1] |= 0x00000004u;
}
inline void Judge0::clear_has_vi_global_not_wear_seat_belts() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void Judge0::clear_vi_global_not_wear_seat_belts() {
  if (vi_global_not_wear_seat_belts_ != NULL) vi_global_not_wear_seat_belts_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_not_wear_seat_belts();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_not_wear_seat_belts() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_not_wear_seat_belts)
  return vi_global_not_wear_seat_belts_ != NULL ? *vi_global_not_wear_seat_belts_ : *default_instance_->vi_global_not_wear_seat_belts_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_not_wear_seat_belts() {
  set_has_vi_global_not_wear_seat_belts();
  if (vi_global_not_wear_seat_belts_ == NULL) vi_global_not_wear_seat_belts_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_not_wear_seat_belts)
  return vi_global_not_wear_seat_belts_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_not_wear_seat_belts() {
  clear_has_vi_global_not_wear_seat_belts();
  ::OPMessage::voiceItem* temp = vi_global_not_wear_seat_belts_;
  vi_global_not_wear_seat_belts_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_not_wear_seat_belts(::OPMessage::voiceItem* vi_global_not_wear_seat_belts) {
  delete vi_global_not_wear_seat_belts_;
  vi_global_not_wear_seat_belts_ = vi_global_not_wear_seat_belts;
  if (vi_global_not_wear_seat_belts) {
    set_has_vi_global_not_wear_seat_belts();
  } else {
    clear_has_vi_global_not_wear_seat_belts();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_not_wear_seat_belts)
}

// optional .OPMessage.voiceItem vi_global_not_close_door = 36;
inline bool Judge0::has_vi_global_not_close_door() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void Judge0::set_has_vi_global_not_close_door() {
  _has_bits_[1] |= 0x00000008u;
}
inline void Judge0::clear_has_vi_global_not_close_door() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void Judge0::clear_vi_global_not_close_door() {
  if (vi_global_not_close_door_ != NULL) vi_global_not_close_door_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_not_close_door();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_not_close_door() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_not_close_door)
  return vi_global_not_close_door_ != NULL ? *vi_global_not_close_door_ : *default_instance_->vi_global_not_close_door_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_not_close_door() {
  set_has_vi_global_not_close_door();
  if (vi_global_not_close_door_ == NULL) vi_global_not_close_door_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_not_close_door)
  return vi_global_not_close_door_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_not_close_door() {
  clear_has_vi_global_not_close_door();
  ::OPMessage::voiceItem* temp = vi_global_not_close_door_;
  vi_global_not_close_door_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_not_close_door(::OPMessage::voiceItem* vi_global_not_close_door) {
  delete vi_global_not_close_door_;
  vi_global_not_close_door_ = vi_global_not_close_door;
  if (vi_global_not_close_door) {
    set_has_vi_global_not_close_door();
  } else {
    clear_has_vi_global_not_close_door();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_not_close_door)
}

// optional .OPMessage.voiceItem vi_global_falmeout = 37;
inline bool Judge0::has_vi_global_falmeout() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void Judge0::set_has_vi_global_falmeout() {
  _has_bits_[1] |= 0x00000010u;
}
inline void Judge0::clear_has_vi_global_falmeout() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void Judge0::clear_vi_global_falmeout() {
  if (vi_global_falmeout_ != NULL) vi_global_falmeout_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_falmeout();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_falmeout() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_falmeout)
  return vi_global_falmeout_ != NULL ? *vi_global_falmeout_ : *default_instance_->vi_global_falmeout_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_falmeout() {
  set_has_vi_global_falmeout();
  if (vi_global_falmeout_ == NULL) vi_global_falmeout_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_falmeout)
  return vi_global_falmeout_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_falmeout() {
  clear_has_vi_global_falmeout();
  ::OPMessage::voiceItem* temp = vi_global_falmeout_;
  vi_global_falmeout_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_falmeout(::OPMessage::voiceItem* vi_global_falmeout) {
  delete vi_global_falmeout_;
  vi_global_falmeout_ = vi_global_falmeout;
  if (vi_global_falmeout) {
    set_has_vi_global_falmeout();
  } else {
    clear_has_vi_global_falmeout();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_falmeout)
}

// optional .OPMessage.voiceItem vi_global_overspeed = 38;
inline bool Judge0::has_vi_global_overspeed() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void Judge0::set_has_vi_global_overspeed() {
  _has_bits_[1] |= 0x00000020u;
}
inline void Judge0::clear_has_vi_global_overspeed() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void Judge0::clear_vi_global_overspeed() {
  if (vi_global_overspeed_ != NULL) vi_global_overspeed_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_overspeed();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_overspeed() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_overspeed)
  return vi_global_overspeed_ != NULL ? *vi_global_overspeed_ : *default_instance_->vi_global_overspeed_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_overspeed() {
  set_has_vi_global_overspeed();
  if (vi_global_overspeed_ == NULL) vi_global_overspeed_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_overspeed)
  return vi_global_overspeed_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_overspeed() {
  clear_has_vi_global_overspeed();
  ::OPMessage::voiceItem* temp = vi_global_overspeed_;
  vi_global_overspeed_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_overspeed(::OPMessage::voiceItem* vi_global_overspeed) {
  delete vi_global_overspeed_;
  vi_global_overspeed_ = vi_global_overspeed;
  if (vi_global_overspeed) {
    set_has_vi_global_overspeed();
  } else {
    clear_has_vi_global_overspeed();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_overspeed)
}

// optional .OPMessage.voiceItem vi_global_first_gear_distance_overrange_once = 39;
inline bool Judge0::has_vi_global_first_gear_distance_overrange_once() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void Judge0::set_has_vi_global_first_gear_distance_overrange_once() {
  _has_bits_[1] |= 0x00000040u;
}
inline void Judge0::clear_has_vi_global_first_gear_distance_overrange_once() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void Judge0::clear_vi_global_first_gear_distance_overrange_once() {
  if (vi_global_first_gear_distance_overrange_once_ != NULL) vi_global_first_gear_distance_overrange_once_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_first_gear_distance_overrange_once();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_first_gear_distance_overrange_once() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_first_gear_distance_overrange_once)
  return vi_global_first_gear_distance_overrange_once_ != NULL ? *vi_global_first_gear_distance_overrange_once_ : *default_instance_->vi_global_first_gear_distance_overrange_once_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_first_gear_distance_overrange_once() {
  set_has_vi_global_first_gear_distance_overrange_once();
  if (vi_global_first_gear_distance_overrange_once_ == NULL) vi_global_first_gear_distance_overrange_once_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_first_gear_distance_overrange_once)
  return vi_global_first_gear_distance_overrange_once_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_first_gear_distance_overrange_once() {
  clear_has_vi_global_first_gear_distance_overrange_once();
  ::OPMessage::voiceItem* temp = vi_global_first_gear_distance_overrange_once_;
  vi_global_first_gear_distance_overrange_once_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_first_gear_distance_overrange_once(::OPMessage::voiceItem* vi_global_first_gear_distance_overrange_once) {
  delete vi_global_first_gear_distance_overrange_once_;
  vi_global_first_gear_distance_overrange_once_ = vi_global_first_gear_distance_overrange_once;
  if (vi_global_first_gear_distance_overrange_once) {
    set_has_vi_global_first_gear_distance_overrange_once();
  } else {
    clear_has_vi_global_first_gear_distance_overrange_once();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_first_gear_distance_overrange_once)
}

// optional .OPMessage.voiceItem vi_global_second_gear_distance_overrange_once = 40;
inline bool Judge0::has_vi_global_second_gear_distance_overrange_once() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void Judge0::set_has_vi_global_second_gear_distance_overrange_once() {
  _has_bits_[1] |= 0x00000080u;
}
inline void Judge0::clear_has_vi_global_second_gear_distance_overrange_once() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void Judge0::clear_vi_global_second_gear_distance_overrange_once() {
  if (vi_global_second_gear_distance_overrange_once_ != NULL) vi_global_second_gear_distance_overrange_once_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_second_gear_distance_overrange_once();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_second_gear_distance_overrange_once() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_second_gear_distance_overrange_once)
  return vi_global_second_gear_distance_overrange_once_ != NULL ? *vi_global_second_gear_distance_overrange_once_ : *default_instance_->vi_global_second_gear_distance_overrange_once_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_second_gear_distance_overrange_once() {
  set_has_vi_global_second_gear_distance_overrange_once();
  if (vi_global_second_gear_distance_overrange_once_ == NULL) vi_global_second_gear_distance_overrange_once_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_second_gear_distance_overrange_once)
  return vi_global_second_gear_distance_overrange_once_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_second_gear_distance_overrange_once() {
  clear_has_vi_global_second_gear_distance_overrange_once();
  ::OPMessage::voiceItem* temp = vi_global_second_gear_distance_overrange_once_;
  vi_global_second_gear_distance_overrange_once_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_second_gear_distance_overrange_once(::OPMessage::voiceItem* vi_global_second_gear_distance_overrange_once) {
  delete vi_global_second_gear_distance_overrange_once_;
  vi_global_second_gear_distance_overrange_once_ = vi_global_second_gear_distance_overrange_once;
  if (vi_global_second_gear_distance_overrange_once) {
    set_has_vi_global_second_gear_distance_overrange_once();
  } else {
    clear_has_vi_global_second_gear_distance_overrange_once();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_second_gear_distance_overrange_once)
}

// optional .OPMessage.voiceItem vi_global_first_gear_distance_overrange_global = 41;
inline bool Judge0::has_vi_global_first_gear_distance_overrange_global() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void Judge0::set_has_vi_global_first_gear_distance_overrange_global() {
  _has_bits_[1] |= 0x00000100u;
}
inline void Judge0::clear_has_vi_global_first_gear_distance_overrange_global() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void Judge0::clear_vi_global_first_gear_distance_overrange_global() {
  if (vi_global_first_gear_distance_overrange_global_ != NULL) vi_global_first_gear_distance_overrange_global_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_first_gear_distance_overrange_global();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_first_gear_distance_overrange_global() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_first_gear_distance_overrange_global)
  return vi_global_first_gear_distance_overrange_global_ != NULL ? *vi_global_first_gear_distance_overrange_global_ : *default_instance_->vi_global_first_gear_distance_overrange_global_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_first_gear_distance_overrange_global() {
  set_has_vi_global_first_gear_distance_overrange_global();
  if (vi_global_first_gear_distance_overrange_global_ == NULL) vi_global_first_gear_distance_overrange_global_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_first_gear_distance_overrange_global)
  return vi_global_first_gear_distance_overrange_global_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_first_gear_distance_overrange_global() {
  clear_has_vi_global_first_gear_distance_overrange_global();
  ::OPMessage::voiceItem* temp = vi_global_first_gear_distance_overrange_global_;
  vi_global_first_gear_distance_overrange_global_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_first_gear_distance_overrange_global(::OPMessage::voiceItem* vi_global_first_gear_distance_overrange_global) {
  delete vi_global_first_gear_distance_overrange_global_;
  vi_global_first_gear_distance_overrange_global_ = vi_global_first_gear_distance_overrange_global;
  if (vi_global_first_gear_distance_overrange_global) {
    set_has_vi_global_first_gear_distance_overrange_global();
  } else {
    clear_has_vi_global_first_gear_distance_overrange_global();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_first_gear_distance_overrange_global)
}

// optional .OPMessage.voiceItem vi_global_second_gear_distance_overrange_global = 42;
inline bool Judge0::has_vi_global_second_gear_distance_overrange_global() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void Judge0::set_has_vi_global_second_gear_distance_overrange_global() {
  _has_bits_[1] |= 0x00000200u;
}
inline void Judge0::clear_has_vi_global_second_gear_distance_overrange_global() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void Judge0::clear_vi_global_second_gear_distance_overrange_global() {
  if (vi_global_second_gear_distance_overrange_global_ != NULL) vi_global_second_gear_distance_overrange_global_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_second_gear_distance_overrange_global();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_second_gear_distance_overrange_global() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_second_gear_distance_overrange_global)
  return vi_global_second_gear_distance_overrange_global_ != NULL ? *vi_global_second_gear_distance_overrange_global_ : *default_instance_->vi_global_second_gear_distance_overrange_global_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_second_gear_distance_overrange_global() {
  set_has_vi_global_second_gear_distance_overrange_global();
  if (vi_global_second_gear_distance_overrange_global_ == NULL) vi_global_second_gear_distance_overrange_global_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_second_gear_distance_overrange_global)
  return vi_global_second_gear_distance_overrange_global_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_second_gear_distance_overrange_global() {
  clear_has_vi_global_second_gear_distance_overrange_global();
  ::OPMessage::voiceItem* temp = vi_global_second_gear_distance_overrange_global_;
  vi_global_second_gear_distance_overrange_global_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_second_gear_distance_overrange_global(::OPMessage::voiceItem* vi_global_second_gear_distance_overrange_global) {
  delete vi_global_second_gear_distance_overrange_global_;
  vi_global_second_gear_distance_overrange_global_ = vi_global_second_gear_distance_overrange_global;
  if (vi_global_second_gear_distance_overrange_global) {
    set_has_vi_global_second_gear_distance_overrange_global();
  } else {
    clear_has_vi_global_second_gear_distance_overrange_global();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_second_gear_distance_overrange_global)
}

// optional .OPMessage.voiceItem vi_global_third_gear_distance_not_enough = 43;
inline bool Judge0::has_vi_global_third_gear_distance_not_enough() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void Judge0::set_has_vi_global_third_gear_distance_not_enough() {
  _has_bits_[1] |= 0x00000400u;
}
inline void Judge0::clear_has_vi_global_third_gear_distance_not_enough() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void Judge0::clear_vi_global_third_gear_distance_not_enough() {
  if (vi_global_third_gear_distance_not_enough_ != NULL) vi_global_third_gear_distance_not_enough_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_third_gear_distance_not_enough();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_third_gear_distance_not_enough() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_third_gear_distance_not_enough)
  return vi_global_third_gear_distance_not_enough_ != NULL ? *vi_global_third_gear_distance_not_enough_ : *default_instance_->vi_global_third_gear_distance_not_enough_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_third_gear_distance_not_enough() {
  set_has_vi_global_third_gear_distance_not_enough();
  if (vi_global_third_gear_distance_not_enough_ == NULL) vi_global_third_gear_distance_not_enough_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_third_gear_distance_not_enough)
  return vi_global_third_gear_distance_not_enough_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_third_gear_distance_not_enough() {
  clear_has_vi_global_third_gear_distance_not_enough();
  ::OPMessage::voiceItem* temp = vi_global_third_gear_distance_not_enough_;
  vi_global_third_gear_distance_not_enough_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_third_gear_distance_not_enough(::OPMessage::voiceItem* vi_global_third_gear_distance_not_enough) {
  delete vi_global_third_gear_distance_not_enough_;
  vi_global_third_gear_distance_not_enough_ = vi_global_third_gear_distance_not_enough;
  if (vi_global_third_gear_distance_not_enough) {
    set_has_vi_global_third_gear_distance_not_enough();
  } else {
    clear_has_vi_global_third_gear_distance_not_enough();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_third_gear_distance_not_enough)
}

// optional .OPMessage.voiceItem vi_global_fourth_gear_distance_not_enough = 44;
inline bool Judge0::has_vi_global_fourth_gear_distance_not_enough() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void Judge0::set_has_vi_global_fourth_gear_distance_not_enough() {
  _has_bits_[1] |= 0x00000800u;
}
inline void Judge0::clear_has_vi_global_fourth_gear_distance_not_enough() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void Judge0::clear_vi_global_fourth_gear_distance_not_enough() {
  if (vi_global_fourth_gear_distance_not_enough_ != NULL) vi_global_fourth_gear_distance_not_enough_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_fourth_gear_distance_not_enough();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_fourth_gear_distance_not_enough() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_fourth_gear_distance_not_enough)
  return vi_global_fourth_gear_distance_not_enough_ != NULL ? *vi_global_fourth_gear_distance_not_enough_ : *default_instance_->vi_global_fourth_gear_distance_not_enough_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_fourth_gear_distance_not_enough() {
  set_has_vi_global_fourth_gear_distance_not_enough();
  if (vi_global_fourth_gear_distance_not_enough_ == NULL) vi_global_fourth_gear_distance_not_enough_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_fourth_gear_distance_not_enough)
  return vi_global_fourth_gear_distance_not_enough_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_fourth_gear_distance_not_enough() {
  clear_has_vi_global_fourth_gear_distance_not_enough();
  ::OPMessage::voiceItem* temp = vi_global_fourth_gear_distance_not_enough_;
  vi_global_fourth_gear_distance_not_enough_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_fourth_gear_distance_not_enough(::OPMessage::voiceItem* vi_global_fourth_gear_distance_not_enough) {
  delete vi_global_fourth_gear_distance_not_enough_;
  vi_global_fourth_gear_distance_not_enough_ = vi_global_fourth_gear_distance_not_enough;
  if (vi_global_fourth_gear_distance_not_enough) {
    set_has_vi_global_fourth_gear_distance_not_enough();
  } else {
    clear_has_vi_global_fourth_gear_distance_not_enough();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_fourth_gear_distance_not_enough)
}

// optional .OPMessage.voiceItem vi_global_neutral_driving = 45;
inline bool Judge0::has_vi_global_neutral_driving() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void Judge0::set_has_vi_global_neutral_driving() {
  _has_bits_[1] |= 0x00001000u;
}
inline void Judge0::clear_has_vi_global_neutral_driving() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void Judge0::clear_vi_global_neutral_driving() {
  if (vi_global_neutral_driving_ != NULL) vi_global_neutral_driving_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_neutral_driving();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_neutral_driving() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_neutral_driving)
  return vi_global_neutral_driving_ != NULL ? *vi_global_neutral_driving_ : *default_instance_->vi_global_neutral_driving_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_neutral_driving() {
  set_has_vi_global_neutral_driving();
  if (vi_global_neutral_driving_ == NULL) vi_global_neutral_driving_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_neutral_driving)
  return vi_global_neutral_driving_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_neutral_driving() {
  clear_has_vi_global_neutral_driving();
  ::OPMessage::voiceItem* temp = vi_global_neutral_driving_;
  vi_global_neutral_driving_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_neutral_driving(::OPMessage::voiceItem* vi_global_neutral_driving) {
  delete vi_global_neutral_driving_;
  vi_global_neutral_driving_ = vi_global_neutral_driving;
  if (vi_global_neutral_driving) {
    set_has_vi_global_neutral_driving();
  } else {
    clear_has_vi_global_neutral_driving();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_neutral_driving)
}

// optional .OPMessage.voiceItem vi_global_high_speed_not_enough = 46;
inline bool Judge0::has_vi_global_high_speed_not_enough() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void Judge0::set_has_vi_global_high_speed_not_enough() {
  _has_bits_[1] |= 0x00002000u;
}
inline void Judge0::clear_has_vi_global_high_speed_not_enough() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void Judge0::clear_vi_global_high_speed_not_enough() {
  if (vi_global_high_speed_not_enough_ != NULL) vi_global_high_speed_not_enough_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_high_speed_not_enough();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_high_speed_not_enough() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_high_speed_not_enough)
  return vi_global_high_speed_not_enough_ != NULL ? *vi_global_high_speed_not_enough_ : *default_instance_->vi_global_high_speed_not_enough_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_high_speed_not_enough() {
  set_has_vi_global_high_speed_not_enough();
  if (vi_global_high_speed_not_enough_ == NULL) vi_global_high_speed_not_enough_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_high_speed_not_enough)
  return vi_global_high_speed_not_enough_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_high_speed_not_enough() {
  clear_has_vi_global_high_speed_not_enough();
  ::OPMessage::voiceItem* temp = vi_global_high_speed_not_enough_;
  vi_global_high_speed_not_enough_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_high_speed_not_enough(::OPMessage::voiceItem* vi_global_high_speed_not_enough) {
  delete vi_global_high_speed_not_enough_;
  vi_global_high_speed_not_enough_ = vi_global_high_speed_not_enough;
  if (vi_global_high_speed_not_enough) {
    set_has_vi_global_high_speed_not_enough();
  } else {
    clear_has_vi_global_high_speed_not_enough();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_high_speed_not_enough)
}

// optional .OPMessage.voiceItem vi_global_rpm_overrange = 47;
inline bool Judge0::has_vi_global_rpm_overrange() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void Judge0::set_has_vi_global_rpm_overrange() {
  _has_bits_[1] |= 0x00004000u;
}
inline void Judge0::clear_has_vi_global_rpm_overrange() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void Judge0::clear_vi_global_rpm_overrange() {
  if (vi_global_rpm_overrange_ != NULL) vi_global_rpm_overrange_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_rpm_overrange();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_rpm_overrange() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_rpm_overrange)
  return vi_global_rpm_overrange_ != NULL ? *vi_global_rpm_overrange_ : *default_instance_->vi_global_rpm_overrange_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_rpm_overrange() {
  set_has_vi_global_rpm_overrange();
  if (vi_global_rpm_overrange_ == NULL) vi_global_rpm_overrange_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_rpm_overrange)
  return vi_global_rpm_overrange_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_rpm_overrange() {
  clear_has_vi_global_rpm_overrange();
  ::OPMessage::voiceItem* temp = vi_global_rpm_overrange_;
  vi_global_rpm_overrange_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_rpm_overrange(::OPMessage::voiceItem* vi_global_rpm_overrange) {
  delete vi_global_rpm_overrange_;
  vi_global_rpm_overrange_ = vi_global_rpm_overrange;
  if (vi_global_rpm_overrange) {
    set_has_vi_global_rpm_overrange();
  } else {
    clear_has_vi_global_rpm_overrange();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_rpm_overrange)
}

// optional .OPMessage.voiceItem vi_global_gear_speed_not_match = 48;
inline bool Judge0::has_vi_global_gear_speed_not_match() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void Judge0::set_has_vi_global_gear_speed_not_match() {
  _has_bits_[1] |= 0x00008000u;
}
inline void Judge0::clear_has_vi_global_gear_speed_not_match() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void Judge0::clear_vi_global_gear_speed_not_match() {
  if (vi_global_gear_speed_not_match_ != NULL) vi_global_gear_speed_not_match_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_gear_speed_not_match();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_gear_speed_not_match() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_gear_speed_not_match)
  return vi_global_gear_speed_not_match_ != NULL ? *vi_global_gear_speed_not_match_ : *default_instance_->vi_global_gear_speed_not_match_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_gear_speed_not_match() {
  set_has_vi_global_gear_speed_not_match();
  if (vi_global_gear_speed_not_match_ == NULL) vi_global_gear_speed_not_match_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_gear_speed_not_match)
  return vi_global_gear_speed_not_match_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_gear_speed_not_match() {
  clear_has_vi_global_gear_speed_not_match();
  ::OPMessage::voiceItem* temp = vi_global_gear_speed_not_match_;
  vi_global_gear_speed_not_match_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_gear_speed_not_match(::OPMessage::voiceItem* vi_global_gear_speed_not_match) {
  delete vi_global_gear_speed_not_match_;
  vi_global_gear_speed_not_match_ = vi_global_gear_speed_not_match;
  if (vi_global_gear_speed_not_match) {
    set_has_vi_global_gear_speed_not_match();
  } else {
    clear_has_vi_global_gear_speed_not_match();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_gear_speed_not_match)
}

// optional .OPMessage.voiceItem vi_global_exam_timeout = 49;
inline bool Judge0::has_vi_global_exam_timeout() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void Judge0::set_has_vi_global_exam_timeout() {
  _has_bits_[1] |= 0x00010000u;
}
inline void Judge0::clear_has_vi_global_exam_timeout() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void Judge0::clear_vi_global_exam_timeout() {
  if (vi_global_exam_timeout_ != NULL) vi_global_exam_timeout_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_exam_timeout();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_exam_timeout() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_exam_timeout)
  return vi_global_exam_timeout_ != NULL ? *vi_global_exam_timeout_ : *default_instance_->vi_global_exam_timeout_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_exam_timeout() {
  set_has_vi_global_exam_timeout();
  if (vi_global_exam_timeout_ == NULL) vi_global_exam_timeout_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_exam_timeout)
  return vi_global_exam_timeout_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_exam_timeout() {
  clear_has_vi_global_exam_timeout();
  ::OPMessage::voiceItem* temp = vi_global_exam_timeout_;
  vi_global_exam_timeout_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_exam_timeout(::OPMessage::voiceItem* vi_global_exam_timeout) {
  delete vi_global_exam_timeout_;
  vi_global_exam_timeout_ = vi_global_exam_timeout;
  if (vi_global_exam_timeout) {
    set_has_vi_global_exam_timeout();
  } else {
    clear_has_vi_global_exam_timeout();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_exam_timeout)
}

// optional .OPMessage.voiceItem vi_global_turn_lamp_long_time_on = 50;
inline bool Judge0::has_vi_global_turn_lamp_long_time_on() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void Judge0::set_has_vi_global_turn_lamp_long_time_on() {
  _has_bits_[1] |= 0x00020000u;
}
inline void Judge0::clear_has_vi_global_turn_lamp_long_time_on() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void Judge0::clear_vi_global_turn_lamp_long_time_on() {
  if (vi_global_turn_lamp_long_time_on_ != NULL) vi_global_turn_lamp_long_time_on_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_turn_lamp_long_time_on();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_turn_lamp_long_time_on() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_turn_lamp_long_time_on)
  return vi_global_turn_lamp_long_time_on_ != NULL ? *vi_global_turn_lamp_long_time_on_ : *default_instance_->vi_global_turn_lamp_long_time_on_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_turn_lamp_long_time_on() {
  set_has_vi_global_turn_lamp_long_time_on();
  if (vi_global_turn_lamp_long_time_on_ == NULL) vi_global_turn_lamp_long_time_on_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_turn_lamp_long_time_on)
  return vi_global_turn_lamp_long_time_on_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_turn_lamp_long_time_on() {
  clear_has_vi_global_turn_lamp_long_time_on();
  ::OPMessage::voiceItem* temp = vi_global_turn_lamp_long_time_on_;
  vi_global_turn_lamp_long_time_on_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_turn_lamp_long_time_on(::OPMessage::voiceItem* vi_global_turn_lamp_long_time_on) {
  delete vi_global_turn_lamp_long_time_on_;
  vi_global_turn_lamp_long_time_on_ = vi_global_turn_lamp_long_time_on;
  if (vi_global_turn_lamp_long_time_on) {
    set_has_vi_global_turn_lamp_long_time_on();
  } else {
    clear_has_vi_global_turn_lamp_long_time_on();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_turn_lamp_long_time_on)
}

// optional .OPMessage.voiceItem vi_global_road_error = 51;
inline bool Judge0::has_vi_global_road_error() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void Judge0::set_has_vi_global_road_error() {
  _has_bits_[1] |= 0x00040000u;
}
inline void Judge0::clear_has_vi_global_road_error() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void Judge0::clear_vi_global_road_error() {
  if (vi_global_road_error_ != NULL) vi_global_road_error_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_road_error();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_road_error() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_road_error)
  return vi_global_road_error_ != NULL ? *vi_global_road_error_ : *default_instance_->vi_global_road_error_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_road_error() {
  set_has_vi_global_road_error();
  if (vi_global_road_error_ == NULL) vi_global_road_error_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_road_error)
  return vi_global_road_error_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_road_error() {
  clear_has_vi_global_road_error();
  ::OPMessage::voiceItem* temp = vi_global_road_error_;
  vi_global_road_error_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_road_error(::OPMessage::voiceItem* vi_global_road_error) {
  delete vi_global_road_error_;
  vi_global_road_error_ = vi_global_road_error;
  if (vi_global_road_error) {
    set_has_vi_global_road_error();
  } else {
    clear_has_vi_global_road_error();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_road_error)
}

// optional .OPMessage.voiceItem vi_global_exam_over_pass = 52;
inline bool Judge0::has_vi_global_exam_over_pass() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void Judge0::set_has_vi_global_exam_over_pass() {
  _has_bits_[1] |= 0x00080000u;
}
inline void Judge0::clear_has_vi_global_exam_over_pass() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void Judge0::clear_vi_global_exam_over_pass() {
  if (vi_global_exam_over_pass_ != NULL) vi_global_exam_over_pass_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_exam_over_pass();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_exam_over_pass() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_exam_over_pass)
  return vi_global_exam_over_pass_ != NULL ? *vi_global_exam_over_pass_ : *default_instance_->vi_global_exam_over_pass_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_exam_over_pass() {
  set_has_vi_global_exam_over_pass();
  if (vi_global_exam_over_pass_ == NULL) vi_global_exam_over_pass_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_exam_over_pass)
  return vi_global_exam_over_pass_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_exam_over_pass() {
  clear_has_vi_global_exam_over_pass();
  ::OPMessage::voiceItem* temp = vi_global_exam_over_pass_;
  vi_global_exam_over_pass_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_exam_over_pass(::OPMessage::voiceItem* vi_global_exam_over_pass) {
  delete vi_global_exam_over_pass_;
  vi_global_exam_over_pass_ = vi_global_exam_over_pass;
  if (vi_global_exam_over_pass) {
    set_has_vi_global_exam_over_pass();
  } else {
    clear_has_vi_global_exam_over_pass();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_exam_over_pass)
}

// optional .OPMessage.voiceItem vi_global_exam_over_not_pass = 53;
inline bool Judge0::has_vi_global_exam_over_not_pass() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void Judge0::set_has_vi_global_exam_over_not_pass() {
  _has_bits_[1] |= 0x00100000u;
}
inline void Judge0::clear_has_vi_global_exam_over_not_pass() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void Judge0::clear_vi_global_exam_over_not_pass() {
  if (vi_global_exam_over_not_pass_ != NULL) vi_global_exam_over_not_pass_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_exam_over_not_pass();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_exam_over_not_pass() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_exam_over_not_pass)
  return vi_global_exam_over_not_pass_ != NULL ? *vi_global_exam_over_not_pass_ : *default_instance_->vi_global_exam_over_not_pass_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_exam_over_not_pass() {
  set_has_vi_global_exam_over_not_pass();
  if (vi_global_exam_over_not_pass_ == NULL) vi_global_exam_over_not_pass_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_exam_over_not_pass)
  return vi_global_exam_over_not_pass_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_exam_over_not_pass() {
  clear_has_vi_global_exam_over_not_pass();
  ::OPMessage::voiceItem* temp = vi_global_exam_over_not_pass_;
  vi_global_exam_over_not_pass_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_exam_over_not_pass(::OPMessage::voiceItem* vi_global_exam_over_not_pass) {
  delete vi_global_exam_over_not_pass_;
  vi_global_exam_over_not_pass_ = vi_global_exam_over_not_pass;
  if (vi_global_exam_over_not_pass) {
    set_has_vi_global_exam_over_not_pass();
  } else {
    clear_has_vi_global_exam_over_not_pass();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_exam_over_not_pass)
}

// optional .OPMessage.voiceItem vi_global_delay_speak_start = 54;
inline bool Judge0::has_vi_global_delay_speak_start() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void Judge0::set_has_vi_global_delay_speak_start() {
  _has_bits_[1] |= 0x00200000u;
}
inline void Judge0::clear_has_vi_global_delay_speak_start() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void Judge0::clear_vi_global_delay_speak_start() {
  if (vi_global_delay_speak_start_ != NULL) vi_global_delay_speak_start_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_delay_speak_start();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_delay_speak_start() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_delay_speak_start)
  return vi_global_delay_speak_start_ != NULL ? *vi_global_delay_speak_start_ : *default_instance_->vi_global_delay_speak_start_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_delay_speak_start() {
  set_has_vi_global_delay_speak_start();
  if (vi_global_delay_speak_start_ == NULL) vi_global_delay_speak_start_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_delay_speak_start)
  return vi_global_delay_speak_start_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_delay_speak_start() {
  clear_has_vi_global_delay_speak_start();
  ::OPMessage::voiceItem* temp = vi_global_delay_speak_start_;
  vi_global_delay_speak_start_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_delay_speak_start(::OPMessage::voiceItem* vi_global_delay_speak_start) {
  delete vi_global_delay_speak_start_;
  vi_global_delay_speak_start_ = vi_global_delay_speak_start;
  if (vi_global_delay_speak_start) {
    set_has_vi_global_delay_speak_start();
  } else {
    clear_has_vi_global_delay_speak_start();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_delay_speak_start)
}

// optional .OPMessage.voiceItem vi_global_delay_speak_stop = 55;
inline bool Judge0::has_vi_global_delay_speak_stop() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void Judge0::set_has_vi_global_delay_speak_stop() {
  _has_bits_[1] |= 0x00400000u;
}
inline void Judge0::clear_has_vi_global_delay_speak_stop() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void Judge0::clear_vi_global_delay_speak_stop() {
  if (vi_global_delay_speak_stop_ != NULL) vi_global_delay_speak_stop_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_delay_speak_stop();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_delay_speak_stop() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_delay_speak_stop)
  return vi_global_delay_speak_stop_ != NULL ? *vi_global_delay_speak_stop_ : *default_instance_->vi_global_delay_speak_stop_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_delay_speak_stop() {
  set_has_vi_global_delay_speak_stop();
  if (vi_global_delay_speak_stop_ == NULL) vi_global_delay_speak_stop_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_delay_speak_stop)
  return vi_global_delay_speak_stop_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_delay_speak_stop() {
  clear_has_vi_global_delay_speak_stop();
  ::OPMessage::voiceItem* temp = vi_global_delay_speak_stop_;
  vi_global_delay_speak_stop_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_delay_speak_stop(::OPMessage::voiceItem* vi_global_delay_speak_stop) {
  delete vi_global_delay_speak_stop_;
  vi_global_delay_speak_stop_ = vi_global_delay_speak_stop;
  if (vi_global_delay_speak_stop) {
    set_has_vi_global_delay_speak_stop();
  } else {
    clear_has_vi_global_delay_speak_stop();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_delay_speak_stop)
}

// optional .OPMessage.voiceItem vi_global_delay_speak_none = 56;
inline bool Judge0::has_vi_global_delay_speak_none() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void Judge0::set_has_vi_global_delay_speak_none() {
  _has_bits_[1] |= 0x00800000u;
}
inline void Judge0::clear_has_vi_global_delay_speak_none() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void Judge0::clear_vi_global_delay_speak_none() {
  if (vi_global_delay_speak_none_ != NULL) vi_global_delay_speak_none_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_delay_speak_none();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_delay_speak_none() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_delay_speak_none)
  return vi_global_delay_speak_none_ != NULL ? *vi_global_delay_speak_none_ : *default_instance_->vi_global_delay_speak_none_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_delay_speak_none() {
  set_has_vi_global_delay_speak_none();
  if (vi_global_delay_speak_none_ == NULL) vi_global_delay_speak_none_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_delay_speak_none)
  return vi_global_delay_speak_none_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_delay_speak_none() {
  clear_has_vi_global_delay_speak_none();
  ::OPMessage::voiceItem* temp = vi_global_delay_speak_none_;
  vi_global_delay_speak_none_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_delay_speak_none(::OPMessage::voiceItem* vi_global_delay_speak_none) {
  delete vi_global_delay_speak_none_;
  vi_global_delay_speak_none_ = vi_global_delay_speak_none;
  if (vi_global_delay_speak_none) {
    set_has_vi_global_delay_speak_none();
  } else {
    clear_has_vi_global_delay_speak_none();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_delay_speak_none)
}

// optional .OPMessage.voiceItem vi_global_whole_exam_timeout = 57;
inline bool Judge0::has_vi_global_whole_exam_timeout() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void Judge0::set_has_vi_global_whole_exam_timeout() {
  _has_bits_[1] |= 0x01000000u;
}
inline void Judge0::clear_has_vi_global_whole_exam_timeout() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void Judge0::clear_vi_global_whole_exam_timeout() {
  if (vi_global_whole_exam_timeout_ != NULL) vi_global_whole_exam_timeout_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_whole_exam_timeout();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_whole_exam_timeout() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_whole_exam_timeout)
  return vi_global_whole_exam_timeout_ != NULL ? *vi_global_whole_exam_timeout_ : *default_instance_->vi_global_whole_exam_timeout_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_whole_exam_timeout() {
  set_has_vi_global_whole_exam_timeout();
  if (vi_global_whole_exam_timeout_ == NULL) vi_global_whole_exam_timeout_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_whole_exam_timeout)
  return vi_global_whole_exam_timeout_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_whole_exam_timeout() {
  clear_has_vi_global_whole_exam_timeout();
  ::OPMessage::voiceItem* temp = vi_global_whole_exam_timeout_;
  vi_global_whole_exam_timeout_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_whole_exam_timeout(::OPMessage::voiceItem* vi_global_whole_exam_timeout) {
  delete vi_global_whole_exam_timeout_;
  vi_global_whole_exam_timeout_ = vi_global_whole_exam_timeout;
  if (vi_global_whole_exam_timeout) {
    set_has_vi_global_whole_exam_timeout();
  } else {
    clear_has_vi_global_whole_exam_timeout();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_whole_exam_timeout)
}

// optional .OPMessage.voiceItem vi_global_start_driving_with_error_gear = 58;
inline bool Judge0::has_vi_global_start_driving_with_error_gear() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void Judge0::set_has_vi_global_start_driving_with_error_gear() {
  _has_bits_[1] |= 0x02000000u;
}
inline void Judge0::clear_has_vi_global_start_driving_with_error_gear() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void Judge0::clear_vi_global_start_driving_with_error_gear() {
  if (vi_global_start_driving_with_error_gear_ != NULL) vi_global_start_driving_with_error_gear_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_start_driving_with_error_gear();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_start_driving_with_error_gear() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_start_driving_with_error_gear)
  return vi_global_start_driving_with_error_gear_ != NULL ? *vi_global_start_driving_with_error_gear_ : *default_instance_->vi_global_start_driving_with_error_gear_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_start_driving_with_error_gear() {
  set_has_vi_global_start_driving_with_error_gear();
  if (vi_global_start_driving_with_error_gear_ == NULL) vi_global_start_driving_with_error_gear_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_start_driving_with_error_gear)
  return vi_global_start_driving_with_error_gear_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_start_driving_with_error_gear() {
  clear_has_vi_global_start_driving_with_error_gear();
  ::OPMessage::voiceItem* temp = vi_global_start_driving_with_error_gear_;
  vi_global_start_driving_with_error_gear_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_start_driving_with_error_gear(::OPMessage::voiceItem* vi_global_start_driving_with_error_gear) {
  delete vi_global_start_driving_with_error_gear_;
  vi_global_start_driving_with_error_gear_ = vi_global_start_driving_with_error_gear;
  if (vi_global_start_driving_with_error_gear) {
    set_has_vi_global_start_driving_with_error_gear();
  } else {
    clear_has_vi_global_start_driving_with_error_gear();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_start_driving_with_error_gear)
}

// optional .OPMessage.voiceItem vi_global_start_driving_not_release_handbrake = 59;
inline bool Judge0::has_vi_global_start_driving_not_release_handbrake() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void Judge0::set_has_vi_global_start_driving_not_release_handbrake() {
  _has_bits_[1] |= 0x04000000u;
}
inline void Judge0::clear_has_vi_global_start_driving_not_release_handbrake() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void Judge0::clear_vi_global_start_driving_not_release_handbrake() {
  if (vi_global_start_driving_not_release_handbrake_ != NULL) vi_global_start_driving_not_release_handbrake_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_start_driving_not_release_handbrake();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_start_driving_not_release_handbrake() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_start_driving_not_release_handbrake)
  return vi_global_start_driving_not_release_handbrake_ != NULL ? *vi_global_start_driving_not_release_handbrake_ : *default_instance_->vi_global_start_driving_not_release_handbrake_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_start_driving_not_release_handbrake() {
  set_has_vi_global_start_driving_not_release_handbrake();
  if (vi_global_start_driving_not_release_handbrake_ == NULL) vi_global_start_driving_not_release_handbrake_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_start_driving_not_release_handbrake)
  return vi_global_start_driving_not_release_handbrake_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_start_driving_not_release_handbrake() {
  clear_has_vi_global_start_driving_not_release_handbrake();
  ::OPMessage::voiceItem* temp = vi_global_start_driving_not_release_handbrake_;
  vi_global_start_driving_not_release_handbrake_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_start_driving_not_release_handbrake(::OPMessage::voiceItem* vi_global_start_driving_not_release_handbrake) {
  delete vi_global_start_driving_not_release_handbrake_;
  vi_global_start_driving_not_release_handbrake_ = vi_global_start_driving_not_release_handbrake;
  if (vi_global_start_driving_not_release_handbrake) {
    set_has_vi_global_start_driving_not_release_handbrake();
  } else {
    clear_has_vi_global_start_driving_not_release_handbrake();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_start_driving_not_release_handbrake)
}

// optional .OPMessage.voiceItem vi_global_jump_gear = 60;
inline bool Judge0::has_vi_global_jump_gear() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void Judge0::set_has_vi_global_jump_gear() {
  _has_bits_[1] |= 0x08000000u;
}
inline void Judge0::clear_has_vi_global_jump_gear() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void Judge0::clear_vi_global_jump_gear() {
  if (vi_global_jump_gear_ != NULL) vi_global_jump_gear_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_jump_gear();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_jump_gear() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_jump_gear)
  return vi_global_jump_gear_ != NULL ? *vi_global_jump_gear_ : *default_instance_->vi_global_jump_gear_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_jump_gear() {
  set_has_vi_global_jump_gear();
  if (vi_global_jump_gear_ == NULL) vi_global_jump_gear_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_jump_gear)
  return vi_global_jump_gear_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_jump_gear() {
  clear_has_vi_global_jump_gear();
  ::OPMessage::voiceItem* temp = vi_global_jump_gear_;
  vi_global_jump_gear_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_jump_gear(::OPMessage::voiceItem* vi_global_jump_gear) {
  delete vi_global_jump_gear_;
  vi_global_jump_gear_ = vi_global_jump_gear;
  if (vi_global_jump_gear) {
    set_has_vi_global_jump_gear();
  } else {
    clear_has_vi_global_jump_gear();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_jump_gear)
}

// optional .OPMessage.voiceItem vi_global_car_shake = 61;
inline bool Judge0::has_vi_global_car_shake() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void Judge0::set_has_vi_global_car_shake() {
  _has_bits_[1] |= 0x10000000u;
}
inline void Judge0::clear_has_vi_global_car_shake() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void Judge0::clear_vi_global_car_shake() {
  if (vi_global_car_shake_ != NULL) vi_global_car_shake_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_car_shake();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_car_shake() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_car_shake)
  return vi_global_car_shake_ != NULL ? *vi_global_car_shake_ : *default_instance_->vi_global_car_shake_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_car_shake() {
  set_has_vi_global_car_shake();
  if (vi_global_car_shake_ == NULL) vi_global_car_shake_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_car_shake)
  return vi_global_car_shake_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_car_shake() {
  clear_has_vi_global_car_shake();
  ::OPMessage::voiceItem* temp = vi_global_car_shake_;
  vi_global_car_shake_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_car_shake(::OPMessage::voiceItem* vi_global_car_shake) {
  delete vi_global_car_shake_;
  vi_global_car_shake_ = vi_global_car_shake;
  if (vi_global_car_shake) {
    set_has_vi_global_car_shake();
  } else {
    clear_has_vi_global_car_shake();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_car_shake)
}

// optional .OPMessage.voiceItem vi_global_firingup_timeout = 62;
inline bool Judge0::has_vi_global_firingup_timeout() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void Judge0::set_has_vi_global_firingup_timeout() {
  _has_bits_[1] |= 0x20000000u;
}
inline void Judge0::clear_has_vi_global_firingup_timeout() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void Judge0::clear_vi_global_firingup_timeout() {
  if (vi_global_firingup_timeout_ != NULL) vi_global_firingup_timeout_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_firingup_timeout();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_firingup_timeout() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_firingup_timeout)
  return vi_global_firingup_timeout_ != NULL ? *vi_global_firingup_timeout_ : *default_instance_->vi_global_firingup_timeout_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_firingup_timeout() {
  set_has_vi_global_firingup_timeout();
  if (vi_global_firingup_timeout_ == NULL) vi_global_firingup_timeout_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_firingup_timeout)
  return vi_global_firingup_timeout_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_firingup_timeout() {
  clear_has_vi_global_firingup_timeout();
  ::OPMessage::voiceItem* temp = vi_global_firingup_timeout_;
  vi_global_firingup_timeout_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_firingup_timeout(::OPMessage::voiceItem* vi_global_firingup_timeout) {
  delete vi_global_firingup_timeout_;
  vi_global_firingup_timeout_ = vi_global_firingup_timeout;
  if (vi_global_firingup_timeout) {
    set_has_vi_global_firingup_timeout();
  } else {
    clear_has_vi_global_firingup_timeout();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_firingup_timeout)
}

// optional .OPMessage.voiceItem vi_global_notify_push_fingerprint = 63;
inline bool Judge0::has_vi_global_notify_push_fingerprint() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void Judge0::set_has_vi_global_notify_push_fingerprint() {
  _has_bits_[1] |= 0x40000000u;
}
inline void Judge0::clear_has_vi_global_notify_push_fingerprint() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void Judge0::clear_vi_global_notify_push_fingerprint() {
  if (vi_global_notify_push_fingerprint_ != NULL) vi_global_notify_push_fingerprint_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_notify_push_fingerprint();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_notify_push_fingerprint() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_notify_push_fingerprint)
  return vi_global_notify_push_fingerprint_ != NULL ? *vi_global_notify_push_fingerprint_ : *default_instance_->vi_global_notify_push_fingerprint_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_notify_push_fingerprint() {
  set_has_vi_global_notify_push_fingerprint();
  if (vi_global_notify_push_fingerprint_ == NULL) vi_global_notify_push_fingerprint_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_notify_push_fingerprint)
  return vi_global_notify_push_fingerprint_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_notify_push_fingerprint() {
  clear_has_vi_global_notify_push_fingerprint();
  ::OPMessage::voiceItem* temp = vi_global_notify_push_fingerprint_;
  vi_global_notify_push_fingerprint_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_notify_push_fingerprint(::OPMessage::voiceItem* vi_global_notify_push_fingerprint) {
  delete vi_global_notify_push_fingerprint_;
  vi_global_notify_push_fingerprint_ = vi_global_notify_push_fingerprint;
  if (vi_global_notify_push_fingerprint) {
    set_has_vi_global_notify_push_fingerprint();
  } else {
    clear_has_vi_global_notify_push_fingerprint();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_notify_push_fingerprint)
}

// optional .OPMessage.voiceItem vi_global_fingerprint_pass = 64;
inline bool Judge0::has_vi_global_fingerprint_pass() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void Judge0::set_has_vi_global_fingerprint_pass() {
  _has_bits_[1] |= 0x80000000u;
}
inline void Judge0::clear_has_vi_global_fingerprint_pass() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void Judge0::clear_vi_global_fingerprint_pass() {
  if (vi_global_fingerprint_pass_ != NULL) vi_global_fingerprint_pass_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_fingerprint_pass();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_fingerprint_pass() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_fingerprint_pass)
  return vi_global_fingerprint_pass_ != NULL ? *vi_global_fingerprint_pass_ : *default_instance_->vi_global_fingerprint_pass_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_fingerprint_pass() {
  set_has_vi_global_fingerprint_pass();
  if (vi_global_fingerprint_pass_ == NULL) vi_global_fingerprint_pass_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_fingerprint_pass)
  return vi_global_fingerprint_pass_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_fingerprint_pass() {
  clear_has_vi_global_fingerprint_pass();
  ::OPMessage::voiceItem* temp = vi_global_fingerprint_pass_;
  vi_global_fingerprint_pass_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_fingerprint_pass(::OPMessage::voiceItem* vi_global_fingerprint_pass) {
  delete vi_global_fingerprint_pass_;
  vi_global_fingerprint_pass_ = vi_global_fingerprint_pass;
  if (vi_global_fingerprint_pass) {
    set_has_vi_global_fingerprint_pass();
  } else {
    clear_has_vi_global_fingerprint_pass();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_fingerprint_pass)
}

// optional .OPMessage.voiceItem vi_global_global = 65;
inline bool Judge0::has_vi_global_global() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void Judge0::set_has_vi_global_global() {
  _has_bits_[2] |= 0x00000001u;
}
inline void Judge0::clear_has_vi_global_global() {
  _has_bits_[2] &= ~0x00000001u;
}
inline void Judge0::clear_vi_global_global() {
  if (vi_global_global_ != NULL) vi_global_global_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_global();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_global() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_global)
  return vi_global_global_ != NULL ? *vi_global_global_ : *default_instance_->vi_global_global_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_global() {
  set_has_vi_global_global();
  if (vi_global_global_ == NULL) vi_global_global_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_global)
  return vi_global_global_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_global() {
  clear_has_vi_global_global();
  ::OPMessage::voiceItem* temp = vi_global_global_;
  vi_global_global_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_global(::OPMessage::voiceItem* vi_global_global) {
  delete vi_global_global_;
  vi_global_global_ = vi_global_global;
  if (vi_global_global) {
    set_has_vi_global_global();
  } else {
    clear_has_vi_global_global();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_global)
}

// optional .OPMessage.voiceItem vi_global_40100 = 66;
inline bool Judge0::has_vi_global_40100() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void Judge0::set_has_vi_global_40100() {
  _has_bits_[2] |= 0x00000002u;
}
inline void Judge0::clear_has_vi_global_40100() {
  _has_bits_[2] &= ~0x00000002u;
}
inline void Judge0::clear_vi_global_40100() {
  if (vi_global_40100_ != NULL) vi_global_40100_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_40100();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_40100() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_40100)
  return vi_global_40100_ != NULL ? *vi_global_40100_ : *default_instance_->vi_global_40100_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_40100() {
  set_has_vi_global_40100();
  if (vi_global_40100_ == NULL) vi_global_40100_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_40100)
  return vi_global_40100_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_40100() {
  clear_has_vi_global_40100();
  ::OPMessage::voiceItem* temp = vi_global_40100_;
  vi_global_40100_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_40100(::OPMessage::voiceItem* vi_global_40100) {
  delete vi_global_40100_;
  vi_global_40100_ = vi_global_40100;
  if (vi_global_40100) {
    set_has_vi_global_40100();
  } else {
    clear_has_vi_global_40100();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_40100)
}

// optional .OPMessage.voiceItem vi_global_40200 = 67;
inline bool Judge0::has_vi_global_40200() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void Judge0::set_has_vi_global_40200() {
  _has_bits_[2] |= 0x00000004u;
}
inline void Judge0::clear_has_vi_global_40200() {
  _has_bits_[2] &= ~0x00000004u;
}
inline void Judge0::clear_vi_global_40200() {
  if (vi_global_40200_ != NULL) vi_global_40200_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_40200();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_40200() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_40200)
  return vi_global_40200_ != NULL ? *vi_global_40200_ : *default_instance_->vi_global_40200_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_40200() {
  set_has_vi_global_40200();
  if (vi_global_40200_ == NULL) vi_global_40200_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_40200)
  return vi_global_40200_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_40200() {
  clear_has_vi_global_40200();
  ::OPMessage::voiceItem* temp = vi_global_40200_;
  vi_global_40200_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_40200(::OPMessage::voiceItem* vi_global_40200) {
  delete vi_global_40200_;
  vi_global_40200_ = vi_global_40200;
  if (vi_global_40200) {
    set_has_vi_global_40200();
  } else {
    clear_has_vi_global_40200();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_40200)
}

// optional .OPMessage.voiceItem vi_global_40300 = 68;
inline bool Judge0::has_vi_global_40300() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void Judge0::set_has_vi_global_40300() {
  _has_bits_[2] |= 0x00000008u;
}
inline void Judge0::clear_has_vi_global_40300() {
  _has_bits_[2] &= ~0x00000008u;
}
inline void Judge0::clear_vi_global_40300() {
  if (vi_global_40300_ != NULL) vi_global_40300_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_40300();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_40300() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_40300)
  return vi_global_40300_ != NULL ? *vi_global_40300_ : *default_instance_->vi_global_40300_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_40300() {
  set_has_vi_global_40300();
  if (vi_global_40300_ == NULL) vi_global_40300_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_40300)
  return vi_global_40300_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_40300() {
  clear_has_vi_global_40300();
  ::OPMessage::voiceItem* temp = vi_global_40300_;
  vi_global_40300_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_40300(::OPMessage::voiceItem* vi_global_40300) {
  delete vi_global_40300_;
  vi_global_40300_ = vi_global_40300;
  if (vi_global_40300) {
    set_has_vi_global_40300();
  } else {
    clear_has_vi_global_40300();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_40300)
}

// optional .OPMessage.voiceItem vi_global_40400 = 69;
inline bool Judge0::has_vi_global_40400() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline void Judge0::set_has_vi_global_40400() {
  _has_bits_[2] |= 0x00000010u;
}
inline void Judge0::clear_has_vi_global_40400() {
  _has_bits_[2] &= ~0x00000010u;
}
inline void Judge0::clear_vi_global_40400() {
  if (vi_global_40400_ != NULL) vi_global_40400_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_40400();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_40400() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_40400)
  return vi_global_40400_ != NULL ? *vi_global_40400_ : *default_instance_->vi_global_40400_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_40400() {
  set_has_vi_global_40400();
  if (vi_global_40400_ == NULL) vi_global_40400_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_40400)
  return vi_global_40400_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_40400() {
  clear_has_vi_global_40400();
  ::OPMessage::voiceItem* temp = vi_global_40400_;
  vi_global_40400_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_40400(::OPMessage::voiceItem* vi_global_40400) {
  delete vi_global_40400_;
  vi_global_40400_ = vi_global_40400;
  if (vi_global_40400) {
    set_has_vi_global_40400();
  } else {
    clear_has_vi_global_40400();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_40400)
}

// optional .OPMessage.voiceItem vi_global_40500 = 70;
inline bool Judge0::has_vi_global_40500() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
inline void Judge0::set_has_vi_global_40500() {
  _has_bits_[2] |= 0x00000020u;
}
inline void Judge0::clear_has_vi_global_40500() {
  _has_bits_[2] &= ~0x00000020u;
}
inline void Judge0::clear_vi_global_40500() {
  if (vi_global_40500_ != NULL) vi_global_40500_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_40500();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_40500() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_40500)
  return vi_global_40500_ != NULL ? *vi_global_40500_ : *default_instance_->vi_global_40500_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_40500() {
  set_has_vi_global_40500();
  if (vi_global_40500_ == NULL) vi_global_40500_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_40500)
  return vi_global_40500_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_40500() {
  clear_has_vi_global_40500();
  ::OPMessage::voiceItem* temp = vi_global_40500_;
  vi_global_40500_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_40500(::OPMessage::voiceItem* vi_global_40500) {
  delete vi_global_40500_;
  vi_global_40500_ = vi_global_40500;
  if (vi_global_40500) {
    set_has_vi_global_40500();
  } else {
    clear_has_vi_global_40500();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_40500)
}

// optional .OPMessage.voiceItem vi_global_40600 = 71;
inline bool Judge0::has_vi_global_40600() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
inline void Judge0::set_has_vi_global_40600() {
  _has_bits_[2] |= 0x00000040u;
}
inline void Judge0::clear_has_vi_global_40600() {
  _has_bits_[2] &= ~0x00000040u;
}
inline void Judge0::clear_vi_global_40600() {
  if (vi_global_40600_ != NULL) vi_global_40600_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_40600();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_40600() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_40600)
  return vi_global_40600_ != NULL ? *vi_global_40600_ : *default_instance_->vi_global_40600_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_40600() {
  set_has_vi_global_40600();
  if (vi_global_40600_ == NULL) vi_global_40600_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_40600)
  return vi_global_40600_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_40600() {
  clear_has_vi_global_40600();
  ::OPMessage::voiceItem* temp = vi_global_40600_;
  vi_global_40600_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_40600(::OPMessage::voiceItem* vi_global_40600) {
  delete vi_global_40600_;
  vi_global_40600_ = vi_global_40600;
  if (vi_global_40600) {
    set_has_vi_global_40600();
  } else {
    clear_has_vi_global_40600();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_40600)
}

// optional .OPMessage.voiceItem vi_global_40601 = 72;
inline bool Judge0::has_vi_global_40601() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
inline void Judge0::set_has_vi_global_40601() {
  _has_bits_[2] |= 0x00000080u;
}
inline void Judge0::clear_has_vi_global_40601() {
  _has_bits_[2] &= ~0x00000080u;
}
inline void Judge0::clear_vi_global_40601() {
  if (vi_global_40601_ != NULL) vi_global_40601_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_40601();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_40601() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_40601)
  return vi_global_40601_ != NULL ? *vi_global_40601_ : *default_instance_->vi_global_40601_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_40601() {
  set_has_vi_global_40601();
  if (vi_global_40601_ == NULL) vi_global_40601_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_40601)
  return vi_global_40601_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_40601() {
  clear_has_vi_global_40601();
  ::OPMessage::voiceItem* temp = vi_global_40601_;
  vi_global_40601_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_40601(::OPMessage::voiceItem* vi_global_40601) {
  delete vi_global_40601_;
  vi_global_40601_ = vi_global_40601;
  if (vi_global_40601) {
    set_has_vi_global_40601();
  } else {
    clear_has_vi_global_40601();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_40601)
}

// optional .OPMessage.voiceItem vi_global_40700 = 73;
inline bool Judge0::has_vi_global_40700() const {
  return (_has_bits_[2] & 0x00000100u) != 0;
}
inline void Judge0::set_has_vi_global_40700() {
  _has_bits_[2] |= 0x00000100u;
}
inline void Judge0::clear_has_vi_global_40700() {
  _has_bits_[2] &= ~0x00000100u;
}
inline void Judge0::clear_vi_global_40700() {
  if (vi_global_40700_ != NULL) vi_global_40700_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_40700();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_40700() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_40700)
  return vi_global_40700_ != NULL ? *vi_global_40700_ : *default_instance_->vi_global_40700_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_40700() {
  set_has_vi_global_40700();
  if (vi_global_40700_ == NULL) vi_global_40700_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_40700)
  return vi_global_40700_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_40700() {
  clear_has_vi_global_40700();
  ::OPMessage::voiceItem* temp = vi_global_40700_;
  vi_global_40700_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_40700(::OPMessage::voiceItem* vi_global_40700) {
  delete vi_global_40700_;
  vi_global_40700_ = vi_global_40700;
  if (vi_global_40700) {
    set_has_vi_global_40700();
  } else {
    clear_has_vi_global_40700();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_40700)
}

// optional .OPMessage.voiceItem vi_global_40800 = 74;
inline bool Judge0::has_vi_global_40800() const {
  return (_has_bits_[2] & 0x00000200u) != 0;
}
inline void Judge0::set_has_vi_global_40800() {
  _has_bits_[2] |= 0x00000200u;
}
inline void Judge0::clear_has_vi_global_40800() {
  _has_bits_[2] &= ~0x00000200u;
}
inline void Judge0::clear_vi_global_40800() {
  if (vi_global_40800_ != NULL) vi_global_40800_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_40800();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_40800() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_40800)
  return vi_global_40800_ != NULL ? *vi_global_40800_ : *default_instance_->vi_global_40800_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_40800() {
  set_has_vi_global_40800();
  if (vi_global_40800_ == NULL) vi_global_40800_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_40800)
  return vi_global_40800_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_40800() {
  clear_has_vi_global_40800();
  ::OPMessage::voiceItem* temp = vi_global_40800_;
  vi_global_40800_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_40800(::OPMessage::voiceItem* vi_global_40800) {
  delete vi_global_40800_;
  vi_global_40800_ = vi_global_40800;
  if (vi_global_40800) {
    set_has_vi_global_40800();
  } else {
    clear_has_vi_global_40800();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_40800)
}

// optional .OPMessage.voiceItem vi_global_40900 = 75;
inline bool Judge0::has_vi_global_40900() const {
  return (_has_bits_[2] & 0x00000400u) != 0;
}
inline void Judge0::set_has_vi_global_40900() {
  _has_bits_[2] |= 0x00000400u;
}
inline void Judge0::clear_has_vi_global_40900() {
  _has_bits_[2] &= ~0x00000400u;
}
inline void Judge0::clear_vi_global_40900() {
  if (vi_global_40900_ != NULL) vi_global_40900_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_40900();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_40900() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_40900)
  return vi_global_40900_ != NULL ? *vi_global_40900_ : *default_instance_->vi_global_40900_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_40900() {
  set_has_vi_global_40900();
  if (vi_global_40900_ == NULL) vi_global_40900_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_40900)
  return vi_global_40900_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_40900() {
  clear_has_vi_global_40900();
  ::OPMessage::voiceItem* temp = vi_global_40900_;
  vi_global_40900_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_40900(::OPMessage::voiceItem* vi_global_40900) {
  delete vi_global_40900_;
  vi_global_40900_ = vi_global_40900;
  if (vi_global_40900) {
    set_has_vi_global_40900();
  } else {
    clear_has_vi_global_40900();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_40900)
}

// optional .OPMessage.voiceItem vi_global_41000 = 76;
inline bool Judge0::has_vi_global_41000() const {
  return (_has_bits_[2] & 0x00000800u) != 0;
}
inline void Judge0::set_has_vi_global_41000() {
  _has_bits_[2] |= 0x00000800u;
}
inline void Judge0::clear_has_vi_global_41000() {
  _has_bits_[2] &= ~0x00000800u;
}
inline void Judge0::clear_vi_global_41000() {
  if (vi_global_41000_ != NULL) vi_global_41000_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_41000();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_41000() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_41000)
  return vi_global_41000_ != NULL ? *vi_global_41000_ : *default_instance_->vi_global_41000_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_41000() {
  set_has_vi_global_41000();
  if (vi_global_41000_ == NULL) vi_global_41000_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_41000)
  return vi_global_41000_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_41000() {
  clear_has_vi_global_41000();
  ::OPMessage::voiceItem* temp = vi_global_41000_;
  vi_global_41000_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_41000(::OPMessage::voiceItem* vi_global_41000) {
  delete vi_global_41000_;
  vi_global_41000_ = vi_global_41000;
  if (vi_global_41000) {
    set_has_vi_global_41000();
  } else {
    clear_has_vi_global_41000();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_41000)
}

// optional .OPMessage.voiceItem vi_global_41001 = 77;
inline bool Judge0::has_vi_global_41001() const {
  return (_has_bits_[2] & 0x00001000u) != 0;
}
inline void Judge0::set_has_vi_global_41001() {
  _has_bits_[2] |= 0x00001000u;
}
inline void Judge0::clear_has_vi_global_41001() {
  _has_bits_[2] &= ~0x00001000u;
}
inline void Judge0::clear_vi_global_41001() {
  if (vi_global_41001_ != NULL) vi_global_41001_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_41001();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_41001() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_41001)
  return vi_global_41001_ != NULL ? *vi_global_41001_ : *default_instance_->vi_global_41001_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_41001() {
  set_has_vi_global_41001();
  if (vi_global_41001_ == NULL) vi_global_41001_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_41001)
  return vi_global_41001_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_41001() {
  clear_has_vi_global_41001();
  ::OPMessage::voiceItem* temp = vi_global_41001_;
  vi_global_41001_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_41001(::OPMessage::voiceItem* vi_global_41001) {
  delete vi_global_41001_;
  vi_global_41001_ = vi_global_41001;
  if (vi_global_41001) {
    set_has_vi_global_41001();
  } else {
    clear_has_vi_global_41001();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_41001)
}

// optional .OPMessage.voiceItem vi_global_41100 = 78;
inline bool Judge0::has_vi_global_41100() const {
  return (_has_bits_[2] & 0x00002000u) != 0;
}
inline void Judge0::set_has_vi_global_41100() {
  _has_bits_[2] |= 0x00002000u;
}
inline void Judge0::clear_has_vi_global_41100() {
  _has_bits_[2] &= ~0x00002000u;
}
inline void Judge0::clear_vi_global_41100() {
  if (vi_global_41100_ != NULL) vi_global_41100_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_41100();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_41100() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_41100)
  return vi_global_41100_ != NULL ? *vi_global_41100_ : *default_instance_->vi_global_41100_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_41100() {
  set_has_vi_global_41100();
  if (vi_global_41100_ == NULL) vi_global_41100_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_41100)
  return vi_global_41100_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_41100() {
  clear_has_vi_global_41100();
  ::OPMessage::voiceItem* temp = vi_global_41100_;
  vi_global_41100_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_41100(::OPMessage::voiceItem* vi_global_41100) {
  delete vi_global_41100_;
  vi_global_41100_ = vi_global_41100;
  if (vi_global_41100) {
    set_has_vi_global_41100();
  } else {
    clear_has_vi_global_41100();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_41100)
}

// optional .OPMessage.voiceItem vi_global_41200 = 79;
inline bool Judge0::has_vi_global_41200() const {
  return (_has_bits_[2] & 0x00004000u) != 0;
}
inline void Judge0::set_has_vi_global_41200() {
  _has_bits_[2] |= 0x00004000u;
}
inline void Judge0::clear_has_vi_global_41200() {
  _has_bits_[2] &= ~0x00004000u;
}
inline void Judge0::clear_vi_global_41200() {
  if (vi_global_41200_ != NULL) vi_global_41200_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_41200();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_41200() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_41200)
  return vi_global_41200_ != NULL ? *vi_global_41200_ : *default_instance_->vi_global_41200_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_41200() {
  set_has_vi_global_41200();
  if (vi_global_41200_ == NULL) vi_global_41200_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_41200)
  return vi_global_41200_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_41200() {
  clear_has_vi_global_41200();
  ::OPMessage::voiceItem* temp = vi_global_41200_;
  vi_global_41200_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_41200(::OPMessage::voiceItem* vi_global_41200) {
  delete vi_global_41200_;
  vi_global_41200_ = vi_global_41200;
  if (vi_global_41200) {
    set_has_vi_global_41200();
  } else {
    clear_has_vi_global_41200();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_41200)
}

// optional .OPMessage.voiceItem vi_global_41300 = 80;
inline bool Judge0::has_vi_global_41300() const {
  return (_has_bits_[2] & 0x00008000u) != 0;
}
inline void Judge0::set_has_vi_global_41300() {
  _has_bits_[2] |= 0x00008000u;
}
inline void Judge0::clear_has_vi_global_41300() {
  _has_bits_[2] &= ~0x00008000u;
}
inline void Judge0::clear_vi_global_41300() {
  if (vi_global_41300_ != NULL) vi_global_41300_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_41300();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_41300() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_41300)
  return vi_global_41300_ != NULL ? *vi_global_41300_ : *default_instance_->vi_global_41300_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_41300() {
  set_has_vi_global_41300();
  if (vi_global_41300_ == NULL) vi_global_41300_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_41300)
  return vi_global_41300_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_41300() {
  clear_has_vi_global_41300();
  ::OPMessage::voiceItem* temp = vi_global_41300_;
  vi_global_41300_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_41300(::OPMessage::voiceItem* vi_global_41300) {
  delete vi_global_41300_;
  vi_global_41300_ = vi_global_41300;
  if (vi_global_41300) {
    set_has_vi_global_41300();
  } else {
    clear_has_vi_global_41300();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_41300)
}

// optional .OPMessage.voiceItem vi_global_41400 = 81;
inline bool Judge0::has_vi_global_41400() const {
  return (_has_bits_[2] & 0x00010000u) != 0;
}
inline void Judge0::set_has_vi_global_41400() {
  _has_bits_[2] |= 0x00010000u;
}
inline void Judge0::clear_has_vi_global_41400() {
  _has_bits_[2] &= ~0x00010000u;
}
inline void Judge0::clear_vi_global_41400() {
  if (vi_global_41400_ != NULL) vi_global_41400_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_41400();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_41400() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_41400)
  return vi_global_41400_ != NULL ? *vi_global_41400_ : *default_instance_->vi_global_41400_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_41400() {
  set_has_vi_global_41400();
  if (vi_global_41400_ == NULL) vi_global_41400_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_41400)
  return vi_global_41400_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_41400() {
  clear_has_vi_global_41400();
  ::OPMessage::voiceItem* temp = vi_global_41400_;
  vi_global_41400_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_41400(::OPMessage::voiceItem* vi_global_41400) {
  delete vi_global_41400_;
  vi_global_41400_ = vi_global_41400;
  if (vi_global_41400) {
    set_has_vi_global_41400();
  } else {
    clear_has_vi_global_41400();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_41400)
}

// optional .OPMessage.voiceItem vi_global_41500 = 82;
inline bool Judge0::has_vi_global_41500() const {
  return (_has_bits_[2] & 0x00020000u) != 0;
}
inline void Judge0::set_has_vi_global_41500() {
  _has_bits_[2] |= 0x00020000u;
}
inline void Judge0::clear_has_vi_global_41500() {
  _has_bits_[2] &= ~0x00020000u;
}
inline void Judge0::clear_vi_global_41500() {
  if (vi_global_41500_ != NULL) vi_global_41500_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_41500();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_41500() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_41500)
  return vi_global_41500_ != NULL ? *vi_global_41500_ : *default_instance_->vi_global_41500_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_41500() {
  set_has_vi_global_41500();
  if (vi_global_41500_ == NULL) vi_global_41500_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_41500)
  return vi_global_41500_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_41500() {
  clear_has_vi_global_41500();
  ::OPMessage::voiceItem* temp = vi_global_41500_;
  vi_global_41500_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_41500(::OPMessage::voiceItem* vi_global_41500) {
  delete vi_global_41500_;
  vi_global_41500_ = vi_global_41500;
  if (vi_global_41500) {
    set_has_vi_global_41500();
  } else {
    clear_has_vi_global_41500();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_41500)
}

// optional .OPMessage.voiceItem vi_global_41600 = 83;
inline bool Judge0::has_vi_global_41600() const {
  return (_has_bits_[2] & 0x00040000u) != 0;
}
inline void Judge0::set_has_vi_global_41600() {
  _has_bits_[2] |= 0x00040000u;
}
inline void Judge0::clear_has_vi_global_41600() {
  _has_bits_[2] &= ~0x00040000u;
}
inline void Judge0::clear_vi_global_41600() {
  if (vi_global_41600_ != NULL) vi_global_41600_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_41600();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_41600() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_41600)
  return vi_global_41600_ != NULL ? *vi_global_41600_ : *default_instance_->vi_global_41600_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_41600() {
  set_has_vi_global_41600();
  if (vi_global_41600_ == NULL) vi_global_41600_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_41600)
  return vi_global_41600_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_41600() {
  clear_has_vi_global_41600();
  ::OPMessage::voiceItem* temp = vi_global_41600_;
  vi_global_41600_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_41600(::OPMessage::voiceItem* vi_global_41600) {
  delete vi_global_41600_;
  vi_global_41600_ = vi_global_41600;
  if (vi_global_41600) {
    set_has_vi_global_41600();
  } else {
    clear_has_vi_global_41600();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_41600)
}

// optional .OPMessage.voiceItem vi_global_50001 = 84;
inline bool Judge0::has_vi_global_50001() const {
  return (_has_bits_[2] & 0x00080000u) != 0;
}
inline void Judge0::set_has_vi_global_50001() {
  _has_bits_[2] |= 0x00080000u;
}
inline void Judge0::clear_has_vi_global_50001() {
  _has_bits_[2] &= ~0x00080000u;
}
inline void Judge0::clear_vi_global_50001() {
  if (vi_global_50001_ != NULL) vi_global_50001_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_50001();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_50001() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_50001)
  return vi_global_50001_ != NULL ? *vi_global_50001_ : *default_instance_->vi_global_50001_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_50001() {
  set_has_vi_global_50001();
  if (vi_global_50001_ == NULL) vi_global_50001_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_50001)
  return vi_global_50001_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_50001() {
  clear_has_vi_global_50001();
  ::OPMessage::voiceItem* temp = vi_global_50001_;
  vi_global_50001_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_50001(::OPMessage::voiceItem* vi_global_50001) {
  delete vi_global_50001_;
  vi_global_50001_ = vi_global_50001;
  if (vi_global_50001) {
    set_has_vi_global_50001();
  } else {
    clear_has_vi_global_50001();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_50001)
}

// optional .OPMessage.voiceItem vi_global_50002 = 85;
inline bool Judge0::has_vi_global_50002() const {
  return (_has_bits_[2] & 0x00100000u) != 0;
}
inline void Judge0::set_has_vi_global_50002() {
  _has_bits_[2] |= 0x00100000u;
}
inline void Judge0::clear_has_vi_global_50002() {
  _has_bits_[2] &= ~0x00100000u;
}
inline void Judge0::clear_vi_global_50002() {
  if (vi_global_50002_ != NULL) vi_global_50002_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_50002();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_50002() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_50002)
  return vi_global_50002_ != NULL ? *vi_global_50002_ : *default_instance_->vi_global_50002_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_50002() {
  set_has_vi_global_50002();
  if (vi_global_50002_ == NULL) vi_global_50002_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_50002)
  return vi_global_50002_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_50002() {
  clear_has_vi_global_50002();
  ::OPMessage::voiceItem* temp = vi_global_50002_;
  vi_global_50002_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_50002(::OPMessage::voiceItem* vi_global_50002) {
  delete vi_global_50002_;
  vi_global_50002_ = vi_global_50002;
  if (vi_global_50002) {
    set_has_vi_global_50002();
  } else {
    clear_has_vi_global_50002();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_50002)
}

// optional .OPMessage.voiceItem vi_global_50003 = 86;
inline bool Judge0::has_vi_global_50003() const {
  return (_has_bits_[2] & 0x00200000u) != 0;
}
inline void Judge0::set_has_vi_global_50003() {
  _has_bits_[2] |= 0x00200000u;
}
inline void Judge0::clear_has_vi_global_50003() {
  _has_bits_[2] &= ~0x00200000u;
}
inline void Judge0::clear_vi_global_50003() {
  if (vi_global_50003_ != NULL) vi_global_50003_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_50003();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_50003() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_50003)
  return vi_global_50003_ != NULL ? *vi_global_50003_ : *default_instance_->vi_global_50003_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_50003() {
  set_has_vi_global_50003();
  if (vi_global_50003_ == NULL) vi_global_50003_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_50003)
  return vi_global_50003_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_50003() {
  clear_has_vi_global_50003();
  ::OPMessage::voiceItem* temp = vi_global_50003_;
  vi_global_50003_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_50003(::OPMessage::voiceItem* vi_global_50003) {
  delete vi_global_50003_;
  vi_global_50003_ = vi_global_50003;
  if (vi_global_50003) {
    set_has_vi_global_50003();
  } else {
    clear_has_vi_global_50003();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_50003)
}

// optional .OPMessage.voiceItem vi_global_50004 = 87;
inline bool Judge0::has_vi_global_50004() const {
  return (_has_bits_[2] & 0x00400000u) != 0;
}
inline void Judge0::set_has_vi_global_50004() {
  _has_bits_[2] |= 0x00400000u;
}
inline void Judge0::clear_has_vi_global_50004() {
  _has_bits_[2] &= ~0x00400000u;
}
inline void Judge0::clear_vi_global_50004() {
  if (vi_global_50004_ != NULL) vi_global_50004_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_50004();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_50004() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_50004)
  return vi_global_50004_ != NULL ? *vi_global_50004_ : *default_instance_->vi_global_50004_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_50004() {
  set_has_vi_global_50004();
  if (vi_global_50004_ == NULL) vi_global_50004_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_50004)
  return vi_global_50004_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_50004() {
  clear_has_vi_global_50004();
  ::OPMessage::voiceItem* temp = vi_global_50004_;
  vi_global_50004_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_50004(::OPMessage::voiceItem* vi_global_50004) {
  delete vi_global_50004_;
  vi_global_50004_ = vi_global_50004;
  if (vi_global_50004) {
    set_has_vi_global_50004();
  } else {
    clear_has_vi_global_50004();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_50004)
}

// optional .OPMessage.voiceItem vi_global_50005 = 88;
inline bool Judge0::has_vi_global_50005() const {
  return (_has_bits_[2] & 0x00800000u) != 0;
}
inline void Judge0::set_has_vi_global_50005() {
  _has_bits_[2] |= 0x00800000u;
}
inline void Judge0::clear_has_vi_global_50005() {
  _has_bits_[2] &= ~0x00800000u;
}
inline void Judge0::clear_vi_global_50005() {
  if (vi_global_50005_ != NULL) vi_global_50005_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_50005();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_50005() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_50005)
  return vi_global_50005_ != NULL ? *vi_global_50005_ : *default_instance_->vi_global_50005_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_50005() {
  set_has_vi_global_50005();
  if (vi_global_50005_ == NULL) vi_global_50005_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_50005)
  return vi_global_50005_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_50005() {
  clear_has_vi_global_50005();
  ::OPMessage::voiceItem* temp = vi_global_50005_;
  vi_global_50005_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_50005(::OPMessage::voiceItem* vi_global_50005) {
  delete vi_global_50005_;
  vi_global_50005_ = vi_global_50005;
  if (vi_global_50005) {
    set_has_vi_global_50005();
  } else {
    clear_has_vi_global_50005();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_50005)
}

// optional .OPMessage.voiceItem vi_global_50006 = 89;
inline bool Judge0::has_vi_global_50006() const {
  return (_has_bits_[2] & 0x01000000u) != 0;
}
inline void Judge0::set_has_vi_global_50006() {
  _has_bits_[2] |= 0x01000000u;
}
inline void Judge0::clear_has_vi_global_50006() {
  _has_bits_[2] &= ~0x01000000u;
}
inline void Judge0::clear_vi_global_50006() {
  if (vi_global_50006_ != NULL) vi_global_50006_->::OPMessage::voiceItem::Clear();
  clear_has_vi_global_50006();
}
inline const ::OPMessage::voiceItem& Judge0::vi_global_50006() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_global_50006)
  return vi_global_50006_ != NULL ? *vi_global_50006_ : *default_instance_->vi_global_50006_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_global_50006() {
  set_has_vi_global_50006();
  if (vi_global_50006_ == NULL) vi_global_50006_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_global_50006)
  return vi_global_50006_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_global_50006() {
  clear_has_vi_global_50006();
  ::OPMessage::voiceItem* temp = vi_global_50006_;
  vi_global_50006_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_global_50006(::OPMessage::voiceItem* vi_global_50006) {
  delete vi_global_50006_;
  vi_global_50006_ = vi_global_50006;
  if (vi_global_50006) {
    set_has_vi_global_50006();
  } else {
    clear_has_vi_global_50006();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_global_50006)
}

// optional .OPMessage.voiceItem vi_41600_not_flash_near_far = 90;
inline bool Judge0::has_vi_41600_not_flash_near_far() const {
  return (_has_bits_[2] & 0x02000000u) != 0;
}
inline void Judge0::set_has_vi_41600_not_flash_near_far() {
  _has_bits_[2] |= 0x02000000u;
}
inline void Judge0::clear_has_vi_41600_not_flash_near_far() {
  _has_bits_[2] &= ~0x02000000u;
}
inline void Judge0::clear_vi_41600_not_flash_near_far() {
  if (vi_41600_not_flash_near_far_ != NULL) vi_41600_not_flash_near_far_->::OPMessage::voiceItem::Clear();
  clear_has_vi_41600_not_flash_near_far();
}
inline const ::OPMessage::voiceItem& Judge0::vi_41600_not_flash_near_far() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_41600_not_flash_near_far)
  return vi_41600_not_flash_near_far_ != NULL ? *vi_41600_not_flash_near_far_ : *default_instance_->vi_41600_not_flash_near_far_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_41600_not_flash_near_far() {
  set_has_vi_41600_not_flash_near_far();
  if (vi_41600_not_flash_near_far_ == NULL) vi_41600_not_flash_near_far_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_41600_not_flash_near_far)
  return vi_41600_not_flash_near_far_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_41600_not_flash_near_far() {
  clear_has_vi_41600_not_flash_near_far();
  ::OPMessage::voiceItem* temp = vi_41600_not_flash_near_far_;
  vi_41600_not_flash_near_far_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_41600_not_flash_near_far(::OPMessage::voiceItem* vi_41600_not_flash_near_far) {
  delete vi_41600_not_flash_near_far_;
  vi_41600_not_flash_near_far_ = vi_41600_not_flash_near_far;
  if (vi_41600_not_flash_near_far) {
    set_has_vi_41600_not_flash_near_far();
  } else {
    clear_has_vi_41600_not_flash_near_far();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_41600_not_flash_near_far)
}

// optional .OPMessage.voiceItem vi_41600_not_open_near = 91;
inline bool Judge0::has_vi_41600_not_open_near() const {
  return (_has_bits_[2] & 0x04000000u) != 0;
}
inline void Judge0::set_has_vi_41600_not_open_near() {
  _has_bits_[2] |= 0x04000000u;
}
inline void Judge0::clear_has_vi_41600_not_open_near() {
  _has_bits_[2] &= ~0x04000000u;
}
inline void Judge0::clear_vi_41600_not_open_near() {
  if (vi_41600_not_open_near_ != NULL) vi_41600_not_open_near_->::OPMessage::voiceItem::Clear();
  clear_has_vi_41600_not_open_near();
}
inline const ::OPMessage::voiceItem& Judge0::vi_41600_not_open_near() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_41600_not_open_near)
  return vi_41600_not_open_near_ != NULL ? *vi_41600_not_open_near_ : *default_instance_->vi_41600_not_open_near_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_41600_not_open_near() {
  set_has_vi_41600_not_open_near();
  if (vi_41600_not_open_near_ == NULL) vi_41600_not_open_near_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_41600_not_open_near)
  return vi_41600_not_open_near_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_41600_not_open_near() {
  clear_has_vi_41600_not_open_near();
  ::OPMessage::voiceItem* temp = vi_41600_not_open_near_;
  vi_41600_not_open_near_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_41600_not_open_near(::OPMessage::voiceItem* vi_41600_not_open_near) {
  delete vi_41600_not_open_near_;
  vi_41600_not_open_near_ = vi_41600_not_open_near;
  if (vi_41600_not_open_near) {
    set_has_vi_41600_not_open_near();
  } else {
    clear_has_vi_41600_not_open_near();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_41600_not_open_near)
}

// optional .OPMessage.voiceItem vi_41600_open_far = 92;
inline bool Judge0::has_vi_41600_open_far() const {
  return (_has_bits_[2] & 0x08000000u) != 0;
}
inline void Judge0::set_has_vi_41600_open_far() {
  _has_bits_[2] |= 0x08000000u;
}
inline void Judge0::clear_has_vi_41600_open_far() {
  _has_bits_[2] &= ~0x08000000u;
}
inline void Judge0::clear_vi_41600_open_far() {
  if (vi_41600_open_far_ != NULL) vi_41600_open_far_->::OPMessage::voiceItem::Clear();
  clear_has_vi_41600_open_far();
}
inline const ::OPMessage::voiceItem& Judge0::vi_41600_open_far() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_41600_open_far)
  return vi_41600_open_far_ != NULL ? *vi_41600_open_far_ : *default_instance_->vi_41600_open_far_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_41600_open_far() {
  set_has_vi_41600_open_far();
  if (vi_41600_open_far_ == NULL) vi_41600_open_far_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_41600_open_far)
  return vi_41600_open_far_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_41600_open_far() {
  clear_has_vi_41600_open_far();
  ::OPMessage::voiceItem* temp = vi_41600_open_far_;
  vi_41600_open_far_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_41600_open_far(::OPMessage::voiceItem* vi_41600_open_far) {
  delete vi_41600_open_far_;
  vi_41600_open_far_ = vi_41600_open_far;
  if (vi_41600_open_far) {
    set_has_vi_41600_open_far();
  } else {
    clear_has_vi_41600_open_far();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_41600_open_far)
}

// optional .OPMessage.voiceItem vi_41600_not_open_lamp = 93;
inline bool Judge0::has_vi_41600_not_open_lamp() const {
  return (_has_bits_[2] & 0x10000000u) != 0;
}
inline void Judge0::set_has_vi_41600_not_open_lamp() {
  _has_bits_[2] |= 0x10000000u;
}
inline void Judge0::clear_has_vi_41600_not_open_lamp() {
  _has_bits_[2] &= ~0x10000000u;
}
inline void Judge0::clear_vi_41600_not_open_lamp() {
  if (vi_41600_not_open_lamp_ != NULL) vi_41600_not_open_lamp_->::OPMessage::voiceItem::Clear();
  clear_has_vi_41600_not_open_lamp();
}
inline const ::OPMessage::voiceItem& Judge0::vi_41600_not_open_lamp() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge0.vi_41600_not_open_lamp)
  return vi_41600_not_open_lamp_ != NULL ? *vi_41600_not_open_lamp_ : *default_instance_->vi_41600_not_open_lamp_;
}
inline ::OPMessage::voiceItem* Judge0::mutable_vi_41600_not_open_lamp() {
  set_has_vi_41600_not_open_lamp();
  if (vi_41600_not_open_lamp_ == NULL) vi_41600_not_open_lamp_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge0.vi_41600_not_open_lamp)
  return vi_41600_not_open_lamp_;
}
inline ::OPMessage::voiceItem* Judge0::release_vi_41600_not_open_lamp() {
  clear_has_vi_41600_not_open_lamp();
  ::OPMessage::voiceItem* temp = vi_41600_not_open_lamp_;
  vi_41600_not_open_lamp_ = NULL;
  return temp;
}
inline void Judge0::set_allocated_vi_41600_not_open_lamp(::OPMessage::voiceItem* vi_41600_not_open_lamp) {
  delete vi_41600_not_open_lamp_;
  vi_41600_not_open_lamp_ = vi_41600_not_open_lamp;
  if (vi_41600_not_open_lamp) {
    set_has_vi_41600_not_open_lamp();
  } else {
    clear_has_vi_41600_not_open_lamp();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge0.vi_41600_not_open_lamp)
}

// -------------------------------------------------------------------

// Judge40100

// optional int32 itemCode = 1;
inline bool Judge40100::has_itemcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Judge40100::set_has_itemcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Judge40100::clear_has_itemcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Judge40100::clear_itemcode() {
  itemcode_ = 0;
  clear_has_itemcode();
}
inline ::google::protobuf::int32 Judge40100::itemcode() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40100.itemCode)
  return itemcode_;
}
inline void Judge40100::set_itemcode(::google::protobuf::int32 value) {
  set_has_itemcode();
  itemcode_ = value;
  // @@protoc_insertion_point(field_set:OPMessage.Judge40100.itemCode)
}

// optional string itemName = 2;
inline bool Judge40100::has_itemname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Judge40100::set_has_itemname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Judge40100::clear_has_itemname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Judge40100::clear_itemname() {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_->clear();
  }
  clear_has_itemname();
}
inline const ::std::string& Judge40100::itemname() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40100.itemName)
  return *itemname_;
}
inline void Judge40100::set_itemname(const ::std::string& value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
  // @@protoc_insertion_point(field_set:OPMessage.Judge40100.itemName)
}
inline void Judge40100::set_itemname(const char* value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
  // @@protoc_insertion_point(field_set_char:OPMessage.Judge40100.itemName)
}
inline void Judge40100::set_itemname(const char* value, size_t size) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OPMessage.Judge40100.itemName)
}
inline ::std::string* Judge40100::mutable_itemname() {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40100.itemName)
  return itemname_;
}
inline ::std::string* Judge40100::release_itemname() {
  clear_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = itemname_;
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Judge40100::set_allocated_itemname(::std::string* itemname) {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (itemname) {
    set_has_itemname();
    itemname_ = itemname;
  } else {
    clear_has_itemname();
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40100.itemName)
}

// optional .OPMessage.judgeItem max_time = 3;
inline bool Judge40100::has_max_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Judge40100::set_has_max_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Judge40100::clear_has_max_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Judge40100::clear_max_time() {
  if (max_time_ != NULL) max_time_->::OPMessage::judgeItem::Clear();
  clear_has_max_time();
}
inline const ::OPMessage::judgeItem& Judge40100::max_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40100.max_time)
  return max_time_ != NULL ? *max_time_ : *default_instance_->max_time_;
}
inline ::OPMessage::judgeItem* Judge40100::mutable_max_time() {
  set_has_max_time();
  if (max_time_ == NULL) max_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40100.max_time)
  return max_time_;
}
inline ::OPMessage::judgeItem* Judge40100::release_max_time() {
  clear_has_max_time();
  ::OPMessage::judgeItem* temp = max_time_;
  max_time_ = NULL;
  return temp;
}
inline void Judge40100::set_allocated_max_time(::OPMessage::judgeItem* max_time) {
  delete max_time_;
  max_time_ = max_time;
  if (max_time) {
    set_has_max_time();
  } else {
    clear_has_max_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40100.max_time)
}

// optional .OPMessage.judgeItem need_speak_touch_surround_sensor_voice = 4;
inline bool Judge40100::has_need_speak_touch_surround_sensor_voice() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Judge40100::set_has_need_speak_touch_surround_sensor_voice() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Judge40100::clear_has_need_speak_touch_surround_sensor_voice() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Judge40100::clear_need_speak_touch_surround_sensor_voice() {
  if (need_speak_touch_surround_sensor_voice_ != NULL) need_speak_touch_surround_sensor_voice_->::OPMessage::judgeItem::Clear();
  clear_has_need_speak_touch_surround_sensor_voice();
}
inline const ::OPMessage::judgeItem& Judge40100::need_speak_touch_surround_sensor_voice() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40100.need_speak_touch_surround_sensor_voice)
  return need_speak_touch_surround_sensor_voice_ != NULL ? *need_speak_touch_surround_sensor_voice_ : *default_instance_->need_speak_touch_surround_sensor_voice_;
}
inline ::OPMessage::judgeItem* Judge40100::mutable_need_speak_touch_surround_sensor_voice() {
  set_has_need_speak_touch_surround_sensor_voice();
  if (need_speak_touch_surround_sensor_voice_ == NULL) need_speak_touch_surround_sensor_voice_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40100.need_speak_touch_surround_sensor_voice)
  return need_speak_touch_surround_sensor_voice_;
}
inline ::OPMessage::judgeItem* Judge40100::release_need_speak_touch_surround_sensor_voice() {
  clear_has_need_speak_touch_surround_sensor_voice();
  ::OPMessage::judgeItem* temp = need_speak_touch_surround_sensor_voice_;
  need_speak_touch_surround_sensor_voice_ = NULL;
  return temp;
}
inline void Judge40100::set_allocated_need_speak_touch_surround_sensor_voice(::OPMessage::judgeItem* need_speak_touch_surround_sensor_voice) {
  delete need_speak_touch_surround_sensor_voice_;
  need_speak_touch_surround_sensor_voice_ = need_speak_touch_surround_sensor_voice;
  if (need_speak_touch_surround_sensor_voice) {
    set_has_need_speak_touch_surround_sensor_voice();
  } else {
    clear_has_need_speak_touch_surround_sensor_voice();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40100.need_speak_touch_surround_sensor_voice)
}

// optional .OPMessage.judgeItem check_surround_sensor_count = 5;
inline bool Judge40100::has_check_surround_sensor_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Judge40100::set_has_check_surround_sensor_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Judge40100::clear_has_check_surround_sensor_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Judge40100::clear_check_surround_sensor_count() {
  if (check_surround_sensor_count_ != NULL) check_surround_sensor_count_->::OPMessage::judgeItem::Clear();
  clear_has_check_surround_sensor_count();
}
inline const ::OPMessage::judgeItem& Judge40100::check_surround_sensor_count() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40100.check_surround_sensor_count)
  return check_surround_sensor_count_ != NULL ? *check_surround_sensor_count_ : *default_instance_->check_surround_sensor_count_;
}
inline ::OPMessage::judgeItem* Judge40100::mutable_check_surround_sensor_count() {
  set_has_check_surround_sensor_count();
  if (check_surround_sensor_count_ == NULL) check_surround_sensor_count_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40100.check_surround_sensor_count)
  return check_surround_sensor_count_;
}
inline ::OPMessage::judgeItem* Judge40100::release_check_surround_sensor_count() {
  clear_has_check_surround_sensor_count();
  ::OPMessage::judgeItem* temp = check_surround_sensor_count_;
  check_surround_sensor_count_ = NULL;
  return temp;
}
inline void Judge40100::set_allocated_check_surround_sensor_count(::OPMessage::judgeItem* check_surround_sensor_count) {
  delete check_surround_sensor_count_;
  check_surround_sensor_count_ = check_surround_sensor_count;
  if (check_surround_sensor_count) {
    set_has_check_surround_sensor_count();
  } else {
    clear_has_check_surround_sensor_count();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40100.check_surround_sensor_count)
}

// optional .OPMessage.judgeItem need_close_door_before_round_car = 6;
inline bool Judge40100::has_need_close_door_before_round_car() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Judge40100::set_has_need_close_door_before_round_car() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Judge40100::clear_has_need_close_door_before_round_car() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Judge40100::clear_need_close_door_before_round_car() {
  if (need_close_door_before_round_car_ != NULL) need_close_door_before_round_car_->::OPMessage::judgeItem::Clear();
  clear_has_need_close_door_before_round_car();
}
inline const ::OPMessage::judgeItem& Judge40100::need_close_door_before_round_car() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40100.need_close_door_before_round_car)
  return need_close_door_before_round_car_ != NULL ? *need_close_door_before_round_car_ : *default_instance_->need_close_door_before_round_car_;
}
inline ::OPMessage::judgeItem* Judge40100::mutable_need_close_door_before_round_car() {
  set_has_need_close_door_before_round_car();
  if (need_close_door_before_round_car_ == NULL) need_close_door_before_round_car_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40100.need_close_door_before_round_car)
  return need_close_door_before_round_car_;
}
inline ::OPMessage::judgeItem* Judge40100::release_need_close_door_before_round_car() {
  clear_has_need_close_door_before_round_car();
  ::OPMessage::judgeItem* temp = need_close_door_before_round_car_;
  need_close_door_before_round_car_ = NULL;
  return temp;
}
inline void Judge40100::set_allocated_need_close_door_before_round_car(::OPMessage::judgeItem* need_close_door_before_round_car) {
  delete need_close_door_before_round_car_;
  need_close_door_before_round_car_ = need_close_door_before_round_car;
  if (need_close_door_before_round_car) {
    set_has_need_close_door_before_round_car();
  } else {
    clear_has_need_close_door_before_round_car();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40100.need_close_door_before_round_car)
}

// optional .OPMessage.judgeItem finish_exam_type = 7;
inline bool Judge40100::has_finish_exam_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Judge40100::set_has_finish_exam_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Judge40100::clear_has_finish_exam_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Judge40100::clear_finish_exam_type() {
  if (finish_exam_type_ != NULL) finish_exam_type_->::OPMessage::judgeItem::Clear();
  clear_has_finish_exam_type();
}
inline const ::OPMessage::judgeItem& Judge40100::finish_exam_type() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40100.finish_exam_type)
  return finish_exam_type_ != NULL ? *finish_exam_type_ : *default_instance_->finish_exam_type_;
}
inline ::OPMessage::judgeItem* Judge40100::mutable_finish_exam_type() {
  set_has_finish_exam_type();
  if (finish_exam_type_ == NULL) finish_exam_type_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40100.finish_exam_type)
  return finish_exam_type_;
}
inline ::OPMessage::judgeItem* Judge40100::release_finish_exam_type() {
  clear_has_finish_exam_type();
  ::OPMessage::judgeItem* temp = finish_exam_type_;
  finish_exam_type_ = NULL;
  return temp;
}
inline void Judge40100::set_allocated_finish_exam_type(::OPMessage::judgeItem* finish_exam_type) {
  delete finish_exam_type_;
  finish_exam_type_ = finish_exam_type;
  if (finish_exam_type) {
    set_has_finish_exam_type();
  } else {
    clear_has_finish_exam_type();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40100.finish_exam_type)
}

// optional .OPMessage.voiceItem vi_40100_start_exam = 8;
inline bool Judge40100::has_vi_40100_start_exam() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Judge40100::set_has_vi_40100_start_exam() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Judge40100::clear_has_vi_40100_start_exam() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Judge40100::clear_vi_40100_start_exam() {
  if (vi_40100_start_exam_ != NULL) vi_40100_start_exam_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40100_start_exam();
}
inline const ::OPMessage::voiceItem& Judge40100::vi_40100_start_exam() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40100.vi_40100_start_exam)
  return vi_40100_start_exam_ != NULL ? *vi_40100_start_exam_ : *default_instance_->vi_40100_start_exam_;
}
inline ::OPMessage::voiceItem* Judge40100::mutable_vi_40100_start_exam() {
  set_has_vi_40100_start_exam();
  if (vi_40100_start_exam_ == NULL) vi_40100_start_exam_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40100.vi_40100_start_exam)
  return vi_40100_start_exam_;
}
inline ::OPMessage::voiceItem* Judge40100::release_vi_40100_start_exam() {
  clear_has_vi_40100_start_exam();
  ::OPMessage::voiceItem* temp = vi_40100_start_exam_;
  vi_40100_start_exam_ = NULL;
  return temp;
}
inline void Judge40100::set_allocated_vi_40100_start_exam(::OPMessage::voiceItem* vi_40100_start_exam) {
  delete vi_40100_start_exam_;
  vi_40100_start_exam_ = vi_40100_start_exam;
  if (vi_40100_start_exam) {
    set_has_vi_40100_start_exam();
  } else {
    clear_has_vi_40100_start_exam();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40100.vi_40100_start_exam)
}

// optional .OPMessage.voiceItem vi_40100_end_exam = 9;
inline bool Judge40100::has_vi_40100_end_exam() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Judge40100::set_has_vi_40100_end_exam() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Judge40100::clear_has_vi_40100_end_exam() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Judge40100::clear_vi_40100_end_exam() {
  if (vi_40100_end_exam_ != NULL) vi_40100_end_exam_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40100_end_exam();
}
inline const ::OPMessage::voiceItem& Judge40100::vi_40100_end_exam() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40100.vi_40100_end_exam)
  return vi_40100_end_exam_ != NULL ? *vi_40100_end_exam_ : *default_instance_->vi_40100_end_exam_;
}
inline ::OPMessage::voiceItem* Judge40100::mutable_vi_40100_end_exam() {
  set_has_vi_40100_end_exam();
  if (vi_40100_end_exam_ == NULL) vi_40100_end_exam_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40100.vi_40100_end_exam)
  return vi_40100_end_exam_;
}
inline ::OPMessage::voiceItem* Judge40100::release_vi_40100_end_exam() {
  clear_has_vi_40100_end_exam();
  ::OPMessage::voiceItem* temp = vi_40100_end_exam_;
  vi_40100_end_exam_ = NULL;
  return temp;
}
inline void Judge40100::set_allocated_vi_40100_end_exam(::OPMessage::voiceItem* vi_40100_end_exam) {
  delete vi_40100_end_exam_;
  vi_40100_end_exam_ = vi_40100_end_exam;
  if (vi_40100_end_exam) {
    set_has_vi_40100_end_exam();
  } else {
    clear_has_vi_40100_end_exam();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40100.vi_40100_end_exam)
}

// optional .OPMessage.voiceItem vi_40100_stop_car_before = 10;
inline bool Judge40100::has_vi_40100_stop_car_before() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Judge40100::set_has_vi_40100_stop_car_before() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Judge40100::clear_has_vi_40100_stop_car_before() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Judge40100::clear_vi_40100_stop_car_before() {
  if (vi_40100_stop_car_before_ != NULL) vi_40100_stop_car_before_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40100_stop_car_before();
}
inline const ::OPMessage::voiceItem& Judge40100::vi_40100_stop_car_before() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40100.vi_40100_stop_car_before)
  return vi_40100_stop_car_before_ != NULL ? *vi_40100_stop_car_before_ : *default_instance_->vi_40100_stop_car_before_;
}
inline ::OPMessage::voiceItem* Judge40100::mutable_vi_40100_stop_car_before() {
  set_has_vi_40100_stop_car_before();
  if (vi_40100_stop_car_before_ == NULL) vi_40100_stop_car_before_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40100.vi_40100_stop_car_before)
  return vi_40100_stop_car_before_;
}
inline ::OPMessage::voiceItem* Judge40100::release_vi_40100_stop_car_before() {
  clear_has_vi_40100_stop_car_before();
  ::OPMessage::voiceItem* temp = vi_40100_stop_car_before_;
  vi_40100_stop_car_before_ = NULL;
  return temp;
}
inline void Judge40100::set_allocated_vi_40100_stop_car_before(::OPMessage::voiceItem* vi_40100_stop_car_before) {
  delete vi_40100_stop_car_before_;
  vi_40100_stop_car_before_ = vi_40100_stop_car_before;
  if (vi_40100_stop_car_before) {
    set_has_vi_40100_stop_car_before();
  } else {
    clear_has_vi_40100_stop_car_before();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40100.vi_40100_stop_car_before)
}

// optional .OPMessage.voiceItem vi_40100_operation_flag_voice_before = 11;
inline bool Judge40100::has_vi_40100_operation_flag_voice_before() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Judge40100::set_has_vi_40100_operation_flag_voice_before() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Judge40100::clear_has_vi_40100_operation_flag_voice_before() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Judge40100::clear_vi_40100_operation_flag_voice_before() {
  if (vi_40100_operation_flag_voice_before_ != NULL) vi_40100_operation_flag_voice_before_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40100_operation_flag_voice_before();
}
inline const ::OPMessage::voiceItem& Judge40100::vi_40100_operation_flag_voice_before() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40100.vi_40100_operation_flag_voice_before)
  return vi_40100_operation_flag_voice_before_ != NULL ? *vi_40100_operation_flag_voice_before_ : *default_instance_->vi_40100_operation_flag_voice_before_;
}
inline ::OPMessage::voiceItem* Judge40100::mutable_vi_40100_operation_flag_voice_before() {
  set_has_vi_40100_operation_flag_voice_before();
  if (vi_40100_operation_flag_voice_before_ == NULL) vi_40100_operation_flag_voice_before_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40100.vi_40100_operation_flag_voice_before)
  return vi_40100_operation_flag_voice_before_;
}
inline ::OPMessage::voiceItem* Judge40100::release_vi_40100_operation_flag_voice_before() {
  clear_has_vi_40100_operation_flag_voice_before();
  ::OPMessage::voiceItem* temp = vi_40100_operation_flag_voice_before_;
  vi_40100_operation_flag_voice_before_ = NULL;
  return temp;
}
inline void Judge40100::set_allocated_vi_40100_operation_flag_voice_before(::OPMessage::voiceItem* vi_40100_operation_flag_voice_before) {
  delete vi_40100_operation_flag_voice_before_;
  vi_40100_operation_flag_voice_before_ = vi_40100_operation_flag_voice_before;
  if (vi_40100_operation_flag_voice_before) {
    set_has_vi_40100_operation_flag_voice_before();
  } else {
    clear_has_vi_40100_operation_flag_voice_before();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40100.vi_40100_operation_flag_voice_before)
}

// optional .OPMessage.voiceItem vi_40100_operation_flag_voice_over = 12;
inline bool Judge40100::has_vi_40100_operation_flag_voice_over() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Judge40100::set_has_vi_40100_operation_flag_voice_over() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Judge40100::clear_has_vi_40100_operation_flag_voice_over() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Judge40100::clear_vi_40100_operation_flag_voice_over() {
  if (vi_40100_operation_flag_voice_over_ != NULL) vi_40100_operation_flag_voice_over_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40100_operation_flag_voice_over();
}
inline const ::OPMessage::voiceItem& Judge40100::vi_40100_operation_flag_voice_over() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40100.vi_40100_operation_flag_voice_over)
  return vi_40100_operation_flag_voice_over_ != NULL ? *vi_40100_operation_flag_voice_over_ : *default_instance_->vi_40100_operation_flag_voice_over_;
}
inline ::OPMessage::voiceItem* Judge40100::mutable_vi_40100_operation_flag_voice_over() {
  set_has_vi_40100_operation_flag_voice_over();
  if (vi_40100_operation_flag_voice_over_ == NULL) vi_40100_operation_flag_voice_over_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40100.vi_40100_operation_flag_voice_over)
  return vi_40100_operation_flag_voice_over_;
}
inline ::OPMessage::voiceItem* Judge40100::release_vi_40100_operation_flag_voice_over() {
  clear_has_vi_40100_operation_flag_voice_over();
  ::OPMessage::voiceItem* temp = vi_40100_operation_flag_voice_over_;
  vi_40100_operation_flag_voice_over_ = NULL;
  return temp;
}
inline void Judge40100::set_allocated_vi_40100_operation_flag_voice_over(::OPMessage::voiceItem* vi_40100_operation_flag_voice_over) {
  delete vi_40100_operation_flag_voice_over_;
  vi_40100_operation_flag_voice_over_ = vi_40100_operation_flag_voice_over;
  if (vi_40100_operation_flag_voice_over) {
    set_has_vi_40100_operation_flag_voice_over();
  } else {
    clear_has_vi_40100_operation_flag_voice_over();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40100.vi_40100_operation_flag_voice_over)
}

// optional .OPMessage.voiceItem vi_40100_operation_flag_notify_flameout = 13;
inline bool Judge40100::has_vi_40100_operation_flag_notify_flameout() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Judge40100::set_has_vi_40100_operation_flag_notify_flameout() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Judge40100::clear_has_vi_40100_operation_flag_notify_flameout() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Judge40100::clear_vi_40100_operation_flag_notify_flameout() {
  if (vi_40100_operation_flag_notify_flameout_ != NULL) vi_40100_operation_flag_notify_flameout_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40100_operation_flag_notify_flameout();
}
inline const ::OPMessage::voiceItem& Judge40100::vi_40100_operation_flag_notify_flameout() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40100.vi_40100_operation_flag_notify_flameout)
  return vi_40100_operation_flag_notify_flameout_ != NULL ? *vi_40100_operation_flag_notify_flameout_ : *default_instance_->vi_40100_operation_flag_notify_flameout_;
}
inline ::OPMessage::voiceItem* Judge40100::mutable_vi_40100_operation_flag_notify_flameout() {
  set_has_vi_40100_operation_flag_notify_flameout();
  if (vi_40100_operation_flag_notify_flameout_ == NULL) vi_40100_operation_flag_notify_flameout_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40100.vi_40100_operation_flag_notify_flameout)
  return vi_40100_operation_flag_notify_flameout_;
}
inline ::OPMessage::voiceItem* Judge40100::release_vi_40100_operation_flag_notify_flameout() {
  clear_has_vi_40100_operation_flag_notify_flameout();
  ::OPMessage::voiceItem* temp = vi_40100_operation_flag_notify_flameout_;
  vi_40100_operation_flag_notify_flameout_ = NULL;
  return temp;
}
inline void Judge40100::set_allocated_vi_40100_operation_flag_notify_flameout(::OPMessage::voiceItem* vi_40100_operation_flag_notify_flameout) {
  delete vi_40100_operation_flag_notify_flameout_;
  vi_40100_operation_flag_notify_flameout_ = vi_40100_operation_flag_notify_flameout;
  if (vi_40100_operation_flag_notify_flameout) {
    set_has_vi_40100_operation_flag_notify_flameout();
  } else {
    clear_has_vi_40100_operation_flag_notify_flameout();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40100.vi_40100_operation_flag_notify_flameout)
}

// optional .OPMessage.voiceItem vi_40100_operation_flag_notify_handbrake = 14;
inline bool Judge40100::has_vi_40100_operation_flag_notify_handbrake() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Judge40100::set_has_vi_40100_operation_flag_notify_handbrake() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Judge40100::clear_has_vi_40100_operation_flag_notify_handbrake() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Judge40100::clear_vi_40100_operation_flag_notify_handbrake() {
  if (vi_40100_operation_flag_notify_handbrake_ != NULL) vi_40100_operation_flag_notify_handbrake_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40100_operation_flag_notify_handbrake();
}
inline const ::OPMessage::voiceItem& Judge40100::vi_40100_operation_flag_notify_handbrake() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40100.vi_40100_operation_flag_notify_handbrake)
  return vi_40100_operation_flag_notify_handbrake_ != NULL ? *vi_40100_operation_flag_notify_handbrake_ : *default_instance_->vi_40100_operation_flag_notify_handbrake_;
}
inline ::OPMessage::voiceItem* Judge40100::mutable_vi_40100_operation_flag_notify_handbrake() {
  set_has_vi_40100_operation_flag_notify_handbrake();
  if (vi_40100_operation_flag_notify_handbrake_ == NULL) vi_40100_operation_flag_notify_handbrake_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40100.vi_40100_operation_flag_notify_handbrake)
  return vi_40100_operation_flag_notify_handbrake_;
}
inline ::OPMessage::voiceItem* Judge40100::release_vi_40100_operation_flag_notify_handbrake() {
  clear_has_vi_40100_operation_flag_notify_handbrake();
  ::OPMessage::voiceItem* temp = vi_40100_operation_flag_notify_handbrake_;
  vi_40100_operation_flag_notify_handbrake_ = NULL;
  return temp;
}
inline void Judge40100::set_allocated_vi_40100_operation_flag_notify_handbrake(::OPMessage::voiceItem* vi_40100_operation_flag_notify_handbrake) {
  delete vi_40100_operation_flag_notify_handbrake_;
  vi_40100_operation_flag_notify_handbrake_ = vi_40100_operation_flag_notify_handbrake;
  if (vi_40100_operation_flag_notify_handbrake) {
    set_has_vi_40100_operation_flag_notify_handbrake();
  } else {
    clear_has_vi_40100_operation_flag_notify_handbrake();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40100.vi_40100_operation_flag_notify_handbrake)
}

// optional .OPMessage.voiceItem vi_40100_round_car_lf = 15;
inline bool Judge40100::has_vi_40100_round_car_lf() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Judge40100::set_has_vi_40100_round_car_lf() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Judge40100::clear_has_vi_40100_round_car_lf() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Judge40100::clear_vi_40100_round_car_lf() {
  if (vi_40100_round_car_lf_ != NULL) vi_40100_round_car_lf_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40100_round_car_lf();
}
inline const ::OPMessage::voiceItem& Judge40100::vi_40100_round_car_lf() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40100.vi_40100_round_car_lf)
  return vi_40100_round_car_lf_ != NULL ? *vi_40100_round_car_lf_ : *default_instance_->vi_40100_round_car_lf_;
}
inline ::OPMessage::voiceItem* Judge40100::mutable_vi_40100_round_car_lf() {
  set_has_vi_40100_round_car_lf();
  if (vi_40100_round_car_lf_ == NULL) vi_40100_round_car_lf_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40100.vi_40100_round_car_lf)
  return vi_40100_round_car_lf_;
}
inline ::OPMessage::voiceItem* Judge40100::release_vi_40100_round_car_lf() {
  clear_has_vi_40100_round_car_lf();
  ::OPMessage::voiceItem* temp = vi_40100_round_car_lf_;
  vi_40100_round_car_lf_ = NULL;
  return temp;
}
inline void Judge40100::set_allocated_vi_40100_round_car_lf(::OPMessage::voiceItem* vi_40100_round_car_lf) {
  delete vi_40100_round_car_lf_;
  vi_40100_round_car_lf_ = vi_40100_round_car_lf;
  if (vi_40100_round_car_lf) {
    set_has_vi_40100_round_car_lf();
  } else {
    clear_has_vi_40100_round_car_lf();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40100.vi_40100_round_car_lf)
}

// optional .OPMessage.voiceItem vi_40100_round_car_rf = 16;
inline bool Judge40100::has_vi_40100_round_car_rf() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Judge40100::set_has_vi_40100_round_car_rf() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Judge40100::clear_has_vi_40100_round_car_rf() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Judge40100::clear_vi_40100_round_car_rf() {
  if (vi_40100_round_car_rf_ != NULL) vi_40100_round_car_rf_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40100_round_car_rf();
}
inline const ::OPMessage::voiceItem& Judge40100::vi_40100_round_car_rf() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40100.vi_40100_round_car_rf)
  return vi_40100_round_car_rf_ != NULL ? *vi_40100_round_car_rf_ : *default_instance_->vi_40100_round_car_rf_;
}
inline ::OPMessage::voiceItem* Judge40100::mutable_vi_40100_round_car_rf() {
  set_has_vi_40100_round_car_rf();
  if (vi_40100_round_car_rf_ == NULL) vi_40100_round_car_rf_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40100.vi_40100_round_car_rf)
  return vi_40100_round_car_rf_;
}
inline ::OPMessage::voiceItem* Judge40100::release_vi_40100_round_car_rf() {
  clear_has_vi_40100_round_car_rf();
  ::OPMessage::voiceItem* temp = vi_40100_round_car_rf_;
  vi_40100_round_car_rf_ = NULL;
  return temp;
}
inline void Judge40100::set_allocated_vi_40100_round_car_rf(::OPMessage::voiceItem* vi_40100_round_car_rf) {
  delete vi_40100_round_car_rf_;
  vi_40100_round_car_rf_ = vi_40100_round_car_rf;
  if (vi_40100_round_car_rf) {
    set_has_vi_40100_round_car_rf();
  } else {
    clear_has_vi_40100_round_car_rf();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40100.vi_40100_round_car_rf)
}

// optional .OPMessage.voiceItem vi_40100_round_car_lb = 17;
inline bool Judge40100::has_vi_40100_round_car_lb() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Judge40100::set_has_vi_40100_round_car_lb() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Judge40100::clear_has_vi_40100_round_car_lb() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Judge40100::clear_vi_40100_round_car_lb() {
  if (vi_40100_round_car_lb_ != NULL) vi_40100_round_car_lb_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40100_round_car_lb();
}
inline const ::OPMessage::voiceItem& Judge40100::vi_40100_round_car_lb() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40100.vi_40100_round_car_lb)
  return vi_40100_round_car_lb_ != NULL ? *vi_40100_round_car_lb_ : *default_instance_->vi_40100_round_car_lb_;
}
inline ::OPMessage::voiceItem* Judge40100::mutable_vi_40100_round_car_lb() {
  set_has_vi_40100_round_car_lb();
  if (vi_40100_round_car_lb_ == NULL) vi_40100_round_car_lb_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40100.vi_40100_round_car_lb)
  return vi_40100_round_car_lb_;
}
inline ::OPMessage::voiceItem* Judge40100::release_vi_40100_round_car_lb() {
  clear_has_vi_40100_round_car_lb();
  ::OPMessage::voiceItem* temp = vi_40100_round_car_lb_;
  vi_40100_round_car_lb_ = NULL;
  return temp;
}
inline void Judge40100::set_allocated_vi_40100_round_car_lb(::OPMessage::voiceItem* vi_40100_round_car_lb) {
  delete vi_40100_round_car_lb_;
  vi_40100_round_car_lb_ = vi_40100_round_car_lb;
  if (vi_40100_round_car_lb) {
    set_has_vi_40100_round_car_lb();
  } else {
    clear_has_vi_40100_round_car_lb();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40100.vi_40100_round_car_lb)
}

// optional .OPMessage.voiceItem vi_40100_round_car_rb = 18;
inline bool Judge40100::has_vi_40100_round_car_rb() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Judge40100::set_has_vi_40100_round_car_rb() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Judge40100::clear_has_vi_40100_round_car_rb() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Judge40100::clear_vi_40100_round_car_rb() {
  if (vi_40100_round_car_rb_ != NULL) vi_40100_round_car_rb_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40100_round_car_rb();
}
inline const ::OPMessage::voiceItem& Judge40100::vi_40100_round_car_rb() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40100.vi_40100_round_car_rb)
  return vi_40100_round_car_rb_ != NULL ? *vi_40100_round_car_rb_ : *default_instance_->vi_40100_round_car_rb_;
}
inline ::OPMessage::voiceItem* Judge40100::mutable_vi_40100_round_car_rb() {
  set_has_vi_40100_round_car_rb();
  if (vi_40100_round_car_rb_ == NULL) vi_40100_round_car_rb_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40100.vi_40100_round_car_rb)
  return vi_40100_round_car_rb_;
}
inline ::OPMessage::voiceItem* Judge40100::release_vi_40100_round_car_rb() {
  clear_has_vi_40100_round_car_rb();
  ::OPMessage::voiceItem* temp = vi_40100_round_car_rb_;
  vi_40100_round_car_rb_ = NULL;
  return temp;
}
inline void Judge40100::set_allocated_vi_40100_round_car_rb(::OPMessage::voiceItem* vi_40100_round_car_rb) {
  delete vi_40100_round_car_rb_;
  vi_40100_round_car_rb_ = vi_40100_round_car_rb;
  if (vi_40100_round_car_rb) {
    set_has_vi_40100_round_car_rb();
  } else {
    clear_has_vi_40100_round_car_rb();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40100.vi_40100_round_car_rb)
}

// optional .OPMessage.voiceItem vi_40100_operation_flag_notify_close_door = 19;
inline bool Judge40100::has_vi_40100_operation_flag_notify_close_door() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Judge40100::set_has_vi_40100_operation_flag_notify_close_door() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Judge40100::clear_has_vi_40100_operation_flag_notify_close_door() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Judge40100::clear_vi_40100_operation_flag_notify_close_door() {
  if (vi_40100_operation_flag_notify_close_door_ != NULL) vi_40100_operation_flag_notify_close_door_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40100_operation_flag_notify_close_door();
}
inline const ::OPMessage::voiceItem& Judge40100::vi_40100_operation_flag_notify_close_door() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40100.vi_40100_operation_flag_notify_close_door)
  return vi_40100_operation_flag_notify_close_door_ != NULL ? *vi_40100_operation_flag_notify_close_door_ : *default_instance_->vi_40100_operation_flag_notify_close_door_;
}
inline ::OPMessage::voiceItem* Judge40100::mutable_vi_40100_operation_flag_notify_close_door() {
  set_has_vi_40100_operation_flag_notify_close_door();
  if (vi_40100_operation_flag_notify_close_door_ == NULL) vi_40100_operation_flag_notify_close_door_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40100.vi_40100_operation_flag_notify_close_door)
  return vi_40100_operation_flag_notify_close_door_;
}
inline ::OPMessage::voiceItem* Judge40100::release_vi_40100_operation_flag_notify_close_door() {
  clear_has_vi_40100_operation_flag_notify_close_door();
  ::OPMessage::voiceItem* temp = vi_40100_operation_flag_notify_close_door_;
  vi_40100_operation_flag_notify_close_door_ = NULL;
  return temp;
}
inline void Judge40100::set_allocated_vi_40100_operation_flag_notify_close_door(::OPMessage::voiceItem* vi_40100_operation_flag_notify_close_door) {
  delete vi_40100_operation_flag_notify_close_door_;
  vi_40100_operation_flag_notify_close_door_ = vi_40100_operation_flag_notify_close_door;
  if (vi_40100_operation_flag_notify_close_door) {
    set_has_vi_40100_operation_flag_notify_close_door();
  } else {
    clear_has_vi_40100_operation_flag_notify_close_door();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40100.vi_40100_operation_flag_notify_close_door)
}

// optional .OPMessage.voiceItem vi_40100_round_car_not_close_door = 20;
inline bool Judge40100::has_vi_40100_round_car_not_close_door() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Judge40100::set_has_vi_40100_round_car_not_close_door() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Judge40100::clear_has_vi_40100_round_car_not_close_door() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Judge40100::clear_vi_40100_round_car_not_close_door() {
  if (vi_40100_round_car_not_close_door_ != NULL) vi_40100_round_car_not_close_door_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40100_round_car_not_close_door();
}
inline const ::OPMessage::voiceItem& Judge40100::vi_40100_round_car_not_close_door() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40100.vi_40100_round_car_not_close_door)
  return vi_40100_round_car_not_close_door_ != NULL ? *vi_40100_round_car_not_close_door_ : *default_instance_->vi_40100_round_car_not_close_door_;
}
inline ::OPMessage::voiceItem* Judge40100::mutable_vi_40100_round_car_not_close_door() {
  set_has_vi_40100_round_car_not_close_door();
  if (vi_40100_round_car_not_close_door_ == NULL) vi_40100_round_car_not_close_door_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40100.vi_40100_round_car_not_close_door)
  return vi_40100_round_car_not_close_door_;
}
inline ::OPMessage::voiceItem* Judge40100::release_vi_40100_round_car_not_close_door() {
  clear_has_vi_40100_round_car_not_close_door();
  ::OPMessage::voiceItem* temp = vi_40100_round_car_not_close_door_;
  vi_40100_round_car_not_close_door_ = NULL;
  return temp;
}
inline void Judge40100::set_allocated_vi_40100_round_car_not_close_door(::OPMessage::voiceItem* vi_40100_round_car_not_close_door) {
  delete vi_40100_round_car_not_close_door_;
  vi_40100_round_car_not_close_door_ = vi_40100_round_car_not_close_door;
  if (vi_40100_round_car_not_close_door) {
    set_has_vi_40100_round_car_not_close_door();
  } else {
    clear_has_vi_40100_round_car_not_close_door();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40100.vi_40100_round_car_not_close_door)
}

// optional .OPMessage.voiceItem vi_40100_round_car_order_error = 21;
inline bool Judge40100::has_vi_40100_round_car_order_error() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Judge40100::set_has_vi_40100_round_car_order_error() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Judge40100::clear_has_vi_40100_round_car_order_error() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Judge40100::clear_vi_40100_round_car_order_error() {
  if (vi_40100_round_car_order_error_ != NULL) vi_40100_round_car_order_error_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40100_round_car_order_error();
}
inline const ::OPMessage::voiceItem& Judge40100::vi_40100_round_car_order_error() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40100.vi_40100_round_car_order_error)
  return vi_40100_round_car_order_error_ != NULL ? *vi_40100_round_car_order_error_ : *default_instance_->vi_40100_round_car_order_error_;
}
inline ::OPMessage::voiceItem* Judge40100::mutable_vi_40100_round_car_order_error() {
  set_has_vi_40100_round_car_order_error();
  if (vi_40100_round_car_order_error_ == NULL) vi_40100_round_car_order_error_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40100.vi_40100_round_car_order_error)
  return vi_40100_round_car_order_error_;
}
inline ::OPMessage::voiceItem* Judge40100::release_vi_40100_round_car_order_error() {
  clear_has_vi_40100_round_car_order_error();
  ::OPMessage::voiceItem* temp = vi_40100_round_car_order_error_;
  vi_40100_round_car_order_error_ = NULL;
  return temp;
}
inline void Judge40100::set_allocated_vi_40100_round_car_order_error(::OPMessage::voiceItem* vi_40100_round_car_order_error) {
  delete vi_40100_round_car_order_error_;
  vi_40100_round_car_order_error_ = vi_40100_round_car_order_error;
  if (vi_40100_round_car_order_error) {
    set_has_vi_40100_round_car_order_error();
  } else {
    clear_has_vi_40100_round_car_order_error();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40100.vi_40100_round_car_order_error)
}

// optional .OPMessage.voiceItem vi_40100_runnin_befor_finish_test = 22;
inline bool Judge40100::has_vi_40100_runnin_befor_finish_test() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Judge40100::set_has_vi_40100_runnin_befor_finish_test() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Judge40100::clear_has_vi_40100_runnin_befor_finish_test() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Judge40100::clear_vi_40100_runnin_befor_finish_test() {
  if (vi_40100_runnin_befor_finish_test_ != NULL) vi_40100_runnin_befor_finish_test_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40100_runnin_befor_finish_test();
}
inline const ::OPMessage::voiceItem& Judge40100::vi_40100_runnin_befor_finish_test() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40100.vi_40100_runnin_befor_finish_test)
  return vi_40100_runnin_befor_finish_test_ != NULL ? *vi_40100_runnin_befor_finish_test_ : *default_instance_->vi_40100_runnin_befor_finish_test_;
}
inline ::OPMessage::voiceItem* Judge40100::mutable_vi_40100_runnin_befor_finish_test() {
  set_has_vi_40100_runnin_befor_finish_test();
  if (vi_40100_runnin_befor_finish_test_ == NULL) vi_40100_runnin_befor_finish_test_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40100.vi_40100_runnin_befor_finish_test)
  return vi_40100_runnin_befor_finish_test_;
}
inline ::OPMessage::voiceItem* Judge40100::release_vi_40100_runnin_befor_finish_test() {
  clear_has_vi_40100_runnin_befor_finish_test();
  ::OPMessage::voiceItem* temp = vi_40100_runnin_befor_finish_test_;
  vi_40100_runnin_befor_finish_test_ = NULL;
  return temp;
}
inline void Judge40100::set_allocated_vi_40100_runnin_befor_finish_test(::OPMessage::voiceItem* vi_40100_runnin_befor_finish_test) {
  delete vi_40100_runnin_befor_finish_test_;
  vi_40100_runnin_befor_finish_test_ = vi_40100_runnin_befor_finish_test;
  if (vi_40100_runnin_befor_finish_test) {
    set_has_vi_40100_runnin_befor_finish_test();
  } else {
    clear_has_vi_40100_runnin_befor_finish_test();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40100.vi_40100_runnin_befor_finish_test)
}

// optional .OPMessage.voiceItem vi_40100_not_close_door = 23;
inline bool Judge40100::has_vi_40100_not_close_door() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Judge40100::set_has_vi_40100_not_close_door() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Judge40100::clear_has_vi_40100_not_close_door() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Judge40100::clear_vi_40100_not_close_door() {
  if (vi_40100_not_close_door_ != NULL) vi_40100_not_close_door_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40100_not_close_door();
}
inline const ::OPMessage::voiceItem& Judge40100::vi_40100_not_close_door() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40100.vi_40100_not_close_door)
  return vi_40100_not_close_door_ != NULL ? *vi_40100_not_close_door_ : *default_instance_->vi_40100_not_close_door_;
}
inline ::OPMessage::voiceItem* Judge40100::mutable_vi_40100_not_close_door() {
  set_has_vi_40100_not_close_door();
  if (vi_40100_not_close_door_ == NULL) vi_40100_not_close_door_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40100.vi_40100_not_close_door)
  return vi_40100_not_close_door_;
}
inline ::OPMessage::voiceItem* Judge40100::release_vi_40100_not_close_door() {
  clear_has_vi_40100_not_close_door();
  ::OPMessage::voiceItem* temp = vi_40100_not_close_door_;
  vi_40100_not_close_door_ = NULL;
  return temp;
}
inline void Judge40100::set_allocated_vi_40100_not_close_door(::OPMessage::voiceItem* vi_40100_not_close_door) {
  delete vi_40100_not_close_door_;
  vi_40100_not_close_door_ = vi_40100_not_close_door;
  if (vi_40100_not_close_door) {
    set_has_vi_40100_not_close_door();
  } else {
    clear_has_vi_40100_not_close_door();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40100.vi_40100_not_close_door)
}

// optional .OPMessage.voiceItem vi_40100_not_round_car = 24;
inline bool Judge40100::has_vi_40100_not_round_car() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Judge40100::set_has_vi_40100_not_round_car() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Judge40100::clear_has_vi_40100_not_round_car() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Judge40100::clear_vi_40100_not_round_car() {
  if (vi_40100_not_round_car_ != NULL) vi_40100_not_round_car_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40100_not_round_car();
}
inline const ::OPMessage::voiceItem& Judge40100::vi_40100_not_round_car() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40100.vi_40100_not_round_car)
  return vi_40100_not_round_car_ != NULL ? *vi_40100_not_round_car_ : *default_instance_->vi_40100_not_round_car_;
}
inline ::OPMessage::voiceItem* Judge40100::mutable_vi_40100_not_round_car() {
  set_has_vi_40100_not_round_car();
  if (vi_40100_not_round_car_ == NULL) vi_40100_not_round_car_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40100.vi_40100_not_round_car)
  return vi_40100_not_round_car_;
}
inline ::OPMessage::voiceItem* Judge40100::release_vi_40100_not_round_car() {
  clear_has_vi_40100_not_round_car();
  ::OPMessage::voiceItem* temp = vi_40100_not_round_car_;
  vi_40100_not_round_car_ = NULL;
  return temp;
}
inline void Judge40100::set_allocated_vi_40100_not_round_car(::OPMessage::voiceItem* vi_40100_not_round_car) {
  delete vi_40100_not_round_car_;
  vi_40100_not_round_car_ = vi_40100_not_round_car;
  if (vi_40100_not_round_car) {
    set_has_vi_40100_not_round_car();
  } else {
    clear_has_vi_40100_not_round_car();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40100.vi_40100_not_round_car)
}

// -------------------------------------------------------------------

// Judge41600

// optional int32 itemCode = 1;
inline bool Judge41600::has_itemcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Judge41600::set_has_itemcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Judge41600::clear_has_itemcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Judge41600::clear_itemcode() {
  itemcode_ = 0;
  clear_has_itemcode();
}
inline ::google::protobuf::int32 Judge41600::itemcode() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41600.itemCode)
  return itemcode_;
}
inline void Judge41600::set_itemcode(::google::protobuf::int32 value) {
  set_has_itemcode();
  itemcode_ = value;
  // @@protoc_insertion_point(field_set:OPMessage.Judge41600.itemCode)
}

// optional string itemName = 2;
inline bool Judge41600::has_itemname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Judge41600::set_has_itemname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Judge41600::clear_has_itemname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Judge41600::clear_itemname() {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_->clear();
  }
  clear_has_itemname();
}
inline const ::std::string& Judge41600::itemname() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41600.itemName)
  return *itemname_;
}
inline void Judge41600::set_itemname(const ::std::string& value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
  // @@protoc_insertion_point(field_set:OPMessage.Judge41600.itemName)
}
inline void Judge41600::set_itemname(const char* value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
  // @@protoc_insertion_point(field_set_char:OPMessage.Judge41600.itemName)
}
inline void Judge41600::set_itemname(const char* value, size_t size) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OPMessage.Judge41600.itemName)
}
inline ::std::string* Judge41600::mutable_itemname() {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41600.itemName)
  return itemname_;
}
inline ::std::string* Judge41600::release_itemname() {
  clear_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = itemname_;
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Judge41600::set_allocated_itemname(::std::string* itemname) {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (itemname) {
    set_has_itemname();
    itemname_ = itemname;
  } else {
    clear_has_itemname();
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41600.itemName)
}

// optional .OPMessage.judgeItem min_near_lamp_flash_count = 3;
inline bool Judge41600::has_min_near_lamp_flash_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Judge41600::set_has_min_near_lamp_flash_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Judge41600::clear_has_min_near_lamp_flash_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Judge41600::clear_min_near_lamp_flash_count() {
  if (min_near_lamp_flash_count_ != NULL) min_near_lamp_flash_count_->::OPMessage::judgeItem::Clear();
  clear_has_min_near_lamp_flash_count();
}
inline const ::OPMessage::judgeItem& Judge41600::min_near_lamp_flash_count() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41600.min_near_lamp_flash_count)
  return min_near_lamp_flash_count_ != NULL ? *min_near_lamp_flash_count_ : *default_instance_->min_near_lamp_flash_count_;
}
inline ::OPMessage::judgeItem* Judge41600::mutable_min_near_lamp_flash_count() {
  set_has_min_near_lamp_flash_count();
  if (min_near_lamp_flash_count_ == NULL) min_near_lamp_flash_count_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41600.min_near_lamp_flash_count)
  return min_near_lamp_flash_count_;
}
inline ::OPMessage::judgeItem* Judge41600::release_min_near_lamp_flash_count() {
  clear_has_min_near_lamp_flash_count();
  ::OPMessage::judgeItem* temp = min_near_lamp_flash_count_;
  min_near_lamp_flash_count_ = NULL;
  return temp;
}
inline void Judge41600::set_allocated_min_near_lamp_flash_count(::OPMessage::judgeItem* min_near_lamp_flash_count) {
  delete min_near_lamp_flash_count_;
  min_near_lamp_flash_count_ = min_near_lamp_flash_count;
  if (min_near_lamp_flash_count) {
    set_has_min_near_lamp_flash_count();
  } else {
    clear_has_min_near_lamp_flash_count();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41600.min_near_lamp_flash_count)
}

// optional .OPMessage.judgeItem min_far_lamp_flash_count = 4;
inline bool Judge41600::has_min_far_lamp_flash_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Judge41600::set_has_min_far_lamp_flash_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Judge41600::clear_has_min_far_lamp_flash_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Judge41600::clear_min_far_lamp_flash_count() {
  if (min_far_lamp_flash_count_ != NULL) min_far_lamp_flash_count_->::OPMessage::judgeItem::Clear();
  clear_has_min_far_lamp_flash_count();
}
inline const ::OPMessage::judgeItem& Judge41600::min_far_lamp_flash_count() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41600.min_far_lamp_flash_count)
  return min_far_lamp_flash_count_ != NULL ? *min_far_lamp_flash_count_ : *default_instance_->min_far_lamp_flash_count_;
}
inline ::OPMessage::judgeItem* Judge41600::mutable_min_far_lamp_flash_count() {
  set_has_min_far_lamp_flash_count();
  if (min_far_lamp_flash_count_ == NULL) min_far_lamp_flash_count_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41600.min_far_lamp_flash_count)
  return min_far_lamp_flash_count_;
}
inline ::OPMessage::judgeItem* Judge41600::release_min_far_lamp_flash_count() {
  clear_has_min_far_lamp_flash_count();
  ::OPMessage::judgeItem* temp = min_far_lamp_flash_count_;
  min_far_lamp_flash_count_ = NULL;
  return temp;
}
inline void Judge41600::set_allocated_min_far_lamp_flash_count(::OPMessage::judgeItem* min_far_lamp_flash_count) {
  delete min_far_lamp_flash_count_;
  min_far_lamp_flash_count_ = min_far_lamp_flash_count;
  if (min_far_lamp_flash_count) {
    set_has_min_far_lamp_flash_count();
  } else {
    clear_has_min_far_lamp_flash_count();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41600.min_far_lamp_flash_count)
}

// -------------------------------------------------------------------

// Judge40200

// optional int32 itemCode = 1;
inline bool Judge40200::has_itemcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Judge40200::set_has_itemcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Judge40200::clear_has_itemcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Judge40200::clear_itemcode() {
  itemcode_ = 0;
  clear_has_itemcode();
}
inline ::google::protobuf::int32 Judge40200::itemcode() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40200.itemCode)
  return itemcode_;
}
inline void Judge40200::set_itemcode(::google::protobuf::int32 value) {
  set_has_itemcode();
  itemcode_ = value;
  // @@protoc_insertion_point(field_set:OPMessage.Judge40200.itemCode)
}

// optional string itemName = 2;
inline bool Judge40200::has_itemname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Judge40200::set_has_itemname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Judge40200::clear_has_itemname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Judge40200::clear_itemname() {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_->clear();
  }
  clear_has_itemname();
}
inline const ::std::string& Judge40200::itemname() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40200.itemName)
  return *itemname_;
}
inline void Judge40200::set_itemname(const ::std::string& value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
  // @@protoc_insertion_point(field_set:OPMessage.Judge40200.itemName)
}
inline void Judge40200::set_itemname(const char* value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
  // @@protoc_insertion_point(field_set_char:OPMessage.Judge40200.itemName)
}
inline void Judge40200::set_itemname(const char* value, size_t size) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OPMessage.Judge40200.itemName)
}
inline ::std::string* Judge40200::mutable_itemname() {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40200.itemName)
  return itemname_;
}
inline ::std::string* Judge40200::release_itemname() {
  clear_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = itemname_;
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Judge40200::set_allocated_itemname(::std::string* itemname) {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (itemname) {
    set_has_itemname();
    itemname_ = itemname;
  } else {
    clear_has_itemname();
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40200.itemName)
}

// optional .OPMessage.judgeItem max_time = 3;
inline bool Judge40200::has_max_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Judge40200::set_has_max_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Judge40200::clear_has_max_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Judge40200::clear_max_time() {
  if (max_time_ != NULL) max_time_->::OPMessage::judgeItem::Clear();
  clear_has_max_time();
}
inline const ::OPMessage::judgeItem& Judge40200::max_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40200.max_time)
  return max_time_ != NULL ? *max_time_ : *default_instance_->max_time_;
}
inline ::OPMessage::judgeItem* Judge40200::mutable_max_time() {
  set_has_max_time();
  if (max_time_ == NULL) max_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40200.max_time)
  return max_time_;
}
inline ::OPMessage::judgeItem* Judge40200::release_max_time() {
  clear_has_max_time();
  ::OPMessage::judgeItem* temp = max_time_;
  max_time_ = NULL;
  return temp;
}
inline void Judge40200::set_allocated_max_time(::OPMessage::judgeItem* max_time) {
  delete max_time_;
  max_time_ = max_time;
  if (max_time) {
    set_has_max_time();
  } else {
    clear_has_max_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40200.max_time)
}

// optional .OPMessage.judgeItem max_trigger_distance = 4;
inline bool Judge40200::has_max_trigger_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Judge40200::set_has_max_trigger_distance() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Judge40200::clear_has_max_trigger_distance() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Judge40200::clear_max_trigger_distance() {
  if (max_trigger_distance_ != NULL) max_trigger_distance_->::OPMessage::judgeItem::Clear();
  clear_has_max_trigger_distance();
}
inline const ::OPMessage::judgeItem& Judge40200::max_trigger_distance() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40200.max_trigger_distance)
  return max_trigger_distance_ != NULL ? *max_trigger_distance_ : *default_instance_->max_trigger_distance_;
}
inline ::OPMessage::judgeItem* Judge40200::mutable_max_trigger_distance() {
  set_has_max_trigger_distance();
  if (max_trigger_distance_ == NULL) max_trigger_distance_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40200.max_trigger_distance)
  return max_trigger_distance_;
}
inline ::OPMessage::judgeItem* Judge40200::release_max_trigger_distance() {
  clear_has_max_trigger_distance();
  ::OPMessage::judgeItem* temp = max_trigger_distance_;
  max_trigger_distance_ = NULL;
  return temp;
}
inline void Judge40200::set_allocated_max_trigger_distance(::OPMessage::judgeItem* max_trigger_distance) {
  delete max_trigger_distance_;
  max_trigger_distance_ = max_trigger_distance;
  if (max_trigger_distance) {
    set_has_max_trigger_distance();
  } else {
    clear_has_max_trigger_distance();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40200.max_trigger_distance)
}

// optional .OPMessage.judgeItem min_horn_time = 5;
inline bool Judge40200::has_min_horn_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Judge40200::set_has_min_horn_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Judge40200::clear_has_min_horn_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Judge40200::clear_min_horn_time() {
  if (min_horn_time_ != NULL) min_horn_time_->::OPMessage::judgeItem::Clear();
  clear_has_min_horn_time();
}
inline const ::OPMessage::judgeItem& Judge40200::min_horn_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40200.min_horn_time)
  return min_horn_time_ != NULL ? *min_horn_time_ : *default_instance_->min_horn_time_;
}
inline ::OPMessage::judgeItem* Judge40200::mutable_min_horn_time() {
  set_has_min_horn_time();
  if (min_horn_time_ == NULL) min_horn_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40200.min_horn_time)
  return min_horn_time_;
}
inline ::OPMessage::judgeItem* Judge40200::release_min_horn_time() {
  clear_has_min_horn_time();
  ::OPMessage::judgeItem* temp = min_horn_time_;
  min_horn_time_ = NULL;
  return temp;
}
inline void Judge40200::set_allocated_min_horn_time(::OPMessage::judgeItem* min_horn_time) {
  delete min_horn_time_;
  min_horn_time_ = min_horn_time;
  if (min_horn_time) {
    set_has_min_horn_time();
  } else {
    clear_has_min_horn_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40200.min_horn_time)
}

// optional .OPMessage.judgeItem min_turn_signal_time = 6;
inline bool Judge40200::has_min_turn_signal_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Judge40200::set_has_min_turn_signal_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Judge40200::clear_has_min_turn_signal_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Judge40200::clear_min_turn_signal_time() {
  if (min_turn_signal_time_ != NULL) min_turn_signal_time_->::OPMessage::judgeItem::Clear();
  clear_has_min_turn_signal_time();
}
inline const ::OPMessage::judgeItem& Judge40200::min_turn_signal_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40200.min_turn_signal_time)
  return min_turn_signal_time_ != NULL ? *min_turn_signal_time_ : *default_instance_->min_turn_signal_time_;
}
inline ::OPMessage::judgeItem* Judge40200::mutable_min_turn_signal_time() {
  set_has_min_turn_signal_time();
  if (min_turn_signal_time_ == NULL) min_turn_signal_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40200.min_turn_signal_time)
  return min_turn_signal_time_;
}
inline ::OPMessage::judgeItem* Judge40200::release_min_turn_signal_time() {
  clear_has_min_turn_signal_time();
  ::OPMessage::judgeItem* temp = min_turn_signal_time_;
  min_turn_signal_time_ = NULL;
  return temp;
}
inline void Judge40200::set_allocated_min_turn_signal_time(::OPMessage::judgeItem* min_turn_signal_time) {
  delete min_turn_signal_time_;
  min_turn_signal_time_ = min_turn_signal_time;
  if (min_turn_signal_time) {
    set_has_min_turn_signal_time();
  } else {
    clear_has_min_turn_signal_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40200.min_turn_signal_time)
}

// optional .OPMessage.voiceItem vi_40200_start_exam = 7;
inline bool Judge40200::has_vi_40200_start_exam() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Judge40200::set_has_vi_40200_start_exam() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Judge40200::clear_has_vi_40200_start_exam() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Judge40200::clear_vi_40200_start_exam() {
  if (vi_40200_start_exam_ != NULL) vi_40200_start_exam_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40200_start_exam();
}
inline const ::OPMessage::voiceItem& Judge40200::vi_40200_start_exam() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40200.vi_40200_start_exam)
  return vi_40200_start_exam_ != NULL ? *vi_40200_start_exam_ : *default_instance_->vi_40200_start_exam_;
}
inline ::OPMessage::voiceItem* Judge40200::mutable_vi_40200_start_exam() {
  set_has_vi_40200_start_exam();
  if (vi_40200_start_exam_ == NULL) vi_40200_start_exam_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40200.vi_40200_start_exam)
  return vi_40200_start_exam_;
}
inline ::OPMessage::voiceItem* Judge40200::release_vi_40200_start_exam() {
  clear_has_vi_40200_start_exam();
  ::OPMessage::voiceItem* temp = vi_40200_start_exam_;
  vi_40200_start_exam_ = NULL;
  return temp;
}
inline void Judge40200::set_allocated_vi_40200_start_exam(::OPMessage::voiceItem* vi_40200_start_exam) {
  delete vi_40200_start_exam_;
  vi_40200_start_exam_ = vi_40200_start_exam;
  if (vi_40200_start_exam) {
    set_has_vi_40200_start_exam();
  } else {
    clear_has_vi_40200_start_exam();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40200.vi_40200_start_exam)
}

// optional .OPMessage.voiceItem vi_40200_end_exam = 8;
inline bool Judge40200::has_vi_40200_end_exam() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Judge40200::set_has_vi_40200_end_exam() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Judge40200::clear_has_vi_40200_end_exam() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Judge40200::clear_vi_40200_end_exam() {
  if (vi_40200_end_exam_ != NULL) vi_40200_end_exam_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40200_end_exam();
}
inline const ::OPMessage::voiceItem& Judge40200::vi_40200_end_exam() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40200.vi_40200_end_exam)
  return vi_40200_end_exam_ != NULL ? *vi_40200_end_exam_ : *default_instance_->vi_40200_end_exam_;
}
inline ::OPMessage::voiceItem* Judge40200::mutable_vi_40200_end_exam() {
  set_has_vi_40200_end_exam();
  if (vi_40200_end_exam_ == NULL) vi_40200_end_exam_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40200.vi_40200_end_exam)
  return vi_40200_end_exam_;
}
inline ::OPMessage::voiceItem* Judge40200::release_vi_40200_end_exam() {
  clear_has_vi_40200_end_exam();
  ::OPMessage::voiceItem* temp = vi_40200_end_exam_;
  vi_40200_end_exam_ = NULL;
  return temp;
}
inline void Judge40200::set_allocated_vi_40200_end_exam(::OPMessage::voiceItem* vi_40200_end_exam) {
  delete vi_40200_end_exam_;
  vi_40200_end_exam_ = vi_40200_end_exam;
  if (vi_40200_end_exam) {
    set_has_vi_40200_end_exam();
  } else {
    clear_has_vi_40200_end_exam();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40200.vi_40200_end_exam)
}

// optional .OPMessage.voiceItem vi_40200_turn_lamp_use_error = 9;
inline bool Judge40200::has_vi_40200_turn_lamp_use_error() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Judge40200::set_has_vi_40200_turn_lamp_use_error() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Judge40200::clear_has_vi_40200_turn_lamp_use_error() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Judge40200::clear_vi_40200_turn_lamp_use_error() {
  if (vi_40200_turn_lamp_use_error_ != NULL) vi_40200_turn_lamp_use_error_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40200_turn_lamp_use_error();
}
inline const ::OPMessage::voiceItem& Judge40200::vi_40200_turn_lamp_use_error() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40200.vi_40200_turn_lamp_use_error)
  return vi_40200_turn_lamp_use_error_ != NULL ? *vi_40200_turn_lamp_use_error_ : *default_instance_->vi_40200_turn_lamp_use_error_;
}
inline ::OPMessage::voiceItem* Judge40200::mutable_vi_40200_turn_lamp_use_error() {
  set_has_vi_40200_turn_lamp_use_error();
  if (vi_40200_turn_lamp_use_error_ == NULL) vi_40200_turn_lamp_use_error_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40200.vi_40200_turn_lamp_use_error)
  return vi_40200_turn_lamp_use_error_;
}
inline ::OPMessage::voiceItem* Judge40200::release_vi_40200_turn_lamp_use_error() {
  clear_has_vi_40200_turn_lamp_use_error();
  ::OPMessage::voiceItem* temp = vi_40200_turn_lamp_use_error_;
  vi_40200_turn_lamp_use_error_ = NULL;
  return temp;
}
inline void Judge40200::set_allocated_vi_40200_turn_lamp_use_error(::OPMessage::voiceItem* vi_40200_turn_lamp_use_error) {
  delete vi_40200_turn_lamp_use_error_;
  vi_40200_turn_lamp_use_error_ = vi_40200_turn_lamp_use_error;
  if (vi_40200_turn_lamp_use_error) {
    set_has_vi_40200_turn_lamp_use_error();
  } else {
    clear_has_vi_40200_turn_lamp_use_error();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40200.vi_40200_turn_lamp_use_error)
}

// optional .OPMessage.voiceItem vi_40200_turn_lamp_not_use = 10;
inline bool Judge40200::has_vi_40200_turn_lamp_not_use() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Judge40200::set_has_vi_40200_turn_lamp_not_use() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Judge40200::clear_has_vi_40200_turn_lamp_not_use() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Judge40200::clear_vi_40200_turn_lamp_not_use() {
  if (vi_40200_turn_lamp_not_use_ != NULL) vi_40200_turn_lamp_not_use_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40200_turn_lamp_not_use();
}
inline const ::OPMessage::voiceItem& Judge40200::vi_40200_turn_lamp_not_use() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40200.vi_40200_turn_lamp_not_use)
  return vi_40200_turn_lamp_not_use_ != NULL ? *vi_40200_turn_lamp_not_use_ : *default_instance_->vi_40200_turn_lamp_not_use_;
}
inline ::OPMessage::voiceItem* Judge40200::mutable_vi_40200_turn_lamp_not_use() {
  set_has_vi_40200_turn_lamp_not_use();
  if (vi_40200_turn_lamp_not_use_ == NULL) vi_40200_turn_lamp_not_use_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40200.vi_40200_turn_lamp_not_use)
  return vi_40200_turn_lamp_not_use_;
}
inline ::OPMessage::voiceItem* Judge40200::release_vi_40200_turn_lamp_not_use() {
  clear_has_vi_40200_turn_lamp_not_use();
  ::OPMessage::voiceItem* temp = vi_40200_turn_lamp_not_use_;
  vi_40200_turn_lamp_not_use_ = NULL;
  return temp;
}
inline void Judge40200::set_allocated_vi_40200_turn_lamp_not_use(::OPMessage::voiceItem* vi_40200_turn_lamp_not_use) {
  delete vi_40200_turn_lamp_not_use_;
  vi_40200_turn_lamp_not_use_ = vi_40200_turn_lamp_not_use;
  if (vi_40200_turn_lamp_not_use) {
    set_has_vi_40200_turn_lamp_not_use();
  } else {
    clear_has_vi_40200_turn_lamp_not_use();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40200.vi_40200_turn_lamp_not_use)
}

// optional .OPMessage.voiceItem vi_40200_horn_not_use = 11;
inline bool Judge40200::has_vi_40200_horn_not_use() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Judge40200::set_has_vi_40200_horn_not_use() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Judge40200::clear_has_vi_40200_horn_not_use() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Judge40200::clear_vi_40200_horn_not_use() {
  if (vi_40200_horn_not_use_ != NULL) vi_40200_horn_not_use_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40200_horn_not_use();
}
inline const ::OPMessage::voiceItem& Judge40200::vi_40200_horn_not_use() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40200.vi_40200_horn_not_use)
  return vi_40200_horn_not_use_ != NULL ? *vi_40200_horn_not_use_ : *default_instance_->vi_40200_horn_not_use_;
}
inline ::OPMessage::voiceItem* Judge40200::mutable_vi_40200_horn_not_use() {
  set_has_vi_40200_horn_not_use();
  if (vi_40200_horn_not_use_ == NULL) vi_40200_horn_not_use_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40200.vi_40200_horn_not_use)
  return vi_40200_horn_not_use_;
}
inline ::OPMessage::voiceItem* Judge40200::release_vi_40200_horn_not_use() {
  clear_has_vi_40200_horn_not_use();
  ::OPMessage::voiceItem* temp = vi_40200_horn_not_use_;
  vi_40200_horn_not_use_ = NULL;
  return temp;
}
inline void Judge40200::set_allocated_vi_40200_horn_not_use(::OPMessage::voiceItem* vi_40200_horn_not_use) {
  delete vi_40200_horn_not_use_;
  vi_40200_horn_not_use_ = vi_40200_horn_not_use;
  if (vi_40200_horn_not_use) {
    set_has_vi_40200_horn_not_use();
  } else {
    clear_has_vi_40200_horn_not_use();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40200.vi_40200_horn_not_use)
}

// -------------------------------------------------------------------

// Judge40400

// optional int32 itemCode = 1;
inline bool Judge40400::has_itemcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Judge40400::set_has_itemcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Judge40400::clear_has_itemcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Judge40400::clear_itemcode() {
  itemcode_ = 0;
  clear_has_itemcode();
}
inline ::google::protobuf::int32 Judge40400::itemcode() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40400.itemCode)
  return itemcode_;
}
inline void Judge40400::set_itemcode(::google::protobuf::int32 value) {
  set_has_itemcode();
  itemcode_ = value;
  // @@protoc_insertion_point(field_set:OPMessage.Judge40400.itemCode)
}

// optional string itemName = 2;
inline bool Judge40400::has_itemname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Judge40400::set_has_itemname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Judge40400::clear_has_itemname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Judge40400::clear_itemname() {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_->clear();
  }
  clear_has_itemname();
}
inline const ::std::string& Judge40400::itemname() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40400.itemName)
  return *itemname_;
}
inline void Judge40400::set_itemname(const ::std::string& value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
  // @@protoc_insertion_point(field_set:OPMessage.Judge40400.itemName)
}
inline void Judge40400::set_itemname(const char* value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
  // @@protoc_insertion_point(field_set_char:OPMessage.Judge40400.itemName)
}
inline void Judge40400::set_itemname(const char* value, size_t size) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OPMessage.Judge40400.itemName)
}
inline ::std::string* Judge40400::mutable_itemname() {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40400.itemName)
  return itemname_;
}
inline ::std::string* Judge40400::release_itemname() {
  clear_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = itemname_;
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Judge40400::set_allocated_itemname(::std::string* itemname) {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (itemname) {
    set_has_itemname();
    itemname_ = itemname;
  } else {
    clear_has_itemname();
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40400.itemName)
}

// optional .OPMessage.judgeItem max_time = 3;
inline bool Judge40400::has_max_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Judge40400::set_has_max_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Judge40400::clear_has_max_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Judge40400::clear_max_time() {
  if (max_time_ != NULL) max_time_->::OPMessage::judgeItem::Clear();
  clear_has_max_time();
}
inline const ::OPMessage::judgeItem& Judge40400::max_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40400.max_time)
  return max_time_ != NULL ? *max_time_ : *default_instance_->max_time_;
}
inline ::OPMessage::judgeItem* Judge40400::mutable_max_time() {
  set_has_max_time();
  if (max_time_ == NULL) max_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40400.max_time)
  return max_time_;
}
inline ::OPMessage::judgeItem* Judge40400::release_max_time() {
  clear_has_max_time();
  ::OPMessage::judgeItem* temp = max_time_;
  max_time_ = NULL;
  return temp;
}
inline void Judge40400::set_allocated_max_time(::OPMessage::judgeItem* max_time) {
  delete max_time_;
  max_time_ = max_time;
  if (max_time) {
    set_has_max_time();
  } else {
    clear_has_max_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40400.max_time)
}

// optional .OPMessage.judgeItem max_trigger_distance = 4;
inline bool Judge40400::has_max_trigger_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Judge40400::set_has_max_trigger_distance() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Judge40400::clear_has_max_trigger_distance() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Judge40400::clear_max_trigger_distance() {
  if (max_trigger_distance_ != NULL) max_trigger_distance_->::OPMessage::judgeItem::Clear();
  clear_has_max_trigger_distance();
}
inline const ::OPMessage::judgeItem& Judge40400::max_trigger_distance() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40400.max_trigger_distance)
  return max_trigger_distance_ != NULL ? *max_trigger_distance_ : *default_instance_->max_trigger_distance_;
}
inline ::OPMessage::judgeItem* Judge40400::mutable_max_trigger_distance() {
  set_has_max_trigger_distance();
  if (max_trigger_distance_ == NULL) max_trigger_distance_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40400.max_trigger_distance)
  return max_trigger_distance_;
}
inline ::OPMessage::judgeItem* Judge40400::release_max_trigger_distance() {
  clear_has_max_trigger_distance();
  ::OPMessage::judgeItem* temp = max_trigger_distance_;
  max_trigger_distance_ = NULL;
  return temp;
}
inline void Judge40400::set_allocated_max_trigger_distance(::OPMessage::judgeItem* max_trigger_distance) {
  delete max_trigger_distance_;
  max_trigger_distance_ = max_trigger_distance;
  if (max_trigger_distance) {
    set_has_max_trigger_distance();
  } else {
    clear_has_max_trigger_distance();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40400.max_trigger_distance)
}

// optional .OPMessage.judgeItem max_gear_finish_time = 5;
inline bool Judge40400::has_max_gear_finish_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Judge40400::set_has_max_gear_finish_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Judge40400::clear_has_max_gear_finish_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Judge40400::clear_max_gear_finish_time() {
  if (max_gear_finish_time_ != NULL) max_gear_finish_time_->::OPMessage::judgeItem::Clear();
  clear_has_max_gear_finish_time();
}
inline const ::OPMessage::judgeItem& Judge40400::max_gear_finish_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40400.max_gear_finish_time)
  return max_gear_finish_time_ != NULL ? *max_gear_finish_time_ : *default_instance_->max_gear_finish_time_;
}
inline ::OPMessage::judgeItem* Judge40400::mutable_max_gear_finish_time() {
  set_has_max_gear_finish_time();
  if (max_gear_finish_time_ == NULL) max_gear_finish_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40400.max_gear_finish_time)
  return max_gear_finish_time_;
}
inline ::OPMessage::judgeItem* Judge40400::release_max_gear_finish_time() {
  clear_has_max_gear_finish_time();
  ::OPMessage::judgeItem* temp = max_gear_finish_time_;
  max_gear_finish_time_ = NULL;
  return temp;
}
inline void Judge40400::set_allocated_max_gear_finish_time(::OPMessage::judgeItem* max_gear_finish_time) {
  delete max_gear_finish_time_;
  max_gear_finish_time_ = max_gear_finish_time;
  if (max_gear_finish_time) {
    set_has_max_gear_finish_time();
  } else {
    clear_has_max_gear_finish_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40400.max_gear_finish_time)
}

// optional .OPMessage.judgeItem gear_actions_0 = 6;
inline bool Judge40400::has_gear_actions_0() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Judge40400::set_has_gear_actions_0() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Judge40400::clear_has_gear_actions_0() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Judge40400::clear_gear_actions_0() {
  if (gear_actions_0_ != NULL) gear_actions_0_->::OPMessage::judgeItem::Clear();
  clear_has_gear_actions_0();
}
inline const ::OPMessage::judgeItem& Judge40400::gear_actions_0() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40400.gear_actions_0)
  return gear_actions_0_ != NULL ? *gear_actions_0_ : *default_instance_->gear_actions_0_;
}
inline ::OPMessage::judgeItem* Judge40400::mutable_gear_actions_0() {
  set_has_gear_actions_0();
  if (gear_actions_0_ == NULL) gear_actions_0_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40400.gear_actions_0)
  return gear_actions_0_;
}
inline ::OPMessage::judgeItem* Judge40400::release_gear_actions_0() {
  clear_has_gear_actions_0();
  ::OPMessage::judgeItem* temp = gear_actions_0_;
  gear_actions_0_ = NULL;
  return temp;
}
inline void Judge40400::set_allocated_gear_actions_0(::OPMessage::judgeItem* gear_actions_0) {
  delete gear_actions_0_;
  gear_actions_0_ = gear_actions_0;
  if (gear_actions_0) {
    set_has_gear_actions_0();
  } else {
    clear_has_gear_actions_0();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40400.gear_actions_0)
}

// optional .OPMessage.judgeItem gear_actions_1 = 7;
inline bool Judge40400::has_gear_actions_1() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Judge40400::set_has_gear_actions_1() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Judge40400::clear_has_gear_actions_1() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Judge40400::clear_gear_actions_1() {
  if (gear_actions_1_ != NULL) gear_actions_1_->::OPMessage::judgeItem::Clear();
  clear_has_gear_actions_1();
}
inline const ::OPMessage::judgeItem& Judge40400::gear_actions_1() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40400.gear_actions_1)
  return gear_actions_1_ != NULL ? *gear_actions_1_ : *default_instance_->gear_actions_1_;
}
inline ::OPMessage::judgeItem* Judge40400::mutable_gear_actions_1() {
  set_has_gear_actions_1();
  if (gear_actions_1_ == NULL) gear_actions_1_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40400.gear_actions_1)
  return gear_actions_1_;
}
inline ::OPMessage::judgeItem* Judge40400::release_gear_actions_1() {
  clear_has_gear_actions_1();
  ::OPMessage::judgeItem* temp = gear_actions_1_;
  gear_actions_1_ = NULL;
  return temp;
}
inline void Judge40400::set_allocated_gear_actions_1(::OPMessage::judgeItem* gear_actions_1) {
  delete gear_actions_1_;
  gear_actions_1_ = gear_actions_1;
  if (gear_actions_1) {
    set_has_gear_actions_1();
  } else {
    clear_has_gear_actions_1();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40400.gear_actions_1)
}

// optional .OPMessage.judgeItem gear_actions_2 = 8;
inline bool Judge40400::has_gear_actions_2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Judge40400::set_has_gear_actions_2() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Judge40400::clear_has_gear_actions_2() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Judge40400::clear_gear_actions_2() {
  if (gear_actions_2_ != NULL) gear_actions_2_->::OPMessage::judgeItem::Clear();
  clear_has_gear_actions_2();
}
inline const ::OPMessage::judgeItem& Judge40400::gear_actions_2() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40400.gear_actions_2)
  return gear_actions_2_ != NULL ? *gear_actions_2_ : *default_instance_->gear_actions_2_;
}
inline ::OPMessage::judgeItem* Judge40400::mutable_gear_actions_2() {
  set_has_gear_actions_2();
  if (gear_actions_2_ == NULL) gear_actions_2_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40400.gear_actions_2)
  return gear_actions_2_;
}
inline ::OPMessage::judgeItem* Judge40400::release_gear_actions_2() {
  clear_has_gear_actions_2();
  ::OPMessage::judgeItem* temp = gear_actions_2_;
  gear_actions_2_ = NULL;
  return temp;
}
inline void Judge40400::set_allocated_gear_actions_2(::OPMessage::judgeItem* gear_actions_2) {
  delete gear_actions_2_;
  gear_actions_2_ = gear_actions_2;
  if (gear_actions_2) {
    set_has_gear_actions_2();
  } else {
    clear_has_gear_actions_2();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40400.gear_actions_2)
}

// optional .OPMessage.judgeItem gear_actions_3 = 9;
inline bool Judge40400::has_gear_actions_3() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Judge40400::set_has_gear_actions_3() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Judge40400::clear_has_gear_actions_3() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Judge40400::clear_gear_actions_3() {
  if (gear_actions_3_ != NULL) gear_actions_3_->::OPMessage::judgeItem::Clear();
  clear_has_gear_actions_3();
}
inline const ::OPMessage::judgeItem& Judge40400::gear_actions_3() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40400.gear_actions_3)
  return gear_actions_3_ != NULL ? *gear_actions_3_ : *default_instance_->gear_actions_3_;
}
inline ::OPMessage::judgeItem* Judge40400::mutable_gear_actions_3() {
  set_has_gear_actions_3();
  if (gear_actions_3_ == NULL) gear_actions_3_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40400.gear_actions_3)
  return gear_actions_3_;
}
inline ::OPMessage::judgeItem* Judge40400::release_gear_actions_3() {
  clear_has_gear_actions_3();
  ::OPMessage::judgeItem* temp = gear_actions_3_;
  gear_actions_3_ = NULL;
  return temp;
}
inline void Judge40400::set_allocated_gear_actions_3(::OPMessage::judgeItem* gear_actions_3) {
  delete gear_actions_3_;
  gear_actions_3_ = gear_actions_3;
  if (gear_actions_3) {
    set_has_gear_actions_3();
  } else {
    clear_has_gear_actions_3();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40400.gear_actions_3)
}

// optional .OPMessage.judgeItem gear_actions_4 = 10;
inline bool Judge40400::has_gear_actions_4() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Judge40400::set_has_gear_actions_4() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Judge40400::clear_has_gear_actions_4() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Judge40400::clear_gear_actions_4() {
  if (gear_actions_4_ != NULL) gear_actions_4_->::OPMessage::judgeItem::Clear();
  clear_has_gear_actions_4();
}
inline const ::OPMessage::judgeItem& Judge40400::gear_actions_4() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40400.gear_actions_4)
  return gear_actions_4_ != NULL ? *gear_actions_4_ : *default_instance_->gear_actions_4_;
}
inline ::OPMessage::judgeItem* Judge40400::mutable_gear_actions_4() {
  set_has_gear_actions_4();
  if (gear_actions_4_ == NULL) gear_actions_4_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40400.gear_actions_4)
  return gear_actions_4_;
}
inline ::OPMessage::judgeItem* Judge40400::release_gear_actions_4() {
  clear_has_gear_actions_4();
  ::OPMessage::judgeItem* temp = gear_actions_4_;
  gear_actions_4_ = NULL;
  return temp;
}
inline void Judge40400::set_allocated_gear_actions_4(::OPMessage::judgeItem* gear_actions_4) {
  delete gear_actions_4_;
  gear_actions_4_ = gear_actions_4;
  if (gear_actions_4) {
    set_has_gear_actions_4();
  } else {
    clear_has_gear_actions_4();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40400.gear_actions_4)
}

// optional .OPMessage.judgeItem notify_after_clutch_down = 11;
inline bool Judge40400::has_notify_after_clutch_down() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Judge40400::set_has_notify_after_clutch_down() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Judge40400::clear_has_notify_after_clutch_down() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Judge40400::clear_notify_after_clutch_down() {
  if (notify_after_clutch_down_ != NULL) notify_after_clutch_down_->::OPMessage::judgeItem::Clear();
  clear_has_notify_after_clutch_down();
}
inline const ::OPMessage::judgeItem& Judge40400::notify_after_clutch_down() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40400.notify_after_clutch_down)
  return notify_after_clutch_down_ != NULL ? *notify_after_clutch_down_ : *default_instance_->notify_after_clutch_down_;
}
inline ::OPMessage::judgeItem* Judge40400::mutable_notify_after_clutch_down() {
  set_has_notify_after_clutch_down();
  if (notify_after_clutch_down_ == NULL) notify_after_clutch_down_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40400.notify_after_clutch_down)
  return notify_after_clutch_down_;
}
inline ::OPMessage::judgeItem* Judge40400::release_notify_after_clutch_down() {
  clear_has_notify_after_clutch_down();
  ::OPMessage::judgeItem* temp = notify_after_clutch_down_;
  notify_after_clutch_down_ = NULL;
  return temp;
}
inline void Judge40400::set_allocated_notify_after_clutch_down(::OPMessage::judgeItem* notify_after_clutch_down) {
  delete notify_after_clutch_down_;
  notify_after_clutch_down_ = notify_after_clutch_down;
  if (notify_after_clutch_down) {
    set_has_notify_after_clutch_down();
  } else {
    clear_has_notify_after_clutch_down();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40400.notify_after_clutch_down)
}

// optional .OPMessage.judgeItem check_after_clutch_up = 12;
inline bool Judge40400::has_check_after_clutch_up() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Judge40400::set_has_check_after_clutch_up() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Judge40400::clear_has_check_after_clutch_up() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Judge40400::clear_check_after_clutch_up() {
  if (check_after_clutch_up_ != NULL) check_after_clutch_up_->::OPMessage::judgeItem::Clear();
  clear_has_check_after_clutch_up();
}
inline const ::OPMessage::judgeItem& Judge40400::check_after_clutch_up() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40400.check_after_clutch_up)
  return check_after_clutch_up_ != NULL ? *check_after_clutch_up_ : *default_instance_->check_after_clutch_up_;
}
inline ::OPMessage::judgeItem* Judge40400::mutable_check_after_clutch_up() {
  set_has_check_after_clutch_up();
  if (check_after_clutch_up_ == NULL) check_after_clutch_up_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40400.check_after_clutch_up)
  return check_after_clutch_up_;
}
inline ::OPMessage::judgeItem* Judge40400::release_check_after_clutch_up() {
  clear_has_check_after_clutch_up();
  ::OPMessage::judgeItem* temp = check_after_clutch_up_;
  check_after_clutch_up_ = NULL;
  return temp;
}
inline void Judge40400::set_allocated_check_after_clutch_up(::OPMessage::judgeItem* check_after_clutch_up) {
  delete check_after_clutch_up_;
  check_after_clutch_up_ = check_after_clutch_up;
  if (check_after_clutch_up) {
    set_has_check_after_clutch_up();
  } else {
    clear_has_check_after_clutch_up();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40400.check_after_clutch_up)
}

// optional .OPMessage.voiceItem vi_40400_start_exam = 13;
inline bool Judge40400::has_vi_40400_start_exam() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Judge40400::set_has_vi_40400_start_exam() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Judge40400::clear_has_vi_40400_start_exam() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Judge40400::clear_vi_40400_start_exam() {
  if (vi_40400_start_exam_ != NULL) vi_40400_start_exam_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40400_start_exam();
}
inline const ::OPMessage::voiceItem& Judge40400::vi_40400_start_exam() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40400.vi_40400_start_exam)
  return vi_40400_start_exam_ != NULL ? *vi_40400_start_exam_ : *default_instance_->vi_40400_start_exam_;
}
inline ::OPMessage::voiceItem* Judge40400::mutable_vi_40400_start_exam() {
  set_has_vi_40400_start_exam();
  if (vi_40400_start_exam_ == NULL) vi_40400_start_exam_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40400.vi_40400_start_exam)
  return vi_40400_start_exam_;
}
inline ::OPMessage::voiceItem* Judge40400::release_vi_40400_start_exam() {
  clear_has_vi_40400_start_exam();
  ::OPMessage::voiceItem* temp = vi_40400_start_exam_;
  vi_40400_start_exam_ = NULL;
  return temp;
}
inline void Judge40400::set_allocated_vi_40400_start_exam(::OPMessage::voiceItem* vi_40400_start_exam) {
  delete vi_40400_start_exam_;
  vi_40400_start_exam_ = vi_40400_start_exam;
  if (vi_40400_start_exam) {
    set_has_vi_40400_start_exam();
  } else {
    clear_has_vi_40400_start_exam();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40400.vi_40400_start_exam)
}

// optional .OPMessage.voiceItem vi_40400_end_exam = 14;
inline bool Judge40400::has_vi_40400_end_exam() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Judge40400::set_has_vi_40400_end_exam() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Judge40400::clear_has_vi_40400_end_exam() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Judge40400::clear_vi_40400_end_exam() {
  if (vi_40400_end_exam_ != NULL) vi_40400_end_exam_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40400_end_exam();
}
inline const ::OPMessage::voiceItem& Judge40400::vi_40400_end_exam() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40400.vi_40400_end_exam)
  return vi_40400_end_exam_ != NULL ? *vi_40400_end_exam_ : *default_instance_->vi_40400_end_exam_;
}
inline ::OPMessage::voiceItem* Judge40400::mutable_vi_40400_end_exam() {
  set_has_vi_40400_end_exam();
  if (vi_40400_end_exam_ == NULL) vi_40400_end_exam_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40400.vi_40400_end_exam)
  return vi_40400_end_exam_;
}
inline ::OPMessage::voiceItem* Judge40400::release_vi_40400_end_exam() {
  clear_has_vi_40400_end_exam();
  ::OPMessage::voiceItem* temp = vi_40400_end_exam_;
  vi_40400_end_exam_ = NULL;
  return temp;
}
inline void Judge40400::set_allocated_vi_40400_end_exam(::OPMessage::voiceItem* vi_40400_end_exam) {
  delete vi_40400_end_exam_;
  vi_40400_end_exam_ = vi_40400_end_exam;
  if (vi_40400_end_exam) {
    set_has_vi_40400_end_exam();
  } else {
    clear_has_vi_40400_end_exam();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40400.vi_40400_end_exam)
}

// optional .OPMessage.voiceItem vi_40400_upto_2 = 15;
inline bool Judge40400::has_vi_40400_upto_2() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Judge40400::set_has_vi_40400_upto_2() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Judge40400::clear_has_vi_40400_upto_2() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Judge40400::clear_vi_40400_upto_2() {
  if (vi_40400_upto_2_ != NULL) vi_40400_upto_2_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40400_upto_2();
}
inline const ::OPMessage::voiceItem& Judge40400::vi_40400_upto_2() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40400.vi_40400_upto_2)
  return vi_40400_upto_2_ != NULL ? *vi_40400_upto_2_ : *default_instance_->vi_40400_upto_2_;
}
inline ::OPMessage::voiceItem* Judge40400::mutable_vi_40400_upto_2() {
  set_has_vi_40400_upto_2();
  if (vi_40400_upto_2_ == NULL) vi_40400_upto_2_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40400.vi_40400_upto_2)
  return vi_40400_upto_2_;
}
inline ::OPMessage::voiceItem* Judge40400::release_vi_40400_upto_2() {
  clear_has_vi_40400_upto_2();
  ::OPMessage::voiceItem* temp = vi_40400_upto_2_;
  vi_40400_upto_2_ = NULL;
  return temp;
}
inline void Judge40400::set_allocated_vi_40400_upto_2(::OPMessage::voiceItem* vi_40400_upto_2) {
  delete vi_40400_upto_2_;
  vi_40400_upto_2_ = vi_40400_upto_2;
  if (vi_40400_upto_2) {
    set_has_vi_40400_upto_2();
  } else {
    clear_has_vi_40400_upto_2();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40400.vi_40400_upto_2)
}

// optional .OPMessage.voiceItem vi_40400_upto_3 = 16;
inline bool Judge40400::has_vi_40400_upto_3() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Judge40400::set_has_vi_40400_upto_3() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Judge40400::clear_has_vi_40400_upto_3() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Judge40400::clear_vi_40400_upto_3() {
  if (vi_40400_upto_3_ != NULL) vi_40400_upto_3_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40400_upto_3();
}
inline const ::OPMessage::voiceItem& Judge40400::vi_40400_upto_3() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40400.vi_40400_upto_3)
  return vi_40400_upto_3_ != NULL ? *vi_40400_upto_3_ : *default_instance_->vi_40400_upto_3_;
}
inline ::OPMessage::voiceItem* Judge40400::mutable_vi_40400_upto_3() {
  set_has_vi_40400_upto_3();
  if (vi_40400_upto_3_ == NULL) vi_40400_upto_3_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40400.vi_40400_upto_3)
  return vi_40400_upto_3_;
}
inline ::OPMessage::voiceItem* Judge40400::release_vi_40400_upto_3() {
  clear_has_vi_40400_upto_3();
  ::OPMessage::voiceItem* temp = vi_40400_upto_3_;
  vi_40400_upto_3_ = NULL;
  return temp;
}
inline void Judge40400::set_allocated_vi_40400_upto_3(::OPMessage::voiceItem* vi_40400_upto_3) {
  delete vi_40400_upto_3_;
  vi_40400_upto_3_ = vi_40400_upto_3;
  if (vi_40400_upto_3) {
    set_has_vi_40400_upto_3();
  } else {
    clear_has_vi_40400_upto_3();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40400.vi_40400_upto_3)
}

// optional .OPMessage.voiceItem vi_40400_upto_4 = 17;
inline bool Judge40400::has_vi_40400_upto_4() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Judge40400::set_has_vi_40400_upto_4() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Judge40400::clear_has_vi_40400_upto_4() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Judge40400::clear_vi_40400_upto_4() {
  if (vi_40400_upto_4_ != NULL) vi_40400_upto_4_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40400_upto_4();
}
inline const ::OPMessage::voiceItem& Judge40400::vi_40400_upto_4() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40400.vi_40400_upto_4)
  return vi_40400_upto_4_ != NULL ? *vi_40400_upto_4_ : *default_instance_->vi_40400_upto_4_;
}
inline ::OPMessage::voiceItem* Judge40400::mutable_vi_40400_upto_4() {
  set_has_vi_40400_upto_4();
  if (vi_40400_upto_4_ == NULL) vi_40400_upto_4_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40400.vi_40400_upto_4)
  return vi_40400_upto_4_;
}
inline ::OPMessage::voiceItem* Judge40400::release_vi_40400_upto_4() {
  clear_has_vi_40400_upto_4();
  ::OPMessage::voiceItem* temp = vi_40400_upto_4_;
  vi_40400_upto_4_ = NULL;
  return temp;
}
inline void Judge40400::set_allocated_vi_40400_upto_4(::OPMessage::voiceItem* vi_40400_upto_4) {
  delete vi_40400_upto_4_;
  vi_40400_upto_4_ = vi_40400_upto_4;
  if (vi_40400_upto_4) {
    set_has_vi_40400_upto_4();
  } else {
    clear_has_vi_40400_upto_4();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40400.vi_40400_upto_4)
}

// optional .OPMessage.voiceItem vi_40400_upto_5 = 18;
inline bool Judge40400::has_vi_40400_upto_5() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Judge40400::set_has_vi_40400_upto_5() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Judge40400::clear_has_vi_40400_upto_5() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Judge40400::clear_vi_40400_upto_5() {
  if (vi_40400_upto_5_ != NULL) vi_40400_upto_5_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40400_upto_5();
}
inline const ::OPMessage::voiceItem& Judge40400::vi_40400_upto_5() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40400.vi_40400_upto_5)
  return vi_40400_upto_5_ != NULL ? *vi_40400_upto_5_ : *default_instance_->vi_40400_upto_5_;
}
inline ::OPMessage::voiceItem* Judge40400::mutable_vi_40400_upto_5() {
  set_has_vi_40400_upto_5();
  if (vi_40400_upto_5_ == NULL) vi_40400_upto_5_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40400.vi_40400_upto_5)
  return vi_40400_upto_5_;
}
inline ::OPMessage::voiceItem* Judge40400::release_vi_40400_upto_5() {
  clear_has_vi_40400_upto_5();
  ::OPMessage::voiceItem* temp = vi_40400_upto_5_;
  vi_40400_upto_5_ = NULL;
  return temp;
}
inline void Judge40400::set_allocated_vi_40400_upto_5(::OPMessage::voiceItem* vi_40400_upto_5) {
  delete vi_40400_upto_5_;
  vi_40400_upto_5_ = vi_40400_upto_5;
  if (vi_40400_upto_5) {
    set_has_vi_40400_upto_5();
  } else {
    clear_has_vi_40400_upto_5();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40400.vi_40400_upto_5)
}

// optional .OPMessage.voiceItem vi_40400_downto_1 = 19;
inline bool Judge40400::has_vi_40400_downto_1() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Judge40400::set_has_vi_40400_downto_1() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Judge40400::clear_has_vi_40400_downto_1() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Judge40400::clear_vi_40400_downto_1() {
  if (vi_40400_downto_1_ != NULL) vi_40400_downto_1_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40400_downto_1();
}
inline const ::OPMessage::voiceItem& Judge40400::vi_40400_downto_1() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40400.vi_40400_downto_1)
  return vi_40400_downto_1_ != NULL ? *vi_40400_downto_1_ : *default_instance_->vi_40400_downto_1_;
}
inline ::OPMessage::voiceItem* Judge40400::mutable_vi_40400_downto_1() {
  set_has_vi_40400_downto_1();
  if (vi_40400_downto_1_ == NULL) vi_40400_downto_1_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40400.vi_40400_downto_1)
  return vi_40400_downto_1_;
}
inline ::OPMessage::voiceItem* Judge40400::release_vi_40400_downto_1() {
  clear_has_vi_40400_downto_1();
  ::OPMessage::voiceItem* temp = vi_40400_downto_1_;
  vi_40400_downto_1_ = NULL;
  return temp;
}
inline void Judge40400::set_allocated_vi_40400_downto_1(::OPMessage::voiceItem* vi_40400_downto_1) {
  delete vi_40400_downto_1_;
  vi_40400_downto_1_ = vi_40400_downto_1;
  if (vi_40400_downto_1) {
    set_has_vi_40400_downto_1();
  } else {
    clear_has_vi_40400_downto_1();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40400.vi_40400_downto_1)
}

// optional .OPMessage.voiceItem vi_40400_downto_2 = 20;
inline bool Judge40400::has_vi_40400_downto_2() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Judge40400::set_has_vi_40400_downto_2() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Judge40400::clear_has_vi_40400_downto_2() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Judge40400::clear_vi_40400_downto_2() {
  if (vi_40400_downto_2_ != NULL) vi_40400_downto_2_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40400_downto_2();
}
inline const ::OPMessage::voiceItem& Judge40400::vi_40400_downto_2() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40400.vi_40400_downto_2)
  return vi_40400_downto_2_ != NULL ? *vi_40400_downto_2_ : *default_instance_->vi_40400_downto_2_;
}
inline ::OPMessage::voiceItem* Judge40400::mutable_vi_40400_downto_2() {
  set_has_vi_40400_downto_2();
  if (vi_40400_downto_2_ == NULL) vi_40400_downto_2_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40400.vi_40400_downto_2)
  return vi_40400_downto_2_;
}
inline ::OPMessage::voiceItem* Judge40400::release_vi_40400_downto_2() {
  clear_has_vi_40400_downto_2();
  ::OPMessage::voiceItem* temp = vi_40400_downto_2_;
  vi_40400_downto_2_ = NULL;
  return temp;
}
inline void Judge40400::set_allocated_vi_40400_downto_2(::OPMessage::voiceItem* vi_40400_downto_2) {
  delete vi_40400_downto_2_;
  vi_40400_downto_2_ = vi_40400_downto_2;
  if (vi_40400_downto_2) {
    set_has_vi_40400_downto_2();
  } else {
    clear_has_vi_40400_downto_2();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40400.vi_40400_downto_2)
}

// optional .OPMessage.voiceItem vi_40400_downto_3 = 21;
inline bool Judge40400::has_vi_40400_downto_3() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Judge40400::set_has_vi_40400_downto_3() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Judge40400::clear_has_vi_40400_downto_3() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Judge40400::clear_vi_40400_downto_3() {
  if (vi_40400_downto_3_ != NULL) vi_40400_downto_3_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40400_downto_3();
}
inline const ::OPMessage::voiceItem& Judge40400::vi_40400_downto_3() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40400.vi_40400_downto_3)
  return vi_40400_downto_3_ != NULL ? *vi_40400_downto_3_ : *default_instance_->vi_40400_downto_3_;
}
inline ::OPMessage::voiceItem* Judge40400::mutable_vi_40400_downto_3() {
  set_has_vi_40400_downto_3();
  if (vi_40400_downto_3_ == NULL) vi_40400_downto_3_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40400.vi_40400_downto_3)
  return vi_40400_downto_3_;
}
inline ::OPMessage::voiceItem* Judge40400::release_vi_40400_downto_3() {
  clear_has_vi_40400_downto_3();
  ::OPMessage::voiceItem* temp = vi_40400_downto_3_;
  vi_40400_downto_3_ = NULL;
  return temp;
}
inline void Judge40400::set_allocated_vi_40400_downto_3(::OPMessage::voiceItem* vi_40400_downto_3) {
  delete vi_40400_downto_3_;
  vi_40400_downto_3_ = vi_40400_downto_3;
  if (vi_40400_downto_3) {
    set_has_vi_40400_downto_3();
  } else {
    clear_has_vi_40400_downto_3();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40400.vi_40400_downto_3)
}

// optional .OPMessage.voiceItem vi_40400_downto_4 = 22;
inline bool Judge40400::has_vi_40400_downto_4() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Judge40400::set_has_vi_40400_downto_4() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Judge40400::clear_has_vi_40400_downto_4() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Judge40400::clear_vi_40400_downto_4() {
  if (vi_40400_downto_4_ != NULL) vi_40400_downto_4_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40400_downto_4();
}
inline const ::OPMessage::voiceItem& Judge40400::vi_40400_downto_4() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40400.vi_40400_downto_4)
  return vi_40400_downto_4_ != NULL ? *vi_40400_downto_4_ : *default_instance_->vi_40400_downto_4_;
}
inline ::OPMessage::voiceItem* Judge40400::mutable_vi_40400_downto_4() {
  set_has_vi_40400_downto_4();
  if (vi_40400_downto_4_ == NULL) vi_40400_downto_4_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40400.vi_40400_downto_4)
  return vi_40400_downto_4_;
}
inline ::OPMessage::voiceItem* Judge40400::release_vi_40400_downto_4() {
  clear_has_vi_40400_downto_4();
  ::OPMessage::voiceItem* temp = vi_40400_downto_4_;
  vi_40400_downto_4_ = NULL;
  return temp;
}
inline void Judge40400::set_allocated_vi_40400_downto_4(::OPMessage::voiceItem* vi_40400_downto_4) {
  delete vi_40400_downto_4_;
  vi_40400_downto_4_ = vi_40400_downto_4;
  if (vi_40400_downto_4) {
    set_has_vi_40400_downto_4();
  } else {
    clear_has_vi_40400_downto_4();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40400.vi_40400_downto_4)
}

// optional .OPMessage.voiceItem vi_40400_gear_error = 23;
inline bool Judge40400::has_vi_40400_gear_error() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Judge40400::set_has_vi_40400_gear_error() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Judge40400::clear_has_vi_40400_gear_error() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Judge40400::clear_vi_40400_gear_error() {
  if (vi_40400_gear_error_ != NULL) vi_40400_gear_error_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40400_gear_error();
}
inline const ::OPMessage::voiceItem& Judge40400::vi_40400_gear_error() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40400.vi_40400_gear_error)
  return vi_40400_gear_error_ != NULL ? *vi_40400_gear_error_ : *default_instance_->vi_40400_gear_error_;
}
inline ::OPMessage::voiceItem* Judge40400::mutable_vi_40400_gear_error() {
  set_has_vi_40400_gear_error();
  if (vi_40400_gear_error_ == NULL) vi_40400_gear_error_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40400.vi_40400_gear_error)
  return vi_40400_gear_error_;
}
inline ::OPMessage::voiceItem* Judge40400::release_vi_40400_gear_error() {
  clear_has_vi_40400_gear_error();
  ::OPMessage::voiceItem* temp = vi_40400_gear_error_;
  vi_40400_gear_error_ = NULL;
  return temp;
}
inline void Judge40400::set_allocated_vi_40400_gear_error(::OPMessage::voiceItem* vi_40400_gear_error) {
  delete vi_40400_gear_error_;
  vi_40400_gear_error_ = vi_40400_gear_error;
  if (vi_40400_gear_error) {
    set_has_vi_40400_gear_error();
  } else {
    clear_has_vi_40400_gear_error();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40400.vi_40400_gear_error)
}

// optional .OPMessage.voiceItem vi_40400_not_finish_operation = 24;
inline bool Judge40400::has_vi_40400_not_finish_operation() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Judge40400::set_has_vi_40400_not_finish_operation() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Judge40400::clear_has_vi_40400_not_finish_operation() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Judge40400::clear_vi_40400_not_finish_operation() {
  if (vi_40400_not_finish_operation_ != NULL) vi_40400_not_finish_operation_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40400_not_finish_operation();
}
inline const ::OPMessage::voiceItem& Judge40400::vi_40400_not_finish_operation() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40400.vi_40400_not_finish_operation)
  return vi_40400_not_finish_operation_ != NULL ? *vi_40400_not_finish_operation_ : *default_instance_->vi_40400_not_finish_operation_;
}
inline ::OPMessage::voiceItem* Judge40400::mutable_vi_40400_not_finish_operation() {
  set_has_vi_40400_not_finish_operation();
  if (vi_40400_not_finish_operation_ == NULL) vi_40400_not_finish_operation_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40400.vi_40400_not_finish_operation)
  return vi_40400_not_finish_operation_;
}
inline ::OPMessage::voiceItem* Judge40400::release_vi_40400_not_finish_operation() {
  clear_has_vi_40400_not_finish_operation();
  ::OPMessage::voiceItem* temp = vi_40400_not_finish_operation_;
  vi_40400_not_finish_operation_ = NULL;
  return temp;
}
inline void Judge40400::set_allocated_vi_40400_not_finish_operation(::OPMessage::voiceItem* vi_40400_not_finish_operation) {
  delete vi_40400_not_finish_operation_;
  vi_40400_not_finish_operation_ = vi_40400_not_finish_operation;
  if (vi_40400_not_finish_operation) {
    set_has_vi_40400_not_finish_operation();
  } else {
    clear_has_vi_40400_not_finish_operation();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40400.vi_40400_not_finish_operation)
}

// optional .OPMessage.voiceItem vi_40400_enter_gear_error = 25;
inline bool Judge40400::has_vi_40400_enter_gear_error() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Judge40400::set_has_vi_40400_enter_gear_error() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Judge40400::clear_has_vi_40400_enter_gear_error() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Judge40400::clear_vi_40400_enter_gear_error() {
  if (vi_40400_enter_gear_error_ != NULL) vi_40400_enter_gear_error_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40400_enter_gear_error();
}
inline const ::OPMessage::voiceItem& Judge40400::vi_40400_enter_gear_error() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40400.vi_40400_enter_gear_error)
  return vi_40400_enter_gear_error_ != NULL ? *vi_40400_enter_gear_error_ : *default_instance_->vi_40400_enter_gear_error_;
}
inline ::OPMessage::voiceItem* Judge40400::mutable_vi_40400_enter_gear_error() {
  set_has_vi_40400_enter_gear_error();
  if (vi_40400_enter_gear_error_ == NULL) vi_40400_enter_gear_error_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40400.vi_40400_enter_gear_error)
  return vi_40400_enter_gear_error_;
}
inline ::OPMessage::voiceItem* Judge40400::release_vi_40400_enter_gear_error() {
  clear_has_vi_40400_enter_gear_error();
  ::OPMessage::voiceItem* temp = vi_40400_enter_gear_error_;
  vi_40400_enter_gear_error_ = NULL;
  return temp;
}
inline void Judge40400::set_allocated_vi_40400_enter_gear_error(::OPMessage::voiceItem* vi_40400_enter_gear_error) {
  delete vi_40400_enter_gear_error_;
  vi_40400_enter_gear_error_ = vi_40400_enter_gear_error;
  if (vi_40400_enter_gear_error) {
    set_has_vi_40400_enter_gear_error();
  } else {
    clear_has_vi_40400_enter_gear_error();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40400.vi_40400_enter_gear_error)
}

// -------------------------------------------------------------------

// Judge41000

// optional int32 itemCode = 1;
inline bool Judge41000::has_itemcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Judge41000::set_has_itemcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Judge41000::clear_has_itemcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Judge41000::clear_itemcode() {
  itemcode_ = 0;
  clear_has_itemcode();
}
inline ::google::protobuf::int32 Judge41000::itemcode() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41000.itemCode)
  return itemcode_;
}
inline void Judge41000::set_itemcode(::google::protobuf::int32 value) {
  set_has_itemcode();
  itemcode_ = value;
  // @@protoc_insertion_point(field_set:OPMessage.Judge41000.itemCode)
}

// optional string itemName = 2;
inline bool Judge41000::has_itemname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Judge41000::set_has_itemname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Judge41000::clear_has_itemname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Judge41000::clear_itemname() {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_->clear();
  }
  clear_has_itemname();
}
inline const ::std::string& Judge41000::itemname() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41000.itemName)
  return *itemname_;
}
inline void Judge41000::set_itemname(const ::std::string& value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
  // @@protoc_insertion_point(field_set:OPMessage.Judge41000.itemName)
}
inline void Judge41000::set_itemname(const char* value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
  // @@protoc_insertion_point(field_set_char:OPMessage.Judge41000.itemName)
}
inline void Judge41000::set_itemname(const char* value, size_t size) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OPMessage.Judge41000.itemName)
}
inline ::std::string* Judge41000::mutable_itemname() {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41000.itemName)
  return itemname_;
}
inline ::std::string* Judge41000::release_itemname() {
  clear_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = itemname_;
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Judge41000::set_allocated_itemname(::std::string* itemname) {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (itemname) {
    set_has_itemname();
    itemname_ = itemname;
  } else {
    clear_has_itemname();
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41000.itemName)
}

// optional .OPMessage.judgeItem max_time = 3;
inline bool Judge41000::has_max_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Judge41000::set_has_max_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Judge41000::clear_has_max_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Judge41000::clear_max_time() {
  if (max_time_ != NULL) max_time_->::OPMessage::judgeItem::Clear();
  clear_has_max_time();
}
inline const ::OPMessage::judgeItem& Judge41000::max_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41000.max_time)
  return max_time_ != NULL ? *max_time_ : *default_instance_->max_time_;
}
inline ::OPMessage::judgeItem* Judge41000::mutable_max_time() {
  set_has_max_time();
  if (max_time_ == NULL) max_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41000.max_time)
  return max_time_;
}
inline ::OPMessage::judgeItem* Judge41000::release_max_time() {
  clear_has_max_time();
  ::OPMessage::judgeItem* temp = max_time_;
  max_time_ = NULL;
  return temp;
}
inline void Judge41000::set_allocated_max_time(::OPMessage::judgeItem* max_time) {
  delete max_time_;
  max_time_ = max_time;
  if (max_time) {
    set_has_max_time();
  } else {
    clear_has_max_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41000.max_time)
}

// optional .OPMessage.judgeItem max_trigger_distance = 4;
inline bool Judge41000::has_max_trigger_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Judge41000::set_has_max_trigger_distance() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Judge41000::clear_has_max_trigger_distance() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Judge41000::clear_max_trigger_distance() {
  if (max_trigger_distance_ != NULL) max_trigger_distance_->::OPMessage::judgeItem::Clear();
  clear_has_max_trigger_distance();
}
inline const ::OPMessage::judgeItem& Judge41000::max_trigger_distance() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41000.max_trigger_distance)
  return max_trigger_distance_ != NULL ? *max_trigger_distance_ : *default_instance_->max_trigger_distance_;
}
inline ::OPMessage::judgeItem* Judge41000::mutable_max_trigger_distance() {
  set_has_max_trigger_distance();
  if (max_trigger_distance_ == NULL) max_trigger_distance_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41000.max_trigger_distance)
  return max_trigger_distance_;
}
inline ::OPMessage::judgeItem* Judge41000::release_max_trigger_distance() {
  clear_has_max_trigger_distance();
  ::OPMessage::judgeItem* temp = max_trigger_distance_;
  max_trigger_distance_ = NULL;
  return temp;
}
inline void Judge41000::set_allocated_max_trigger_distance(::OPMessage::judgeItem* max_trigger_distance) {
  delete max_trigger_distance_;
  max_trigger_distance_ = max_trigger_distance;
  if (max_trigger_distance) {
    set_has_max_trigger_distance();
  } else {
    clear_has_max_trigger_distance();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41000.max_trigger_distance)
}

// optional .OPMessage.judgeItem max_speed = 5;
inline bool Judge41000::has_max_speed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Judge41000::set_has_max_speed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Judge41000::clear_has_max_speed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Judge41000::clear_max_speed() {
  if (max_speed_ != NULL) max_speed_->::OPMessage::judgeItem::Clear();
  clear_has_max_speed();
}
inline const ::OPMessage::judgeItem& Judge41000::max_speed() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41000.max_speed)
  return max_speed_ != NULL ? *max_speed_ : *default_instance_->max_speed_;
}
inline ::OPMessage::judgeItem* Judge41000::mutable_max_speed() {
  set_has_max_speed();
  if (max_speed_ == NULL) max_speed_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41000.max_speed)
  return max_speed_;
}
inline ::OPMessage::judgeItem* Judge41000::release_max_speed() {
  clear_has_max_speed();
  ::OPMessage::judgeItem* temp = max_speed_;
  max_speed_ = NULL;
  return temp;
}
inline void Judge41000::set_allocated_max_speed(::OPMessage::judgeItem* max_speed) {
  delete max_speed_;
  max_speed_ = max_speed;
  if (max_speed) {
    set_has_max_speed();
  } else {
    clear_has_max_speed();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41000.max_speed)
}

// optional .OPMessage.judgeItem min_horn_time = 6;
inline bool Judge41000::has_min_horn_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Judge41000::set_has_min_horn_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Judge41000::clear_has_min_horn_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Judge41000::clear_min_horn_time() {
  if (min_horn_time_ != NULL) min_horn_time_->::OPMessage::judgeItem::Clear();
  clear_has_min_horn_time();
}
inline const ::OPMessage::judgeItem& Judge41000::min_horn_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41000.min_horn_time)
  return min_horn_time_ != NULL ? *min_horn_time_ : *default_instance_->min_horn_time_;
}
inline ::OPMessage::judgeItem* Judge41000::mutable_min_horn_time() {
  set_has_min_horn_time();
  if (min_horn_time_ == NULL) min_horn_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41000.min_horn_time)
  return min_horn_time_;
}
inline ::OPMessage::judgeItem* Judge41000::release_min_horn_time() {
  clear_has_min_horn_time();
  ::OPMessage::judgeItem* temp = min_horn_time_;
  min_horn_time_ = NULL;
  return temp;
}
inline void Judge41000::set_allocated_min_horn_time(::OPMessage::judgeItem* min_horn_time) {
  delete min_horn_time_;
  min_horn_time_ = min_horn_time;
  if (min_horn_time) {
    set_has_min_horn_time();
  } else {
    clear_has_min_horn_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41000.min_horn_time)
}

// optional .OPMessage.judgeItem min_turn_signal_time = 7;
inline bool Judge41000::has_min_turn_signal_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Judge41000::set_has_min_turn_signal_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Judge41000::clear_has_min_turn_signal_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Judge41000::clear_min_turn_signal_time() {
  if (min_turn_signal_time_ != NULL) min_turn_signal_time_->::OPMessage::judgeItem::Clear();
  clear_has_min_turn_signal_time();
}
inline const ::OPMessage::judgeItem& Judge41000::min_turn_signal_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41000.min_turn_signal_time)
  return min_turn_signal_time_ != NULL ? *min_turn_signal_time_ : *default_instance_->min_turn_signal_time_;
}
inline ::OPMessage::judgeItem* Judge41000::mutable_min_turn_signal_time() {
  set_has_min_turn_signal_time();
  if (min_turn_signal_time_ == NULL) min_turn_signal_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41000.min_turn_signal_time)
  return min_turn_signal_time_;
}
inline ::OPMessage::judgeItem* Judge41000::release_min_turn_signal_time() {
  clear_has_min_turn_signal_time();
  ::OPMessage::judgeItem* temp = min_turn_signal_time_;
  min_turn_signal_time_ = NULL;
  return temp;
}
inline void Judge41000::set_allocated_min_turn_signal_time(::OPMessage::judgeItem* min_turn_signal_time) {
  delete min_turn_signal_time_;
  min_turn_signal_time_ = min_turn_signal_time;
  if (min_turn_signal_time) {
    set_has_min_turn_signal_time();
  } else {
    clear_has_min_turn_signal_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41000.min_turn_signal_time)
}

// optional .OPMessage.judgeItem judge_mode = 8;
inline bool Judge41000::has_judge_mode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Judge41000::set_has_judge_mode() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Judge41000::clear_has_judge_mode() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Judge41000::clear_judge_mode() {
  if (judge_mode_ != NULL) judge_mode_->::OPMessage::judgeItem::Clear();
  clear_has_judge_mode();
}
inline const ::OPMessage::judgeItem& Judge41000::judge_mode() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41000.judge_mode)
  return judge_mode_ != NULL ? *judge_mode_ : *default_instance_->judge_mode_;
}
inline ::OPMessage::judgeItem* Judge41000::mutable_judge_mode() {
  set_has_judge_mode();
  if (judge_mode_ == NULL) judge_mode_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41000.judge_mode)
  return judge_mode_;
}
inline ::OPMessage::judgeItem* Judge41000::release_judge_mode() {
  clear_has_judge_mode();
  ::OPMessage::judgeItem* temp = judge_mode_;
  judge_mode_ = NULL;
  return temp;
}
inline void Judge41000::set_allocated_judge_mode(::OPMessage::judgeItem* judge_mode) {
  delete judge_mode_;
  judge_mode_ = judge_mode;
  if (judge_mode) {
    set_has_judge_mode();
  } else {
    clear_has_judge_mode();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41000.judge_mode)
}

// optional .OPMessage.judgeItem need_near_far_lamp_flash = 9;
inline bool Judge41000::has_need_near_far_lamp_flash() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Judge41000::set_has_need_near_far_lamp_flash() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Judge41000::clear_has_need_near_far_lamp_flash() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Judge41000::clear_need_near_far_lamp_flash() {
  if (need_near_far_lamp_flash_ != NULL) need_near_far_lamp_flash_->::OPMessage::judgeItem::Clear();
  clear_has_need_near_far_lamp_flash();
}
inline const ::OPMessage::judgeItem& Judge41000::need_near_far_lamp_flash() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41000.need_near_far_lamp_flash)
  return need_near_far_lamp_flash_ != NULL ? *need_near_far_lamp_flash_ : *default_instance_->need_near_far_lamp_flash_;
}
inline ::OPMessage::judgeItem* Judge41000::mutable_need_near_far_lamp_flash() {
  set_has_need_near_far_lamp_flash();
  if (need_near_far_lamp_flash_ == NULL) need_near_far_lamp_flash_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41000.need_near_far_lamp_flash)
  return need_near_far_lamp_flash_;
}
inline ::OPMessage::judgeItem* Judge41000::release_need_near_far_lamp_flash() {
  clear_has_need_near_far_lamp_flash();
  ::OPMessage::judgeItem* temp = need_near_far_lamp_flash_;
  need_near_far_lamp_flash_ = NULL;
  return temp;
}
inline void Judge41000::set_allocated_need_near_far_lamp_flash(::OPMessage::judgeItem* need_near_far_lamp_flash) {
  delete need_near_far_lamp_flash_;
  need_near_far_lamp_flash_ = need_near_far_lamp_flash;
  if (need_near_far_lamp_flash) {
    set_has_need_near_far_lamp_flash();
  } else {
    clear_has_need_near_far_lamp_flash();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41000.need_near_far_lamp_flash)
}

// optional .OPMessage.voiceItem vi_41000_start_exam = 10;
inline bool Judge41000::has_vi_41000_start_exam() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Judge41000::set_has_vi_41000_start_exam() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Judge41000::clear_has_vi_41000_start_exam() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Judge41000::clear_vi_41000_start_exam() {
  if (vi_41000_start_exam_ != NULL) vi_41000_start_exam_->::OPMessage::voiceItem::Clear();
  clear_has_vi_41000_start_exam();
}
inline const ::OPMessage::voiceItem& Judge41000::vi_41000_start_exam() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41000.vi_41000_start_exam)
  return vi_41000_start_exam_ != NULL ? *vi_41000_start_exam_ : *default_instance_->vi_41000_start_exam_;
}
inline ::OPMessage::voiceItem* Judge41000::mutable_vi_41000_start_exam() {
  set_has_vi_41000_start_exam();
  if (vi_41000_start_exam_ == NULL) vi_41000_start_exam_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41000.vi_41000_start_exam)
  return vi_41000_start_exam_;
}
inline ::OPMessage::voiceItem* Judge41000::release_vi_41000_start_exam() {
  clear_has_vi_41000_start_exam();
  ::OPMessage::voiceItem* temp = vi_41000_start_exam_;
  vi_41000_start_exam_ = NULL;
  return temp;
}
inline void Judge41000::set_allocated_vi_41000_start_exam(::OPMessage::voiceItem* vi_41000_start_exam) {
  delete vi_41000_start_exam_;
  vi_41000_start_exam_ = vi_41000_start_exam;
  if (vi_41000_start_exam) {
    set_has_vi_41000_start_exam();
  } else {
    clear_has_vi_41000_start_exam();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41000.vi_41000_start_exam)
}

// optional .OPMessage.voiceItem vi_41000_end_exam = 11;
inline bool Judge41000::has_vi_41000_end_exam() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Judge41000::set_has_vi_41000_end_exam() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Judge41000::clear_has_vi_41000_end_exam() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Judge41000::clear_vi_41000_end_exam() {
  if (vi_41000_end_exam_ != NULL) vi_41000_end_exam_->::OPMessage::voiceItem::Clear();
  clear_has_vi_41000_end_exam();
}
inline const ::OPMessage::voiceItem& Judge41000::vi_41000_end_exam() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41000.vi_41000_end_exam)
  return vi_41000_end_exam_ != NULL ? *vi_41000_end_exam_ : *default_instance_->vi_41000_end_exam_;
}
inline ::OPMessage::voiceItem* Judge41000::mutable_vi_41000_end_exam() {
  set_has_vi_41000_end_exam();
  if (vi_41000_end_exam_ == NULL) vi_41000_end_exam_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41000.vi_41000_end_exam)
  return vi_41000_end_exam_;
}
inline ::OPMessage::voiceItem* Judge41000::release_vi_41000_end_exam() {
  clear_has_vi_41000_end_exam();
  ::OPMessage::voiceItem* temp = vi_41000_end_exam_;
  vi_41000_end_exam_ = NULL;
  return temp;
}
inline void Judge41000::set_allocated_vi_41000_end_exam(::OPMessage::voiceItem* vi_41000_end_exam) {
  delete vi_41000_end_exam_;
  vi_41000_end_exam_ = vi_41000_end_exam;
  if (vi_41000_end_exam) {
    set_has_vi_41000_end_exam();
  } else {
    clear_has_vi_41000_end_exam();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41000.vi_41000_end_exam)
}

// optional .OPMessage.voiceItem vi_41000_horn_not_use = 12;
inline bool Judge41000::has_vi_41000_horn_not_use() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Judge41000::set_has_vi_41000_horn_not_use() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Judge41000::clear_has_vi_41000_horn_not_use() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Judge41000::clear_vi_41000_horn_not_use() {
  if (vi_41000_horn_not_use_ != NULL) vi_41000_horn_not_use_->::OPMessage::voiceItem::Clear();
  clear_has_vi_41000_horn_not_use();
}
inline const ::OPMessage::voiceItem& Judge41000::vi_41000_horn_not_use() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41000.vi_41000_horn_not_use)
  return vi_41000_horn_not_use_ != NULL ? *vi_41000_horn_not_use_ : *default_instance_->vi_41000_horn_not_use_;
}
inline ::OPMessage::voiceItem* Judge41000::mutable_vi_41000_horn_not_use() {
  set_has_vi_41000_horn_not_use();
  if (vi_41000_horn_not_use_ == NULL) vi_41000_horn_not_use_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41000.vi_41000_horn_not_use)
  return vi_41000_horn_not_use_;
}
inline ::OPMessage::voiceItem* Judge41000::release_vi_41000_horn_not_use() {
  clear_has_vi_41000_horn_not_use();
  ::OPMessage::voiceItem* temp = vi_41000_horn_not_use_;
  vi_41000_horn_not_use_ = NULL;
  return temp;
}
inline void Judge41000::set_allocated_vi_41000_horn_not_use(::OPMessage::voiceItem* vi_41000_horn_not_use) {
  delete vi_41000_horn_not_use_;
  vi_41000_horn_not_use_ = vi_41000_horn_not_use;
  if (vi_41000_horn_not_use) {
    set_has_vi_41000_horn_not_use();
  } else {
    clear_has_vi_41000_horn_not_use();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41000.vi_41000_horn_not_use)
}

// optional .OPMessage.voiceItem vi_41000_not_slowdown = 13;
inline bool Judge41000::has_vi_41000_not_slowdown() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Judge41000::set_has_vi_41000_not_slowdown() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Judge41000::clear_has_vi_41000_not_slowdown() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Judge41000::clear_vi_41000_not_slowdown() {
  if (vi_41000_not_slowdown_ != NULL) vi_41000_not_slowdown_->::OPMessage::voiceItem::Clear();
  clear_has_vi_41000_not_slowdown();
}
inline const ::OPMessage::voiceItem& Judge41000::vi_41000_not_slowdown() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41000.vi_41000_not_slowdown)
  return vi_41000_not_slowdown_ != NULL ? *vi_41000_not_slowdown_ : *default_instance_->vi_41000_not_slowdown_;
}
inline ::OPMessage::voiceItem* Judge41000::mutable_vi_41000_not_slowdown() {
  set_has_vi_41000_not_slowdown();
  if (vi_41000_not_slowdown_ == NULL) vi_41000_not_slowdown_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41000.vi_41000_not_slowdown)
  return vi_41000_not_slowdown_;
}
inline ::OPMessage::voiceItem* Judge41000::release_vi_41000_not_slowdown() {
  clear_has_vi_41000_not_slowdown();
  ::OPMessage::voiceItem* temp = vi_41000_not_slowdown_;
  vi_41000_not_slowdown_ = NULL;
  return temp;
}
inline void Judge41000::set_allocated_vi_41000_not_slowdown(::OPMessage::voiceItem* vi_41000_not_slowdown) {
  delete vi_41000_not_slowdown_;
  vi_41000_not_slowdown_ = vi_41000_not_slowdown;
  if (vi_41000_not_slowdown) {
    set_has_vi_41000_not_slowdown();
  } else {
    clear_has_vi_41000_not_slowdown();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41000.vi_41000_not_slowdown)
}

// -------------------------------------------------------------------

// Judge41001

// optional int32 itemCode = 1;
inline bool Judge41001::has_itemcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Judge41001::set_has_itemcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Judge41001::clear_has_itemcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Judge41001::clear_itemcode() {
  itemcode_ = 0;
  clear_has_itemcode();
}
inline ::google::protobuf::int32 Judge41001::itemcode() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41001.itemCode)
  return itemcode_;
}
inline void Judge41001::set_itemcode(::google::protobuf::int32 value) {
  set_has_itemcode();
  itemcode_ = value;
  // @@protoc_insertion_point(field_set:OPMessage.Judge41001.itemCode)
}

// optional string itemName = 2;
inline bool Judge41001::has_itemname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Judge41001::set_has_itemname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Judge41001::clear_has_itemname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Judge41001::clear_itemname() {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_->clear();
  }
  clear_has_itemname();
}
inline const ::std::string& Judge41001::itemname() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41001.itemName)
  return *itemname_;
}
inline void Judge41001::set_itemname(const ::std::string& value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
  // @@protoc_insertion_point(field_set:OPMessage.Judge41001.itemName)
}
inline void Judge41001::set_itemname(const char* value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
  // @@protoc_insertion_point(field_set_char:OPMessage.Judge41001.itemName)
}
inline void Judge41001::set_itemname(const char* value, size_t size) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OPMessage.Judge41001.itemName)
}
inline ::std::string* Judge41001::mutable_itemname() {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41001.itemName)
  return itemname_;
}
inline ::std::string* Judge41001::release_itemname() {
  clear_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = itemname_;
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Judge41001::set_allocated_itemname(::std::string* itemname) {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (itemname) {
    set_has_itemname();
    itemname_ = itemname;
  } else {
    clear_has_itemname();
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41001.itemName)
}

// optional .OPMessage.judgeItem max_time = 3;
inline bool Judge41001::has_max_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Judge41001::set_has_max_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Judge41001::clear_has_max_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Judge41001::clear_max_time() {
  if (max_time_ != NULL) max_time_->::OPMessage::judgeItem::Clear();
  clear_has_max_time();
}
inline const ::OPMessage::judgeItem& Judge41001::max_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41001.max_time)
  return max_time_ != NULL ? *max_time_ : *default_instance_->max_time_;
}
inline ::OPMessage::judgeItem* Judge41001::mutable_max_time() {
  set_has_max_time();
  if (max_time_ == NULL) max_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41001.max_time)
  return max_time_;
}
inline ::OPMessage::judgeItem* Judge41001::release_max_time() {
  clear_has_max_time();
  ::OPMessage::judgeItem* temp = max_time_;
  max_time_ = NULL;
  return temp;
}
inline void Judge41001::set_allocated_max_time(::OPMessage::judgeItem* max_time) {
  delete max_time_;
  max_time_ = max_time;
  if (max_time) {
    set_has_max_time();
  } else {
    clear_has_max_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41001.max_time)
}

// optional .OPMessage.judgeItem max_trigger_distance = 4;
inline bool Judge41001::has_max_trigger_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Judge41001::set_has_max_trigger_distance() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Judge41001::clear_has_max_trigger_distance() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Judge41001::clear_max_trigger_distance() {
  if (max_trigger_distance_ != NULL) max_trigger_distance_->::OPMessage::judgeItem::Clear();
  clear_has_max_trigger_distance();
}
inline const ::OPMessage::judgeItem& Judge41001::max_trigger_distance() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41001.max_trigger_distance)
  return max_trigger_distance_ != NULL ? *max_trigger_distance_ : *default_instance_->max_trigger_distance_;
}
inline ::OPMessage::judgeItem* Judge41001::mutable_max_trigger_distance() {
  set_has_max_trigger_distance();
  if (max_trigger_distance_ == NULL) max_trigger_distance_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41001.max_trigger_distance)
  return max_trigger_distance_;
}
inline ::OPMessage::judgeItem* Judge41001::release_max_trigger_distance() {
  clear_has_max_trigger_distance();
  ::OPMessage::judgeItem* temp = max_trigger_distance_;
  max_trigger_distance_ = NULL;
  return temp;
}
inline void Judge41001::set_allocated_max_trigger_distance(::OPMessage::judgeItem* max_trigger_distance) {
  delete max_trigger_distance_;
  max_trigger_distance_ = max_trigger_distance;
  if (max_trigger_distance) {
    set_has_max_trigger_distance();
  } else {
    clear_has_max_trigger_distance();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41001.max_trigger_distance)
}

// optional .OPMessage.judgeItem need_near_far_lamp_flash = 5;
inline bool Judge41001::has_need_near_far_lamp_flash() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Judge41001::set_has_need_near_far_lamp_flash() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Judge41001::clear_has_need_near_far_lamp_flash() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Judge41001::clear_need_near_far_lamp_flash() {
  if (need_near_far_lamp_flash_ != NULL) need_near_far_lamp_flash_->::OPMessage::judgeItem::Clear();
  clear_has_need_near_far_lamp_flash();
}
inline const ::OPMessage::judgeItem& Judge41001::need_near_far_lamp_flash() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41001.need_near_far_lamp_flash)
  return need_near_far_lamp_flash_ != NULL ? *need_near_far_lamp_flash_ : *default_instance_->need_near_far_lamp_flash_;
}
inline ::OPMessage::judgeItem* Judge41001::mutable_need_near_far_lamp_flash() {
  set_has_need_near_far_lamp_flash();
  if (need_near_far_lamp_flash_ == NULL) need_near_far_lamp_flash_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41001.need_near_far_lamp_flash)
  return need_near_far_lamp_flash_;
}
inline ::OPMessage::judgeItem* Judge41001::release_need_near_far_lamp_flash() {
  clear_has_need_near_far_lamp_flash();
  ::OPMessage::judgeItem* temp = need_near_far_lamp_flash_;
  need_near_far_lamp_flash_ = NULL;
  return temp;
}
inline void Judge41001::set_allocated_need_near_far_lamp_flash(::OPMessage::judgeItem* need_near_far_lamp_flash) {
  delete need_near_far_lamp_flash_;
  need_near_far_lamp_flash_ = need_near_far_lamp_flash;
  if (need_near_far_lamp_flash) {
    set_has_need_near_far_lamp_flash();
  } else {
    clear_has_need_near_far_lamp_flash();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41001.need_near_far_lamp_flash)
}

// optional .OPMessage.voiceItem vi_41001_start_exam = 6;
inline bool Judge41001::has_vi_41001_start_exam() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Judge41001::set_has_vi_41001_start_exam() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Judge41001::clear_has_vi_41001_start_exam() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Judge41001::clear_vi_41001_start_exam() {
  if (vi_41001_start_exam_ != NULL) vi_41001_start_exam_->::OPMessage::voiceItem::Clear();
  clear_has_vi_41001_start_exam();
}
inline const ::OPMessage::voiceItem& Judge41001::vi_41001_start_exam() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41001.vi_41001_start_exam)
  return vi_41001_start_exam_ != NULL ? *vi_41001_start_exam_ : *default_instance_->vi_41001_start_exam_;
}
inline ::OPMessage::voiceItem* Judge41001::mutable_vi_41001_start_exam() {
  set_has_vi_41001_start_exam();
  if (vi_41001_start_exam_ == NULL) vi_41001_start_exam_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41001.vi_41001_start_exam)
  return vi_41001_start_exam_;
}
inline ::OPMessage::voiceItem* Judge41001::release_vi_41001_start_exam() {
  clear_has_vi_41001_start_exam();
  ::OPMessage::voiceItem* temp = vi_41001_start_exam_;
  vi_41001_start_exam_ = NULL;
  return temp;
}
inline void Judge41001::set_allocated_vi_41001_start_exam(::OPMessage::voiceItem* vi_41001_start_exam) {
  delete vi_41001_start_exam_;
  vi_41001_start_exam_ = vi_41001_start_exam;
  if (vi_41001_start_exam) {
    set_has_vi_41001_start_exam();
  } else {
    clear_has_vi_41001_start_exam();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41001.vi_41001_start_exam)
}

// optional .OPMessage.voiceItem vi_41001_end_exam = 7;
inline bool Judge41001::has_vi_41001_end_exam() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Judge41001::set_has_vi_41001_end_exam() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Judge41001::clear_has_vi_41001_end_exam() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Judge41001::clear_vi_41001_end_exam() {
  if (vi_41001_end_exam_ != NULL) vi_41001_end_exam_->::OPMessage::voiceItem::Clear();
  clear_has_vi_41001_end_exam();
}
inline const ::OPMessage::voiceItem& Judge41001::vi_41001_end_exam() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41001.vi_41001_end_exam)
  return vi_41001_end_exam_ != NULL ? *vi_41001_end_exam_ : *default_instance_->vi_41001_end_exam_;
}
inline ::OPMessage::voiceItem* Judge41001::mutable_vi_41001_end_exam() {
  set_has_vi_41001_end_exam();
  if (vi_41001_end_exam_ == NULL) vi_41001_end_exam_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41001.vi_41001_end_exam)
  return vi_41001_end_exam_;
}
inline ::OPMessage::voiceItem* Judge41001::release_vi_41001_end_exam() {
  clear_has_vi_41001_end_exam();
  ::OPMessage::voiceItem* temp = vi_41001_end_exam_;
  vi_41001_end_exam_ = NULL;
  return temp;
}
inline void Judge41001::set_allocated_vi_41001_end_exam(::OPMessage::voiceItem* vi_41001_end_exam) {
  delete vi_41001_end_exam_;
  vi_41001_end_exam_ = vi_41001_end_exam;
  if (vi_41001_end_exam) {
    set_has_vi_41001_end_exam();
  } else {
    clear_has_vi_41001_end_exam();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41001.vi_41001_end_exam)
}

// optional .OPMessage.voiceItem vi_41001_not_finish_operation = 8;
inline bool Judge41001::has_vi_41001_not_finish_operation() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Judge41001::set_has_vi_41001_not_finish_operation() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Judge41001::clear_has_vi_41001_not_finish_operation() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Judge41001::clear_vi_41001_not_finish_operation() {
  if (vi_41001_not_finish_operation_ != NULL) vi_41001_not_finish_operation_->::OPMessage::voiceItem::Clear();
  clear_has_vi_41001_not_finish_operation();
}
inline const ::OPMessage::voiceItem& Judge41001::vi_41001_not_finish_operation() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41001.vi_41001_not_finish_operation)
  return vi_41001_not_finish_operation_ != NULL ? *vi_41001_not_finish_operation_ : *default_instance_->vi_41001_not_finish_operation_;
}
inline ::OPMessage::voiceItem* Judge41001::mutable_vi_41001_not_finish_operation() {
  set_has_vi_41001_not_finish_operation();
  if (vi_41001_not_finish_operation_ == NULL) vi_41001_not_finish_operation_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41001.vi_41001_not_finish_operation)
  return vi_41001_not_finish_operation_;
}
inline ::OPMessage::voiceItem* Judge41001::release_vi_41001_not_finish_operation() {
  clear_has_vi_41001_not_finish_operation();
  ::OPMessage::voiceItem* temp = vi_41001_not_finish_operation_;
  vi_41001_not_finish_operation_ = NULL;
  return temp;
}
inline void Judge41001::set_allocated_vi_41001_not_finish_operation(::OPMessage::voiceItem* vi_41001_not_finish_operation) {
  delete vi_41001_not_finish_operation_;
  vi_41001_not_finish_operation_ = vi_41001_not_finish_operation;
  if (vi_41001_not_finish_operation) {
    set_has_vi_41001_not_finish_operation();
  } else {
    clear_has_vi_41001_not_finish_operation();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41001.vi_41001_not_finish_operation)
}

// optional .OPMessage.voiceItem vi_41001_start_drive = 9;
inline bool Judge41001::has_vi_41001_start_drive() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Judge41001::set_has_vi_41001_start_drive() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Judge41001::clear_has_vi_41001_start_drive() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Judge41001::clear_vi_41001_start_drive() {
  if (vi_41001_start_drive_ != NULL) vi_41001_start_drive_->::OPMessage::voiceItem::Clear();
  clear_has_vi_41001_start_drive();
}
inline const ::OPMessage::voiceItem& Judge41001::vi_41001_start_drive() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41001.vi_41001_start_drive)
  return vi_41001_start_drive_ != NULL ? *vi_41001_start_drive_ : *default_instance_->vi_41001_start_drive_;
}
inline ::OPMessage::voiceItem* Judge41001::mutable_vi_41001_start_drive() {
  set_has_vi_41001_start_drive();
  if (vi_41001_start_drive_ == NULL) vi_41001_start_drive_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41001.vi_41001_start_drive)
  return vi_41001_start_drive_;
}
inline ::OPMessage::voiceItem* Judge41001::release_vi_41001_start_drive() {
  clear_has_vi_41001_start_drive();
  ::OPMessage::voiceItem* temp = vi_41001_start_drive_;
  vi_41001_start_drive_ = NULL;
  return temp;
}
inline void Judge41001::set_allocated_vi_41001_start_drive(::OPMessage::voiceItem* vi_41001_start_drive) {
  delete vi_41001_start_drive_;
  vi_41001_start_drive_ = vi_41001_start_drive;
  if (vi_41001_start_drive) {
    set_has_vi_41001_start_drive();
  } else {
    clear_has_vi_41001_start_drive();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41001.vi_41001_start_drive)
}

// -------------------------------------------------------------------

// Judge41200

// optional int32 itemCode = 1;
inline bool Judge41200::has_itemcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Judge41200::set_has_itemcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Judge41200::clear_has_itemcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Judge41200::clear_itemcode() {
  itemcode_ = 0;
  clear_has_itemcode();
}
inline ::google::protobuf::int32 Judge41200::itemcode() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41200.itemCode)
  return itemcode_;
}
inline void Judge41200::set_itemcode(::google::protobuf::int32 value) {
  set_has_itemcode();
  itemcode_ = value;
  // @@protoc_insertion_point(field_set:OPMessage.Judge41200.itemCode)
}

// optional string itemName = 2;
inline bool Judge41200::has_itemname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Judge41200::set_has_itemname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Judge41200::clear_has_itemname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Judge41200::clear_itemname() {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_->clear();
  }
  clear_has_itemname();
}
inline const ::std::string& Judge41200::itemname() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41200.itemName)
  return *itemname_;
}
inline void Judge41200::set_itemname(const ::std::string& value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
  // @@protoc_insertion_point(field_set:OPMessage.Judge41200.itemName)
}
inline void Judge41200::set_itemname(const char* value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
  // @@protoc_insertion_point(field_set_char:OPMessage.Judge41200.itemName)
}
inline void Judge41200::set_itemname(const char* value, size_t size) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OPMessage.Judge41200.itemName)
}
inline ::std::string* Judge41200::mutable_itemname() {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41200.itemName)
  return itemname_;
}
inline ::std::string* Judge41200::release_itemname() {
  clear_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = itemname_;
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Judge41200::set_allocated_itemname(::std::string* itemname) {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (itemname) {
    set_has_itemname();
    itemname_ = itemname;
  } else {
    clear_has_itemname();
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41200.itemName)
}

// optional .OPMessage.judgeItem max_time = 3;
inline bool Judge41200::has_max_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Judge41200::set_has_max_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Judge41200::clear_has_max_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Judge41200::clear_max_time() {
  if (max_time_ != NULL) max_time_->::OPMessage::judgeItem::Clear();
  clear_has_max_time();
}
inline const ::OPMessage::judgeItem& Judge41200::max_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41200.max_time)
  return max_time_ != NULL ? *max_time_ : *default_instance_->max_time_;
}
inline ::OPMessage::judgeItem* Judge41200::mutable_max_time() {
  set_has_max_time();
  if (max_time_ == NULL) max_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41200.max_time)
  return max_time_;
}
inline ::OPMessage::judgeItem* Judge41200::release_max_time() {
  clear_has_max_time();
  ::OPMessage::judgeItem* temp = max_time_;
  max_time_ = NULL;
  return temp;
}
inline void Judge41200::set_allocated_max_time(::OPMessage::judgeItem* max_time) {
  delete max_time_;
  max_time_ = max_time;
  if (max_time) {
    set_has_max_time();
  } else {
    clear_has_max_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41200.max_time)
}

// optional .OPMessage.judgeItem max_trigger_distance = 4;
inline bool Judge41200::has_max_trigger_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Judge41200::set_has_max_trigger_distance() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Judge41200::clear_has_max_trigger_distance() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Judge41200::clear_max_trigger_distance() {
  if (max_trigger_distance_ != NULL) max_trigger_distance_->::OPMessage::judgeItem::Clear();
  clear_has_max_trigger_distance();
}
inline const ::OPMessage::judgeItem& Judge41200::max_trigger_distance() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41200.max_trigger_distance)
  return max_trigger_distance_ != NULL ? *max_trigger_distance_ : *default_instance_->max_trigger_distance_;
}
inline ::OPMessage::judgeItem* Judge41200::mutable_max_trigger_distance() {
  set_has_max_trigger_distance();
  if (max_trigger_distance_ == NULL) max_trigger_distance_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41200.max_trigger_distance)
  return max_trigger_distance_;
}
inline ::OPMessage::judgeItem* Judge41200::release_max_trigger_distance() {
  clear_has_max_trigger_distance();
  ::OPMessage::judgeItem* temp = max_trigger_distance_;
  max_trigger_distance_ = NULL;
  return temp;
}
inline void Judge41200::set_allocated_max_trigger_distance(::OPMessage::judgeItem* max_trigger_distance) {
  delete max_trigger_distance_;
  max_trigger_distance_ = max_trigger_distance;
  if (max_trigger_distance) {
    set_has_max_trigger_distance();
  } else {
    clear_has_max_trigger_distance();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41200.max_trigger_distance)
}

// optional .OPMessage.judgeItem max_speed = 5;
inline bool Judge41200::has_max_speed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Judge41200::set_has_max_speed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Judge41200::clear_has_max_speed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Judge41200::clear_max_speed() {
  if (max_speed_ != NULL) max_speed_->::OPMessage::judgeItem::Clear();
  clear_has_max_speed();
}
inline const ::OPMessage::judgeItem& Judge41200::max_speed() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41200.max_speed)
  return max_speed_ != NULL ? *max_speed_ : *default_instance_->max_speed_;
}
inline ::OPMessage::judgeItem* Judge41200::mutable_max_speed() {
  set_has_max_speed();
  if (max_speed_ == NULL) max_speed_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41200.max_speed)
  return max_speed_;
}
inline ::OPMessage::judgeItem* Judge41200::release_max_speed() {
  clear_has_max_speed();
  ::OPMessage::judgeItem* temp = max_speed_;
  max_speed_ = NULL;
  return temp;
}
inline void Judge41200::set_allocated_max_speed(::OPMessage::judgeItem* max_speed) {
  delete max_speed_;
  max_speed_ = max_speed;
  if (max_speed) {
    set_has_max_speed();
  } else {
    clear_has_max_speed();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41200.max_speed)
}

// optional .OPMessage.judgeItem min_horn_time = 6;
inline bool Judge41200::has_min_horn_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Judge41200::set_has_min_horn_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Judge41200::clear_has_min_horn_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Judge41200::clear_min_horn_time() {
  if (min_horn_time_ != NULL) min_horn_time_->::OPMessage::judgeItem::Clear();
  clear_has_min_horn_time();
}
inline const ::OPMessage::judgeItem& Judge41200::min_horn_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41200.min_horn_time)
  return min_horn_time_ != NULL ? *min_horn_time_ : *default_instance_->min_horn_time_;
}
inline ::OPMessage::judgeItem* Judge41200::mutable_min_horn_time() {
  set_has_min_horn_time();
  if (min_horn_time_ == NULL) min_horn_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41200.min_horn_time)
  return min_horn_time_;
}
inline ::OPMessage::judgeItem* Judge41200::release_min_horn_time() {
  clear_has_min_horn_time();
  ::OPMessage::judgeItem* temp = min_horn_time_;
  min_horn_time_ = NULL;
  return temp;
}
inline void Judge41200::set_allocated_min_horn_time(::OPMessage::judgeItem* min_horn_time) {
  delete min_horn_time_;
  min_horn_time_ = min_horn_time;
  if (min_horn_time) {
    set_has_min_horn_time();
  } else {
    clear_has_min_horn_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41200.min_horn_time)
}

// optional .OPMessage.judgeItem judge_mode = 7;
inline bool Judge41200::has_judge_mode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Judge41200::set_has_judge_mode() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Judge41200::clear_has_judge_mode() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Judge41200::clear_judge_mode() {
  if (judge_mode_ != NULL) judge_mode_->::OPMessage::judgeItem::Clear();
  clear_has_judge_mode();
}
inline const ::OPMessage::judgeItem& Judge41200::judge_mode() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41200.judge_mode)
  return judge_mode_ != NULL ? *judge_mode_ : *default_instance_->judge_mode_;
}
inline ::OPMessage::judgeItem* Judge41200::mutable_judge_mode() {
  set_has_judge_mode();
  if (judge_mode_ == NULL) judge_mode_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41200.judge_mode)
  return judge_mode_;
}
inline ::OPMessage::judgeItem* Judge41200::release_judge_mode() {
  clear_has_judge_mode();
  ::OPMessage::judgeItem* temp = judge_mode_;
  judge_mode_ = NULL;
  return temp;
}
inline void Judge41200::set_allocated_judge_mode(::OPMessage::judgeItem* judge_mode) {
  delete judge_mode_;
  judge_mode_ = judge_mode;
  if (judge_mode) {
    set_has_judge_mode();
  } else {
    clear_has_judge_mode();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41200.judge_mode)
}

// optional .OPMessage.judgeItem need_near_far_lamp_flash = 8;
inline bool Judge41200::has_need_near_far_lamp_flash() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Judge41200::set_has_need_near_far_lamp_flash() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Judge41200::clear_has_need_near_far_lamp_flash() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Judge41200::clear_need_near_far_lamp_flash() {
  if (need_near_far_lamp_flash_ != NULL) need_near_far_lamp_flash_->::OPMessage::judgeItem::Clear();
  clear_has_need_near_far_lamp_flash();
}
inline const ::OPMessage::judgeItem& Judge41200::need_near_far_lamp_flash() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41200.need_near_far_lamp_flash)
  return need_near_far_lamp_flash_ != NULL ? *need_near_far_lamp_flash_ : *default_instance_->need_near_far_lamp_flash_;
}
inline ::OPMessage::judgeItem* Judge41200::mutable_need_near_far_lamp_flash() {
  set_has_need_near_far_lamp_flash();
  if (need_near_far_lamp_flash_ == NULL) need_near_far_lamp_flash_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41200.need_near_far_lamp_flash)
  return need_near_far_lamp_flash_;
}
inline ::OPMessage::judgeItem* Judge41200::release_need_near_far_lamp_flash() {
  clear_has_need_near_far_lamp_flash();
  ::OPMessage::judgeItem* temp = need_near_far_lamp_flash_;
  need_near_far_lamp_flash_ = NULL;
  return temp;
}
inline void Judge41200::set_allocated_need_near_far_lamp_flash(::OPMessage::judgeItem* need_near_far_lamp_flash) {
  delete need_near_far_lamp_flash_;
  need_near_far_lamp_flash_ = need_near_far_lamp_flash;
  if (need_near_far_lamp_flash) {
    set_has_need_near_far_lamp_flash();
  } else {
    clear_has_need_near_far_lamp_flash();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41200.need_near_far_lamp_flash)
}

// optional .OPMessage.voiceItem vi_41200_start_exam = 9;
inline bool Judge41200::has_vi_41200_start_exam() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Judge41200::set_has_vi_41200_start_exam() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Judge41200::clear_has_vi_41200_start_exam() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Judge41200::clear_vi_41200_start_exam() {
  if (vi_41200_start_exam_ != NULL) vi_41200_start_exam_->::OPMessage::voiceItem::Clear();
  clear_has_vi_41200_start_exam();
}
inline const ::OPMessage::voiceItem& Judge41200::vi_41200_start_exam() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41200.vi_41200_start_exam)
  return vi_41200_start_exam_ != NULL ? *vi_41200_start_exam_ : *default_instance_->vi_41200_start_exam_;
}
inline ::OPMessage::voiceItem* Judge41200::mutable_vi_41200_start_exam() {
  set_has_vi_41200_start_exam();
  if (vi_41200_start_exam_ == NULL) vi_41200_start_exam_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41200.vi_41200_start_exam)
  return vi_41200_start_exam_;
}
inline ::OPMessage::voiceItem* Judge41200::release_vi_41200_start_exam() {
  clear_has_vi_41200_start_exam();
  ::OPMessage::voiceItem* temp = vi_41200_start_exam_;
  vi_41200_start_exam_ = NULL;
  return temp;
}
inline void Judge41200::set_allocated_vi_41200_start_exam(::OPMessage::voiceItem* vi_41200_start_exam) {
  delete vi_41200_start_exam_;
  vi_41200_start_exam_ = vi_41200_start_exam;
  if (vi_41200_start_exam) {
    set_has_vi_41200_start_exam();
  } else {
    clear_has_vi_41200_start_exam();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41200.vi_41200_start_exam)
}

// optional .OPMessage.voiceItem vi_41200_end_exam = 10;
inline bool Judge41200::has_vi_41200_end_exam() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Judge41200::set_has_vi_41200_end_exam() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Judge41200::clear_has_vi_41200_end_exam() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Judge41200::clear_vi_41200_end_exam() {
  if (vi_41200_end_exam_ != NULL) vi_41200_end_exam_->::OPMessage::voiceItem::Clear();
  clear_has_vi_41200_end_exam();
}
inline const ::OPMessage::voiceItem& Judge41200::vi_41200_end_exam() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41200.vi_41200_end_exam)
  return vi_41200_end_exam_ != NULL ? *vi_41200_end_exam_ : *default_instance_->vi_41200_end_exam_;
}
inline ::OPMessage::voiceItem* Judge41200::mutable_vi_41200_end_exam() {
  set_has_vi_41200_end_exam();
  if (vi_41200_end_exam_ == NULL) vi_41200_end_exam_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41200.vi_41200_end_exam)
  return vi_41200_end_exam_;
}
inline ::OPMessage::voiceItem* Judge41200::release_vi_41200_end_exam() {
  clear_has_vi_41200_end_exam();
  ::OPMessage::voiceItem* temp = vi_41200_end_exam_;
  vi_41200_end_exam_ = NULL;
  return temp;
}
inline void Judge41200::set_allocated_vi_41200_end_exam(::OPMessage::voiceItem* vi_41200_end_exam) {
  delete vi_41200_end_exam_;
  vi_41200_end_exam_ = vi_41200_end_exam;
  if (vi_41200_end_exam) {
    set_has_vi_41200_end_exam();
  } else {
    clear_has_vi_41200_end_exam();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41200.vi_41200_end_exam)
}

// optional .OPMessage.voiceItem vi_41200_horn_not_use = 11;
inline bool Judge41200::has_vi_41200_horn_not_use() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Judge41200::set_has_vi_41200_horn_not_use() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Judge41200::clear_has_vi_41200_horn_not_use() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Judge41200::clear_vi_41200_horn_not_use() {
  if (vi_41200_horn_not_use_ != NULL) vi_41200_horn_not_use_->::OPMessage::voiceItem::Clear();
  clear_has_vi_41200_horn_not_use();
}
inline const ::OPMessage::voiceItem& Judge41200::vi_41200_horn_not_use() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41200.vi_41200_horn_not_use)
  return vi_41200_horn_not_use_ != NULL ? *vi_41200_horn_not_use_ : *default_instance_->vi_41200_horn_not_use_;
}
inline ::OPMessage::voiceItem* Judge41200::mutable_vi_41200_horn_not_use() {
  set_has_vi_41200_horn_not_use();
  if (vi_41200_horn_not_use_ == NULL) vi_41200_horn_not_use_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41200.vi_41200_horn_not_use)
  return vi_41200_horn_not_use_;
}
inline ::OPMessage::voiceItem* Judge41200::release_vi_41200_horn_not_use() {
  clear_has_vi_41200_horn_not_use();
  ::OPMessage::voiceItem* temp = vi_41200_horn_not_use_;
  vi_41200_horn_not_use_ = NULL;
  return temp;
}
inline void Judge41200::set_allocated_vi_41200_horn_not_use(::OPMessage::voiceItem* vi_41200_horn_not_use) {
  delete vi_41200_horn_not_use_;
  vi_41200_horn_not_use_ = vi_41200_horn_not_use;
  if (vi_41200_horn_not_use) {
    set_has_vi_41200_horn_not_use();
  } else {
    clear_has_vi_41200_horn_not_use();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41200.vi_41200_horn_not_use)
}

// optional .OPMessage.voiceItem vi_41200_not_slowdown = 12;
inline bool Judge41200::has_vi_41200_not_slowdown() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Judge41200::set_has_vi_41200_not_slowdown() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Judge41200::clear_has_vi_41200_not_slowdown() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Judge41200::clear_vi_41200_not_slowdown() {
  if (vi_41200_not_slowdown_ != NULL) vi_41200_not_slowdown_->::OPMessage::voiceItem::Clear();
  clear_has_vi_41200_not_slowdown();
}
inline const ::OPMessage::voiceItem& Judge41200::vi_41200_not_slowdown() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41200.vi_41200_not_slowdown)
  return vi_41200_not_slowdown_ != NULL ? *vi_41200_not_slowdown_ : *default_instance_->vi_41200_not_slowdown_;
}
inline ::OPMessage::voiceItem* Judge41200::mutable_vi_41200_not_slowdown() {
  set_has_vi_41200_not_slowdown();
  if (vi_41200_not_slowdown_ == NULL) vi_41200_not_slowdown_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41200.vi_41200_not_slowdown)
  return vi_41200_not_slowdown_;
}
inline ::OPMessage::voiceItem* Judge41200::release_vi_41200_not_slowdown() {
  clear_has_vi_41200_not_slowdown();
  ::OPMessage::voiceItem* temp = vi_41200_not_slowdown_;
  vi_41200_not_slowdown_ = NULL;
  return temp;
}
inline void Judge41200::set_allocated_vi_41200_not_slowdown(::OPMessage::voiceItem* vi_41200_not_slowdown) {
  delete vi_41200_not_slowdown_;
  vi_41200_not_slowdown_ = vi_41200_not_slowdown;
  if (vi_41200_not_slowdown) {
    set_has_vi_41200_not_slowdown();
  } else {
    clear_has_vi_41200_not_slowdown();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41200.vi_41200_not_slowdown)
}

// -------------------------------------------------------------------

// Judge41100

// optional int32 itemCode = 1;
inline bool Judge41100::has_itemcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Judge41100::set_has_itemcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Judge41100::clear_has_itemcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Judge41100::clear_itemcode() {
  itemcode_ = 0;
  clear_has_itemcode();
}
inline ::google::protobuf::int32 Judge41100::itemcode() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41100.itemCode)
  return itemcode_;
}
inline void Judge41100::set_itemcode(::google::protobuf::int32 value) {
  set_has_itemcode();
  itemcode_ = value;
  // @@protoc_insertion_point(field_set:OPMessage.Judge41100.itemCode)
}

// optional string itemName = 2;
inline bool Judge41100::has_itemname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Judge41100::set_has_itemname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Judge41100::clear_has_itemname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Judge41100::clear_itemname() {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_->clear();
  }
  clear_has_itemname();
}
inline const ::std::string& Judge41100::itemname() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41100.itemName)
  return *itemname_;
}
inline void Judge41100::set_itemname(const ::std::string& value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
  // @@protoc_insertion_point(field_set:OPMessage.Judge41100.itemName)
}
inline void Judge41100::set_itemname(const char* value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
  // @@protoc_insertion_point(field_set_char:OPMessage.Judge41100.itemName)
}
inline void Judge41100::set_itemname(const char* value, size_t size) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OPMessage.Judge41100.itemName)
}
inline ::std::string* Judge41100::mutable_itemname() {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41100.itemName)
  return itemname_;
}
inline ::std::string* Judge41100::release_itemname() {
  clear_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = itemname_;
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Judge41100::set_allocated_itemname(::std::string* itemname) {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (itemname) {
    set_has_itemname();
    itemname_ = itemname;
  } else {
    clear_has_itemname();
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41100.itemName)
}

// optional .OPMessage.judgeItem max_time = 3;
inline bool Judge41100::has_max_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Judge41100::set_has_max_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Judge41100::clear_has_max_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Judge41100::clear_max_time() {
  if (max_time_ != NULL) max_time_->::OPMessage::judgeItem::Clear();
  clear_has_max_time();
}
inline const ::OPMessage::judgeItem& Judge41100::max_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41100.max_time)
  return max_time_ != NULL ? *max_time_ : *default_instance_->max_time_;
}
inline ::OPMessage::judgeItem* Judge41100::mutable_max_time() {
  set_has_max_time();
  if (max_time_ == NULL) max_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41100.max_time)
  return max_time_;
}
inline ::OPMessage::judgeItem* Judge41100::release_max_time() {
  clear_has_max_time();
  ::OPMessage::judgeItem* temp = max_time_;
  max_time_ = NULL;
  return temp;
}
inline void Judge41100::set_allocated_max_time(::OPMessage::judgeItem* max_time) {
  delete max_time_;
  max_time_ = max_time;
  if (max_time) {
    set_has_max_time();
  } else {
    clear_has_max_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41100.max_time)
}

// optional .OPMessage.judgeItem max_trigger_distance = 4;
inline bool Judge41100::has_max_trigger_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Judge41100::set_has_max_trigger_distance() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Judge41100::clear_has_max_trigger_distance() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Judge41100::clear_max_trigger_distance() {
  if (max_trigger_distance_ != NULL) max_trigger_distance_->::OPMessage::judgeItem::Clear();
  clear_has_max_trigger_distance();
}
inline const ::OPMessage::judgeItem& Judge41100::max_trigger_distance() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41100.max_trigger_distance)
  return max_trigger_distance_ != NULL ? *max_trigger_distance_ : *default_instance_->max_trigger_distance_;
}
inline ::OPMessage::judgeItem* Judge41100::mutable_max_trigger_distance() {
  set_has_max_trigger_distance();
  if (max_trigger_distance_ == NULL) max_trigger_distance_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41100.max_trigger_distance)
  return max_trigger_distance_;
}
inline ::OPMessage::judgeItem* Judge41100::release_max_trigger_distance() {
  clear_has_max_trigger_distance();
  ::OPMessage::judgeItem* temp = max_trigger_distance_;
  max_trigger_distance_ = NULL;
  return temp;
}
inline void Judge41100::set_allocated_max_trigger_distance(::OPMessage::judgeItem* max_trigger_distance) {
  delete max_trigger_distance_;
  max_trigger_distance_ = max_trigger_distance;
  if (max_trigger_distance) {
    set_has_max_trigger_distance();
  } else {
    clear_has_max_trigger_distance();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41100.max_trigger_distance)
}

// optional .OPMessage.judgeItem max_speed = 5;
inline bool Judge41100::has_max_speed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Judge41100::set_has_max_speed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Judge41100::clear_has_max_speed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Judge41100::clear_max_speed() {
  if (max_speed_ != NULL) max_speed_->::OPMessage::judgeItem::Clear();
  clear_has_max_speed();
}
inline const ::OPMessage::judgeItem& Judge41100::max_speed() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41100.max_speed)
  return max_speed_ != NULL ? *max_speed_ : *default_instance_->max_speed_;
}
inline ::OPMessage::judgeItem* Judge41100::mutable_max_speed() {
  set_has_max_speed();
  if (max_speed_ == NULL) max_speed_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41100.max_speed)
  return max_speed_;
}
inline ::OPMessage::judgeItem* Judge41100::release_max_speed() {
  clear_has_max_speed();
  ::OPMessage::judgeItem* temp = max_speed_;
  max_speed_ = NULL;
  return temp;
}
inline void Judge41100::set_allocated_max_speed(::OPMessage::judgeItem* max_speed) {
  delete max_speed_;
  max_speed_ = max_speed;
  if (max_speed) {
    set_has_max_speed();
  } else {
    clear_has_max_speed();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41100.max_speed)
}

// optional .OPMessage.judgeItem min_horn_time = 6;
inline bool Judge41100::has_min_horn_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Judge41100::set_has_min_horn_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Judge41100::clear_has_min_horn_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Judge41100::clear_min_horn_time() {
  if (min_horn_time_ != NULL) min_horn_time_->::OPMessage::judgeItem::Clear();
  clear_has_min_horn_time();
}
inline const ::OPMessage::judgeItem& Judge41100::min_horn_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41100.min_horn_time)
  return min_horn_time_ != NULL ? *min_horn_time_ : *default_instance_->min_horn_time_;
}
inline ::OPMessage::judgeItem* Judge41100::mutable_min_horn_time() {
  set_has_min_horn_time();
  if (min_horn_time_ == NULL) min_horn_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41100.min_horn_time)
  return min_horn_time_;
}
inline ::OPMessage::judgeItem* Judge41100::release_min_horn_time() {
  clear_has_min_horn_time();
  ::OPMessage::judgeItem* temp = min_horn_time_;
  min_horn_time_ = NULL;
  return temp;
}
inline void Judge41100::set_allocated_min_horn_time(::OPMessage::judgeItem* min_horn_time) {
  delete min_horn_time_;
  min_horn_time_ = min_horn_time;
  if (min_horn_time) {
    set_has_min_horn_time();
  } else {
    clear_has_min_horn_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41100.min_horn_time)
}

// optional .OPMessage.judgeItem judge_mode = 7;
inline bool Judge41100::has_judge_mode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Judge41100::set_has_judge_mode() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Judge41100::clear_has_judge_mode() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Judge41100::clear_judge_mode() {
  if (judge_mode_ != NULL) judge_mode_->::OPMessage::judgeItem::Clear();
  clear_has_judge_mode();
}
inline const ::OPMessage::judgeItem& Judge41100::judge_mode() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41100.judge_mode)
  return judge_mode_ != NULL ? *judge_mode_ : *default_instance_->judge_mode_;
}
inline ::OPMessage::judgeItem* Judge41100::mutable_judge_mode() {
  set_has_judge_mode();
  if (judge_mode_ == NULL) judge_mode_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41100.judge_mode)
  return judge_mode_;
}
inline ::OPMessage::judgeItem* Judge41100::release_judge_mode() {
  clear_has_judge_mode();
  ::OPMessage::judgeItem* temp = judge_mode_;
  judge_mode_ = NULL;
  return temp;
}
inline void Judge41100::set_allocated_judge_mode(::OPMessage::judgeItem* judge_mode) {
  delete judge_mode_;
  judge_mode_ = judge_mode;
  if (judge_mode) {
    set_has_judge_mode();
  } else {
    clear_has_judge_mode();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41100.judge_mode)
}

// optional .OPMessage.judgeItem need_near_far_lamp_flash = 8;
inline bool Judge41100::has_need_near_far_lamp_flash() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Judge41100::set_has_need_near_far_lamp_flash() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Judge41100::clear_has_need_near_far_lamp_flash() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Judge41100::clear_need_near_far_lamp_flash() {
  if (need_near_far_lamp_flash_ != NULL) need_near_far_lamp_flash_->::OPMessage::judgeItem::Clear();
  clear_has_need_near_far_lamp_flash();
}
inline const ::OPMessage::judgeItem& Judge41100::need_near_far_lamp_flash() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41100.need_near_far_lamp_flash)
  return need_near_far_lamp_flash_ != NULL ? *need_near_far_lamp_flash_ : *default_instance_->need_near_far_lamp_flash_;
}
inline ::OPMessage::judgeItem* Judge41100::mutable_need_near_far_lamp_flash() {
  set_has_need_near_far_lamp_flash();
  if (need_near_far_lamp_flash_ == NULL) need_near_far_lamp_flash_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41100.need_near_far_lamp_flash)
  return need_near_far_lamp_flash_;
}
inline ::OPMessage::judgeItem* Judge41100::release_need_near_far_lamp_flash() {
  clear_has_need_near_far_lamp_flash();
  ::OPMessage::judgeItem* temp = need_near_far_lamp_flash_;
  need_near_far_lamp_flash_ = NULL;
  return temp;
}
inline void Judge41100::set_allocated_need_near_far_lamp_flash(::OPMessage::judgeItem* need_near_far_lamp_flash) {
  delete need_near_far_lamp_flash_;
  need_near_far_lamp_flash_ = need_near_far_lamp_flash;
  if (need_near_far_lamp_flash) {
    set_has_need_near_far_lamp_flash();
  } else {
    clear_has_need_near_far_lamp_flash();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41100.need_near_far_lamp_flash)
}

// optional .OPMessage.voiceItem vi_41100_start_exam = 9;
inline bool Judge41100::has_vi_41100_start_exam() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Judge41100::set_has_vi_41100_start_exam() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Judge41100::clear_has_vi_41100_start_exam() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Judge41100::clear_vi_41100_start_exam() {
  if (vi_41100_start_exam_ != NULL) vi_41100_start_exam_->::OPMessage::voiceItem::Clear();
  clear_has_vi_41100_start_exam();
}
inline const ::OPMessage::voiceItem& Judge41100::vi_41100_start_exam() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41100.vi_41100_start_exam)
  return vi_41100_start_exam_ != NULL ? *vi_41100_start_exam_ : *default_instance_->vi_41100_start_exam_;
}
inline ::OPMessage::voiceItem* Judge41100::mutable_vi_41100_start_exam() {
  set_has_vi_41100_start_exam();
  if (vi_41100_start_exam_ == NULL) vi_41100_start_exam_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41100.vi_41100_start_exam)
  return vi_41100_start_exam_;
}
inline ::OPMessage::voiceItem* Judge41100::release_vi_41100_start_exam() {
  clear_has_vi_41100_start_exam();
  ::OPMessage::voiceItem* temp = vi_41100_start_exam_;
  vi_41100_start_exam_ = NULL;
  return temp;
}
inline void Judge41100::set_allocated_vi_41100_start_exam(::OPMessage::voiceItem* vi_41100_start_exam) {
  delete vi_41100_start_exam_;
  vi_41100_start_exam_ = vi_41100_start_exam;
  if (vi_41100_start_exam) {
    set_has_vi_41100_start_exam();
  } else {
    clear_has_vi_41100_start_exam();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41100.vi_41100_start_exam)
}

// optional .OPMessage.voiceItem vi_41100_end_exam = 10;
inline bool Judge41100::has_vi_41100_end_exam() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Judge41100::set_has_vi_41100_end_exam() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Judge41100::clear_has_vi_41100_end_exam() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Judge41100::clear_vi_41100_end_exam() {
  if (vi_41100_end_exam_ != NULL) vi_41100_end_exam_->::OPMessage::voiceItem::Clear();
  clear_has_vi_41100_end_exam();
}
inline const ::OPMessage::voiceItem& Judge41100::vi_41100_end_exam() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41100.vi_41100_end_exam)
  return vi_41100_end_exam_ != NULL ? *vi_41100_end_exam_ : *default_instance_->vi_41100_end_exam_;
}
inline ::OPMessage::voiceItem* Judge41100::mutable_vi_41100_end_exam() {
  set_has_vi_41100_end_exam();
  if (vi_41100_end_exam_ == NULL) vi_41100_end_exam_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41100.vi_41100_end_exam)
  return vi_41100_end_exam_;
}
inline ::OPMessage::voiceItem* Judge41100::release_vi_41100_end_exam() {
  clear_has_vi_41100_end_exam();
  ::OPMessage::voiceItem* temp = vi_41100_end_exam_;
  vi_41100_end_exam_ = NULL;
  return temp;
}
inline void Judge41100::set_allocated_vi_41100_end_exam(::OPMessage::voiceItem* vi_41100_end_exam) {
  delete vi_41100_end_exam_;
  vi_41100_end_exam_ = vi_41100_end_exam;
  if (vi_41100_end_exam) {
    set_has_vi_41100_end_exam();
  } else {
    clear_has_vi_41100_end_exam();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41100.vi_41100_end_exam)
}

// optional .OPMessage.voiceItem vi_41100_horn_not_use = 11;
inline bool Judge41100::has_vi_41100_horn_not_use() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Judge41100::set_has_vi_41100_horn_not_use() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Judge41100::clear_has_vi_41100_horn_not_use() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Judge41100::clear_vi_41100_horn_not_use() {
  if (vi_41100_horn_not_use_ != NULL) vi_41100_horn_not_use_->::OPMessage::voiceItem::Clear();
  clear_has_vi_41100_horn_not_use();
}
inline const ::OPMessage::voiceItem& Judge41100::vi_41100_horn_not_use() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41100.vi_41100_horn_not_use)
  return vi_41100_horn_not_use_ != NULL ? *vi_41100_horn_not_use_ : *default_instance_->vi_41100_horn_not_use_;
}
inline ::OPMessage::voiceItem* Judge41100::mutable_vi_41100_horn_not_use() {
  set_has_vi_41100_horn_not_use();
  if (vi_41100_horn_not_use_ == NULL) vi_41100_horn_not_use_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41100.vi_41100_horn_not_use)
  return vi_41100_horn_not_use_;
}
inline ::OPMessage::voiceItem* Judge41100::release_vi_41100_horn_not_use() {
  clear_has_vi_41100_horn_not_use();
  ::OPMessage::voiceItem* temp = vi_41100_horn_not_use_;
  vi_41100_horn_not_use_ = NULL;
  return temp;
}
inline void Judge41100::set_allocated_vi_41100_horn_not_use(::OPMessage::voiceItem* vi_41100_horn_not_use) {
  delete vi_41100_horn_not_use_;
  vi_41100_horn_not_use_ = vi_41100_horn_not_use;
  if (vi_41100_horn_not_use) {
    set_has_vi_41100_horn_not_use();
  } else {
    clear_has_vi_41100_horn_not_use();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41100.vi_41100_horn_not_use)
}

// optional .OPMessage.voiceItem vi_41100_not_slowdown = 12;
inline bool Judge41100::has_vi_41100_not_slowdown() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Judge41100::set_has_vi_41100_not_slowdown() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Judge41100::clear_has_vi_41100_not_slowdown() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Judge41100::clear_vi_41100_not_slowdown() {
  if (vi_41100_not_slowdown_ != NULL) vi_41100_not_slowdown_->::OPMessage::voiceItem::Clear();
  clear_has_vi_41100_not_slowdown();
}
inline const ::OPMessage::voiceItem& Judge41100::vi_41100_not_slowdown() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41100.vi_41100_not_slowdown)
  return vi_41100_not_slowdown_ != NULL ? *vi_41100_not_slowdown_ : *default_instance_->vi_41100_not_slowdown_;
}
inline ::OPMessage::voiceItem* Judge41100::mutable_vi_41100_not_slowdown() {
  set_has_vi_41100_not_slowdown();
  if (vi_41100_not_slowdown_ == NULL) vi_41100_not_slowdown_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41100.vi_41100_not_slowdown)
  return vi_41100_not_slowdown_;
}
inline ::OPMessage::voiceItem* Judge41100::release_vi_41100_not_slowdown() {
  clear_has_vi_41100_not_slowdown();
  ::OPMessage::voiceItem* temp = vi_41100_not_slowdown_;
  vi_41100_not_slowdown_ = NULL;
  return temp;
}
inline void Judge41100::set_allocated_vi_41100_not_slowdown(::OPMessage::voiceItem* vi_41100_not_slowdown) {
  delete vi_41100_not_slowdown_;
  vi_41100_not_slowdown_ = vi_41100_not_slowdown;
  if (vi_41100_not_slowdown) {
    set_has_vi_41100_not_slowdown();
  } else {
    clear_has_vi_41100_not_slowdown();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41100.vi_41100_not_slowdown)
}

// -------------------------------------------------------------------

// Judge40700

// optional int32 itemCode = 1;
inline bool Judge40700::has_itemcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Judge40700::set_has_itemcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Judge40700::clear_has_itemcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Judge40700::clear_itemcode() {
  itemcode_ = 0;
  clear_has_itemcode();
}
inline ::google::protobuf::int32 Judge40700::itemcode() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40700.itemCode)
  return itemcode_;
}
inline void Judge40700::set_itemcode(::google::protobuf::int32 value) {
  set_has_itemcode();
  itemcode_ = value;
  // @@protoc_insertion_point(field_set:OPMessage.Judge40700.itemCode)
}

// optional string itemName = 2;
inline bool Judge40700::has_itemname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Judge40700::set_has_itemname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Judge40700::clear_has_itemname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Judge40700::clear_itemname() {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_->clear();
  }
  clear_has_itemname();
}
inline const ::std::string& Judge40700::itemname() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40700.itemName)
  return *itemname_;
}
inline void Judge40700::set_itemname(const ::std::string& value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
  // @@protoc_insertion_point(field_set:OPMessage.Judge40700.itemName)
}
inline void Judge40700::set_itemname(const char* value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
  // @@protoc_insertion_point(field_set_char:OPMessage.Judge40700.itemName)
}
inline void Judge40700::set_itemname(const char* value, size_t size) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OPMessage.Judge40700.itemName)
}
inline ::std::string* Judge40700::mutable_itemname() {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40700.itemName)
  return itemname_;
}
inline ::std::string* Judge40700::release_itemname() {
  clear_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = itemname_;
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Judge40700::set_allocated_itemname(::std::string* itemname) {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (itemname) {
    set_has_itemname();
    itemname_ = itemname;
  } else {
    clear_has_itemname();
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40700.itemName)
}

// optional .OPMessage.judgeItem max_time = 3;
inline bool Judge40700::has_max_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Judge40700::set_has_max_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Judge40700::clear_has_max_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Judge40700::clear_max_time() {
  if (max_time_ != NULL) max_time_->::OPMessage::judgeItem::Clear();
  clear_has_max_time();
}
inline const ::OPMessage::judgeItem& Judge40700::max_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40700.max_time)
  return max_time_ != NULL ? *max_time_ : *default_instance_->max_time_;
}
inline ::OPMessage::judgeItem* Judge40700::mutable_max_time() {
  set_has_max_time();
  if (max_time_ == NULL) max_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40700.max_time)
  return max_time_;
}
inline ::OPMessage::judgeItem* Judge40700::release_max_time() {
  clear_has_max_time();
  ::OPMessage::judgeItem* temp = max_time_;
  max_time_ = NULL;
  return temp;
}
inline void Judge40700::set_allocated_max_time(::OPMessage::judgeItem* max_time) {
  delete max_time_;
  max_time_ = max_time;
  if (max_time) {
    set_has_max_time();
  } else {
    clear_has_max_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40700.max_time)
}

// optional .OPMessage.judgeItem max_trigger_distance = 4;
inline bool Judge40700::has_max_trigger_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Judge40700::set_has_max_trigger_distance() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Judge40700::clear_has_max_trigger_distance() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Judge40700::clear_max_trigger_distance() {
  if (max_trigger_distance_ != NULL) max_trigger_distance_->::OPMessage::judgeItem::Clear();
  clear_has_max_trigger_distance();
}
inline const ::OPMessage::judgeItem& Judge40700::max_trigger_distance() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40700.max_trigger_distance)
  return max_trigger_distance_ != NULL ? *max_trigger_distance_ : *default_instance_->max_trigger_distance_;
}
inline ::OPMessage::judgeItem* Judge40700::mutable_max_trigger_distance() {
  set_has_max_trigger_distance();
  if (max_trigger_distance_ == NULL) max_trigger_distance_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40700.max_trigger_distance)
  return max_trigger_distance_;
}
inline ::OPMessage::judgeItem* Judge40700::release_max_trigger_distance() {
  clear_has_max_trigger_distance();
  ::OPMessage::judgeItem* temp = max_trigger_distance_;
  max_trigger_distance_ = NULL;
  return temp;
}
inline void Judge40700::set_allocated_max_trigger_distance(::OPMessage::judgeItem* max_trigger_distance) {
  delete max_trigger_distance_;
  max_trigger_distance_ = max_trigger_distance;
  if (max_trigger_distance) {
    set_has_max_trigger_distance();
  } else {
    clear_has_max_trigger_distance();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40700.max_trigger_distance)
}

// optional .OPMessage.judgeItem max_speed = 5;
inline bool Judge40700::has_max_speed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Judge40700::set_has_max_speed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Judge40700::clear_has_max_speed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Judge40700::clear_max_speed() {
  if (max_speed_ != NULL) max_speed_->::OPMessage::judgeItem::Clear();
  clear_has_max_speed();
}
inline const ::OPMessage::judgeItem& Judge40700::max_speed() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40700.max_speed)
  return max_speed_ != NULL ? *max_speed_ : *default_instance_->max_speed_;
}
inline ::OPMessage::judgeItem* Judge40700::mutable_max_speed() {
  set_has_max_speed();
  if (max_speed_ == NULL) max_speed_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40700.max_speed)
  return max_speed_;
}
inline ::OPMessage::judgeItem* Judge40700::release_max_speed() {
  clear_has_max_speed();
  ::OPMessage::judgeItem* temp = max_speed_;
  max_speed_ = NULL;
  return temp;
}
inline void Judge40700::set_allocated_max_speed(::OPMessage::judgeItem* max_speed) {
  delete max_speed_;
  max_speed_ = max_speed;
  if (max_speed) {
    set_has_max_speed();
  } else {
    clear_has_max_speed();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40700.max_speed)
}

// optional .OPMessage.judgeItem min_horn_time = 6;
inline bool Judge40700::has_min_horn_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Judge40700::set_has_min_horn_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Judge40700::clear_has_min_horn_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Judge40700::clear_min_horn_time() {
  if (min_horn_time_ != NULL) min_horn_time_->::OPMessage::judgeItem::Clear();
  clear_has_min_horn_time();
}
inline const ::OPMessage::judgeItem& Judge40700::min_horn_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40700.min_horn_time)
  return min_horn_time_ != NULL ? *min_horn_time_ : *default_instance_->min_horn_time_;
}
inline ::OPMessage::judgeItem* Judge40700::mutable_min_horn_time() {
  set_has_min_horn_time();
  if (min_horn_time_ == NULL) min_horn_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40700.min_horn_time)
  return min_horn_time_;
}
inline ::OPMessage::judgeItem* Judge40700::release_min_horn_time() {
  clear_has_min_horn_time();
  ::OPMessage::judgeItem* temp = min_horn_time_;
  min_horn_time_ = NULL;
  return temp;
}
inline void Judge40700::set_allocated_min_horn_time(::OPMessage::judgeItem* min_horn_time) {
  delete min_horn_time_;
  min_horn_time_ = min_horn_time;
  if (min_horn_time) {
    set_has_min_horn_time();
  } else {
    clear_has_min_horn_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40700.min_horn_time)
}

// optional .OPMessage.judgeItem min_turn_signal_time = 7;
inline bool Judge40700::has_min_turn_signal_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Judge40700::set_has_min_turn_signal_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Judge40700::clear_has_min_turn_signal_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Judge40700::clear_min_turn_signal_time() {
  if (min_turn_signal_time_ != NULL) min_turn_signal_time_->::OPMessage::judgeItem::Clear();
  clear_has_min_turn_signal_time();
}
inline const ::OPMessage::judgeItem& Judge40700::min_turn_signal_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40700.min_turn_signal_time)
  return min_turn_signal_time_ != NULL ? *min_turn_signal_time_ : *default_instance_->min_turn_signal_time_;
}
inline ::OPMessage::judgeItem* Judge40700::mutable_min_turn_signal_time() {
  set_has_min_turn_signal_time();
  if (min_turn_signal_time_ == NULL) min_turn_signal_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40700.min_turn_signal_time)
  return min_turn_signal_time_;
}
inline ::OPMessage::judgeItem* Judge40700::release_min_turn_signal_time() {
  clear_has_min_turn_signal_time();
  ::OPMessage::judgeItem* temp = min_turn_signal_time_;
  min_turn_signal_time_ = NULL;
  return temp;
}
inline void Judge40700::set_allocated_min_turn_signal_time(::OPMessage::judgeItem* min_turn_signal_time) {
  delete min_turn_signal_time_;
  min_turn_signal_time_ = min_turn_signal_time;
  if (min_turn_signal_time) {
    set_has_min_turn_signal_time();
  } else {
    clear_has_min_turn_signal_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40700.min_turn_signal_time)
}

// optional .OPMessage.judgeItem judge_mode = 8;
inline bool Judge40700::has_judge_mode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Judge40700::set_has_judge_mode() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Judge40700::clear_has_judge_mode() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Judge40700::clear_judge_mode() {
  if (judge_mode_ != NULL) judge_mode_->::OPMessage::judgeItem::Clear();
  clear_has_judge_mode();
}
inline const ::OPMessage::judgeItem& Judge40700::judge_mode() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40700.judge_mode)
  return judge_mode_ != NULL ? *judge_mode_ : *default_instance_->judge_mode_;
}
inline ::OPMessage::judgeItem* Judge40700::mutable_judge_mode() {
  set_has_judge_mode();
  if (judge_mode_ == NULL) judge_mode_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40700.judge_mode)
  return judge_mode_;
}
inline ::OPMessage::judgeItem* Judge40700::release_judge_mode() {
  clear_has_judge_mode();
  ::OPMessage::judgeItem* temp = judge_mode_;
  judge_mode_ = NULL;
  return temp;
}
inline void Judge40700::set_allocated_judge_mode(::OPMessage::judgeItem* judge_mode) {
  delete judge_mode_;
  judge_mode_ = judge_mode;
  if (judge_mode) {
    set_has_judge_mode();
  } else {
    clear_has_judge_mode();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40700.judge_mode)
}

// optional .OPMessage.judgeItem need_near_far_lamp_flash = 9;
inline bool Judge40700::has_need_near_far_lamp_flash() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Judge40700::set_has_need_near_far_lamp_flash() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Judge40700::clear_has_need_near_far_lamp_flash() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Judge40700::clear_need_near_far_lamp_flash() {
  if (need_near_far_lamp_flash_ != NULL) need_near_far_lamp_flash_->::OPMessage::judgeItem::Clear();
  clear_has_need_near_far_lamp_flash();
}
inline const ::OPMessage::judgeItem& Judge40700::need_near_far_lamp_flash() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40700.need_near_far_lamp_flash)
  return need_near_far_lamp_flash_ != NULL ? *need_near_far_lamp_flash_ : *default_instance_->need_near_far_lamp_flash_;
}
inline ::OPMessage::judgeItem* Judge40700::mutable_need_near_far_lamp_flash() {
  set_has_need_near_far_lamp_flash();
  if (need_near_far_lamp_flash_ == NULL) need_near_far_lamp_flash_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40700.need_near_far_lamp_flash)
  return need_near_far_lamp_flash_;
}
inline ::OPMessage::judgeItem* Judge40700::release_need_near_far_lamp_flash() {
  clear_has_need_near_far_lamp_flash();
  ::OPMessage::judgeItem* temp = need_near_far_lamp_flash_;
  need_near_far_lamp_flash_ = NULL;
  return temp;
}
inline void Judge40700::set_allocated_need_near_far_lamp_flash(::OPMessage::judgeItem* need_near_far_lamp_flash) {
  delete need_near_far_lamp_flash_;
  need_near_far_lamp_flash_ = need_near_far_lamp_flash;
  if (need_near_far_lamp_flash) {
    set_has_need_near_far_lamp_flash();
  } else {
    clear_has_need_near_far_lamp_flash();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40700.need_near_far_lamp_flash)
}

// optional .OPMessage.voiceItem vi_40700_start_exam = 10;
inline bool Judge40700::has_vi_40700_start_exam() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Judge40700::set_has_vi_40700_start_exam() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Judge40700::clear_has_vi_40700_start_exam() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Judge40700::clear_vi_40700_start_exam() {
  if (vi_40700_start_exam_ != NULL) vi_40700_start_exam_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40700_start_exam();
}
inline const ::OPMessage::voiceItem& Judge40700::vi_40700_start_exam() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40700.vi_40700_start_exam)
  return vi_40700_start_exam_ != NULL ? *vi_40700_start_exam_ : *default_instance_->vi_40700_start_exam_;
}
inline ::OPMessage::voiceItem* Judge40700::mutable_vi_40700_start_exam() {
  set_has_vi_40700_start_exam();
  if (vi_40700_start_exam_ == NULL) vi_40700_start_exam_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40700.vi_40700_start_exam)
  return vi_40700_start_exam_;
}
inline ::OPMessage::voiceItem* Judge40700::release_vi_40700_start_exam() {
  clear_has_vi_40700_start_exam();
  ::OPMessage::voiceItem* temp = vi_40700_start_exam_;
  vi_40700_start_exam_ = NULL;
  return temp;
}
inline void Judge40700::set_allocated_vi_40700_start_exam(::OPMessage::voiceItem* vi_40700_start_exam) {
  delete vi_40700_start_exam_;
  vi_40700_start_exam_ = vi_40700_start_exam;
  if (vi_40700_start_exam) {
    set_has_vi_40700_start_exam();
  } else {
    clear_has_vi_40700_start_exam();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40700.vi_40700_start_exam)
}

// optional .OPMessage.voiceItem vi_40700_end_exam = 11;
inline bool Judge40700::has_vi_40700_end_exam() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Judge40700::set_has_vi_40700_end_exam() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Judge40700::clear_has_vi_40700_end_exam() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Judge40700::clear_vi_40700_end_exam() {
  if (vi_40700_end_exam_ != NULL) vi_40700_end_exam_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40700_end_exam();
}
inline const ::OPMessage::voiceItem& Judge40700::vi_40700_end_exam() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40700.vi_40700_end_exam)
  return vi_40700_end_exam_ != NULL ? *vi_40700_end_exam_ : *default_instance_->vi_40700_end_exam_;
}
inline ::OPMessage::voiceItem* Judge40700::mutable_vi_40700_end_exam() {
  set_has_vi_40700_end_exam();
  if (vi_40700_end_exam_ == NULL) vi_40700_end_exam_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40700.vi_40700_end_exam)
  return vi_40700_end_exam_;
}
inline ::OPMessage::voiceItem* Judge40700::release_vi_40700_end_exam() {
  clear_has_vi_40700_end_exam();
  ::OPMessage::voiceItem* temp = vi_40700_end_exam_;
  vi_40700_end_exam_ = NULL;
  return temp;
}
inline void Judge40700::set_allocated_vi_40700_end_exam(::OPMessage::voiceItem* vi_40700_end_exam) {
  delete vi_40700_end_exam_;
  vi_40700_end_exam_ = vi_40700_end_exam;
  if (vi_40700_end_exam) {
    set_has_vi_40700_end_exam();
  } else {
    clear_has_vi_40700_end_exam();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40700.vi_40700_end_exam)
}

// optional .OPMessage.voiceItem vi_40700_horn_not_use = 12;
inline bool Judge40700::has_vi_40700_horn_not_use() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Judge40700::set_has_vi_40700_horn_not_use() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Judge40700::clear_has_vi_40700_horn_not_use() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Judge40700::clear_vi_40700_horn_not_use() {
  if (vi_40700_horn_not_use_ != NULL) vi_40700_horn_not_use_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40700_horn_not_use();
}
inline const ::OPMessage::voiceItem& Judge40700::vi_40700_horn_not_use() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40700.vi_40700_horn_not_use)
  return vi_40700_horn_not_use_ != NULL ? *vi_40700_horn_not_use_ : *default_instance_->vi_40700_horn_not_use_;
}
inline ::OPMessage::voiceItem* Judge40700::mutable_vi_40700_horn_not_use() {
  set_has_vi_40700_horn_not_use();
  if (vi_40700_horn_not_use_ == NULL) vi_40700_horn_not_use_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40700.vi_40700_horn_not_use)
  return vi_40700_horn_not_use_;
}
inline ::OPMessage::voiceItem* Judge40700::release_vi_40700_horn_not_use() {
  clear_has_vi_40700_horn_not_use();
  ::OPMessage::voiceItem* temp = vi_40700_horn_not_use_;
  vi_40700_horn_not_use_ = NULL;
  return temp;
}
inline void Judge40700::set_allocated_vi_40700_horn_not_use(::OPMessage::voiceItem* vi_40700_horn_not_use) {
  delete vi_40700_horn_not_use_;
  vi_40700_horn_not_use_ = vi_40700_horn_not_use;
  if (vi_40700_horn_not_use) {
    set_has_vi_40700_horn_not_use();
  } else {
    clear_has_vi_40700_horn_not_use();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40700.vi_40700_horn_not_use)
}

// optional .OPMessage.voiceItem vi_40700_not_slowdown = 13;
inline bool Judge40700::has_vi_40700_not_slowdown() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Judge40700::set_has_vi_40700_not_slowdown() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Judge40700::clear_has_vi_40700_not_slowdown() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Judge40700::clear_vi_40700_not_slowdown() {
  if (vi_40700_not_slowdown_ != NULL) vi_40700_not_slowdown_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40700_not_slowdown();
}
inline const ::OPMessage::voiceItem& Judge40700::vi_40700_not_slowdown() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40700.vi_40700_not_slowdown)
  return vi_40700_not_slowdown_ != NULL ? *vi_40700_not_slowdown_ : *default_instance_->vi_40700_not_slowdown_;
}
inline ::OPMessage::voiceItem* Judge40700::mutable_vi_40700_not_slowdown() {
  set_has_vi_40700_not_slowdown();
  if (vi_40700_not_slowdown_ == NULL) vi_40700_not_slowdown_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40700.vi_40700_not_slowdown)
  return vi_40700_not_slowdown_;
}
inline ::OPMessage::voiceItem* Judge40700::release_vi_40700_not_slowdown() {
  clear_has_vi_40700_not_slowdown();
  ::OPMessage::voiceItem* temp = vi_40700_not_slowdown_;
  vi_40700_not_slowdown_ = NULL;
  return temp;
}
inline void Judge40700::set_allocated_vi_40700_not_slowdown(::OPMessage::voiceItem* vi_40700_not_slowdown) {
  delete vi_40700_not_slowdown_;
  vi_40700_not_slowdown_ = vi_40700_not_slowdown;
  if (vi_40700_not_slowdown) {
    set_has_vi_40700_not_slowdown();
  } else {
    clear_has_vi_40700_not_slowdown();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40700.vi_40700_not_slowdown)
}

// -------------------------------------------------------------------

// Judge41500

// optional int32 itemCode = 1;
inline bool Judge41500::has_itemcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Judge41500::set_has_itemcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Judge41500::clear_has_itemcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Judge41500::clear_itemcode() {
  itemcode_ = 0;
  clear_has_itemcode();
}
inline ::google::protobuf::int32 Judge41500::itemcode() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41500.itemCode)
  return itemcode_;
}
inline void Judge41500::set_itemcode(::google::protobuf::int32 value) {
  set_has_itemcode();
  itemcode_ = value;
  // @@protoc_insertion_point(field_set:OPMessage.Judge41500.itemCode)
}

// optional string itemName = 2;
inline bool Judge41500::has_itemname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Judge41500::set_has_itemname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Judge41500::clear_has_itemname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Judge41500::clear_itemname() {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_->clear();
  }
  clear_has_itemname();
}
inline const ::std::string& Judge41500::itemname() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41500.itemName)
  return *itemname_;
}
inline void Judge41500::set_itemname(const ::std::string& value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
  // @@protoc_insertion_point(field_set:OPMessage.Judge41500.itemName)
}
inline void Judge41500::set_itemname(const char* value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
  // @@protoc_insertion_point(field_set_char:OPMessage.Judge41500.itemName)
}
inline void Judge41500::set_itemname(const char* value, size_t size) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OPMessage.Judge41500.itemName)
}
inline ::std::string* Judge41500::mutable_itemname() {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41500.itemName)
  return itemname_;
}
inline ::std::string* Judge41500::release_itemname() {
  clear_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = itemname_;
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Judge41500::set_allocated_itemname(::std::string* itemname) {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (itemname) {
    set_has_itemname();
    itemname_ = itemname;
  } else {
    clear_has_itemname();
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41500.itemName)
}

// optional .OPMessage.judgeItem max_time = 3;
inline bool Judge41500::has_max_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Judge41500::set_has_max_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Judge41500::clear_has_max_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Judge41500::clear_max_time() {
  if (max_time_ != NULL) max_time_->::OPMessage::judgeItem::Clear();
  clear_has_max_time();
}
inline const ::OPMessage::judgeItem& Judge41500::max_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41500.max_time)
  return max_time_ != NULL ? *max_time_ : *default_instance_->max_time_;
}
inline ::OPMessage::judgeItem* Judge41500::mutable_max_time() {
  set_has_max_time();
  if (max_time_ == NULL) max_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41500.max_time)
  return max_time_;
}
inline ::OPMessage::judgeItem* Judge41500::release_max_time() {
  clear_has_max_time();
  ::OPMessage::judgeItem* temp = max_time_;
  max_time_ = NULL;
  return temp;
}
inline void Judge41500::set_allocated_max_time(::OPMessage::judgeItem* max_time) {
  delete max_time_;
  max_time_ = max_time;
  if (max_time) {
    set_has_max_time();
  } else {
    clear_has_max_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41500.max_time)
}

// optional .OPMessage.judgeItem max_trigger_distance = 4;
inline bool Judge41500::has_max_trigger_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Judge41500::set_has_max_trigger_distance() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Judge41500::clear_has_max_trigger_distance() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Judge41500::clear_max_trigger_distance() {
  if (max_trigger_distance_ != NULL) max_trigger_distance_->::OPMessage::judgeItem::Clear();
  clear_has_max_trigger_distance();
}
inline const ::OPMessage::judgeItem& Judge41500::max_trigger_distance() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41500.max_trigger_distance)
  return max_trigger_distance_ != NULL ? *max_trigger_distance_ : *default_instance_->max_trigger_distance_;
}
inline ::OPMessage::judgeItem* Judge41500::mutable_max_trigger_distance() {
  set_has_max_trigger_distance();
  if (max_trigger_distance_ == NULL) max_trigger_distance_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41500.max_trigger_distance)
  return max_trigger_distance_;
}
inline ::OPMessage::judgeItem* Judge41500::release_max_trigger_distance() {
  clear_has_max_trigger_distance();
  ::OPMessage::judgeItem* temp = max_trigger_distance_;
  max_trigger_distance_ = NULL;
  return temp;
}
inline void Judge41500::set_allocated_max_trigger_distance(::OPMessage::judgeItem* max_trigger_distance) {
  delete max_trigger_distance_;
  max_trigger_distance_ = max_trigger_distance;
  if (max_trigger_distance) {
    set_has_max_trigger_distance();
  } else {
    clear_has_max_trigger_distance();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41500.max_trigger_distance)
}

// optional .OPMessage.judgeItem min_turn_signal_time = 5;
inline bool Judge41500::has_min_turn_signal_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Judge41500::set_has_min_turn_signal_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Judge41500::clear_has_min_turn_signal_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Judge41500::clear_min_turn_signal_time() {
  if (min_turn_signal_time_ != NULL) min_turn_signal_time_->::OPMessage::judgeItem::Clear();
  clear_has_min_turn_signal_time();
}
inline const ::OPMessage::judgeItem& Judge41500::min_turn_signal_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41500.min_turn_signal_time)
  return min_turn_signal_time_ != NULL ? *min_turn_signal_time_ : *default_instance_->min_turn_signal_time_;
}
inline ::OPMessage::judgeItem* Judge41500::mutable_min_turn_signal_time() {
  set_has_min_turn_signal_time();
  if (min_turn_signal_time_ == NULL) min_turn_signal_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41500.min_turn_signal_time)
  return min_turn_signal_time_;
}
inline ::OPMessage::judgeItem* Judge41500::release_min_turn_signal_time() {
  clear_has_min_turn_signal_time();
  ::OPMessage::judgeItem* temp = min_turn_signal_time_;
  min_turn_signal_time_ = NULL;
  return temp;
}
inline void Judge41500::set_allocated_min_turn_signal_time(::OPMessage::judgeItem* min_turn_signal_time) {
  delete min_turn_signal_time_;
  min_turn_signal_time_ = min_turn_signal_time;
  if (min_turn_signal_time) {
    set_has_min_turn_signal_time();
  } else {
    clear_has_min_turn_signal_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41500.min_turn_signal_time)
}

// optional .OPMessage.judgeItem max_speed = 6;
inline bool Judge41500::has_max_speed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Judge41500::set_has_max_speed() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Judge41500::clear_has_max_speed() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Judge41500::clear_max_speed() {
  if (max_speed_ != NULL) max_speed_->::OPMessage::judgeItem::Clear();
  clear_has_max_speed();
}
inline const ::OPMessage::judgeItem& Judge41500::max_speed() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41500.max_speed)
  return max_speed_ != NULL ? *max_speed_ : *default_instance_->max_speed_;
}
inline ::OPMessage::judgeItem* Judge41500::mutable_max_speed() {
  set_has_max_speed();
  if (max_speed_ == NULL) max_speed_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41500.max_speed)
  return max_speed_;
}
inline ::OPMessage::judgeItem* Judge41500::release_max_speed() {
  clear_has_max_speed();
  ::OPMessage::judgeItem* temp = max_speed_;
  max_speed_ = NULL;
  return temp;
}
inline void Judge41500::set_allocated_max_speed(::OPMessage::judgeItem* max_speed) {
  delete max_speed_;
  max_speed_ = max_speed;
  if (max_speed) {
    set_has_max_speed();
  } else {
    clear_has_max_speed();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41500.max_speed)
}

// optional .OPMessage.judgeItem judge_mode = 7;
inline bool Judge41500::has_judge_mode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Judge41500::set_has_judge_mode() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Judge41500::clear_has_judge_mode() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Judge41500::clear_judge_mode() {
  if (judge_mode_ != NULL) judge_mode_->::OPMessage::judgeItem::Clear();
  clear_has_judge_mode();
}
inline const ::OPMessage::judgeItem& Judge41500::judge_mode() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41500.judge_mode)
  return judge_mode_ != NULL ? *judge_mode_ : *default_instance_->judge_mode_;
}
inline ::OPMessage::judgeItem* Judge41500::mutable_judge_mode() {
  set_has_judge_mode();
  if (judge_mode_ == NULL) judge_mode_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41500.judge_mode)
  return judge_mode_;
}
inline ::OPMessage::judgeItem* Judge41500::release_judge_mode() {
  clear_has_judge_mode();
  ::OPMessage::judgeItem* temp = judge_mode_;
  judge_mode_ = NULL;
  return temp;
}
inline void Judge41500::set_allocated_judge_mode(::OPMessage::judgeItem* judge_mode) {
  delete judge_mode_;
  judge_mode_ = judge_mode;
  if (judge_mode) {
    set_has_judge_mode();
  } else {
    clear_has_judge_mode();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41500.judge_mode)
}

// optional .OPMessage.voiceItem vi_41500_start_exam = 8;
inline bool Judge41500::has_vi_41500_start_exam() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Judge41500::set_has_vi_41500_start_exam() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Judge41500::clear_has_vi_41500_start_exam() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Judge41500::clear_vi_41500_start_exam() {
  if (vi_41500_start_exam_ != NULL) vi_41500_start_exam_->::OPMessage::voiceItem::Clear();
  clear_has_vi_41500_start_exam();
}
inline const ::OPMessage::voiceItem& Judge41500::vi_41500_start_exam() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41500.vi_41500_start_exam)
  return vi_41500_start_exam_ != NULL ? *vi_41500_start_exam_ : *default_instance_->vi_41500_start_exam_;
}
inline ::OPMessage::voiceItem* Judge41500::mutable_vi_41500_start_exam() {
  set_has_vi_41500_start_exam();
  if (vi_41500_start_exam_ == NULL) vi_41500_start_exam_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41500.vi_41500_start_exam)
  return vi_41500_start_exam_;
}
inline ::OPMessage::voiceItem* Judge41500::release_vi_41500_start_exam() {
  clear_has_vi_41500_start_exam();
  ::OPMessage::voiceItem* temp = vi_41500_start_exam_;
  vi_41500_start_exam_ = NULL;
  return temp;
}
inline void Judge41500::set_allocated_vi_41500_start_exam(::OPMessage::voiceItem* vi_41500_start_exam) {
  delete vi_41500_start_exam_;
  vi_41500_start_exam_ = vi_41500_start_exam;
  if (vi_41500_start_exam) {
    set_has_vi_41500_start_exam();
  } else {
    clear_has_vi_41500_start_exam();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41500.vi_41500_start_exam)
}

// optional .OPMessage.voiceItem vi_41500_end_exam = 9;
inline bool Judge41500::has_vi_41500_end_exam() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Judge41500::set_has_vi_41500_end_exam() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Judge41500::clear_has_vi_41500_end_exam() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Judge41500::clear_vi_41500_end_exam() {
  if (vi_41500_end_exam_ != NULL) vi_41500_end_exam_->::OPMessage::voiceItem::Clear();
  clear_has_vi_41500_end_exam();
}
inline const ::OPMessage::voiceItem& Judge41500::vi_41500_end_exam() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41500.vi_41500_end_exam)
  return vi_41500_end_exam_ != NULL ? *vi_41500_end_exam_ : *default_instance_->vi_41500_end_exam_;
}
inline ::OPMessage::voiceItem* Judge41500::mutable_vi_41500_end_exam() {
  set_has_vi_41500_end_exam();
  if (vi_41500_end_exam_ == NULL) vi_41500_end_exam_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41500.vi_41500_end_exam)
  return vi_41500_end_exam_;
}
inline ::OPMessage::voiceItem* Judge41500::release_vi_41500_end_exam() {
  clear_has_vi_41500_end_exam();
  ::OPMessage::voiceItem* temp = vi_41500_end_exam_;
  vi_41500_end_exam_ = NULL;
  return temp;
}
inline void Judge41500::set_allocated_vi_41500_end_exam(::OPMessage::voiceItem* vi_41500_end_exam) {
  delete vi_41500_end_exam_;
  vi_41500_end_exam_ = vi_41500_end_exam;
  if (vi_41500_end_exam) {
    set_has_vi_41500_end_exam();
  } else {
    clear_has_vi_41500_end_exam();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41500.vi_41500_end_exam)
}

// optional .OPMessage.voiceItem vi_41500_not_slowdown = 10;
inline bool Judge41500::has_vi_41500_not_slowdown() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Judge41500::set_has_vi_41500_not_slowdown() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Judge41500::clear_has_vi_41500_not_slowdown() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Judge41500::clear_vi_41500_not_slowdown() {
  if (vi_41500_not_slowdown_ != NULL) vi_41500_not_slowdown_->::OPMessage::voiceItem::Clear();
  clear_has_vi_41500_not_slowdown();
}
inline const ::OPMessage::voiceItem& Judge41500::vi_41500_not_slowdown() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41500.vi_41500_not_slowdown)
  return vi_41500_not_slowdown_ != NULL ? *vi_41500_not_slowdown_ : *default_instance_->vi_41500_not_slowdown_;
}
inline ::OPMessage::voiceItem* Judge41500::mutable_vi_41500_not_slowdown() {
  set_has_vi_41500_not_slowdown();
  if (vi_41500_not_slowdown_ == NULL) vi_41500_not_slowdown_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41500.vi_41500_not_slowdown)
  return vi_41500_not_slowdown_;
}
inline ::OPMessage::voiceItem* Judge41500::release_vi_41500_not_slowdown() {
  clear_has_vi_41500_not_slowdown();
  ::OPMessage::voiceItem* temp = vi_41500_not_slowdown_;
  vi_41500_not_slowdown_ = NULL;
  return temp;
}
inline void Judge41500::set_allocated_vi_41500_not_slowdown(::OPMessage::voiceItem* vi_41500_not_slowdown) {
  delete vi_41500_not_slowdown_;
  vi_41500_not_slowdown_ = vi_41500_not_slowdown;
  if (vi_41500_not_slowdown) {
    set_has_vi_41500_not_slowdown();
  } else {
    clear_has_vi_41500_not_slowdown();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41500.vi_41500_not_slowdown)
}

// optional .OPMessage.voiceItem vi_41500_turn_lamp_use_error = 11;
inline bool Judge41500::has_vi_41500_turn_lamp_use_error() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Judge41500::set_has_vi_41500_turn_lamp_use_error() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Judge41500::clear_has_vi_41500_turn_lamp_use_error() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Judge41500::clear_vi_41500_turn_lamp_use_error() {
  if (vi_41500_turn_lamp_use_error_ != NULL) vi_41500_turn_lamp_use_error_->::OPMessage::voiceItem::Clear();
  clear_has_vi_41500_turn_lamp_use_error();
}
inline const ::OPMessage::voiceItem& Judge41500::vi_41500_turn_lamp_use_error() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41500.vi_41500_turn_lamp_use_error)
  return vi_41500_turn_lamp_use_error_ != NULL ? *vi_41500_turn_lamp_use_error_ : *default_instance_->vi_41500_turn_lamp_use_error_;
}
inline ::OPMessage::voiceItem* Judge41500::mutable_vi_41500_turn_lamp_use_error() {
  set_has_vi_41500_turn_lamp_use_error();
  if (vi_41500_turn_lamp_use_error_ == NULL) vi_41500_turn_lamp_use_error_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41500.vi_41500_turn_lamp_use_error)
  return vi_41500_turn_lamp_use_error_;
}
inline ::OPMessage::voiceItem* Judge41500::release_vi_41500_turn_lamp_use_error() {
  clear_has_vi_41500_turn_lamp_use_error();
  ::OPMessage::voiceItem* temp = vi_41500_turn_lamp_use_error_;
  vi_41500_turn_lamp_use_error_ = NULL;
  return temp;
}
inline void Judge41500::set_allocated_vi_41500_turn_lamp_use_error(::OPMessage::voiceItem* vi_41500_turn_lamp_use_error) {
  delete vi_41500_turn_lamp_use_error_;
  vi_41500_turn_lamp_use_error_ = vi_41500_turn_lamp_use_error;
  if (vi_41500_turn_lamp_use_error) {
    set_has_vi_41500_turn_lamp_use_error();
  } else {
    clear_has_vi_41500_turn_lamp_use_error();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41500.vi_41500_turn_lamp_use_error)
}

// optional .OPMessage.voiceItem vi_41500_turn_lamp_not_use = 12;
inline bool Judge41500::has_vi_41500_turn_lamp_not_use() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Judge41500::set_has_vi_41500_turn_lamp_not_use() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Judge41500::clear_has_vi_41500_turn_lamp_not_use() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Judge41500::clear_vi_41500_turn_lamp_not_use() {
  if (vi_41500_turn_lamp_not_use_ != NULL) vi_41500_turn_lamp_not_use_->::OPMessage::voiceItem::Clear();
  clear_has_vi_41500_turn_lamp_not_use();
}
inline const ::OPMessage::voiceItem& Judge41500::vi_41500_turn_lamp_not_use() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41500.vi_41500_turn_lamp_not_use)
  return vi_41500_turn_lamp_not_use_ != NULL ? *vi_41500_turn_lamp_not_use_ : *default_instance_->vi_41500_turn_lamp_not_use_;
}
inline ::OPMessage::voiceItem* Judge41500::mutable_vi_41500_turn_lamp_not_use() {
  set_has_vi_41500_turn_lamp_not_use();
  if (vi_41500_turn_lamp_not_use_ == NULL) vi_41500_turn_lamp_not_use_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41500.vi_41500_turn_lamp_not_use)
  return vi_41500_turn_lamp_not_use_;
}
inline ::OPMessage::voiceItem* Judge41500::release_vi_41500_turn_lamp_not_use() {
  clear_has_vi_41500_turn_lamp_not_use();
  ::OPMessage::voiceItem* temp = vi_41500_turn_lamp_not_use_;
  vi_41500_turn_lamp_not_use_ = NULL;
  return temp;
}
inline void Judge41500::set_allocated_vi_41500_turn_lamp_not_use(::OPMessage::voiceItem* vi_41500_turn_lamp_not_use) {
  delete vi_41500_turn_lamp_not_use_;
  vi_41500_turn_lamp_not_use_ = vi_41500_turn_lamp_not_use;
  if (vi_41500_turn_lamp_not_use) {
    set_has_vi_41500_turn_lamp_not_use();
  } else {
    clear_has_vi_41500_turn_lamp_not_use();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41500.vi_41500_turn_lamp_not_use)
}

// -------------------------------------------------------------------

// Judge40800

// optional int32 itemCode = 1;
inline bool Judge40800::has_itemcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Judge40800::set_has_itemcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Judge40800::clear_has_itemcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Judge40800::clear_itemcode() {
  itemcode_ = 0;
  clear_has_itemcode();
}
inline ::google::protobuf::int32 Judge40800::itemcode() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40800.itemCode)
  return itemcode_;
}
inline void Judge40800::set_itemcode(::google::protobuf::int32 value) {
  set_has_itemcode();
  itemcode_ = value;
  // @@protoc_insertion_point(field_set:OPMessage.Judge40800.itemCode)
}

// optional string itemName = 2;
inline bool Judge40800::has_itemname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Judge40800::set_has_itemname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Judge40800::clear_has_itemname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Judge40800::clear_itemname() {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_->clear();
  }
  clear_has_itemname();
}
inline const ::std::string& Judge40800::itemname() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40800.itemName)
  return *itemname_;
}
inline void Judge40800::set_itemname(const ::std::string& value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
  // @@protoc_insertion_point(field_set:OPMessage.Judge40800.itemName)
}
inline void Judge40800::set_itemname(const char* value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
  // @@protoc_insertion_point(field_set_char:OPMessage.Judge40800.itemName)
}
inline void Judge40800::set_itemname(const char* value, size_t size) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OPMessage.Judge40800.itemName)
}
inline ::std::string* Judge40800::mutable_itemname() {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40800.itemName)
  return itemname_;
}
inline ::std::string* Judge40800::release_itemname() {
  clear_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = itemname_;
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Judge40800::set_allocated_itemname(::std::string* itemname) {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (itemname) {
    set_has_itemname();
    itemname_ = itemname;
  } else {
    clear_has_itemname();
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40800.itemName)
}

// optional .OPMessage.judgeItem max_time = 3;
inline bool Judge40800::has_max_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Judge40800::set_has_max_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Judge40800::clear_has_max_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Judge40800::clear_max_time() {
  if (max_time_ != NULL) max_time_->::OPMessage::judgeItem::Clear();
  clear_has_max_time();
}
inline const ::OPMessage::judgeItem& Judge40800::max_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40800.max_time)
  return max_time_ != NULL ? *max_time_ : *default_instance_->max_time_;
}
inline ::OPMessage::judgeItem* Judge40800::mutable_max_time() {
  set_has_max_time();
  if (max_time_ == NULL) max_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40800.max_time)
  return max_time_;
}
inline ::OPMessage::judgeItem* Judge40800::release_max_time() {
  clear_has_max_time();
  ::OPMessage::judgeItem* temp = max_time_;
  max_time_ = NULL;
  return temp;
}
inline void Judge40800::set_allocated_max_time(::OPMessage::judgeItem* max_time) {
  delete max_time_;
  max_time_ = max_time;
  if (max_time) {
    set_has_max_time();
  } else {
    clear_has_max_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40800.max_time)
}

// optional .OPMessage.judgeItem max_trigger_distance = 4;
inline bool Judge40800::has_max_trigger_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Judge40800::set_has_max_trigger_distance() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Judge40800::clear_has_max_trigger_distance() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Judge40800::clear_max_trigger_distance() {
  if (max_trigger_distance_ != NULL) max_trigger_distance_->::OPMessage::judgeItem::Clear();
  clear_has_max_trigger_distance();
}
inline const ::OPMessage::judgeItem& Judge40800::max_trigger_distance() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40800.max_trigger_distance)
  return max_trigger_distance_ != NULL ? *max_trigger_distance_ : *default_instance_->max_trigger_distance_;
}
inline ::OPMessage::judgeItem* Judge40800::mutable_max_trigger_distance() {
  set_has_max_trigger_distance();
  if (max_trigger_distance_ == NULL) max_trigger_distance_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40800.max_trigger_distance)
  return max_trigger_distance_;
}
inline ::OPMessage::judgeItem* Judge40800::release_max_trigger_distance() {
  clear_has_max_trigger_distance();
  ::OPMessage::judgeItem* temp = max_trigger_distance_;
  max_trigger_distance_ = NULL;
  return temp;
}
inline void Judge40800::set_allocated_max_trigger_distance(::OPMessage::judgeItem* max_trigger_distance) {
  delete max_trigger_distance_;
  max_trigger_distance_ = max_trigger_distance;
  if (max_trigger_distance) {
    set_has_max_trigger_distance();
  } else {
    clear_has_max_trigger_distance();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40800.max_trigger_distance)
}

// optional .OPMessage.judgeItem max_speed = 5;
inline bool Judge40800::has_max_speed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Judge40800::set_has_max_speed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Judge40800::clear_has_max_speed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Judge40800::clear_max_speed() {
  if (max_speed_ != NULL) max_speed_->::OPMessage::judgeItem::Clear();
  clear_has_max_speed();
}
inline const ::OPMessage::judgeItem& Judge40800::max_speed() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40800.max_speed)
  return max_speed_ != NULL ? *max_speed_ : *default_instance_->max_speed_;
}
inline ::OPMessage::judgeItem* Judge40800::mutable_max_speed() {
  set_has_max_speed();
  if (max_speed_ == NULL) max_speed_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40800.max_speed)
  return max_speed_;
}
inline ::OPMessage::judgeItem* Judge40800::release_max_speed() {
  clear_has_max_speed();
  ::OPMessage::judgeItem* temp = max_speed_;
  max_speed_ = NULL;
  return temp;
}
inline void Judge40800::set_allocated_max_speed(::OPMessage::judgeItem* max_speed) {
  delete max_speed_;
  max_speed_ = max_speed;
  if (max_speed) {
    set_has_max_speed();
  } else {
    clear_has_max_speed();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40800.max_speed)
}

// optional .OPMessage.judgeItem min_horn_time = 6;
inline bool Judge40800::has_min_horn_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Judge40800::set_has_min_horn_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Judge40800::clear_has_min_horn_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Judge40800::clear_min_horn_time() {
  if (min_horn_time_ != NULL) min_horn_time_->::OPMessage::judgeItem::Clear();
  clear_has_min_horn_time();
}
inline const ::OPMessage::judgeItem& Judge40800::min_horn_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40800.min_horn_time)
  return min_horn_time_ != NULL ? *min_horn_time_ : *default_instance_->min_horn_time_;
}
inline ::OPMessage::judgeItem* Judge40800::mutable_min_horn_time() {
  set_has_min_horn_time();
  if (min_horn_time_ == NULL) min_horn_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40800.min_horn_time)
  return min_horn_time_;
}
inline ::OPMessage::judgeItem* Judge40800::release_min_horn_time() {
  clear_has_min_horn_time();
  ::OPMessage::judgeItem* temp = min_horn_time_;
  min_horn_time_ = NULL;
  return temp;
}
inline void Judge40800::set_allocated_min_horn_time(::OPMessage::judgeItem* min_horn_time) {
  delete min_horn_time_;
  min_horn_time_ = min_horn_time;
  if (min_horn_time) {
    set_has_min_horn_time();
  } else {
    clear_has_min_horn_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40800.min_horn_time)
}

// optional .OPMessage.judgeItem min_turn_signal_time = 7;
inline bool Judge40800::has_min_turn_signal_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Judge40800::set_has_min_turn_signal_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Judge40800::clear_has_min_turn_signal_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Judge40800::clear_min_turn_signal_time() {
  if (min_turn_signal_time_ != NULL) min_turn_signal_time_->::OPMessage::judgeItem::Clear();
  clear_has_min_turn_signal_time();
}
inline const ::OPMessage::judgeItem& Judge40800::min_turn_signal_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40800.min_turn_signal_time)
  return min_turn_signal_time_ != NULL ? *min_turn_signal_time_ : *default_instance_->min_turn_signal_time_;
}
inline ::OPMessage::judgeItem* Judge40800::mutable_min_turn_signal_time() {
  set_has_min_turn_signal_time();
  if (min_turn_signal_time_ == NULL) min_turn_signal_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40800.min_turn_signal_time)
  return min_turn_signal_time_;
}
inline ::OPMessage::judgeItem* Judge40800::release_min_turn_signal_time() {
  clear_has_min_turn_signal_time();
  ::OPMessage::judgeItem* temp = min_turn_signal_time_;
  min_turn_signal_time_ = NULL;
  return temp;
}
inline void Judge40800::set_allocated_min_turn_signal_time(::OPMessage::judgeItem* min_turn_signal_time) {
  delete min_turn_signal_time_;
  min_turn_signal_time_ = min_turn_signal_time;
  if (min_turn_signal_time) {
    set_has_min_turn_signal_time();
  } else {
    clear_has_min_turn_signal_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40800.min_turn_signal_time)
}

// optional .OPMessage.judgeItem judge_mode = 8;
inline bool Judge40800::has_judge_mode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Judge40800::set_has_judge_mode() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Judge40800::clear_has_judge_mode() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Judge40800::clear_judge_mode() {
  if (judge_mode_ != NULL) judge_mode_->::OPMessage::judgeItem::Clear();
  clear_has_judge_mode();
}
inline const ::OPMessage::judgeItem& Judge40800::judge_mode() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40800.judge_mode)
  return judge_mode_ != NULL ? *judge_mode_ : *default_instance_->judge_mode_;
}
inline ::OPMessage::judgeItem* Judge40800::mutable_judge_mode() {
  set_has_judge_mode();
  if (judge_mode_ == NULL) judge_mode_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40800.judge_mode)
  return judge_mode_;
}
inline ::OPMessage::judgeItem* Judge40800::release_judge_mode() {
  clear_has_judge_mode();
  ::OPMessage::judgeItem* temp = judge_mode_;
  judge_mode_ = NULL;
  return temp;
}
inline void Judge40800::set_allocated_judge_mode(::OPMessage::judgeItem* judge_mode) {
  delete judge_mode_;
  judge_mode_ = judge_mode;
  if (judge_mode) {
    set_has_judge_mode();
  } else {
    clear_has_judge_mode();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40800.judge_mode)
}

// optional .OPMessage.judgeItem need_near_far_lamp_flash = 9;
inline bool Judge40800::has_need_near_far_lamp_flash() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Judge40800::set_has_need_near_far_lamp_flash() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Judge40800::clear_has_need_near_far_lamp_flash() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Judge40800::clear_need_near_far_lamp_flash() {
  if (need_near_far_lamp_flash_ != NULL) need_near_far_lamp_flash_->::OPMessage::judgeItem::Clear();
  clear_has_need_near_far_lamp_flash();
}
inline const ::OPMessage::judgeItem& Judge40800::need_near_far_lamp_flash() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40800.need_near_far_lamp_flash)
  return need_near_far_lamp_flash_ != NULL ? *need_near_far_lamp_flash_ : *default_instance_->need_near_far_lamp_flash_;
}
inline ::OPMessage::judgeItem* Judge40800::mutable_need_near_far_lamp_flash() {
  set_has_need_near_far_lamp_flash();
  if (need_near_far_lamp_flash_ == NULL) need_near_far_lamp_flash_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40800.need_near_far_lamp_flash)
  return need_near_far_lamp_flash_;
}
inline ::OPMessage::judgeItem* Judge40800::release_need_near_far_lamp_flash() {
  clear_has_need_near_far_lamp_flash();
  ::OPMessage::judgeItem* temp = need_near_far_lamp_flash_;
  need_near_far_lamp_flash_ = NULL;
  return temp;
}
inline void Judge40800::set_allocated_need_near_far_lamp_flash(::OPMessage::judgeItem* need_near_far_lamp_flash) {
  delete need_near_far_lamp_flash_;
  need_near_far_lamp_flash_ = need_near_far_lamp_flash;
  if (need_near_far_lamp_flash) {
    set_has_need_near_far_lamp_flash();
  } else {
    clear_has_need_near_far_lamp_flash();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40800.need_near_far_lamp_flash)
}

// optional .OPMessage.voiceItem vi_40800_start_exam = 10;
inline bool Judge40800::has_vi_40800_start_exam() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Judge40800::set_has_vi_40800_start_exam() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Judge40800::clear_has_vi_40800_start_exam() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Judge40800::clear_vi_40800_start_exam() {
  if (vi_40800_start_exam_ != NULL) vi_40800_start_exam_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40800_start_exam();
}
inline const ::OPMessage::voiceItem& Judge40800::vi_40800_start_exam() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40800.vi_40800_start_exam)
  return vi_40800_start_exam_ != NULL ? *vi_40800_start_exam_ : *default_instance_->vi_40800_start_exam_;
}
inline ::OPMessage::voiceItem* Judge40800::mutable_vi_40800_start_exam() {
  set_has_vi_40800_start_exam();
  if (vi_40800_start_exam_ == NULL) vi_40800_start_exam_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40800.vi_40800_start_exam)
  return vi_40800_start_exam_;
}
inline ::OPMessage::voiceItem* Judge40800::release_vi_40800_start_exam() {
  clear_has_vi_40800_start_exam();
  ::OPMessage::voiceItem* temp = vi_40800_start_exam_;
  vi_40800_start_exam_ = NULL;
  return temp;
}
inline void Judge40800::set_allocated_vi_40800_start_exam(::OPMessage::voiceItem* vi_40800_start_exam) {
  delete vi_40800_start_exam_;
  vi_40800_start_exam_ = vi_40800_start_exam;
  if (vi_40800_start_exam) {
    set_has_vi_40800_start_exam();
  } else {
    clear_has_vi_40800_start_exam();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40800.vi_40800_start_exam)
}

// optional .OPMessage.voiceItem vi_40800_end_exam = 11;
inline bool Judge40800::has_vi_40800_end_exam() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Judge40800::set_has_vi_40800_end_exam() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Judge40800::clear_has_vi_40800_end_exam() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Judge40800::clear_vi_40800_end_exam() {
  if (vi_40800_end_exam_ != NULL) vi_40800_end_exam_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40800_end_exam();
}
inline const ::OPMessage::voiceItem& Judge40800::vi_40800_end_exam() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40800.vi_40800_end_exam)
  return vi_40800_end_exam_ != NULL ? *vi_40800_end_exam_ : *default_instance_->vi_40800_end_exam_;
}
inline ::OPMessage::voiceItem* Judge40800::mutable_vi_40800_end_exam() {
  set_has_vi_40800_end_exam();
  if (vi_40800_end_exam_ == NULL) vi_40800_end_exam_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40800.vi_40800_end_exam)
  return vi_40800_end_exam_;
}
inline ::OPMessage::voiceItem* Judge40800::release_vi_40800_end_exam() {
  clear_has_vi_40800_end_exam();
  ::OPMessage::voiceItem* temp = vi_40800_end_exam_;
  vi_40800_end_exam_ = NULL;
  return temp;
}
inline void Judge40800::set_allocated_vi_40800_end_exam(::OPMessage::voiceItem* vi_40800_end_exam) {
  delete vi_40800_end_exam_;
  vi_40800_end_exam_ = vi_40800_end_exam;
  if (vi_40800_end_exam) {
    set_has_vi_40800_end_exam();
  } else {
    clear_has_vi_40800_end_exam();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40800.vi_40800_end_exam)
}

// optional .OPMessage.voiceItem vi_40800_horn_not_use = 12;
inline bool Judge40800::has_vi_40800_horn_not_use() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Judge40800::set_has_vi_40800_horn_not_use() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Judge40800::clear_has_vi_40800_horn_not_use() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Judge40800::clear_vi_40800_horn_not_use() {
  if (vi_40800_horn_not_use_ != NULL) vi_40800_horn_not_use_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40800_horn_not_use();
}
inline const ::OPMessage::voiceItem& Judge40800::vi_40800_horn_not_use() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40800.vi_40800_horn_not_use)
  return vi_40800_horn_not_use_ != NULL ? *vi_40800_horn_not_use_ : *default_instance_->vi_40800_horn_not_use_;
}
inline ::OPMessage::voiceItem* Judge40800::mutable_vi_40800_horn_not_use() {
  set_has_vi_40800_horn_not_use();
  if (vi_40800_horn_not_use_ == NULL) vi_40800_horn_not_use_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40800.vi_40800_horn_not_use)
  return vi_40800_horn_not_use_;
}
inline ::OPMessage::voiceItem* Judge40800::release_vi_40800_horn_not_use() {
  clear_has_vi_40800_horn_not_use();
  ::OPMessage::voiceItem* temp = vi_40800_horn_not_use_;
  vi_40800_horn_not_use_ = NULL;
  return temp;
}
inline void Judge40800::set_allocated_vi_40800_horn_not_use(::OPMessage::voiceItem* vi_40800_horn_not_use) {
  delete vi_40800_horn_not_use_;
  vi_40800_horn_not_use_ = vi_40800_horn_not_use;
  if (vi_40800_horn_not_use) {
    set_has_vi_40800_horn_not_use();
  } else {
    clear_has_vi_40800_horn_not_use();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40800.vi_40800_horn_not_use)
}

// optional .OPMessage.voiceItem vi_40800_turn_lamp_use_error = 13;
inline bool Judge40800::has_vi_40800_turn_lamp_use_error() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Judge40800::set_has_vi_40800_turn_lamp_use_error() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Judge40800::clear_has_vi_40800_turn_lamp_use_error() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Judge40800::clear_vi_40800_turn_lamp_use_error() {
  if (vi_40800_turn_lamp_use_error_ != NULL) vi_40800_turn_lamp_use_error_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40800_turn_lamp_use_error();
}
inline const ::OPMessage::voiceItem& Judge40800::vi_40800_turn_lamp_use_error() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40800.vi_40800_turn_lamp_use_error)
  return vi_40800_turn_lamp_use_error_ != NULL ? *vi_40800_turn_lamp_use_error_ : *default_instance_->vi_40800_turn_lamp_use_error_;
}
inline ::OPMessage::voiceItem* Judge40800::mutable_vi_40800_turn_lamp_use_error() {
  set_has_vi_40800_turn_lamp_use_error();
  if (vi_40800_turn_lamp_use_error_ == NULL) vi_40800_turn_lamp_use_error_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40800.vi_40800_turn_lamp_use_error)
  return vi_40800_turn_lamp_use_error_;
}
inline ::OPMessage::voiceItem* Judge40800::release_vi_40800_turn_lamp_use_error() {
  clear_has_vi_40800_turn_lamp_use_error();
  ::OPMessage::voiceItem* temp = vi_40800_turn_lamp_use_error_;
  vi_40800_turn_lamp_use_error_ = NULL;
  return temp;
}
inline void Judge40800::set_allocated_vi_40800_turn_lamp_use_error(::OPMessage::voiceItem* vi_40800_turn_lamp_use_error) {
  delete vi_40800_turn_lamp_use_error_;
  vi_40800_turn_lamp_use_error_ = vi_40800_turn_lamp_use_error;
  if (vi_40800_turn_lamp_use_error) {
    set_has_vi_40800_turn_lamp_use_error();
  } else {
    clear_has_vi_40800_turn_lamp_use_error();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40800.vi_40800_turn_lamp_use_error)
}

// optional .OPMessage.voiceItem vi_40800_turn_lamp_not_use = 14;
inline bool Judge40800::has_vi_40800_turn_lamp_not_use() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Judge40800::set_has_vi_40800_turn_lamp_not_use() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Judge40800::clear_has_vi_40800_turn_lamp_not_use() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Judge40800::clear_vi_40800_turn_lamp_not_use() {
  if (vi_40800_turn_lamp_not_use_ != NULL) vi_40800_turn_lamp_not_use_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40800_turn_lamp_not_use();
}
inline const ::OPMessage::voiceItem& Judge40800::vi_40800_turn_lamp_not_use() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40800.vi_40800_turn_lamp_not_use)
  return vi_40800_turn_lamp_not_use_ != NULL ? *vi_40800_turn_lamp_not_use_ : *default_instance_->vi_40800_turn_lamp_not_use_;
}
inline ::OPMessage::voiceItem* Judge40800::mutable_vi_40800_turn_lamp_not_use() {
  set_has_vi_40800_turn_lamp_not_use();
  if (vi_40800_turn_lamp_not_use_ == NULL) vi_40800_turn_lamp_not_use_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40800.vi_40800_turn_lamp_not_use)
  return vi_40800_turn_lamp_not_use_;
}
inline ::OPMessage::voiceItem* Judge40800::release_vi_40800_turn_lamp_not_use() {
  clear_has_vi_40800_turn_lamp_not_use();
  ::OPMessage::voiceItem* temp = vi_40800_turn_lamp_not_use_;
  vi_40800_turn_lamp_not_use_ = NULL;
  return temp;
}
inline void Judge40800::set_allocated_vi_40800_turn_lamp_not_use(::OPMessage::voiceItem* vi_40800_turn_lamp_not_use) {
  delete vi_40800_turn_lamp_not_use_;
  vi_40800_turn_lamp_not_use_ = vi_40800_turn_lamp_not_use;
  if (vi_40800_turn_lamp_not_use) {
    set_has_vi_40800_turn_lamp_not_use();
  } else {
    clear_has_vi_40800_turn_lamp_not_use();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40800.vi_40800_turn_lamp_not_use)
}

// optional .OPMessage.voiceItem vi_40800_not_slowdown = 15;
inline bool Judge40800::has_vi_40800_not_slowdown() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Judge40800::set_has_vi_40800_not_slowdown() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Judge40800::clear_has_vi_40800_not_slowdown() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Judge40800::clear_vi_40800_not_slowdown() {
  if (vi_40800_not_slowdown_ != NULL) vi_40800_not_slowdown_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40800_not_slowdown();
}
inline const ::OPMessage::voiceItem& Judge40800::vi_40800_not_slowdown() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40800.vi_40800_not_slowdown)
  return vi_40800_not_slowdown_ != NULL ? *vi_40800_not_slowdown_ : *default_instance_->vi_40800_not_slowdown_;
}
inline ::OPMessage::voiceItem* Judge40800::mutable_vi_40800_not_slowdown() {
  set_has_vi_40800_not_slowdown();
  if (vi_40800_not_slowdown_ == NULL) vi_40800_not_slowdown_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40800.vi_40800_not_slowdown)
  return vi_40800_not_slowdown_;
}
inline ::OPMessage::voiceItem* Judge40800::release_vi_40800_not_slowdown() {
  clear_has_vi_40800_not_slowdown();
  ::OPMessage::voiceItem* temp = vi_40800_not_slowdown_;
  vi_40800_not_slowdown_ = NULL;
  return temp;
}
inline void Judge40800::set_allocated_vi_40800_not_slowdown(::OPMessage::voiceItem* vi_40800_not_slowdown) {
  delete vi_40800_not_slowdown_;
  vi_40800_not_slowdown_ = vi_40800_not_slowdown;
  if (vi_40800_not_slowdown) {
    set_has_vi_40800_not_slowdown();
  } else {
    clear_has_vi_40800_not_slowdown();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40800.vi_40800_not_slowdown)
}

// -------------------------------------------------------------------

// Judge40900

// optional int32 itemCode = 1;
inline bool Judge40900::has_itemcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Judge40900::set_has_itemcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Judge40900::clear_has_itemcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Judge40900::clear_itemcode() {
  itemcode_ = 0;
  clear_has_itemcode();
}
inline ::google::protobuf::int32 Judge40900::itemcode() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40900.itemCode)
  return itemcode_;
}
inline void Judge40900::set_itemcode(::google::protobuf::int32 value) {
  set_has_itemcode();
  itemcode_ = value;
  // @@protoc_insertion_point(field_set:OPMessage.Judge40900.itemCode)
}

// optional string itemName = 2;
inline bool Judge40900::has_itemname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Judge40900::set_has_itemname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Judge40900::clear_has_itemname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Judge40900::clear_itemname() {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_->clear();
  }
  clear_has_itemname();
}
inline const ::std::string& Judge40900::itemname() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40900.itemName)
  return *itemname_;
}
inline void Judge40900::set_itemname(const ::std::string& value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
  // @@protoc_insertion_point(field_set:OPMessage.Judge40900.itemName)
}
inline void Judge40900::set_itemname(const char* value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
  // @@protoc_insertion_point(field_set_char:OPMessage.Judge40900.itemName)
}
inline void Judge40900::set_itemname(const char* value, size_t size) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OPMessage.Judge40900.itemName)
}
inline ::std::string* Judge40900::mutable_itemname() {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40900.itemName)
  return itemname_;
}
inline ::std::string* Judge40900::release_itemname() {
  clear_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = itemname_;
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Judge40900::set_allocated_itemname(::std::string* itemname) {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (itemname) {
    set_has_itemname();
    itemname_ = itemname;
  } else {
    clear_has_itemname();
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40900.itemName)
}

// optional .OPMessage.judgeItem max_time = 3;
inline bool Judge40900::has_max_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Judge40900::set_has_max_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Judge40900::clear_has_max_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Judge40900::clear_max_time() {
  if (max_time_ != NULL) max_time_->::OPMessage::judgeItem::Clear();
  clear_has_max_time();
}
inline const ::OPMessage::judgeItem& Judge40900::max_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40900.max_time)
  return max_time_ != NULL ? *max_time_ : *default_instance_->max_time_;
}
inline ::OPMessage::judgeItem* Judge40900::mutable_max_time() {
  set_has_max_time();
  if (max_time_ == NULL) max_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40900.max_time)
  return max_time_;
}
inline ::OPMessage::judgeItem* Judge40900::release_max_time() {
  clear_has_max_time();
  ::OPMessage::judgeItem* temp = max_time_;
  max_time_ = NULL;
  return temp;
}
inline void Judge40900::set_allocated_max_time(::OPMessage::judgeItem* max_time) {
  delete max_time_;
  max_time_ = max_time;
  if (max_time) {
    set_has_max_time();
  } else {
    clear_has_max_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40900.max_time)
}

// optional .OPMessage.judgeItem max_trigger_distance = 4;
inline bool Judge40900::has_max_trigger_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Judge40900::set_has_max_trigger_distance() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Judge40900::clear_has_max_trigger_distance() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Judge40900::clear_max_trigger_distance() {
  if (max_trigger_distance_ != NULL) max_trigger_distance_->::OPMessage::judgeItem::Clear();
  clear_has_max_trigger_distance();
}
inline const ::OPMessage::judgeItem& Judge40900::max_trigger_distance() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40900.max_trigger_distance)
  return max_trigger_distance_ != NULL ? *max_trigger_distance_ : *default_instance_->max_trigger_distance_;
}
inline ::OPMessage::judgeItem* Judge40900::mutable_max_trigger_distance() {
  set_has_max_trigger_distance();
  if (max_trigger_distance_ == NULL) max_trigger_distance_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40900.max_trigger_distance)
  return max_trigger_distance_;
}
inline ::OPMessage::judgeItem* Judge40900::release_max_trigger_distance() {
  clear_has_max_trigger_distance();
  ::OPMessage::judgeItem* temp = max_trigger_distance_;
  max_trigger_distance_ = NULL;
  return temp;
}
inline void Judge40900::set_allocated_max_trigger_distance(::OPMessage::judgeItem* max_trigger_distance) {
  delete max_trigger_distance_;
  max_trigger_distance_ = max_trigger_distance;
  if (max_trigger_distance) {
    set_has_max_trigger_distance();
  } else {
    clear_has_max_trigger_distance();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40900.max_trigger_distance)
}

// optional .OPMessage.judgeItem max_speed = 5;
inline bool Judge40900::has_max_speed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Judge40900::set_has_max_speed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Judge40900::clear_has_max_speed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Judge40900::clear_max_speed() {
  if (max_speed_ != NULL) max_speed_->::OPMessage::judgeItem::Clear();
  clear_has_max_speed();
}
inline const ::OPMessage::judgeItem& Judge40900::max_speed() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40900.max_speed)
  return max_speed_ != NULL ? *max_speed_ : *default_instance_->max_speed_;
}
inline ::OPMessage::judgeItem* Judge40900::mutable_max_speed() {
  set_has_max_speed();
  if (max_speed_ == NULL) max_speed_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40900.max_speed)
  return max_speed_;
}
inline ::OPMessage::judgeItem* Judge40900::release_max_speed() {
  clear_has_max_speed();
  ::OPMessage::judgeItem* temp = max_speed_;
  max_speed_ = NULL;
  return temp;
}
inline void Judge40900::set_allocated_max_speed(::OPMessage::judgeItem* max_speed) {
  delete max_speed_;
  max_speed_ = max_speed;
  if (max_speed) {
    set_has_max_speed();
  } else {
    clear_has_max_speed();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40900.max_speed)
}

// optional .OPMessage.judgeItem min_horn_time = 6;
inline bool Judge40900::has_min_horn_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Judge40900::set_has_min_horn_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Judge40900::clear_has_min_horn_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Judge40900::clear_min_horn_time() {
  if (min_horn_time_ != NULL) min_horn_time_->::OPMessage::judgeItem::Clear();
  clear_has_min_horn_time();
}
inline const ::OPMessage::judgeItem& Judge40900::min_horn_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40900.min_horn_time)
  return min_horn_time_ != NULL ? *min_horn_time_ : *default_instance_->min_horn_time_;
}
inline ::OPMessage::judgeItem* Judge40900::mutable_min_horn_time() {
  set_has_min_horn_time();
  if (min_horn_time_ == NULL) min_horn_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40900.min_horn_time)
  return min_horn_time_;
}
inline ::OPMessage::judgeItem* Judge40900::release_min_horn_time() {
  clear_has_min_horn_time();
  ::OPMessage::judgeItem* temp = min_horn_time_;
  min_horn_time_ = NULL;
  return temp;
}
inline void Judge40900::set_allocated_min_horn_time(::OPMessage::judgeItem* min_horn_time) {
  delete min_horn_time_;
  min_horn_time_ = min_horn_time;
  if (min_horn_time) {
    set_has_min_horn_time();
  } else {
    clear_has_min_horn_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40900.min_horn_time)
}

// optional .OPMessage.judgeItem min_turn_signal_time = 7;
inline bool Judge40900::has_min_turn_signal_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Judge40900::set_has_min_turn_signal_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Judge40900::clear_has_min_turn_signal_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Judge40900::clear_min_turn_signal_time() {
  if (min_turn_signal_time_ != NULL) min_turn_signal_time_->::OPMessage::judgeItem::Clear();
  clear_has_min_turn_signal_time();
}
inline const ::OPMessage::judgeItem& Judge40900::min_turn_signal_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40900.min_turn_signal_time)
  return min_turn_signal_time_ != NULL ? *min_turn_signal_time_ : *default_instance_->min_turn_signal_time_;
}
inline ::OPMessage::judgeItem* Judge40900::mutable_min_turn_signal_time() {
  set_has_min_turn_signal_time();
  if (min_turn_signal_time_ == NULL) min_turn_signal_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40900.min_turn_signal_time)
  return min_turn_signal_time_;
}
inline ::OPMessage::judgeItem* Judge40900::release_min_turn_signal_time() {
  clear_has_min_turn_signal_time();
  ::OPMessage::judgeItem* temp = min_turn_signal_time_;
  min_turn_signal_time_ = NULL;
  return temp;
}
inline void Judge40900::set_allocated_min_turn_signal_time(::OPMessage::judgeItem* min_turn_signal_time) {
  delete min_turn_signal_time_;
  min_turn_signal_time_ = min_turn_signal_time;
  if (min_turn_signal_time) {
    set_has_min_turn_signal_time();
  } else {
    clear_has_min_turn_signal_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40900.min_turn_signal_time)
}

// optional .OPMessage.judgeItem judge_mode = 8;
inline bool Judge40900::has_judge_mode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Judge40900::set_has_judge_mode() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Judge40900::clear_has_judge_mode() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Judge40900::clear_judge_mode() {
  if (judge_mode_ != NULL) judge_mode_->::OPMessage::judgeItem::Clear();
  clear_has_judge_mode();
}
inline const ::OPMessage::judgeItem& Judge40900::judge_mode() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40900.judge_mode)
  return judge_mode_ != NULL ? *judge_mode_ : *default_instance_->judge_mode_;
}
inline ::OPMessage::judgeItem* Judge40900::mutable_judge_mode() {
  set_has_judge_mode();
  if (judge_mode_ == NULL) judge_mode_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40900.judge_mode)
  return judge_mode_;
}
inline ::OPMessage::judgeItem* Judge40900::release_judge_mode() {
  clear_has_judge_mode();
  ::OPMessage::judgeItem* temp = judge_mode_;
  judge_mode_ = NULL;
  return temp;
}
inline void Judge40900::set_allocated_judge_mode(::OPMessage::judgeItem* judge_mode) {
  delete judge_mode_;
  judge_mode_ = judge_mode;
  if (judge_mode) {
    set_has_judge_mode();
  } else {
    clear_has_judge_mode();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40900.judge_mode)
}

// optional .OPMessage.judgeItem need_near_far_lamp_flash = 9;
inline bool Judge40900::has_need_near_far_lamp_flash() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Judge40900::set_has_need_near_far_lamp_flash() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Judge40900::clear_has_need_near_far_lamp_flash() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Judge40900::clear_need_near_far_lamp_flash() {
  if (need_near_far_lamp_flash_ != NULL) need_near_far_lamp_flash_->::OPMessage::judgeItem::Clear();
  clear_has_need_near_far_lamp_flash();
}
inline const ::OPMessage::judgeItem& Judge40900::need_near_far_lamp_flash() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40900.need_near_far_lamp_flash)
  return need_near_far_lamp_flash_ != NULL ? *need_near_far_lamp_flash_ : *default_instance_->need_near_far_lamp_flash_;
}
inline ::OPMessage::judgeItem* Judge40900::mutable_need_near_far_lamp_flash() {
  set_has_need_near_far_lamp_flash();
  if (need_near_far_lamp_flash_ == NULL) need_near_far_lamp_flash_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40900.need_near_far_lamp_flash)
  return need_near_far_lamp_flash_;
}
inline ::OPMessage::judgeItem* Judge40900::release_need_near_far_lamp_flash() {
  clear_has_need_near_far_lamp_flash();
  ::OPMessage::judgeItem* temp = need_near_far_lamp_flash_;
  need_near_far_lamp_flash_ = NULL;
  return temp;
}
inline void Judge40900::set_allocated_need_near_far_lamp_flash(::OPMessage::judgeItem* need_near_far_lamp_flash) {
  delete need_near_far_lamp_flash_;
  need_near_far_lamp_flash_ = need_near_far_lamp_flash;
  if (need_near_far_lamp_flash) {
    set_has_need_near_far_lamp_flash();
  } else {
    clear_has_need_near_far_lamp_flash();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40900.need_near_far_lamp_flash)
}

// optional .OPMessage.voiceItem vi_40900_start_exam = 10;
inline bool Judge40900::has_vi_40900_start_exam() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Judge40900::set_has_vi_40900_start_exam() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Judge40900::clear_has_vi_40900_start_exam() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Judge40900::clear_vi_40900_start_exam() {
  if (vi_40900_start_exam_ != NULL) vi_40900_start_exam_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40900_start_exam();
}
inline const ::OPMessage::voiceItem& Judge40900::vi_40900_start_exam() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40900.vi_40900_start_exam)
  return vi_40900_start_exam_ != NULL ? *vi_40900_start_exam_ : *default_instance_->vi_40900_start_exam_;
}
inline ::OPMessage::voiceItem* Judge40900::mutable_vi_40900_start_exam() {
  set_has_vi_40900_start_exam();
  if (vi_40900_start_exam_ == NULL) vi_40900_start_exam_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40900.vi_40900_start_exam)
  return vi_40900_start_exam_;
}
inline ::OPMessage::voiceItem* Judge40900::release_vi_40900_start_exam() {
  clear_has_vi_40900_start_exam();
  ::OPMessage::voiceItem* temp = vi_40900_start_exam_;
  vi_40900_start_exam_ = NULL;
  return temp;
}
inline void Judge40900::set_allocated_vi_40900_start_exam(::OPMessage::voiceItem* vi_40900_start_exam) {
  delete vi_40900_start_exam_;
  vi_40900_start_exam_ = vi_40900_start_exam;
  if (vi_40900_start_exam) {
    set_has_vi_40900_start_exam();
  } else {
    clear_has_vi_40900_start_exam();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40900.vi_40900_start_exam)
}

// optional .OPMessage.voiceItem vi_40900_end_exam = 11;
inline bool Judge40900::has_vi_40900_end_exam() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Judge40900::set_has_vi_40900_end_exam() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Judge40900::clear_has_vi_40900_end_exam() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Judge40900::clear_vi_40900_end_exam() {
  if (vi_40900_end_exam_ != NULL) vi_40900_end_exam_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40900_end_exam();
}
inline const ::OPMessage::voiceItem& Judge40900::vi_40900_end_exam() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40900.vi_40900_end_exam)
  return vi_40900_end_exam_ != NULL ? *vi_40900_end_exam_ : *default_instance_->vi_40900_end_exam_;
}
inline ::OPMessage::voiceItem* Judge40900::mutable_vi_40900_end_exam() {
  set_has_vi_40900_end_exam();
  if (vi_40900_end_exam_ == NULL) vi_40900_end_exam_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40900.vi_40900_end_exam)
  return vi_40900_end_exam_;
}
inline ::OPMessage::voiceItem* Judge40900::release_vi_40900_end_exam() {
  clear_has_vi_40900_end_exam();
  ::OPMessage::voiceItem* temp = vi_40900_end_exam_;
  vi_40900_end_exam_ = NULL;
  return temp;
}
inline void Judge40900::set_allocated_vi_40900_end_exam(::OPMessage::voiceItem* vi_40900_end_exam) {
  delete vi_40900_end_exam_;
  vi_40900_end_exam_ = vi_40900_end_exam;
  if (vi_40900_end_exam) {
    set_has_vi_40900_end_exam();
  } else {
    clear_has_vi_40900_end_exam();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40900.vi_40900_end_exam)
}

// optional .OPMessage.voiceItem vi_40900_horn_not_use = 12;
inline bool Judge40900::has_vi_40900_horn_not_use() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Judge40900::set_has_vi_40900_horn_not_use() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Judge40900::clear_has_vi_40900_horn_not_use() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Judge40900::clear_vi_40900_horn_not_use() {
  if (vi_40900_horn_not_use_ != NULL) vi_40900_horn_not_use_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40900_horn_not_use();
}
inline const ::OPMessage::voiceItem& Judge40900::vi_40900_horn_not_use() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40900.vi_40900_horn_not_use)
  return vi_40900_horn_not_use_ != NULL ? *vi_40900_horn_not_use_ : *default_instance_->vi_40900_horn_not_use_;
}
inline ::OPMessage::voiceItem* Judge40900::mutable_vi_40900_horn_not_use() {
  set_has_vi_40900_horn_not_use();
  if (vi_40900_horn_not_use_ == NULL) vi_40900_horn_not_use_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40900.vi_40900_horn_not_use)
  return vi_40900_horn_not_use_;
}
inline ::OPMessage::voiceItem* Judge40900::release_vi_40900_horn_not_use() {
  clear_has_vi_40900_horn_not_use();
  ::OPMessage::voiceItem* temp = vi_40900_horn_not_use_;
  vi_40900_horn_not_use_ = NULL;
  return temp;
}
inline void Judge40900::set_allocated_vi_40900_horn_not_use(::OPMessage::voiceItem* vi_40900_horn_not_use) {
  delete vi_40900_horn_not_use_;
  vi_40900_horn_not_use_ = vi_40900_horn_not_use;
  if (vi_40900_horn_not_use) {
    set_has_vi_40900_horn_not_use();
  } else {
    clear_has_vi_40900_horn_not_use();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40900.vi_40900_horn_not_use)
}

// optional .OPMessage.voiceItem vi_40900_turn_lamp_use_error = 13;
inline bool Judge40900::has_vi_40900_turn_lamp_use_error() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Judge40900::set_has_vi_40900_turn_lamp_use_error() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Judge40900::clear_has_vi_40900_turn_lamp_use_error() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Judge40900::clear_vi_40900_turn_lamp_use_error() {
  if (vi_40900_turn_lamp_use_error_ != NULL) vi_40900_turn_lamp_use_error_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40900_turn_lamp_use_error();
}
inline const ::OPMessage::voiceItem& Judge40900::vi_40900_turn_lamp_use_error() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40900.vi_40900_turn_lamp_use_error)
  return vi_40900_turn_lamp_use_error_ != NULL ? *vi_40900_turn_lamp_use_error_ : *default_instance_->vi_40900_turn_lamp_use_error_;
}
inline ::OPMessage::voiceItem* Judge40900::mutable_vi_40900_turn_lamp_use_error() {
  set_has_vi_40900_turn_lamp_use_error();
  if (vi_40900_turn_lamp_use_error_ == NULL) vi_40900_turn_lamp_use_error_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40900.vi_40900_turn_lamp_use_error)
  return vi_40900_turn_lamp_use_error_;
}
inline ::OPMessage::voiceItem* Judge40900::release_vi_40900_turn_lamp_use_error() {
  clear_has_vi_40900_turn_lamp_use_error();
  ::OPMessage::voiceItem* temp = vi_40900_turn_lamp_use_error_;
  vi_40900_turn_lamp_use_error_ = NULL;
  return temp;
}
inline void Judge40900::set_allocated_vi_40900_turn_lamp_use_error(::OPMessage::voiceItem* vi_40900_turn_lamp_use_error) {
  delete vi_40900_turn_lamp_use_error_;
  vi_40900_turn_lamp_use_error_ = vi_40900_turn_lamp_use_error;
  if (vi_40900_turn_lamp_use_error) {
    set_has_vi_40900_turn_lamp_use_error();
  } else {
    clear_has_vi_40900_turn_lamp_use_error();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40900.vi_40900_turn_lamp_use_error)
}

// optional .OPMessage.voiceItem vi_40900_turn_lamp_not_use = 14;
inline bool Judge40900::has_vi_40900_turn_lamp_not_use() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Judge40900::set_has_vi_40900_turn_lamp_not_use() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Judge40900::clear_has_vi_40900_turn_lamp_not_use() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Judge40900::clear_vi_40900_turn_lamp_not_use() {
  if (vi_40900_turn_lamp_not_use_ != NULL) vi_40900_turn_lamp_not_use_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40900_turn_lamp_not_use();
}
inline const ::OPMessage::voiceItem& Judge40900::vi_40900_turn_lamp_not_use() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40900.vi_40900_turn_lamp_not_use)
  return vi_40900_turn_lamp_not_use_ != NULL ? *vi_40900_turn_lamp_not_use_ : *default_instance_->vi_40900_turn_lamp_not_use_;
}
inline ::OPMessage::voiceItem* Judge40900::mutable_vi_40900_turn_lamp_not_use() {
  set_has_vi_40900_turn_lamp_not_use();
  if (vi_40900_turn_lamp_not_use_ == NULL) vi_40900_turn_lamp_not_use_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40900.vi_40900_turn_lamp_not_use)
  return vi_40900_turn_lamp_not_use_;
}
inline ::OPMessage::voiceItem* Judge40900::release_vi_40900_turn_lamp_not_use() {
  clear_has_vi_40900_turn_lamp_not_use();
  ::OPMessage::voiceItem* temp = vi_40900_turn_lamp_not_use_;
  vi_40900_turn_lamp_not_use_ = NULL;
  return temp;
}
inline void Judge40900::set_allocated_vi_40900_turn_lamp_not_use(::OPMessage::voiceItem* vi_40900_turn_lamp_not_use) {
  delete vi_40900_turn_lamp_not_use_;
  vi_40900_turn_lamp_not_use_ = vi_40900_turn_lamp_not_use;
  if (vi_40900_turn_lamp_not_use) {
    set_has_vi_40900_turn_lamp_not_use();
  } else {
    clear_has_vi_40900_turn_lamp_not_use();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40900.vi_40900_turn_lamp_not_use)
}

// optional .OPMessage.voiceItem vi_40900_not_slowdown = 15;
inline bool Judge40900::has_vi_40900_not_slowdown() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Judge40900::set_has_vi_40900_not_slowdown() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Judge40900::clear_has_vi_40900_not_slowdown() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Judge40900::clear_vi_40900_not_slowdown() {
  if (vi_40900_not_slowdown_ != NULL) vi_40900_not_slowdown_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40900_not_slowdown();
}
inline const ::OPMessage::voiceItem& Judge40900::vi_40900_not_slowdown() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40900.vi_40900_not_slowdown)
  return vi_40900_not_slowdown_ != NULL ? *vi_40900_not_slowdown_ : *default_instance_->vi_40900_not_slowdown_;
}
inline ::OPMessage::voiceItem* Judge40900::mutable_vi_40900_not_slowdown() {
  set_has_vi_40900_not_slowdown();
  if (vi_40900_not_slowdown_ == NULL) vi_40900_not_slowdown_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40900.vi_40900_not_slowdown)
  return vi_40900_not_slowdown_;
}
inline ::OPMessage::voiceItem* Judge40900::release_vi_40900_not_slowdown() {
  clear_has_vi_40900_not_slowdown();
  ::OPMessage::voiceItem* temp = vi_40900_not_slowdown_;
  vi_40900_not_slowdown_ = NULL;
  return temp;
}
inline void Judge40900::set_allocated_vi_40900_not_slowdown(::OPMessage::voiceItem* vi_40900_not_slowdown) {
  delete vi_40900_not_slowdown_;
  vi_40900_not_slowdown_ = vi_40900_not_slowdown;
  if (vi_40900_not_slowdown) {
    set_has_vi_40900_not_slowdown();
  } else {
    clear_has_vi_40900_not_slowdown();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40900.vi_40900_not_slowdown)
}

// -------------------------------------------------------------------

// Judge41400

// optional int32 itemCode = 1;
inline bool Judge41400::has_itemcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Judge41400::set_has_itemcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Judge41400::clear_has_itemcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Judge41400::clear_itemcode() {
  itemcode_ = 0;
  clear_has_itemcode();
}
inline ::google::protobuf::int32 Judge41400::itemcode() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41400.itemCode)
  return itemcode_;
}
inline void Judge41400::set_itemcode(::google::protobuf::int32 value) {
  set_has_itemcode();
  itemcode_ = value;
  // @@protoc_insertion_point(field_set:OPMessage.Judge41400.itemCode)
}

// optional string itemName = 2;
inline bool Judge41400::has_itemname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Judge41400::set_has_itemname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Judge41400::clear_has_itemname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Judge41400::clear_itemname() {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_->clear();
  }
  clear_has_itemname();
}
inline const ::std::string& Judge41400::itemname() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41400.itemName)
  return *itemname_;
}
inline void Judge41400::set_itemname(const ::std::string& value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
  // @@protoc_insertion_point(field_set:OPMessage.Judge41400.itemName)
}
inline void Judge41400::set_itemname(const char* value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
  // @@protoc_insertion_point(field_set_char:OPMessage.Judge41400.itemName)
}
inline void Judge41400::set_itemname(const char* value, size_t size) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OPMessage.Judge41400.itemName)
}
inline ::std::string* Judge41400::mutable_itemname() {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41400.itemName)
  return itemname_;
}
inline ::std::string* Judge41400::release_itemname() {
  clear_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = itemname_;
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Judge41400::set_allocated_itemname(::std::string* itemname) {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (itemname) {
    set_has_itemname();
    itemname_ = itemname;
  } else {
    clear_has_itemname();
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41400.itemName)
}

// optional .OPMessage.judgeItem max_time = 3;
inline bool Judge41400::has_max_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Judge41400::set_has_max_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Judge41400::clear_has_max_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Judge41400::clear_max_time() {
  if (max_time_ != NULL) max_time_->::OPMessage::judgeItem::Clear();
  clear_has_max_time();
}
inline const ::OPMessage::judgeItem& Judge41400::max_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41400.max_time)
  return max_time_ != NULL ? *max_time_ : *default_instance_->max_time_;
}
inline ::OPMessage::judgeItem* Judge41400::mutable_max_time() {
  set_has_max_time();
  if (max_time_ == NULL) max_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41400.max_time)
  return max_time_;
}
inline ::OPMessage::judgeItem* Judge41400::release_max_time() {
  clear_has_max_time();
  ::OPMessage::judgeItem* temp = max_time_;
  max_time_ = NULL;
  return temp;
}
inline void Judge41400::set_allocated_max_time(::OPMessage::judgeItem* max_time) {
  delete max_time_;
  max_time_ = max_time;
  if (max_time) {
    set_has_max_time();
  } else {
    clear_has_max_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41400.max_time)
}

// optional .OPMessage.judgeItem max_trigger_distance = 4;
inline bool Judge41400::has_max_trigger_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Judge41400::set_has_max_trigger_distance() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Judge41400::clear_has_max_trigger_distance() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Judge41400::clear_max_trigger_distance() {
  if (max_trigger_distance_ != NULL) max_trigger_distance_->::OPMessage::judgeItem::Clear();
  clear_has_max_trigger_distance();
}
inline const ::OPMessage::judgeItem& Judge41400::max_trigger_distance() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41400.max_trigger_distance)
  return max_trigger_distance_ != NULL ? *max_trigger_distance_ : *default_instance_->max_trigger_distance_;
}
inline ::OPMessage::judgeItem* Judge41400::mutable_max_trigger_distance() {
  set_has_max_trigger_distance();
  if (max_trigger_distance_ == NULL) max_trigger_distance_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41400.max_trigger_distance)
  return max_trigger_distance_;
}
inline ::OPMessage::judgeItem* Judge41400::release_max_trigger_distance() {
  clear_has_max_trigger_distance();
  ::OPMessage::judgeItem* temp = max_trigger_distance_;
  max_trigger_distance_ = NULL;
  return temp;
}
inline void Judge41400::set_allocated_max_trigger_distance(::OPMessage::judgeItem* max_trigger_distance) {
  delete max_trigger_distance_;
  max_trigger_distance_ = max_trigger_distance;
  if (max_trigger_distance) {
    set_has_max_trigger_distance();
  } else {
    clear_has_max_trigger_distance();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41400.max_trigger_distance)
}

// optional .OPMessage.judgeItem min_turn_signal_time = 5;
inline bool Judge41400::has_min_turn_signal_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Judge41400::set_has_min_turn_signal_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Judge41400::clear_has_min_turn_signal_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Judge41400::clear_min_turn_signal_time() {
  if (min_turn_signal_time_ != NULL) min_turn_signal_time_->::OPMessage::judgeItem::Clear();
  clear_has_min_turn_signal_time();
}
inline const ::OPMessage::judgeItem& Judge41400::min_turn_signal_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41400.min_turn_signal_time)
  return min_turn_signal_time_ != NULL ? *min_turn_signal_time_ : *default_instance_->min_turn_signal_time_;
}
inline ::OPMessage::judgeItem* Judge41400::mutable_min_turn_signal_time() {
  set_has_min_turn_signal_time();
  if (min_turn_signal_time_ == NULL) min_turn_signal_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41400.min_turn_signal_time)
  return min_turn_signal_time_;
}
inline ::OPMessage::judgeItem* Judge41400::release_min_turn_signal_time() {
  clear_has_min_turn_signal_time();
  ::OPMessage::judgeItem* temp = min_turn_signal_time_;
  min_turn_signal_time_ = NULL;
  return temp;
}
inline void Judge41400::set_allocated_min_turn_signal_time(::OPMessage::judgeItem* min_turn_signal_time) {
  delete min_turn_signal_time_;
  min_turn_signal_time_ = min_turn_signal_time;
  if (min_turn_signal_time) {
    set_has_min_turn_signal_time();
  } else {
    clear_has_min_turn_signal_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41400.min_turn_signal_time)
}

// optional .OPMessage.judgeItem lane_width = 6;
inline bool Judge41400::has_lane_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Judge41400::set_has_lane_width() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Judge41400::clear_has_lane_width() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Judge41400::clear_lane_width() {
  if (lane_width_ != NULL) lane_width_->::OPMessage::judgeItem::Clear();
  clear_has_lane_width();
}
inline const ::OPMessage::judgeItem& Judge41400::lane_width() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41400.lane_width)
  return lane_width_ != NULL ? *lane_width_ : *default_instance_->lane_width_;
}
inline ::OPMessage::judgeItem* Judge41400::mutable_lane_width() {
  set_has_lane_width();
  if (lane_width_ == NULL) lane_width_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41400.lane_width)
  return lane_width_;
}
inline ::OPMessage::judgeItem* Judge41400::release_lane_width() {
  clear_has_lane_width();
  ::OPMessage::judgeItem* temp = lane_width_;
  lane_width_ = NULL;
  return temp;
}
inline void Judge41400::set_allocated_lane_width(::OPMessage::judgeItem* lane_width) {
  delete lane_width_;
  lane_width_ = lane_width;
  if (lane_width) {
    set_has_lane_width();
  } else {
    clear_has_lane_width();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41400.lane_width)
}

// optional .OPMessage.judgeItem check_change_lane = 7;
inline bool Judge41400::has_check_change_lane() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Judge41400::set_has_check_change_lane() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Judge41400::clear_has_check_change_lane() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Judge41400::clear_check_change_lane() {
  if (check_change_lane_ != NULL) check_change_lane_->::OPMessage::judgeItem::Clear();
  clear_has_check_change_lane();
}
inline const ::OPMessage::judgeItem& Judge41400::check_change_lane() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41400.check_change_lane)
  return check_change_lane_ != NULL ? *check_change_lane_ : *default_instance_->check_change_lane_;
}
inline ::OPMessage::judgeItem* Judge41400::mutable_check_change_lane() {
  set_has_check_change_lane();
  if (check_change_lane_ == NULL) check_change_lane_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41400.check_change_lane)
  return check_change_lane_;
}
inline ::OPMessage::judgeItem* Judge41400::release_check_change_lane() {
  clear_has_check_change_lane();
  ::OPMessage::judgeItem* temp = check_change_lane_;
  check_change_lane_ = NULL;
  return temp;
}
inline void Judge41400::set_allocated_check_change_lane(::OPMessage::judgeItem* check_change_lane) {
  delete check_change_lane_;
  check_change_lane_ = check_change_lane;
  if (check_change_lane) {
    set_has_check_change_lane();
  } else {
    clear_has_check_change_lane();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41400.check_change_lane)
}

// optional .OPMessage.judgeItem start_change_lane_time_delay = 8;
inline bool Judge41400::has_start_change_lane_time_delay() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Judge41400::set_has_start_change_lane_time_delay() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Judge41400::clear_has_start_change_lane_time_delay() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Judge41400::clear_start_change_lane_time_delay() {
  if (start_change_lane_time_delay_ != NULL) start_change_lane_time_delay_->::OPMessage::judgeItem::Clear();
  clear_has_start_change_lane_time_delay();
}
inline const ::OPMessage::judgeItem& Judge41400::start_change_lane_time_delay() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41400.start_change_lane_time_delay)
  return start_change_lane_time_delay_ != NULL ? *start_change_lane_time_delay_ : *default_instance_->start_change_lane_time_delay_;
}
inline ::OPMessage::judgeItem* Judge41400::mutable_start_change_lane_time_delay() {
  set_has_start_change_lane_time_delay();
  if (start_change_lane_time_delay_ == NULL) start_change_lane_time_delay_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41400.start_change_lane_time_delay)
  return start_change_lane_time_delay_;
}
inline ::OPMessage::judgeItem* Judge41400::release_start_change_lane_time_delay() {
  clear_has_start_change_lane_time_delay();
  ::OPMessage::judgeItem* temp = start_change_lane_time_delay_;
  start_change_lane_time_delay_ = NULL;
  return temp;
}
inline void Judge41400::set_allocated_start_change_lane_time_delay(::OPMessage::judgeItem* start_change_lane_time_delay) {
  delete start_change_lane_time_delay_;
  start_change_lane_time_delay_ = start_change_lane_time_delay;
  if (start_change_lane_time_delay) {
    set_has_start_change_lane_time_delay();
  } else {
    clear_has_start_change_lane_time_delay();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41400.start_change_lane_time_delay)
}

// optional .OPMessage.judgeItem start_change_lane_distance_delay = 9;
inline bool Judge41400::has_start_change_lane_distance_delay() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Judge41400::set_has_start_change_lane_distance_delay() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Judge41400::clear_has_start_change_lane_distance_delay() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Judge41400::clear_start_change_lane_distance_delay() {
  if (start_change_lane_distance_delay_ != NULL) start_change_lane_distance_delay_->::OPMessage::judgeItem::Clear();
  clear_has_start_change_lane_distance_delay();
}
inline const ::OPMessage::judgeItem& Judge41400::start_change_lane_distance_delay() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41400.start_change_lane_distance_delay)
  return start_change_lane_distance_delay_ != NULL ? *start_change_lane_distance_delay_ : *default_instance_->start_change_lane_distance_delay_;
}
inline ::OPMessage::judgeItem* Judge41400::mutable_start_change_lane_distance_delay() {
  set_has_start_change_lane_distance_delay();
  if (start_change_lane_distance_delay_ == NULL) start_change_lane_distance_delay_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41400.start_change_lane_distance_delay)
  return start_change_lane_distance_delay_;
}
inline ::OPMessage::judgeItem* Judge41400::release_start_change_lane_distance_delay() {
  clear_has_start_change_lane_distance_delay();
  ::OPMessage::judgeItem* temp = start_change_lane_distance_delay_;
  start_change_lane_distance_delay_ = NULL;
  return temp;
}
inline void Judge41400::set_allocated_start_change_lane_distance_delay(::OPMessage::judgeItem* start_change_lane_distance_delay) {
  delete start_change_lane_distance_delay_;
  start_change_lane_distance_delay_ = start_change_lane_distance_delay;
  if (start_change_lane_distance_delay) {
    set_has_start_change_lane_distance_delay();
  } else {
    clear_has_start_change_lane_distance_delay();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41400.start_change_lane_distance_delay)
}

// optional .OPMessage.judgeItem finish_change_lane_time_delay = 10;
inline bool Judge41400::has_finish_change_lane_time_delay() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Judge41400::set_has_finish_change_lane_time_delay() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Judge41400::clear_has_finish_change_lane_time_delay() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Judge41400::clear_finish_change_lane_time_delay() {
  if (finish_change_lane_time_delay_ != NULL) finish_change_lane_time_delay_->::OPMessage::judgeItem::Clear();
  clear_has_finish_change_lane_time_delay();
}
inline const ::OPMessage::judgeItem& Judge41400::finish_change_lane_time_delay() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41400.finish_change_lane_time_delay)
  return finish_change_lane_time_delay_ != NULL ? *finish_change_lane_time_delay_ : *default_instance_->finish_change_lane_time_delay_;
}
inline ::OPMessage::judgeItem* Judge41400::mutable_finish_change_lane_time_delay() {
  set_has_finish_change_lane_time_delay();
  if (finish_change_lane_time_delay_ == NULL) finish_change_lane_time_delay_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41400.finish_change_lane_time_delay)
  return finish_change_lane_time_delay_;
}
inline ::OPMessage::judgeItem* Judge41400::release_finish_change_lane_time_delay() {
  clear_has_finish_change_lane_time_delay();
  ::OPMessage::judgeItem* temp = finish_change_lane_time_delay_;
  finish_change_lane_time_delay_ = NULL;
  return temp;
}
inline void Judge41400::set_allocated_finish_change_lane_time_delay(::OPMessage::judgeItem* finish_change_lane_time_delay) {
  delete finish_change_lane_time_delay_;
  finish_change_lane_time_delay_ = finish_change_lane_time_delay;
  if (finish_change_lane_time_delay) {
    set_has_finish_change_lane_time_delay();
  } else {
    clear_has_finish_change_lane_time_delay();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41400.finish_change_lane_time_delay)
}

// optional .OPMessage.judgeItem finish_change_lane_distance_delay = 11;
inline bool Judge41400::has_finish_change_lane_distance_delay() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Judge41400::set_has_finish_change_lane_distance_delay() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Judge41400::clear_has_finish_change_lane_distance_delay() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Judge41400::clear_finish_change_lane_distance_delay() {
  if (finish_change_lane_distance_delay_ != NULL) finish_change_lane_distance_delay_->::OPMessage::judgeItem::Clear();
  clear_has_finish_change_lane_distance_delay();
}
inline const ::OPMessage::judgeItem& Judge41400::finish_change_lane_distance_delay() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41400.finish_change_lane_distance_delay)
  return finish_change_lane_distance_delay_ != NULL ? *finish_change_lane_distance_delay_ : *default_instance_->finish_change_lane_distance_delay_;
}
inline ::OPMessage::judgeItem* Judge41400::mutable_finish_change_lane_distance_delay() {
  set_has_finish_change_lane_distance_delay();
  if (finish_change_lane_distance_delay_ == NULL) finish_change_lane_distance_delay_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41400.finish_change_lane_distance_delay)
  return finish_change_lane_distance_delay_;
}
inline ::OPMessage::judgeItem* Judge41400::release_finish_change_lane_distance_delay() {
  clear_has_finish_change_lane_distance_delay();
  ::OPMessage::judgeItem* temp = finish_change_lane_distance_delay_;
  finish_change_lane_distance_delay_ = NULL;
  return temp;
}
inline void Judge41400::set_allocated_finish_change_lane_distance_delay(::OPMessage::judgeItem* finish_change_lane_distance_delay) {
  delete finish_change_lane_distance_delay_;
  finish_change_lane_distance_delay_ = finish_change_lane_distance_delay;
  if (finish_change_lane_distance_delay) {
    set_has_finish_change_lane_distance_delay();
  } else {
    clear_has_finish_change_lane_distance_delay();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41400.finish_change_lane_distance_delay)
}

// optional .OPMessage.judgeItem need_near_far_lamp_flash = 12;
inline bool Judge41400::has_need_near_far_lamp_flash() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Judge41400::set_has_need_near_far_lamp_flash() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Judge41400::clear_has_need_near_far_lamp_flash() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Judge41400::clear_need_near_far_lamp_flash() {
  if (need_near_far_lamp_flash_ != NULL) need_near_far_lamp_flash_->::OPMessage::judgeItem::Clear();
  clear_has_need_near_far_lamp_flash();
}
inline const ::OPMessage::judgeItem& Judge41400::need_near_far_lamp_flash() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41400.need_near_far_lamp_flash)
  return need_near_far_lamp_flash_ != NULL ? *need_near_far_lamp_flash_ : *default_instance_->need_near_far_lamp_flash_;
}
inline ::OPMessage::judgeItem* Judge41400::mutable_need_near_far_lamp_flash() {
  set_has_need_near_far_lamp_flash();
  if (need_near_far_lamp_flash_ == NULL) need_near_far_lamp_flash_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41400.need_near_far_lamp_flash)
  return need_near_far_lamp_flash_;
}
inline ::OPMessage::judgeItem* Judge41400::release_need_near_far_lamp_flash() {
  clear_has_need_near_far_lamp_flash();
  ::OPMessage::judgeItem* temp = need_near_far_lamp_flash_;
  need_near_far_lamp_flash_ = NULL;
  return temp;
}
inline void Judge41400::set_allocated_need_near_far_lamp_flash(::OPMessage::judgeItem* need_near_far_lamp_flash) {
  delete need_near_far_lamp_flash_;
  need_near_far_lamp_flash_ = need_near_far_lamp_flash;
  if (need_near_far_lamp_flash) {
    set_has_need_near_far_lamp_flash();
  } else {
    clear_has_need_near_far_lamp_flash();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41400.need_near_far_lamp_flash)
}

// optional .OPMessage.judgeItem need_return_lane = 13;
inline bool Judge41400::has_need_return_lane() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Judge41400::set_has_need_return_lane() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Judge41400::clear_has_need_return_lane() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Judge41400::clear_need_return_lane() {
  if (need_return_lane_ != NULL) need_return_lane_->::OPMessage::judgeItem::Clear();
  clear_has_need_return_lane();
}
inline const ::OPMessage::judgeItem& Judge41400::need_return_lane() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41400.need_return_lane)
  return need_return_lane_ != NULL ? *need_return_lane_ : *default_instance_->need_return_lane_;
}
inline ::OPMessage::judgeItem* Judge41400::mutable_need_return_lane() {
  set_has_need_return_lane();
  if (need_return_lane_ == NULL) need_return_lane_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41400.need_return_lane)
  return need_return_lane_;
}
inline ::OPMessage::judgeItem* Judge41400::release_need_return_lane() {
  clear_has_need_return_lane();
  ::OPMessage::judgeItem* temp = need_return_lane_;
  need_return_lane_ = NULL;
  return temp;
}
inline void Judge41400::set_allocated_need_return_lane(::OPMessage::judgeItem* need_return_lane) {
  delete need_return_lane_;
  need_return_lane_ = need_return_lane;
  if (need_return_lane) {
    set_has_need_return_lane();
  } else {
    clear_has_need_return_lane();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41400.need_return_lane)
}

// optional .OPMessage.judgeItem return_lane_time_dealy = 14;
inline bool Judge41400::has_return_lane_time_dealy() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Judge41400::set_has_return_lane_time_dealy() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Judge41400::clear_has_return_lane_time_dealy() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Judge41400::clear_return_lane_time_dealy() {
  if (return_lane_time_dealy_ != NULL) return_lane_time_dealy_->::OPMessage::judgeItem::Clear();
  clear_has_return_lane_time_dealy();
}
inline const ::OPMessage::judgeItem& Judge41400::return_lane_time_dealy() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41400.return_lane_time_dealy)
  return return_lane_time_dealy_ != NULL ? *return_lane_time_dealy_ : *default_instance_->return_lane_time_dealy_;
}
inline ::OPMessage::judgeItem* Judge41400::mutable_return_lane_time_dealy() {
  set_has_return_lane_time_dealy();
  if (return_lane_time_dealy_ == NULL) return_lane_time_dealy_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41400.return_lane_time_dealy)
  return return_lane_time_dealy_;
}
inline ::OPMessage::judgeItem* Judge41400::release_return_lane_time_dealy() {
  clear_has_return_lane_time_dealy();
  ::OPMessage::judgeItem* temp = return_lane_time_dealy_;
  return_lane_time_dealy_ = NULL;
  return temp;
}
inline void Judge41400::set_allocated_return_lane_time_dealy(::OPMessage::judgeItem* return_lane_time_dealy) {
  delete return_lane_time_dealy_;
  return_lane_time_dealy_ = return_lane_time_dealy;
  if (return_lane_time_dealy) {
    set_has_return_lane_time_dealy();
  } else {
    clear_has_return_lane_time_dealy();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41400.return_lane_time_dealy)
}

// optional .OPMessage.voiceItem vi_41400_start_exam = 15;
inline bool Judge41400::has_vi_41400_start_exam() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Judge41400::set_has_vi_41400_start_exam() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Judge41400::clear_has_vi_41400_start_exam() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Judge41400::clear_vi_41400_start_exam() {
  if (vi_41400_start_exam_ != NULL) vi_41400_start_exam_->::OPMessage::voiceItem::Clear();
  clear_has_vi_41400_start_exam();
}
inline const ::OPMessage::voiceItem& Judge41400::vi_41400_start_exam() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41400.vi_41400_start_exam)
  return vi_41400_start_exam_ != NULL ? *vi_41400_start_exam_ : *default_instance_->vi_41400_start_exam_;
}
inline ::OPMessage::voiceItem* Judge41400::mutable_vi_41400_start_exam() {
  set_has_vi_41400_start_exam();
  if (vi_41400_start_exam_ == NULL) vi_41400_start_exam_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41400.vi_41400_start_exam)
  return vi_41400_start_exam_;
}
inline ::OPMessage::voiceItem* Judge41400::release_vi_41400_start_exam() {
  clear_has_vi_41400_start_exam();
  ::OPMessage::voiceItem* temp = vi_41400_start_exam_;
  vi_41400_start_exam_ = NULL;
  return temp;
}
inline void Judge41400::set_allocated_vi_41400_start_exam(::OPMessage::voiceItem* vi_41400_start_exam) {
  delete vi_41400_start_exam_;
  vi_41400_start_exam_ = vi_41400_start_exam;
  if (vi_41400_start_exam) {
    set_has_vi_41400_start_exam();
  } else {
    clear_has_vi_41400_start_exam();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41400.vi_41400_start_exam)
}

// optional .OPMessage.voiceItem vi_41400_end_exam = 16;
inline bool Judge41400::has_vi_41400_end_exam() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Judge41400::set_has_vi_41400_end_exam() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Judge41400::clear_has_vi_41400_end_exam() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Judge41400::clear_vi_41400_end_exam() {
  if (vi_41400_end_exam_ != NULL) vi_41400_end_exam_->::OPMessage::voiceItem::Clear();
  clear_has_vi_41400_end_exam();
}
inline const ::OPMessage::voiceItem& Judge41400::vi_41400_end_exam() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41400.vi_41400_end_exam)
  return vi_41400_end_exam_ != NULL ? *vi_41400_end_exam_ : *default_instance_->vi_41400_end_exam_;
}
inline ::OPMessage::voiceItem* Judge41400::mutable_vi_41400_end_exam() {
  set_has_vi_41400_end_exam();
  if (vi_41400_end_exam_ == NULL) vi_41400_end_exam_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41400.vi_41400_end_exam)
  return vi_41400_end_exam_;
}
inline ::OPMessage::voiceItem* Judge41400::release_vi_41400_end_exam() {
  clear_has_vi_41400_end_exam();
  ::OPMessage::voiceItem* temp = vi_41400_end_exam_;
  vi_41400_end_exam_ = NULL;
  return temp;
}
inline void Judge41400::set_allocated_vi_41400_end_exam(::OPMessage::voiceItem* vi_41400_end_exam) {
  delete vi_41400_end_exam_;
  vi_41400_end_exam_ = vi_41400_end_exam;
  if (vi_41400_end_exam) {
    set_has_vi_41400_end_exam();
  } else {
    clear_has_vi_41400_end_exam();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41400.vi_41400_end_exam)
}

// optional .OPMessage.voiceItem vi_41400_driving_in_one_lane = 17;
inline bool Judge41400::has_vi_41400_driving_in_one_lane() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Judge41400::set_has_vi_41400_driving_in_one_lane() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Judge41400::clear_has_vi_41400_driving_in_one_lane() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Judge41400::clear_vi_41400_driving_in_one_lane() {
  if (vi_41400_driving_in_one_lane_ != NULL) vi_41400_driving_in_one_lane_->::OPMessage::voiceItem::Clear();
  clear_has_vi_41400_driving_in_one_lane();
}
inline const ::OPMessage::voiceItem& Judge41400::vi_41400_driving_in_one_lane() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41400.vi_41400_driving_in_one_lane)
  return vi_41400_driving_in_one_lane_ != NULL ? *vi_41400_driving_in_one_lane_ : *default_instance_->vi_41400_driving_in_one_lane_;
}
inline ::OPMessage::voiceItem* Judge41400::mutable_vi_41400_driving_in_one_lane() {
  set_has_vi_41400_driving_in_one_lane();
  if (vi_41400_driving_in_one_lane_ == NULL) vi_41400_driving_in_one_lane_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41400.vi_41400_driving_in_one_lane)
  return vi_41400_driving_in_one_lane_;
}
inline ::OPMessage::voiceItem* Judge41400::release_vi_41400_driving_in_one_lane() {
  clear_has_vi_41400_driving_in_one_lane();
  ::OPMessage::voiceItem* temp = vi_41400_driving_in_one_lane_;
  vi_41400_driving_in_one_lane_ = NULL;
  return temp;
}
inline void Judge41400::set_allocated_vi_41400_driving_in_one_lane(::OPMessage::voiceItem* vi_41400_driving_in_one_lane) {
  delete vi_41400_driving_in_one_lane_;
  vi_41400_driving_in_one_lane_ = vi_41400_driving_in_one_lane;
  if (vi_41400_driving_in_one_lane) {
    set_has_vi_41400_driving_in_one_lane();
  } else {
    clear_has_vi_41400_driving_in_one_lane();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41400.vi_41400_driving_in_one_lane)
}

// optional .OPMessage.voiceItem vi_41400_notify_change_lane = 18;
inline bool Judge41400::has_vi_41400_notify_change_lane() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Judge41400::set_has_vi_41400_notify_change_lane() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Judge41400::clear_has_vi_41400_notify_change_lane() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Judge41400::clear_vi_41400_notify_change_lane() {
  if (vi_41400_notify_change_lane_ != NULL) vi_41400_notify_change_lane_->::OPMessage::voiceItem::Clear();
  clear_has_vi_41400_notify_change_lane();
}
inline const ::OPMessage::voiceItem& Judge41400::vi_41400_notify_change_lane() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41400.vi_41400_notify_change_lane)
  return vi_41400_notify_change_lane_ != NULL ? *vi_41400_notify_change_lane_ : *default_instance_->vi_41400_notify_change_lane_;
}
inline ::OPMessage::voiceItem* Judge41400::mutable_vi_41400_notify_change_lane() {
  set_has_vi_41400_notify_change_lane();
  if (vi_41400_notify_change_lane_ == NULL) vi_41400_notify_change_lane_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41400.vi_41400_notify_change_lane)
  return vi_41400_notify_change_lane_;
}
inline ::OPMessage::voiceItem* Judge41400::release_vi_41400_notify_change_lane() {
  clear_has_vi_41400_notify_change_lane();
  ::OPMessage::voiceItem* temp = vi_41400_notify_change_lane_;
  vi_41400_notify_change_lane_ = NULL;
  return temp;
}
inline void Judge41400::set_allocated_vi_41400_notify_change_lane(::OPMessage::voiceItem* vi_41400_notify_change_lane) {
  delete vi_41400_notify_change_lane_;
  vi_41400_notify_change_lane_ = vi_41400_notify_change_lane;
  if (vi_41400_notify_change_lane) {
    set_has_vi_41400_notify_change_lane();
  } else {
    clear_has_vi_41400_notify_change_lane();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41400.vi_41400_notify_change_lane)
}

// optional .OPMessage.voiceItem vi_41400_notify_return_lane = 19;
inline bool Judge41400::has_vi_41400_notify_return_lane() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Judge41400::set_has_vi_41400_notify_return_lane() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Judge41400::clear_has_vi_41400_notify_return_lane() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Judge41400::clear_vi_41400_notify_return_lane() {
  if (vi_41400_notify_return_lane_ != NULL) vi_41400_notify_return_lane_->::OPMessage::voiceItem::Clear();
  clear_has_vi_41400_notify_return_lane();
}
inline const ::OPMessage::voiceItem& Judge41400::vi_41400_notify_return_lane() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41400.vi_41400_notify_return_lane)
  return vi_41400_notify_return_lane_ != NULL ? *vi_41400_notify_return_lane_ : *default_instance_->vi_41400_notify_return_lane_;
}
inline ::OPMessage::voiceItem* Judge41400::mutable_vi_41400_notify_return_lane() {
  set_has_vi_41400_notify_return_lane();
  if (vi_41400_notify_return_lane_ == NULL) vi_41400_notify_return_lane_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41400.vi_41400_notify_return_lane)
  return vi_41400_notify_return_lane_;
}
inline ::OPMessage::voiceItem* Judge41400::release_vi_41400_notify_return_lane() {
  clear_has_vi_41400_notify_return_lane();
  ::OPMessage::voiceItem* temp = vi_41400_notify_return_lane_;
  vi_41400_notify_return_lane_ = NULL;
  return temp;
}
inline void Judge41400::set_allocated_vi_41400_notify_return_lane(::OPMessage::voiceItem* vi_41400_notify_return_lane) {
  delete vi_41400_notify_return_lane_;
  vi_41400_notify_return_lane_ = vi_41400_notify_return_lane;
  if (vi_41400_notify_return_lane) {
    set_has_vi_41400_notify_return_lane();
  } else {
    clear_has_vi_41400_notify_return_lane();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41400.vi_41400_notify_return_lane)
}

// optional .OPMessage.voiceItem vi_41400_not_finish = 20;
inline bool Judge41400::has_vi_41400_not_finish() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Judge41400::set_has_vi_41400_not_finish() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Judge41400::clear_has_vi_41400_not_finish() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Judge41400::clear_vi_41400_not_finish() {
  if (vi_41400_not_finish_ != NULL) vi_41400_not_finish_->::OPMessage::voiceItem::Clear();
  clear_has_vi_41400_not_finish();
}
inline const ::OPMessage::voiceItem& Judge41400::vi_41400_not_finish() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41400.vi_41400_not_finish)
  return vi_41400_not_finish_ != NULL ? *vi_41400_not_finish_ : *default_instance_->vi_41400_not_finish_;
}
inline ::OPMessage::voiceItem* Judge41400::mutable_vi_41400_not_finish() {
  set_has_vi_41400_not_finish();
  if (vi_41400_not_finish_ == NULL) vi_41400_not_finish_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41400.vi_41400_not_finish)
  return vi_41400_not_finish_;
}
inline ::OPMessage::voiceItem* Judge41400::release_vi_41400_not_finish() {
  clear_has_vi_41400_not_finish();
  ::OPMessage::voiceItem* temp = vi_41400_not_finish_;
  vi_41400_not_finish_ = NULL;
  return temp;
}
inline void Judge41400::set_allocated_vi_41400_not_finish(::OPMessage::voiceItem* vi_41400_not_finish) {
  delete vi_41400_not_finish_;
  vi_41400_not_finish_ = vi_41400_not_finish;
  if (vi_41400_not_finish) {
    set_has_vi_41400_not_finish();
  } else {
    clear_has_vi_41400_not_finish();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41400.vi_41400_not_finish)
}

// optional .OPMessage.voiceItem vi_41400_change_lane_error = 21;
inline bool Judge41400::has_vi_41400_change_lane_error() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Judge41400::set_has_vi_41400_change_lane_error() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Judge41400::clear_has_vi_41400_change_lane_error() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Judge41400::clear_vi_41400_change_lane_error() {
  if (vi_41400_change_lane_error_ != NULL) vi_41400_change_lane_error_->::OPMessage::voiceItem::Clear();
  clear_has_vi_41400_change_lane_error();
}
inline const ::OPMessage::voiceItem& Judge41400::vi_41400_change_lane_error() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41400.vi_41400_change_lane_error)
  return vi_41400_change_lane_error_ != NULL ? *vi_41400_change_lane_error_ : *default_instance_->vi_41400_change_lane_error_;
}
inline ::OPMessage::voiceItem* Judge41400::mutable_vi_41400_change_lane_error() {
  set_has_vi_41400_change_lane_error();
  if (vi_41400_change_lane_error_ == NULL) vi_41400_change_lane_error_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41400.vi_41400_change_lane_error)
  return vi_41400_change_lane_error_;
}
inline ::OPMessage::voiceItem* Judge41400::release_vi_41400_change_lane_error() {
  clear_has_vi_41400_change_lane_error();
  ::OPMessage::voiceItem* temp = vi_41400_change_lane_error_;
  vi_41400_change_lane_error_ = NULL;
  return temp;
}
inline void Judge41400::set_allocated_vi_41400_change_lane_error(::OPMessage::voiceItem* vi_41400_change_lane_error) {
  delete vi_41400_change_lane_error_;
  vi_41400_change_lane_error_ = vi_41400_change_lane_error;
  if (vi_41400_change_lane_error) {
    set_has_vi_41400_change_lane_error();
  } else {
    clear_has_vi_41400_change_lane_error();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41400.vi_41400_change_lane_error)
}

// optional .OPMessage.voiceItem vi_41400_return_lane_error = 22;
inline bool Judge41400::has_vi_41400_return_lane_error() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Judge41400::set_has_vi_41400_return_lane_error() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Judge41400::clear_has_vi_41400_return_lane_error() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Judge41400::clear_vi_41400_return_lane_error() {
  if (vi_41400_return_lane_error_ != NULL) vi_41400_return_lane_error_->::OPMessage::voiceItem::Clear();
  clear_has_vi_41400_return_lane_error();
}
inline const ::OPMessage::voiceItem& Judge41400::vi_41400_return_lane_error() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41400.vi_41400_return_lane_error)
  return vi_41400_return_lane_error_ != NULL ? *vi_41400_return_lane_error_ : *default_instance_->vi_41400_return_lane_error_;
}
inline ::OPMessage::voiceItem* Judge41400::mutable_vi_41400_return_lane_error() {
  set_has_vi_41400_return_lane_error();
  if (vi_41400_return_lane_error_ == NULL) vi_41400_return_lane_error_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41400.vi_41400_return_lane_error)
  return vi_41400_return_lane_error_;
}
inline ::OPMessage::voiceItem* Judge41400::release_vi_41400_return_lane_error() {
  clear_has_vi_41400_return_lane_error();
  ::OPMessage::voiceItem* temp = vi_41400_return_lane_error_;
  vi_41400_return_lane_error_ = NULL;
  return temp;
}
inline void Judge41400::set_allocated_vi_41400_return_lane_error(::OPMessage::voiceItem* vi_41400_return_lane_error) {
  delete vi_41400_return_lane_error_;
  vi_41400_return_lane_error_ = vi_41400_return_lane_error;
  if (vi_41400_return_lane_error) {
    set_has_vi_41400_return_lane_error();
  } else {
    clear_has_vi_41400_return_lane_error();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41400.vi_41400_return_lane_error)
}

// optional .OPMessage.voiceItem vi_41400_turn_lamp_use_error = 23;
inline bool Judge41400::has_vi_41400_turn_lamp_use_error() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Judge41400::set_has_vi_41400_turn_lamp_use_error() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Judge41400::clear_has_vi_41400_turn_lamp_use_error() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Judge41400::clear_vi_41400_turn_lamp_use_error() {
  if (vi_41400_turn_lamp_use_error_ != NULL) vi_41400_turn_lamp_use_error_->::OPMessage::voiceItem::Clear();
  clear_has_vi_41400_turn_lamp_use_error();
}
inline const ::OPMessage::voiceItem& Judge41400::vi_41400_turn_lamp_use_error() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41400.vi_41400_turn_lamp_use_error)
  return vi_41400_turn_lamp_use_error_ != NULL ? *vi_41400_turn_lamp_use_error_ : *default_instance_->vi_41400_turn_lamp_use_error_;
}
inline ::OPMessage::voiceItem* Judge41400::mutable_vi_41400_turn_lamp_use_error() {
  set_has_vi_41400_turn_lamp_use_error();
  if (vi_41400_turn_lamp_use_error_ == NULL) vi_41400_turn_lamp_use_error_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41400.vi_41400_turn_lamp_use_error)
  return vi_41400_turn_lamp_use_error_;
}
inline ::OPMessage::voiceItem* Judge41400::release_vi_41400_turn_lamp_use_error() {
  clear_has_vi_41400_turn_lamp_use_error();
  ::OPMessage::voiceItem* temp = vi_41400_turn_lamp_use_error_;
  vi_41400_turn_lamp_use_error_ = NULL;
  return temp;
}
inline void Judge41400::set_allocated_vi_41400_turn_lamp_use_error(::OPMessage::voiceItem* vi_41400_turn_lamp_use_error) {
  delete vi_41400_turn_lamp_use_error_;
  vi_41400_turn_lamp_use_error_ = vi_41400_turn_lamp_use_error;
  if (vi_41400_turn_lamp_use_error) {
    set_has_vi_41400_turn_lamp_use_error();
  } else {
    clear_has_vi_41400_turn_lamp_use_error();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41400.vi_41400_turn_lamp_use_error)
}

// optional .OPMessage.voiceItem vi_41400_not_keep_enough_distance = 24;
inline bool Judge41400::has_vi_41400_not_keep_enough_distance() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Judge41400::set_has_vi_41400_not_keep_enough_distance() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Judge41400::clear_has_vi_41400_not_keep_enough_distance() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Judge41400::clear_vi_41400_not_keep_enough_distance() {
  if (vi_41400_not_keep_enough_distance_ != NULL) vi_41400_not_keep_enough_distance_->::OPMessage::voiceItem::Clear();
  clear_has_vi_41400_not_keep_enough_distance();
}
inline const ::OPMessage::voiceItem& Judge41400::vi_41400_not_keep_enough_distance() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41400.vi_41400_not_keep_enough_distance)
  return vi_41400_not_keep_enough_distance_ != NULL ? *vi_41400_not_keep_enough_distance_ : *default_instance_->vi_41400_not_keep_enough_distance_;
}
inline ::OPMessage::voiceItem* Judge41400::mutable_vi_41400_not_keep_enough_distance() {
  set_has_vi_41400_not_keep_enough_distance();
  if (vi_41400_not_keep_enough_distance_ == NULL) vi_41400_not_keep_enough_distance_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41400.vi_41400_not_keep_enough_distance)
  return vi_41400_not_keep_enough_distance_;
}
inline ::OPMessage::voiceItem* Judge41400::release_vi_41400_not_keep_enough_distance() {
  clear_has_vi_41400_not_keep_enough_distance();
  ::OPMessage::voiceItem* temp = vi_41400_not_keep_enough_distance_;
  vi_41400_not_keep_enough_distance_ = NULL;
  return temp;
}
inline void Judge41400::set_allocated_vi_41400_not_keep_enough_distance(::OPMessage::voiceItem* vi_41400_not_keep_enough_distance) {
  delete vi_41400_not_keep_enough_distance_;
  vi_41400_not_keep_enough_distance_ = vi_41400_not_keep_enough_distance;
  if (vi_41400_not_keep_enough_distance) {
    set_has_vi_41400_not_keep_enough_distance();
  } else {
    clear_has_vi_41400_not_keep_enough_distance();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41400.vi_41400_not_keep_enough_distance)
}

// optional .OPMessage.voiceItem vi_41400_turn_lamp_not_use = 25;
inline bool Judge41400::has_vi_41400_turn_lamp_not_use() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Judge41400::set_has_vi_41400_turn_lamp_not_use() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Judge41400::clear_has_vi_41400_turn_lamp_not_use() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Judge41400::clear_vi_41400_turn_lamp_not_use() {
  if (vi_41400_turn_lamp_not_use_ != NULL) vi_41400_turn_lamp_not_use_->::OPMessage::voiceItem::Clear();
  clear_has_vi_41400_turn_lamp_not_use();
}
inline const ::OPMessage::voiceItem& Judge41400::vi_41400_turn_lamp_not_use() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41400.vi_41400_turn_lamp_not_use)
  return vi_41400_turn_lamp_not_use_ != NULL ? *vi_41400_turn_lamp_not_use_ : *default_instance_->vi_41400_turn_lamp_not_use_;
}
inline ::OPMessage::voiceItem* Judge41400::mutable_vi_41400_turn_lamp_not_use() {
  set_has_vi_41400_turn_lamp_not_use();
  if (vi_41400_turn_lamp_not_use_ == NULL) vi_41400_turn_lamp_not_use_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41400.vi_41400_turn_lamp_not_use)
  return vi_41400_turn_lamp_not_use_;
}
inline ::OPMessage::voiceItem* Judge41400::release_vi_41400_turn_lamp_not_use() {
  clear_has_vi_41400_turn_lamp_not_use();
  ::OPMessage::voiceItem* temp = vi_41400_turn_lamp_not_use_;
  vi_41400_turn_lamp_not_use_ = NULL;
  return temp;
}
inline void Judge41400::set_allocated_vi_41400_turn_lamp_not_use(::OPMessage::voiceItem* vi_41400_turn_lamp_not_use) {
  delete vi_41400_turn_lamp_not_use_;
  vi_41400_turn_lamp_not_use_ = vi_41400_turn_lamp_not_use;
  if (vi_41400_turn_lamp_not_use) {
    set_has_vi_41400_turn_lamp_not_use();
  } else {
    clear_has_vi_41400_turn_lamp_not_use();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41400.vi_41400_turn_lamp_not_use)
}

// optional .OPMessage.voiceItem vi_41400_not_reach_min_speed = 26;
inline bool Judge41400::has_vi_41400_not_reach_min_speed() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Judge41400::set_has_vi_41400_not_reach_min_speed() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Judge41400::clear_has_vi_41400_not_reach_min_speed() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Judge41400::clear_vi_41400_not_reach_min_speed() {
  if (vi_41400_not_reach_min_speed_ != NULL) vi_41400_not_reach_min_speed_->::OPMessage::voiceItem::Clear();
  clear_has_vi_41400_not_reach_min_speed();
}
inline const ::OPMessage::voiceItem& Judge41400::vi_41400_not_reach_min_speed() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41400.vi_41400_not_reach_min_speed)
  return vi_41400_not_reach_min_speed_ != NULL ? *vi_41400_not_reach_min_speed_ : *default_instance_->vi_41400_not_reach_min_speed_;
}
inline ::OPMessage::voiceItem* Judge41400::mutable_vi_41400_not_reach_min_speed() {
  set_has_vi_41400_not_reach_min_speed();
  if (vi_41400_not_reach_min_speed_ == NULL) vi_41400_not_reach_min_speed_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41400.vi_41400_not_reach_min_speed)
  return vi_41400_not_reach_min_speed_;
}
inline ::OPMessage::voiceItem* Judge41400::release_vi_41400_not_reach_min_speed() {
  clear_has_vi_41400_not_reach_min_speed();
  ::OPMessage::voiceItem* temp = vi_41400_not_reach_min_speed_;
  vi_41400_not_reach_min_speed_ = NULL;
  return temp;
}
inline void Judge41400::set_allocated_vi_41400_not_reach_min_speed(::OPMessage::voiceItem* vi_41400_not_reach_min_speed) {
  delete vi_41400_not_reach_min_speed_;
  vi_41400_not_reach_min_speed_ = vi_41400_not_reach_min_speed;
  if (vi_41400_not_reach_min_speed) {
    set_has_vi_41400_not_reach_min_speed();
  } else {
    clear_has_vi_41400_not_reach_min_speed();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41400.vi_41400_not_reach_min_speed)
}

// -------------------------------------------------------------------

// Judge40500

// optional int32 itemCode = 1;
inline bool Judge40500::has_itemcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Judge40500::set_has_itemcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Judge40500::clear_has_itemcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Judge40500::clear_itemcode() {
  itemcode_ = 0;
  clear_has_itemcode();
}
inline ::google::protobuf::int32 Judge40500::itemcode() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40500.itemCode)
  return itemcode_;
}
inline void Judge40500::set_itemcode(::google::protobuf::int32 value) {
  set_has_itemcode();
  itemcode_ = value;
  // @@protoc_insertion_point(field_set:OPMessage.Judge40500.itemCode)
}

// optional string itemName = 2;
inline bool Judge40500::has_itemname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Judge40500::set_has_itemname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Judge40500::clear_has_itemname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Judge40500::clear_itemname() {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_->clear();
  }
  clear_has_itemname();
}
inline const ::std::string& Judge40500::itemname() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40500.itemName)
  return *itemname_;
}
inline void Judge40500::set_itemname(const ::std::string& value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
  // @@protoc_insertion_point(field_set:OPMessage.Judge40500.itemName)
}
inline void Judge40500::set_itemname(const char* value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
  // @@protoc_insertion_point(field_set_char:OPMessage.Judge40500.itemName)
}
inline void Judge40500::set_itemname(const char* value, size_t size) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OPMessage.Judge40500.itemName)
}
inline ::std::string* Judge40500::mutable_itemname() {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40500.itemName)
  return itemname_;
}
inline ::std::string* Judge40500::release_itemname() {
  clear_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = itemname_;
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Judge40500::set_allocated_itemname(::std::string* itemname) {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (itemname) {
    set_has_itemname();
    itemname_ = itemname;
  } else {
    clear_has_itemname();
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40500.itemName)
}

// optional .OPMessage.judgeItem max_time = 3;
inline bool Judge40500::has_max_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Judge40500::set_has_max_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Judge40500::clear_has_max_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Judge40500::clear_max_time() {
  if (max_time_ != NULL) max_time_->::OPMessage::judgeItem::Clear();
  clear_has_max_time();
}
inline const ::OPMessage::judgeItem& Judge40500::max_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40500.max_time)
  return max_time_ != NULL ? *max_time_ : *default_instance_->max_time_;
}
inline ::OPMessage::judgeItem* Judge40500::mutable_max_time() {
  set_has_max_time();
  if (max_time_ == NULL) max_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40500.max_time)
  return max_time_;
}
inline ::OPMessage::judgeItem* Judge40500::release_max_time() {
  clear_has_max_time();
  ::OPMessage::judgeItem* temp = max_time_;
  max_time_ = NULL;
  return temp;
}
inline void Judge40500::set_allocated_max_time(::OPMessage::judgeItem* max_time) {
  delete max_time_;
  max_time_ = max_time;
  if (max_time) {
    set_has_max_time();
  } else {
    clear_has_max_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40500.max_time)
}

// optional .OPMessage.judgeItem max_trigger_distance = 4;
inline bool Judge40500::has_max_trigger_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Judge40500::set_has_max_trigger_distance() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Judge40500::clear_has_max_trigger_distance() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Judge40500::clear_max_trigger_distance() {
  if (max_trigger_distance_ != NULL) max_trigger_distance_->::OPMessage::judgeItem::Clear();
  clear_has_max_trigger_distance();
}
inline const ::OPMessage::judgeItem& Judge40500::max_trigger_distance() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40500.max_trigger_distance)
  return max_trigger_distance_ != NULL ? *max_trigger_distance_ : *default_instance_->max_trigger_distance_;
}
inline ::OPMessage::judgeItem* Judge40500::mutable_max_trigger_distance() {
  set_has_max_trigger_distance();
  if (max_trigger_distance_ == NULL) max_trigger_distance_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40500.max_trigger_distance)
  return max_trigger_distance_;
}
inline ::OPMessage::judgeItem* Judge40500::release_max_trigger_distance() {
  clear_has_max_trigger_distance();
  ::OPMessage::judgeItem* temp = max_trigger_distance_;
  max_trigger_distance_ = NULL;
  return temp;
}
inline void Judge40500::set_allocated_max_trigger_distance(::OPMessage::judgeItem* max_trigger_distance) {
  delete max_trigger_distance_;
  max_trigger_distance_ = max_trigger_distance;
  if (max_trigger_distance) {
    set_has_max_trigger_distance();
  } else {
    clear_has_max_trigger_distance();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40500.max_trigger_distance)
}

// optional .OPMessage.judgeItem min_turn_signal_time = 5;
inline bool Judge40500::has_min_turn_signal_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Judge40500::set_has_min_turn_signal_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Judge40500::clear_has_min_turn_signal_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Judge40500::clear_min_turn_signal_time() {
  if (min_turn_signal_time_ != NULL) min_turn_signal_time_->::OPMessage::judgeItem::Clear();
  clear_has_min_turn_signal_time();
}
inline const ::OPMessage::judgeItem& Judge40500::min_turn_signal_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40500.min_turn_signal_time)
  return min_turn_signal_time_ != NULL ? *min_turn_signal_time_ : *default_instance_->min_turn_signal_time_;
}
inline ::OPMessage::judgeItem* Judge40500::mutable_min_turn_signal_time() {
  set_has_min_turn_signal_time();
  if (min_turn_signal_time_ == NULL) min_turn_signal_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40500.min_turn_signal_time)
  return min_turn_signal_time_;
}
inline ::OPMessage::judgeItem* Judge40500::release_min_turn_signal_time() {
  clear_has_min_turn_signal_time();
  ::OPMessage::judgeItem* temp = min_turn_signal_time_;
  min_turn_signal_time_ = NULL;
  return temp;
}
inline void Judge40500::set_allocated_min_turn_signal_time(::OPMessage::judgeItem* min_turn_signal_time) {
  delete min_turn_signal_time_;
  min_turn_signal_time_ = min_turn_signal_time;
  if (min_turn_signal_time) {
    set_has_min_turn_signal_time();
  } else {
    clear_has_min_turn_signal_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40500.min_turn_signal_time)
}

// optional .OPMessage.judgeItem lane_width = 6;
inline bool Judge40500::has_lane_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Judge40500::set_has_lane_width() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Judge40500::clear_has_lane_width() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Judge40500::clear_lane_width() {
  if (lane_width_ != NULL) lane_width_->::OPMessage::judgeItem::Clear();
  clear_has_lane_width();
}
inline const ::OPMessage::judgeItem& Judge40500::lane_width() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40500.lane_width)
  return lane_width_ != NULL ? *lane_width_ : *default_instance_->lane_width_;
}
inline ::OPMessage::judgeItem* Judge40500::mutable_lane_width() {
  set_has_lane_width();
  if (lane_width_ == NULL) lane_width_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40500.lane_width)
  return lane_width_;
}
inline ::OPMessage::judgeItem* Judge40500::release_lane_width() {
  clear_has_lane_width();
  ::OPMessage::judgeItem* temp = lane_width_;
  lane_width_ = NULL;
  return temp;
}
inline void Judge40500::set_allocated_lane_width(::OPMessage::judgeItem* lane_width) {
  delete lane_width_;
  lane_width_ = lane_width;
  if (lane_width) {
    set_has_lane_width();
  } else {
    clear_has_lane_width();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40500.lane_width)
}

// optional .OPMessage.judgeItem check_change_lane = 7;
inline bool Judge40500::has_check_change_lane() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Judge40500::set_has_check_change_lane() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Judge40500::clear_has_check_change_lane() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Judge40500::clear_check_change_lane() {
  if (check_change_lane_ != NULL) check_change_lane_->::OPMessage::judgeItem::Clear();
  clear_has_check_change_lane();
}
inline const ::OPMessage::judgeItem& Judge40500::check_change_lane() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40500.check_change_lane)
  return check_change_lane_ != NULL ? *check_change_lane_ : *default_instance_->check_change_lane_;
}
inline ::OPMessage::judgeItem* Judge40500::mutable_check_change_lane() {
  set_has_check_change_lane();
  if (check_change_lane_ == NULL) check_change_lane_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40500.check_change_lane)
  return check_change_lane_;
}
inline ::OPMessage::judgeItem* Judge40500::release_check_change_lane() {
  clear_has_check_change_lane();
  ::OPMessage::judgeItem* temp = check_change_lane_;
  check_change_lane_ = NULL;
  return temp;
}
inline void Judge40500::set_allocated_check_change_lane(::OPMessage::judgeItem* check_change_lane) {
  delete check_change_lane_;
  check_change_lane_ = check_change_lane;
  if (check_change_lane) {
    set_has_check_change_lane();
  } else {
    clear_has_check_change_lane();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40500.check_change_lane)
}

// optional .OPMessage.judgeItem start_change_lane_time_delay = 8;
inline bool Judge40500::has_start_change_lane_time_delay() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Judge40500::set_has_start_change_lane_time_delay() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Judge40500::clear_has_start_change_lane_time_delay() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Judge40500::clear_start_change_lane_time_delay() {
  if (start_change_lane_time_delay_ != NULL) start_change_lane_time_delay_->::OPMessage::judgeItem::Clear();
  clear_has_start_change_lane_time_delay();
}
inline const ::OPMessage::judgeItem& Judge40500::start_change_lane_time_delay() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40500.start_change_lane_time_delay)
  return start_change_lane_time_delay_ != NULL ? *start_change_lane_time_delay_ : *default_instance_->start_change_lane_time_delay_;
}
inline ::OPMessage::judgeItem* Judge40500::mutable_start_change_lane_time_delay() {
  set_has_start_change_lane_time_delay();
  if (start_change_lane_time_delay_ == NULL) start_change_lane_time_delay_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40500.start_change_lane_time_delay)
  return start_change_lane_time_delay_;
}
inline ::OPMessage::judgeItem* Judge40500::release_start_change_lane_time_delay() {
  clear_has_start_change_lane_time_delay();
  ::OPMessage::judgeItem* temp = start_change_lane_time_delay_;
  start_change_lane_time_delay_ = NULL;
  return temp;
}
inline void Judge40500::set_allocated_start_change_lane_time_delay(::OPMessage::judgeItem* start_change_lane_time_delay) {
  delete start_change_lane_time_delay_;
  start_change_lane_time_delay_ = start_change_lane_time_delay;
  if (start_change_lane_time_delay) {
    set_has_start_change_lane_time_delay();
  } else {
    clear_has_start_change_lane_time_delay();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40500.start_change_lane_time_delay)
}

// optional .OPMessage.judgeItem start_change_lane_distance_delay = 9;
inline bool Judge40500::has_start_change_lane_distance_delay() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Judge40500::set_has_start_change_lane_distance_delay() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Judge40500::clear_has_start_change_lane_distance_delay() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Judge40500::clear_start_change_lane_distance_delay() {
  if (start_change_lane_distance_delay_ != NULL) start_change_lane_distance_delay_->::OPMessage::judgeItem::Clear();
  clear_has_start_change_lane_distance_delay();
}
inline const ::OPMessage::judgeItem& Judge40500::start_change_lane_distance_delay() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40500.start_change_lane_distance_delay)
  return start_change_lane_distance_delay_ != NULL ? *start_change_lane_distance_delay_ : *default_instance_->start_change_lane_distance_delay_;
}
inline ::OPMessage::judgeItem* Judge40500::mutable_start_change_lane_distance_delay() {
  set_has_start_change_lane_distance_delay();
  if (start_change_lane_distance_delay_ == NULL) start_change_lane_distance_delay_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40500.start_change_lane_distance_delay)
  return start_change_lane_distance_delay_;
}
inline ::OPMessage::judgeItem* Judge40500::release_start_change_lane_distance_delay() {
  clear_has_start_change_lane_distance_delay();
  ::OPMessage::judgeItem* temp = start_change_lane_distance_delay_;
  start_change_lane_distance_delay_ = NULL;
  return temp;
}
inline void Judge40500::set_allocated_start_change_lane_distance_delay(::OPMessage::judgeItem* start_change_lane_distance_delay) {
  delete start_change_lane_distance_delay_;
  start_change_lane_distance_delay_ = start_change_lane_distance_delay;
  if (start_change_lane_distance_delay) {
    set_has_start_change_lane_distance_delay();
  } else {
    clear_has_start_change_lane_distance_delay();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40500.start_change_lane_distance_delay)
}

// optional .OPMessage.judgeItem finish_change_lane_time_delay = 10;
inline bool Judge40500::has_finish_change_lane_time_delay() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Judge40500::set_has_finish_change_lane_time_delay() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Judge40500::clear_has_finish_change_lane_time_delay() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Judge40500::clear_finish_change_lane_time_delay() {
  if (finish_change_lane_time_delay_ != NULL) finish_change_lane_time_delay_->::OPMessage::judgeItem::Clear();
  clear_has_finish_change_lane_time_delay();
}
inline const ::OPMessage::judgeItem& Judge40500::finish_change_lane_time_delay() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40500.finish_change_lane_time_delay)
  return finish_change_lane_time_delay_ != NULL ? *finish_change_lane_time_delay_ : *default_instance_->finish_change_lane_time_delay_;
}
inline ::OPMessage::judgeItem* Judge40500::mutable_finish_change_lane_time_delay() {
  set_has_finish_change_lane_time_delay();
  if (finish_change_lane_time_delay_ == NULL) finish_change_lane_time_delay_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40500.finish_change_lane_time_delay)
  return finish_change_lane_time_delay_;
}
inline ::OPMessage::judgeItem* Judge40500::release_finish_change_lane_time_delay() {
  clear_has_finish_change_lane_time_delay();
  ::OPMessage::judgeItem* temp = finish_change_lane_time_delay_;
  finish_change_lane_time_delay_ = NULL;
  return temp;
}
inline void Judge40500::set_allocated_finish_change_lane_time_delay(::OPMessage::judgeItem* finish_change_lane_time_delay) {
  delete finish_change_lane_time_delay_;
  finish_change_lane_time_delay_ = finish_change_lane_time_delay;
  if (finish_change_lane_time_delay) {
    set_has_finish_change_lane_time_delay();
  } else {
    clear_has_finish_change_lane_time_delay();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40500.finish_change_lane_time_delay)
}

// optional .OPMessage.judgeItem finish_change_lane_distance_delay = 11;
inline bool Judge40500::has_finish_change_lane_distance_delay() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Judge40500::set_has_finish_change_lane_distance_delay() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Judge40500::clear_has_finish_change_lane_distance_delay() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Judge40500::clear_finish_change_lane_distance_delay() {
  if (finish_change_lane_distance_delay_ != NULL) finish_change_lane_distance_delay_->::OPMessage::judgeItem::Clear();
  clear_has_finish_change_lane_distance_delay();
}
inline const ::OPMessage::judgeItem& Judge40500::finish_change_lane_distance_delay() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40500.finish_change_lane_distance_delay)
  return finish_change_lane_distance_delay_ != NULL ? *finish_change_lane_distance_delay_ : *default_instance_->finish_change_lane_distance_delay_;
}
inline ::OPMessage::judgeItem* Judge40500::mutable_finish_change_lane_distance_delay() {
  set_has_finish_change_lane_distance_delay();
  if (finish_change_lane_distance_delay_ == NULL) finish_change_lane_distance_delay_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40500.finish_change_lane_distance_delay)
  return finish_change_lane_distance_delay_;
}
inline ::OPMessage::judgeItem* Judge40500::release_finish_change_lane_distance_delay() {
  clear_has_finish_change_lane_distance_delay();
  ::OPMessage::judgeItem* temp = finish_change_lane_distance_delay_;
  finish_change_lane_distance_delay_ = NULL;
  return temp;
}
inline void Judge40500::set_allocated_finish_change_lane_distance_delay(::OPMessage::judgeItem* finish_change_lane_distance_delay) {
  delete finish_change_lane_distance_delay_;
  finish_change_lane_distance_delay_ = finish_change_lane_distance_delay;
  if (finish_change_lane_distance_delay) {
    set_has_finish_change_lane_distance_delay();
  } else {
    clear_has_finish_change_lane_distance_delay();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40500.finish_change_lane_distance_delay)
}

// optional .OPMessage.voiceItem vi_40500_start_exam = 12;
inline bool Judge40500::has_vi_40500_start_exam() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Judge40500::set_has_vi_40500_start_exam() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Judge40500::clear_has_vi_40500_start_exam() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Judge40500::clear_vi_40500_start_exam() {
  if (vi_40500_start_exam_ != NULL) vi_40500_start_exam_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40500_start_exam();
}
inline const ::OPMessage::voiceItem& Judge40500::vi_40500_start_exam() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40500.vi_40500_start_exam)
  return vi_40500_start_exam_ != NULL ? *vi_40500_start_exam_ : *default_instance_->vi_40500_start_exam_;
}
inline ::OPMessage::voiceItem* Judge40500::mutable_vi_40500_start_exam() {
  set_has_vi_40500_start_exam();
  if (vi_40500_start_exam_ == NULL) vi_40500_start_exam_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40500.vi_40500_start_exam)
  return vi_40500_start_exam_;
}
inline ::OPMessage::voiceItem* Judge40500::release_vi_40500_start_exam() {
  clear_has_vi_40500_start_exam();
  ::OPMessage::voiceItem* temp = vi_40500_start_exam_;
  vi_40500_start_exam_ = NULL;
  return temp;
}
inline void Judge40500::set_allocated_vi_40500_start_exam(::OPMessage::voiceItem* vi_40500_start_exam) {
  delete vi_40500_start_exam_;
  vi_40500_start_exam_ = vi_40500_start_exam;
  if (vi_40500_start_exam) {
    set_has_vi_40500_start_exam();
  } else {
    clear_has_vi_40500_start_exam();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40500.vi_40500_start_exam)
}

// optional .OPMessage.voiceItem vi_40500_end_exam = 13;
inline bool Judge40500::has_vi_40500_end_exam() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Judge40500::set_has_vi_40500_end_exam() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Judge40500::clear_has_vi_40500_end_exam() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Judge40500::clear_vi_40500_end_exam() {
  if (vi_40500_end_exam_ != NULL) vi_40500_end_exam_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40500_end_exam();
}
inline const ::OPMessage::voiceItem& Judge40500::vi_40500_end_exam() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40500.vi_40500_end_exam)
  return vi_40500_end_exam_ != NULL ? *vi_40500_end_exam_ : *default_instance_->vi_40500_end_exam_;
}
inline ::OPMessage::voiceItem* Judge40500::mutable_vi_40500_end_exam() {
  set_has_vi_40500_end_exam();
  if (vi_40500_end_exam_ == NULL) vi_40500_end_exam_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40500.vi_40500_end_exam)
  return vi_40500_end_exam_;
}
inline ::OPMessage::voiceItem* Judge40500::release_vi_40500_end_exam() {
  clear_has_vi_40500_end_exam();
  ::OPMessage::voiceItem* temp = vi_40500_end_exam_;
  vi_40500_end_exam_ = NULL;
  return temp;
}
inline void Judge40500::set_allocated_vi_40500_end_exam(::OPMessage::voiceItem* vi_40500_end_exam) {
  delete vi_40500_end_exam_;
  vi_40500_end_exam_ = vi_40500_end_exam;
  if (vi_40500_end_exam) {
    set_has_vi_40500_end_exam();
  } else {
    clear_has_vi_40500_end_exam();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40500.vi_40500_end_exam)
}

// optional .OPMessage.voiceItem vi_40500_driving_in_one_lane = 14;
inline bool Judge40500::has_vi_40500_driving_in_one_lane() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Judge40500::set_has_vi_40500_driving_in_one_lane() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Judge40500::clear_has_vi_40500_driving_in_one_lane() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Judge40500::clear_vi_40500_driving_in_one_lane() {
  if (vi_40500_driving_in_one_lane_ != NULL) vi_40500_driving_in_one_lane_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40500_driving_in_one_lane();
}
inline const ::OPMessage::voiceItem& Judge40500::vi_40500_driving_in_one_lane() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40500.vi_40500_driving_in_one_lane)
  return vi_40500_driving_in_one_lane_ != NULL ? *vi_40500_driving_in_one_lane_ : *default_instance_->vi_40500_driving_in_one_lane_;
}
inline ::OPMessage::voiceItem* Judge40500::mutable_vi_40500_driving_in_one_lane() {
  set_has_vi_40500_driving_in_one_lane();
  if (vi_40500_driving_in_one_lane_ == NULL) vi_40500_driving_in_one_lane_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40500.vi_40500_driving_in_one_lane)
  return vi_40500_driving_in_one_lane_;
}
inline ::OPMessage::voiceItem* Judge40500::release_vi_40500_driving_in_one_lane() {
  clear_has_vi_40500_driving_in_one_lane();
  ::OPMessage::voiceItem* temp = vi_40500_driving_in_one_lane_;
  vi_40500_driving_in_one_lane_ = NULL;
  return temp;
}
inline void Judge40500::set_allocated_vi_40500_driving_in_one_lane(::OPMessage::voiceItem* vi_40500_driving_in_one_lane) {
  delete vi_40500_driving_in_one_lane_;
  vi_40500_driving_in_one_lane_ = vi_40500_driving_in_one_lane;
  if (vi_40500_driving_in_one_lane) {
    set_has_vi_40500_driving_in_one_lane();
  } else {
    clear_has_vi_40500_driving_in_one_lane();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40500.vi_40500_driving_in_one_lane)
}

// optional .OPMessage.voiceItem vi_40500_notify_change_lane = 15;
inline bool Judge40500::has_vi_40500_notify_change_lane() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Judge40500::set_has_vi_40500_notify_change_lane() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Judge40500::clear_has_vi_40500_notify_change_lane() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Judge40500::clear_vi_40500_notify_change_lane() {
  if (vi_40500_notify_change_lane_ != NULL) vi_40500_notify_change_lane_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40500_notify_change_lane();
}
inline const ::OPMessage::voiceItem& Judge40500::vi_40500_notify_change_lane() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40500.vi_40500_notify_change_lane)
  return vi_40500_notify_change_lane_ != NULL ? *vi_40500_notify_change_lane_ : *default_instance_->vi_40500_notify_change_lane_;
}
inline ::OPMessage::voiceItem* Judge40500::mutable_vi_40500_notify_change_lane() {
  set_has_vi_40500_notify_change_lane();
  if (vi_40500_notify_change_lane_ == NULL) vi_40500_notify_change_lane_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40500.vi_40500_notify_change_lane)
  return vi_40500_notify_change_lane_;
}
inline ::OPMessage::voiceItem* Judge40500::release_vi_40500_notify_change_lane() {
  clear_has_vi_40500_notify_change_lane();
  ::OPMessage::voiceItem* temp = vi_40500_notify_change_lane_;
  vi_40500_notify_change_lane_ = NULL;
  return temp;
}
inline void Judge40500::set_allocated_vi_40500_notify_change_lane(::OPMessage::voiceItem* vi_40500_notify_change_lane) {
  delete vi_40500_notify_change_lane_;
  vi_40500_notify_change_lane_ = vi_40500_notify_change_lane;
  if (vi_40500_notify_change_lane) {
    set_has_vi_40500_notify_change_lane();
  } else {
    clear_has_vi_40500_notify_change_lane();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40500.vi_40500_notify_change_lane)
}

// optional .OPMessage.voiceItem vi_40500_not_finish_change_lane = 16;
inline bool Judge40500::has_vi_40500_not_finish_change_lane() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Judge40500::set_has_vi_40500_not_finish_change_lane() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Judge40500::clear_has_vi_40500_not_finish_change_lane() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Judge40500::clear_vi_40500_not_finish_change_lane() {
  if (vi_40500_not_finish_change_lane_ != NULL) vi_40500_not_finish_change_lane_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40500_not_finish_change_lane();
}
inline const ::OPMessage::voiceItem& Judge40500::vi_40500_not_finish_change_lane() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40500.vi_40500_not_finish_change_lane)
  return vi_40500_not_finish_change_lane_ != NULL ? *vi_40500_not_finish_change_lane_ : *default_instance_->vi_40500_not_finish_change_lane_;
}
inline ::OPMessage::voiceItem* Judge40500::mutable_vi_40500_not_finish_change_lane() {
  set_has_vi_40500_not_finish_change_lane();
  if (vi_40500_not_finish_change_lane_ == NULL) vi_40500_not_finish_change_lane_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40500.vi_40500_not_finish_change_lane)
  return vi_40500_not_finish_change_lane_;
}
inline ::OPMessage::voiceItem* Judge40500::release_vi_40500_not_finish_change_lane() {
  clear_has_vi_40500_not_finish_change_lane();
  ::OPMessage::voiceItem* temp = vi_40500_not_finish_change_lane_;
  vi_40500_not_finish_change_lane_ = NULL;
  return temp;
}
inline void Judge40500::set_allocated_vi_40500_not_finish_change_lane(::OPMessage::voiceItem* vi_40500_not_finish_change_lane) {
  delete vi_40500_not_finish_change_lane_;
  vi_40500_not_finish_change_lane_ = vi_40500_not_finish_change_lane;
  if (vi_40500_not_finish_change_lane) {
    set_has_vi_40500_not_finish_change_lane();
  } else {
    clear_has_vi_40500_not_finish_change_lane();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40500.vi_40500_not_finish_change_lane)
}

// optional .OPMessage.voiceItem vi_40500_turn_lamp_use_error = 17;
inline bool Judge40500::has_vi_40500_turn_lamp_use_error() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Judge40500::set_has_vi_40500_turn_lamp_use_error() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Judge40500::clear_has_vi_40500_turn_lamp_use_error() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Judge40500::clear_vi_40500_turn_lamp_use_error() {
  if (vi_40500_turn_lamp_use_error_ != NULL) vi_40500_turn_lamp_use_error_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40500_turn_lamp_use_error();
}
inline const ::OPMessage::voiceItem& Judge40500::vi_40500_turn_lamp_use_error() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40500.vi_40500_turn_lamp_use_error)
  return vi_40500_turn_lamp_use_error_ != NULL ? *vi_40500_turn_lamp_use_error_ : *default_instance_->vi_40500_turn_lamp_use_error_;
}
inline ::OPMessage::voiceItem* Judge40500::mutable_vi_40500_turn_lamp_use_error() {
  set_has_vi_40500_turn_lamp_use_error();
  if (vi_40500_turn_lamp_use_error_ == NULL) vi_40500_turn_lamp_use_error_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40500.vi_40500_turn_lamp_use_error)
  return vi_40500_turn_lamp_use_error_;
}
inline ::OPMessage::voiceItem* Judge40500::release_vi_40500_turn_lamp_use_error() {
  clear_has_vi_40500_turn_lamp_use_error();
  ::OPMessage::voiceItem* temp = vi_40500_turn_lamp_use_error_;
  vi_40500_turn_lamp_use_error_ = NULL;
  return temp;
}
inline void Judge40500::set_allocated_vi_40500_turn_lamp_use_error(::OPMessage::voiceItem* vi_40500_turn_lamp_use_error) {
  delete vi_40500_turn_lamp_use_error_;
  vi_40500_turn_lamp_use_error_ = vi_40500_turn_lamp_use_error;
  if (vi_40500_turn_lamp_use_error) {
    set_has_vi_40500_turn_lamp_use_error();
  } else {
    clear_has_vi_40500_turn_lamp_use_error();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40500.vi_40500_turn_lamp_use_error)
}

// optional .OPMessage.voiceItem vi_40500_turn_lamp_not_use = 18;
inline bool Judge40500::has_vi_40500_turn_lamp_not_use() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Judge40500::set_has_vi_40500_turn_lamp_not_use() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Judge40500::clear_has_vi_40500_turn_lamp_not_use() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Judge40500::clear_vi_40500_turn_lamp_not_use() {
  if (vi_40500_turn_lamp_not_use_ != NULL) vi_40500_turn_lamp_not_use_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40500_turn_lamp_not_use();
}
inline const ::OPMessage::voiceItem& Judge40500::vi_40500_turn_lamp_not_use() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40500.vi_40500_turn_lamp_not_use)
  return vi_40500_turn_lamp_not_use_ != NULL ? *vi_40500_turn_lamp_not_use_ : *default_instance_->vi_40500_turn_lamp_not_use_;
}
inline ::OPMessage::voiceItem* Judge40500::mutable_vi_40500_turn_lamp_not_use() {
  set_has_vi_40500_turn_lamp_not_use();
  if (vi_40500_turn_lamp_not_use_ == NULL) vi_40500_turn_lamp_not_use_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40500.vi_40500_turn_lamp_not_use)
  return vi_40500_turn_lamp_not_use_;
}
inline ::OPMessage::voiceItem* Judge40500::release_vi_40500_turn_lamp_not_use() {
  clear_has_vi_40500_turn_lamp_not_use();
  ::OPMessage::voiceItem* temp = vi_40500_turn_lamp_not_use_;
  vi_40500_turn_lamp_not_use_ = NULL;
  return temp;
}
inline void Judge40500::set_allocated_vi_40500_turn_lamp_not_use(::OPMessage::voiceItem* vi_40500_turn_lamp_not_use) {
  delete vi_40500_turn_lamp_not_use_;
  vi_40500_turn_lamp_not_use_ = vi_40500_turn_lamp_not_use;
  if (vi_40500_turn_lamp_not_use) {
    set_has_vi_40500_turn_lamp_not_use();
  } else {
    clear_has_vi_40500_turn_lamp_not_use();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40500.vi_40500_turn_lamp_not_use)
}

// -------------------------------------------------------------------

// Judge41300

// optional int32 itemCode = 1;
inline bool Judge41300::has_itemcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Judge41300::set_has_itemcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Judge41300::clear_has_itemcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Judge41300::clear_itemcode() {
  itemcode_ = 0;
  clear_has_itemcode();
}
inline ::google::protobuf::int32 Judge41300::itemcode() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41300.itemCode)
  return itemcode_;
}
inline void Judge41300::set_itemcode(::google::protobuf::int32 value) {
  set_has_itemcode();
  itemcode_ = value;
  // @@protoc_insertion_point(field_set:OPMessage.Judge41300.itemCode)
}

// optional string itemName = 2;
inline bool Judge41300::has_itemname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Judge41300::set_has_itemname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Judge41300::clear_has_itemname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Judge41300::clear_itemname() {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_->clear();
  }
  clear_has_itemname();
}
inline const ::std::string& Judge41300::itemname() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41300.itemName)
  return *itemname_;
}
inline void Judge41300::set_itemname(const ::std::string& value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
  // @@protoc_insertion_point(field_set:OPMessage.Judge41300.itemName)
}
inline void Judge41300::set_itemname(const char* value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
  // @@protoc_insertion_point(field_set_char:OPMessage.Judge41300.itemName)
}
inline void Judge41300::set_itemname(const char* value, size_t size) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OPMessage.Judge41300.itemName)
}
inline ::std::string* Judge41300::mutable_itemname() {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41300.itemName)
  return itemname_;
}
inline ::std::string* Judge41300::release_itemname() {
  clear_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = itemname_;
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Judge41300::set_allocated_itemname(::std::string* itemname) {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (itemname) {
    set_has_itemname();
    itemname_ = itemname;
  } else {
    clear_has_itemname();
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41300.itemName)
}

// optional .OPMessage.judgeItem max_time = 3;
inline bool Judge41300::has_max_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Judge41300::set_has_max_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Judge41300::clear_has_max_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Judge41300::clear_max_time() {
  if (max_time_ != NULL) max_time_->::OPMessage::judgeItem::Clear();
  clear_has_max_time();
}
inline const ::OPMessage::judgeItem& Judge41300::max_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41300.max_time)
  return max_time_ != NULL ? *max_time_ : *default_instance_->max_time_;
}
inline ::OPMessage::judgeItem* Judge41300::mutable_max_time() {
  set_has_max_time();
  if (max_time_ == NULL) max_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41300.max_time)
  return max_time_;
}
inline ::OPMessage::judgeItem* Judge41300::release_max_time() {
  clear_has_max_time();
  ::OPMessage::judgeItem* temp = max_time_;
  max_time_ = NULL;
  return temp;
}
inline void Judge41300::set_allocated_max_time(::OPMessage::judgeItem* max_time) {
  delete max_time_;
  max_time_ = max_time;
  if (max_time) {
    set_has_max_time();
  } else {
    clear_has_max_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41300.max_time)
}

// optional .OPMessage.judgeItem max_trigger_distance = 4;
inline bool Judge41300::has_max_trigger_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Judge41300::set_has_max_trigger_distance() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Judge41300::clear_has_max_trigger_distance() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Judge41300::clear_max_trigger_distance() {
  if (max_trigger_distance_ != NULL) max_trigger_distance_->::OPMessage::judgeItem::Clear();
  clear_has_max_trigger_distance();
}
inline const ::OPMessage::judgeItem& Judge41300::max_trigger_distance() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41300.max_trigger_distance)
  return max_trigger_distance_ != NULL ? *max_trigger_distance_ : *default_instance_->max_trigger_distance_;
}
inline ::OPMessage::judgeItem* Judge41300::mutable_max_trigger_distance() {
  set_has_max_trigger_distance();
  if (max_trigger_distance_ == NULL) max_trigger_distance_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41300.max_trigger_distance)
  return max_trigger_distance_;
}
inline ::OPMessage::judgeItem* Judge41300::release_max_trigger_distance() {
  clear_has_max_trigger_distance();
  ::OPMessage::judgeItem* temp = max_trigger_distance_;
  max_trigger_distance_ = NULL;
  return temp;
}
inline void Judge41300::set_allocated_max_trigger_distance(::OPMessage::judgeItem* max_trigger_distance) {
  delete max_trigger_distance_;
  max_trigger_distance_ = max_trigger_distance;
  if (max_trigger_distance) {
    set_has_max_trigger_distance();
  } else {
    clear_has_max_trigger_distance();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41300.max_trigger_distance)
}

// optional .OPMessage.judgeItem max_speed = 5;
inline bool Judge41300::has_max_speed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Judge41300::set_has_max_speed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Judge41300::clear_has_max_speed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Judge41300::clear_max_speed() {
  if (max_speed_ != NULL) max_speed_->::OPMessage::judgeItem::Clear();
  clear_has_max_speed();
}
inline const ::OPMessage::judgeItem& Judge41300::max_speed() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41300.max_speed)
  return max_speed_ != NULL ? *max_speed_ : *default_instance_->max_speed_;
}
inline ::OPMessage::judgeItem* Judge41300::mutable_max_speed() {
  set_has_max_speed();
  if (max_speed_ == NULL) max_speed_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41300.max_speed)
  return max_speed_;
}
inline ::OPMessage::judgeItem* Judge41300::release_max_speed() {
  clear_has_max_speed();
  ::OPMessage::judgeItem* temp = max_speed_;
  max_speed_ = NULL;
  return temp;
}
inline void Judge41300::set_allocated_max_speed(::OPMessage::judgeItem* max_speed) {
  delete max_speed_;
  max_speed_ = max_speed;
  if (max_speed) {
    set_has_max_speed();
  } else {
    clear_has_max_speed();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41300.max_speed)
}

// optional .OPMessage.judgeItem judge_mode = 6;
inline bool Judge41300::has_judge_mode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Judge41300::set_has_judge_mode() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Judge41300::clear_has_judge_mode() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Judge41300::clear_judge_mode() {
  if (judge_mode_ != NULL) judge_mode_->::OPMessage::judgeItem::Clear();
  clear_has_judge_mode();
}
inline const ::OPMessage::judgeItem& Judge41300::judge_mode() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41300.judge_mode)
  return judge_mode_ != NULL ? *judge_mode_ : *default_instance_->judge_mode_;
}
inline ::OPMessage::judgeItem* Judge41300::mutable_judge_mode() {
  set_has_judge_mode();
  if (judge_mode_ == NULL) judge_mode_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41300.judge_mode)
  return judge_mode_;
}
inline ::OPMessage::judgeItem* Judge41300::release_judge_mode() {
  clear_has_judge_mode();
  ::OPMessage::judgeItem* temp = judge_mode_;
  judge_mode_ = NULL;
  return temp;
}
inline void Judge41300::set_allocated_judge_mode(::OPMessage::judgeItem* judge_mode) {
  delete judge_mode_;
  judge_mode_ = judge_mode;
  if (judge_mode) {
    set_has_judge_mode();
  } else {
    clear_has_judge_mode();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41300.judge_mode)
}

// optional .OPMessage.voiceItem vi_41300_start_exam = 7;
inline bool Judge41300::has_vi_41300_start_exam() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Judge41300::set_has_vi_41300_start_exam() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Judge41300::clear_has_vi_41300_start_exam() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Judge41300::clear_vi_41300_start_exam() {
  if (vi_41300_start_exam_ != NULL) vi_41300_start_exam_->::OPMessage::voiceItem::Clear();
  clear_has_vi_41300_start_exam();
}
inline const ::OPMessage::voiceItem& Judge41300::vi_41300_start_exam() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41300.vi_41300_start_exam)
  return vi_41300_start_exam_ != NULL ? *vi_41300_start_exam_ : *default_instance_->vi_41300_start_exam_;
}
inline ::OPMessage::voiceItem* Judge41300::mutable_vi_41300_start_exam() {
  set_has_vi_41300_start_exam();
  if (vi_41300_start_exam_ == NULL) vi_41300_start_exam_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41300.vi_41300_start_exam)
  return vi_41300_start_exam_;
}
inline ::OPMessage::voiceItem* Judge41300::release_vi_41300_start_exam() {
  clear_has_vi_41300_start_exam();
  ::OPMessage::voiceItem* temp = vi_41300_start_exam_;
  vi_41300_start_exam_ = NULL;
  return temp;
}
inline void Judge41300::set_allocated_vi_41300_start_exam(::OPMessage::voiceItem* vi_41300_start_exam) {
  delete vi_41300_start_exam_;
  vi_41300_start_exam_ = vi_41300_start_exam;
  if (vi_41300_start_exam) {
    set_has_vi_41300_start_exam();
  } else {
    clear_has_vi_41300_start_exam();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41300.vi_41300_start_exam)
}

// optional .OPMessage.voiceItem vi_41300_end_exam = 8;
inline bool Judge41300::has_vi_41300_end_exam() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Judge41300::set_has_vi_41300_end_exam() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Judge41300::clear_has_vi_41300_end_exam() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Judge41300::clear_vi_41300_end_exam() {
  if (vi_41300_end_exam_ != NULL) vi_41300_end_exam_->::OPMessage::voiceItem::Clear();
  clear_has_vi_41300_end_exam();
}
inline const ::OPMessage::voiceItem& Judge41300::vi_41300_end_exam() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41300.vi_41300_end_exam)
  return vi_41300_end_exam_ != NULL ? *vi_41300_end_exam_ : *default_instance_->vi_41300_end_exam_;
}
inline ::OPMessage::voiceItem* Judge41300::mutable_vi_41300_end_exam() {
  set_has_vi_41300_end_exam();
  if (vi_41300_end_exam_ == NULL) vi_41300_end_exam_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41300.vi_41300_end_exam)
  return vi_41300_end_exam_;
}
inline ::OPMessage::voiceItem* Judge41300::release_vi_41300_end_exam() {
  clear_has_vi_41300_end_exam();
  ::OPMessage::voiceItem* temp = vi_41300_end_exam_;
  vi_41300_end_exam_ = NULL;
  return temp;
}
inline void Judge41300::set_allocated_vi_41300_end_exam(::OPMessage::voiceItem* vi_41300_end_exam) {
  delete vi_41300_end_exam_;
  vi_41300_end_exam_ = vi_41300_end_exam;
  if (vi_41300_end_exam) {
    set_has_vi_41300_end_exam();
  } else {
    clear_has_vi_41300_end_exam();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41300.vi_41300_end_exam)
}

// optional .OPMessage.voiceItem vi_41300_not_slowdown = 9;
inline bool Judge41300::has_vi_41300_not_slowdown() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Judge41300::set_has_vi_41300_not_slowdown() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Judge41300::clear_has_vi_41300_not_slowdown() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Judge41300::clear_vi_41300_not_slowdown() {
  if (vi_41300_not_slowdown_ != NULL) vi_41300_not_slowdown_->::OPMessage::voiceItem::Clear();
  clear_has_vi_41300_not_slowdown();
}
inline const ::OPMessage::voiceItem& Judge41300::vi_41300_not_slowdown() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge41300.vi_41300_not_slowdown)
  return vi_41300_not_slowdown_ != NULL ? *vi_41300_not_slowdown_ : *default_instance_->vi_41300_not_slowdown_;
}
inline ::OPMessage::voiceItem* Judge41300::mutable_vi_41300_not_slowdown() {
  set_has_vi_41300_not_slowdown();
  if (vi_41300_not_slowdown_ == NULL) vi_41300_not_slowdown_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge41300.vi_41300_not_slowdown)
  return vi_41300_not_slowdown_;
}
inline ::OPMessage::voiceItem* Judge41300::release_vi_41300_not_slowdown() {
  clear_has_vi_41300_not_slowdown();
  ::OPMessage::voiceItem* temp = vi_41300_not_slowdown_;
  vi_41300_not_slowdown_ = NULL;
  return temp;
}
inline void Judge41300::set_allocated_vi_41300_not_slowdown(::OPMessage::voiceItem* vi_41300_not_slowdown) {
  delete vi_41300_not_slowdown_;
  vi_41300_not_slowdown_ = vi_41300_not_slowdown;
  if (vi_41300_not_slowdown) {
    set_has_vi_41300_not_slowdown();
  } else {
    clear_has_vi_41300_not_slowdown();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge41300.vi_41300_not_slowdown)
}

// -------------------------------------------------------------------

// Judge40300

// optional int32 itemCode = 1;
inline bool Judge40300::has_itemcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Judge40300::set_has_itemcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Judge40300::clear_has_itemcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Judge40300::clear_itemcode() {
  itemcode_ = 0;
  clear_has_itemcode();
}
inline ::google::protobuf::int32 Judge40300::itemcode() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40300.itemCode)
  return itemcode_;
}
inline void Judge40300::set_itemcode(::google::protobuf::int32 value) {
  set_has_itemcode();
  itemcode_ = value;
  // @@protoc_insertion_point(field_set:OPMessage.Judge40300.itemCode)
}

// optional string itemName = 2;
inline bool Judge40300::has_itemname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Judge40300::set_has_itemname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Judge40300::clear_has_itemname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Judge40300::clear_itemname() {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_->clear();
  }
  clear_has_itemname();
}
inline const ::std::string& Judge40300::itemname() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40300.itemName)
  return *itemname_;
}
inline void Judge40300::set_itemname(const ::std::string& value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
  // @@protoc_insertion_point(field_set:OPMessage.Judge40300.itemName)
}
inline void Judge40300::set_itemname(const char* value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
  // @@protoc_insertion_point(field_set_char:OPMessage.Judge40300.itemName)
}
inline void Judge40300::set_itemname(const char* value, size_t size) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OPMessage.Judge40300.itemName)
}
inline ::std::string* Judge40300::mutable_itemname() {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40300.itemName)
  return itemname_;
}
inline ::std::string* Judge40300::release_itemname() {
  clear_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = itemname_;
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Judge40300::set_allocated_itemname(::std::string* itemname) {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (itemname) {
    set_has_itemname();
    itemname_ = itemname;
  } else {
    clear_has_itemname();
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40300.itemName)
}

// optional .OPMessage.judgeItem max_time = 3;
inline bool Judge40300::has_max_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Judge40300::set_has_max_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Judge40300::clear_has_max_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Judge40300::clear_max_time() {
  if (max_time_ != NULL) max_time_->::OPMessage::judgeItem::Clear();
  clear_has_max_time();
}
inline const ::OPMessage::judgeItem& Judge40300::max_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40300.max_time)
  return max_time_ != NULL ? *max_time_ : *default_instance_->max_time_;
}
inline ::OPMessage::judgeItem* Judge40300::mutable_max_time() {
  set_has_max_time();
  if (max_time_ == NULL) max_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40300.max_time)
  return max_time_;
}
inline ::OPMessage::judgeItem* Judge40300::release_max_time() {
  clear_has_max_time();
  ::OPMessage::judgeItem* temp = max_time_;
  max_time_ = NULL;
  return temp;
}
inline void Judge40300::set_allocated_max_time(::OPMessage::judgeItem* max_time) {
  delete max_time_;
  max_time_ = max_time;
  if (max_time) {
    set_has_max_time();
  } else {
    clear_has_max_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40300.max_time)
}

// optional .OPMessage.judgeItem min_speed = 4;
inline bool Judge40300::has_min_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Judge40300::set_has_min_speed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Judge40300::clear_has_min_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Judge40300::clear_min_speed() {
  if (min_speed_ != NULL) min_speed_->::OPMessage::judgeItem::Clear();
  clear_has_min_speed();
}
inline const ::OPMessage::judgeItem& Judge40300::min_speed() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40300.min_speed)
  return min_speed_ != NULL ? *min_speed_ : *default_instance_->min_speed_;
}
inline ::OPMessage::judgeItem* Judge40300::mutable_min_speed() {
  set_has_min_speed();
  if (min_speed_ == NULL) min_speed_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40300.min_speed)
  return min_speed_;
}
inline ::OPMessage::judgeItem* Judge40300::release_min_speed() {
  clear_has_min_speed();
  ::OPMessage::judgeItem* temp = min_speed_;
  min_speed_ = NULL;
  return temp;
}
inline void Judge40300::set_allocated_min_speed(::OPMessage::judgeItem* min_speed) {
  delete min_speed_;
  min_speed_ = min_speed;
  if (min_speed) {
    set_has_min_speed();
  } else {
    clear_has_min_speed();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40300.min_speed)
}

// optional .OPMessage.judgeItem max_trigger_distance = 5;
inline bool Judge40300::has_max_trigger_distance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Judge40300::set_has_max_trigger_distance() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Judge40300::clear_has_max_trigger_distance() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Judge40300::clear_max_trigger_distance() {
  if (max_trigger_distance_ != NULL) max_trigger_distance_->::OPMessage::judgeItem::Clear();
  clear_has_max_trigger_distance();
}
inline const ::OPMessage::judgeItem& Judge40300::max_trigger_distance() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40300.max_trigger_distance)
  return max_trigger_distance_ != NULL ? *max_trigger_distance_ : *default_instance_->max_trigger_distance_;
}
inline ::OPMessage::judgeItem* Judge40300::mutable_max_trigger_distance() {
  set_has_max_trigger_distance();
  if (max_trigger_distance_ == NULL) max_trigger_distance_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40300.max_trigger_distance)
  return max_trigger_distance_;
}
inline ::OPMessage::judgeItem* Judge40300::release_max_trigger_distance() {
  clear_has_max_trigger_distance();
  ::OPMessage::judgeItem* temp = max_trigger_distance_;
  max_trigger_distance_ = NULL;
  return temp;
}
inline void Judge40300::set_allocated_max_trigger_distance(::OPMessage::judgeItem* max_trigger_distance) {
  delete max_trigger_distance_;
  max_trigger_distance_ = max_trigger_distance;
  if (max_trigger_distance) {
    set_has_max_trigger_distance();
  } else {
    clear_has_max_trigger_distance();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40300.max_trigger_distance)
}

// optional .OPMessage.judgeItem max_error_distance = 6;
inline bool Judge40300::has_max_error_distance() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Judge40300::set_has_max_error_distance() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Judge40300::clear_has_max_error_distance() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Judge40300::clear_max_error_distance() {
  if (max_error_distance_ != NULL) max_error_distance_->::OPMessage::judgeItem::Clear();
  clear_has_max_error_distance();
}
inline const ::OPMessage::judgeItem& Judge40300::max_error_distance() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40300.max_error_distance)
  return max_error_distance_ != NULL ? *max_error_distance_ : *default_instance_->max_error_distance_;
}
inline ::OPMessage::judgeItem* Judge40300::mutable_max_error_distance() {
  set_has_max_error_distance();
  if (max_error_distance_ == NULL) max_error_distance_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40300.max_error_distance)
  return max_error_distance_;
}
inline ::OPMessage::judgeItem* Judge40300::release_max_error_distance() {
  clear_has_max_error_distance();
  ::OPMessage::judgeItem* temp = max_error_distance_;
  max_error_distance_ = NULL;
  return temp;
}
inline void Judge40300::set_allocated_max_error_distance(::OPMessage::judgeItem* max_error_distance) {
  delete max_error_distance_;
  max_error_distance_ = max_error_distance;
  if (max_error_distance) {
    set_has_max_error_distance();
  } else {
    clear_has_max_error_distance();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40300.max_error_distance)
}

// optional .OPMessage.judgeItem enable_steering = 7;
inline bool Judge40300::has_enable_steering() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Judge40300::set_has_enable_steering() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Judge40300::clear_has_enable_steering() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Judge40300::clear_enable_steering() {
  if (enable_steering_ != NULL) enable_steering_->::OPMessage::judgeItem::Clear();
  clear_has_enable_steering();
}
inline const ::OPMessage::judgeItem& Judge40300::enable_steering() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40300.enable_steering)
  return enable_steering_ != NULL ? *enable_steering_ : *default_instance_->enable_steering_;
}
inline ::OPMessage::judgeItem* Judge40300::mutable_enable_steering() {
  set_has_enable_steering();
  if (enable_steering_ == NULL) enable_steering_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40300.enable_steering)
  return enable_steering_;
}
inline ::OPMessage::judgeItem* Judge40300::release_enable_steering() {
  clear_has_enable_steering();
  ::OPMessage::judgeItem* temp = enable_steering_;
  enable_steering_ = NULL;
  return temp;
}
inline void Judge40300::set_allocated_enable_steering(::OPMessage::judgeItem* enable_steering) {
  delete enable_steering_;
  enable_steering_ = enable_steering;
  if (enable_steering) {
    set_has_enable_steering();
  } else {
    clear_has_enable_steering();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40300.enable_steering)
}

// optional .OPMessage.judgeItem max_error_steering_angle = 8;
inline bool Judge40300::has_max_error_steering_angle() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Judge40300::set_has_max_error_steering_angle() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Judge40300::clear_has_max_error_steering_angle() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Judge40300::clear_max_error_steering_angle() {
  if (max_error_steering_angle_ != NULL) max_error_steering_angle_->::OPMessage::judgeItem::Clear();
  clear_has_max_error_steering_angle();
}
inline const ::OPMessage::judgeItem& Judge40300::max_error_steering_angle() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40300.max_error_steering_angle)
  return max_error_steering_angle_ != NULL ? *max_error_steering_angle_ : *default_instance_->max_error_steering_angle_;
}
inline ::OPMessage::judgeItem* Judge40300::mutable_max_error_steering_angle() {
  set_has_max_error_steering_angle();
  if (max_error_steering_angle_ == NULL) max_error_steering_angle_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40300.max_error_steering_angle)
  return max_error_steering_angle_;
}
inline ::OPMessage::judgeItem* Judge40300::release_max_error_steering_angle() {
  clear_has_max_error_steering_angle();
  ::OPMessage::judgeItem* temp = max_error_steering_angle_;
  max_error_steering_angle_ = NULL;
  return temp;
}
inline void Judge40300::set_allocated_max_error_steering_angle(::OPMessage::judgeItem* max_error_steering_angle) {
  delete max_error_steering_angle_;
  max_error_steering_angle_ = max_error_steering_angle;
  if (max_error_steering_angle) {
    set_has_max_error_steering_angle();
  } else {
    clear_has_max_error_steering_angle();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40300.max_error_steering_angle)
}

// optional .OPMessage.voiceItem vi_40300_start_exam = 9;
inline bool Judge40300::has_vi_40300_start_exam() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Judge40300::set_has_vi_40300_start_exam() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Judge40300::clear_has_vi_40300_start_exam() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Judge40300::clear_vi_40300_start_exam() {
  if (vi_40300_start_exam_ != NULL) vi_40300_start_exam_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40300_start_exam();
}
inline const ::OPMessage::voiceItem& Judge40300::vi_40300_start_exam() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40300.vi_40300_start_exam)
  return vi_40300_start_exam_ != NULL ? *vi_40300_start_exam_ : *default_instance_->vi_40300_start_exam_;
}
inline ::OPMessage::voiceItem* Judge40300::mutable_vi_40300_start_exam() {
  set_has_vi_40300_start_exam();
  if (vi_40300_start_exam_ == NULL) vi_40300_start_exam_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40300.vi_40300_start_exam)
  return vi_40300_start_exam_;
}
inline ::OPMessage::voiceItem* Judge40300::release_vi_40300_start_exam() {
  clear_has_vi_40300_start_exam();
  ::OPMessage::voiceItem* temp = vi_40300_start_exam_;
  vi_40300_start_exam_ = NULL;
  return temp;
}
inline void Judge40300::set_allocated_vi_40300_start_exam(::OPMessage::voiceItem* vi_40300_start_exam) {
  delete vi_40300_start_exam_;
  vi_40300_start_exam_ = vi_40300_start_exam;
  if (vi_40300_start_exam) {
    set_has_vi_40300_start_exam();
  } else {
    clear_has_vi_40300_start_exam();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40300.vi_40300_start_exam)
}

// optional .OPMessage.voiceItem vi_40300_end_exam = 10;
inline bool Judge40300::has_vi_40300_end_exam() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Judge40300::set_has_vi_40300_end_exam() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Judge40300::clear_has_vi_40300_end_exam() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Judge40300::clear_vi_40300_end_exam() {
  if (vi_40300_end_exam_ != NULL) vi_40300_end_exam_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40300_end_exam();
}
inline const ::OPMessage::voiceItem& Judge40300::vi_40300_end_exam() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40300.vi_40300_end_exam)
  return vi_40300_end_exam_ != NULL ? *vi_40300_end_exam_ : *default_instance_->vi_40300_end_exam_;
}
inline ::OPMessage::voiceItem* Judge40300::mutable_vi_40300_end_exam() {
  set_has_vi_40300_end_exam();
  if (vi_40300_end_exam_ == NULL) vi_40300_end_exam_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40300.vi_40300_end_exam)
  return vi_40300_end_exam_;
}
inline ::OPMessage::voiceItem* Judge40300::release_vi_40300_end_exam() {
  clear_has_vi_40300_end_exam();
  ::OPMessage::voiceItem* temp = vi_40300_end_exam_;
  vi_40300_end_exam_ = NULL;
  return temp;
}
inline void Judge40300::set_allocated_vi_40300_end_exam(::OPMessage::voiceItem* vi_40300_end_exam) {
  delete vi_40300_end_exam_;
  vi_40300_end_exam_ = vi_40300_end_exam;
  if (vi_40300_end_exam) {
    set_has_vi_40300_end_exam();
  } else {
    clear_has_vi_40300_end_exam();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40300.vi_40300_end_exam)
}

// optional .OPMessage.voiceItem vi_40300_not_go_straight = 11;
inline bool Judge40300::has_vi_40300_not_go_straight() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Judge40300::set_has_vi_40300_not_go_straight() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Judge40300::clear_has_vi_40300_not_go_straight() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Judge40300::clear_vi_40300_not_go_straight() {
  if (vi_40300_not_go_straight_ != NULL) vi_40300_not_go_straight_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40300_not_go_straight();
}
inline const ::OPMessage::voiceItem& Judge40300::vi_40300_not_go_straight() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40300.vi_40300_not_go_straight)
  return vi_40300_not_go_straight_ != NULL ? *vi_40300_not_go_straight_ : *default_instance_->vi_40300_not_go_straight_;
}
inline ::OPMessage::voiceItem* Judge40300::mutable_vi_40300_not_go_straight() {
  set_has_vi_40300_not_go_straight();
  if (vi_40300_not_go_straight_ == NULL) vi_40300_not_go_straight_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40300.vi_40300_not_go_straight)
  return vi_40300_not_go_straight_;
}
inline ::OPMessage::voiceItem* Judge40300::release_vi_40300_not_go_straight() {
  clear_has_vi_40300_not_go_straight();
  ::OPMessage::voiceItem* temp = vi_40300_not_go_straight_;
  vi_40300_not_go_straight_ = NULL;
  return temp;
}
inline void Judge40300::set_allocated_vi_40300_not_go_straight(::OPMessage::voiceItem* vi_40300_not_go_straight) {
  delete vi_40300_not_go_straight_;
  vi_40300_not_go_straight_ = vi_40300_not_go_straight;
  if (vi_40300_not_go_straight) {
    set_has_vi_40300_not_go_straight();
  } else {
    clear_has_vi_40300_not_go_straight();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40300.vi_40300_not_go_straight)
}

// optional .OPMessage.voiceItem vi_40300_not_reach_speed = 12;
inline bool Judge40300::has_vi_40300_not_reach_speed() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Judge40300::set_has_vi_40300_not_reach_speed() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Judge40300::clear_has_vi_40300_not_reach_speed() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Judge40300::clear_vi_40300_not_reach_speed() {
  if (vi_40300_not_reach_speed_ != NULL) vi_40300_not_reach_speed_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40300_not_reach_speed();
}
inline const ::OPMessage::voiceItem& Judge40300::vi_40300_not_reach_speed() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40300.vi_40300_not_reach_speed)
  return vi_40300_not_reach_speed_ != NULL ? *vi_40300_not_reach_speed_ : *default_instance_->vi_40300_not_reach_speed_;
}
inline ::OPMessage::voiceItem* Judge40300::mutable_vi_40300_not_reach_speed() {
  set_has_vi_40300_not_reach_speed();
  if (vi_40300_not_reach_speed_ == NULL) vi_40300_not_reach_speed_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40300.vi_40300_not_reach_speed)
  return vi_40300_not_reach_speed_;
}
inline ::OPMessage::voiceItem* Judge40300::release_vi_40300_not_reach_speed() {
  clear_has_vi_40300_not_reach_speed();
  ::OPMessage::voiceItem* temp = vi_40300_not_reach_speed_;
  vi_40300_not_reach_speed_ = NULL;
  return temp;
}
inline void Judge40300::set_allocated_vi_40300_not_reach_speed(::OPMessage::voiceItem* vi_40300_not_reach_speed) {
  delete vi_40300_not_reach_speed_;
  vi_40300_not_reach_speed_ = vi_40300_not_reach_speed;
  if (vi_40300_not_reach_speed) {
    set_has_vi_40300_not_reach_speed();
  } else {
    clear_has_vi_40300_not_reach_speed();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40300.vi_40300_not_reach_speed)
}

// -------------------------------------------------------------------

// Judge40600

// optional int32 itemCode = 1;
inline bool Judge40600::has_itemcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Judge40600::set_has_itemcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Judge40600::clear_has_itemcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Judge40600::clear_itemcode() {
  itemcode_ = 0;
  clear_has_itemcode();
}
inline ::google::protobuf::int32 Judge40600::itemcode() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40600.itemCode)
  return itemcode_;
}
inline void Judge40600::set_itemcode(::google::protobuf::int32 value) {
  set_has_itemcode();
  itemcode_ = value;
  // @@protoc_insertion_point(field_set:OPMessage.Judge40600.itemCode)
}

// optional string itemName = 2;
inline bool Judge40600::has_itemname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Judge40600::set_has_itemname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Judge40600::clear_has_itemname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Judge40600::clear_itemname() {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_->clear();
  }
  clear_has_itemname();
}
inline const ::std::string& Judge40600::itemname() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40600.itemName)
  return *itemname_;
}
inline void Judge40600::set_itemname(const ::std::string& value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
  // @@protoc_insertion_point(field_set:OPMessage.Judge40600.itemName)
}
inline void Judge40600::set_itemname(const char* value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
  // @@protoc_insertion_point(field_set_char:OPMessage.Judge40600.itemName)
}
inline void Judge40600::set_itemname(const char* value, size_t size) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OPMessage.Judge40600.itemName)
}
inline ::std::string* Judge40600::mutable_itemname() {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40600.itemName)
  return itemname_;
}
inline ::std::string* Judge40600::release_itemname() {
  clear_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = itemname_;
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Judge40600::set_allocated_itemname(::std::string* itemname) {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (itemname) {
    set_has_itemname();
    itemname_ = itemname;
  } else {
    clear_has_itemname();
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40600.itemName)
}

// optional .OPMessage.judgeItem max_time = 3;
inline bool Judge40600::has_max_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Judge40600::set_has_max_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Judge40600::clear_has_max_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Judge40600::clear_max_time() {
  if (max_time_ != NULL) max_time_->::OPMessage::judgeItem::Clear();
  clear_has_max_time();
}
inline const ::OPMessage::judgeItem& Judge40600::max_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40600.max_time)
  return max_time_ != NULL ? *max_time_ : *default_instance_->max_time_;
}
inline ::OPMessage::judgeItem* Judge40600::mutable_max_time() {
  set_has_max_time();
  if (max_time_ == NULL) max_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40600.max_time)
  return max_time_;
}
inline ::OPMessage::judgeItem* Judge40600::release_max_time() {
  clear_has_max_time();
  ::OPMessage::judgeItem* temp = max_time_;
  max_time_ = NULL;
  return temp;
}
inline void Judge40600::set_allocated_max_time(::OPMessage::judgeItem* max_time) {
  delete max_time_;
  max_time_ = max_time;
  if (max_time) {
    set_has_max_time();
  } else {
    clear_has_max_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40600.max_time)
}

// optional .OPMessage.judgeItem max_trigger_distance = 4;
inline bool Judge40600::has_max_trigger_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Judge40600::set_has_max_trigger_distance() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Judge40600::clear_has_max_trigger_distance() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Judge40600::clear_max_trigger_distance() {
  if (max_trigger_distance_ != NULL) max_trigger_distance_->::OPMessage::judgeItem::Clear();
  clear_has_max_trigger_distance();
}
inline const ::OPMessage::judgeItem& Judge40600::max_trigger_distance() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40600.max_trigger_distance)
  return max_trigger_distance_ != NULL ? *max_trigger_distance_ : *default_instance_->max_trigger_distance_;
}
inline ::OPMessage::judgeItem* Judge40600::mutable_max_trigger_distance() {
  set_has_max_trigger_distance();
  if (max_trigger_distance_ == NULL) max_trigger_distance_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40600.max_trigger_distance)
  return max_trigger_distance_;
}
inline ::OPMessage::judgeItem* Judge40600::release_max_trigger_distance() {
  clear_has_max_trigger_distance();
  ::OPMessage::judgeItem* temp = max_trigger_distance_;
  max_trigger_distance_ = NULL;
  return temp;
}
inline void Judge40600::set_allocated_max_trigger_distance(::OPMessage::judgeItem* max_trigger_distance) {
  delete max_trigger_distance_;
  max_trigger_distance_ = max_trigger_distance;
  if (max_trigger_distance) {
    set_has_max_trigger_distance();
  } else {
    clear_has_max_trigger_distance();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40600.max_trigger_distance)
}

// optional .OPMessage.judgeItem min_turn_signal_time = 5;
inline bool Judge40600::has_min_turn_signal_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Judge40600::set_has_min_turn_signal_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Judge40600::clear_has_min_turn_signal_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Judge40600::clear_min_turn_signal_time() {
  if (min_turn_signal_time_ != NULL) min_turn_signal_time_->::OPMessage::judgeItem::Clear();
  clear_has_min_turn_signal_time();
}
inline const ::OPMessage::judgeItem& Judge40600::min_turn_signal_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40600.min_turn_signal_time)
  return min_turn_signal_time_ != NULL ? *min_turn_signal_time_ : *default_instance_->min_turn_signal_time_;
}
inline ::OPMessage::judgeItem* Judge40600::mutable_min_turn_signal_time() {
  set_has_min_turn_signal_time();
  if (min_turn_signal_time_ == NULL) min_turn_signal_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40600.min_turn_signal_time)
  return min_turn_signal_time_;
}
inline ::OPMessage::judgeItem* Judge40600::release_min_turn_signal_time() {
  clear_has_min_turn_signal_time();
  ::OPMessage::judgeItem* temp = min_turn_signal_time_;
  min_turn_signal_time_ = NULL;
  return temp;
}
inline void Judge40600::set_allocated_min_turn_signal_time(::OPMessage::judgeItem* min_turn_signal_time) {
  delete min_turn_signal_time_;
  min_turn_signal_time_ = min_turn_signal_time;
  if (min_turn_signal_time) {
    set_has_min_turn_signal_time();
  } else {
    clear_has_min_turn_signal_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40600.min_turn_signal_time)
}

// optional .OPMessage.judgeItem finish_mode = 6;
inline bool Judge40600::has_finish_mode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Judge40600::set_has_finish_mode() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Judge40600::clear_has_finish_mode() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Judge40600::clear_finish_mode() {
  if (finish_mode_ != NULL) finish_mode_->::OPMessage::judgeItem::Clear();
  clear_has_finish_mode();
}
inline const ::OPMessage::judgeItem& Judge40600::finish_mode() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40600.finish_mode)
  return finish_mode_ != NULL ? *finish_mode_ : *default_instance_->finish_mode_;
}
inline ::OPMessage::judgeItem* Judge40600::mutable_finish_mode() {
  set_has_finish_mode();
  if (finish_mode_ == NULL) finish_mode_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40600.finish_mode)
  return finish_mode_;
}
inline ::OPMessage::judgeItem* Judge40600::release_finish_mode() {
  clear_has_finish_mode();
  ::OPMessage::judgeItem* temp = finish_mode_;
  finish_mode_ = NULL;
  return temp;
}
inline void Judge40600::set_allocated_finish_mode(::OPMessage::judgeItem* finish_mode) {
  delete finish_mode_;
  finish_mode_ = finish_mode;
  if (finish_mode) {
    set_has_finish_mode();
  } else {
    clear_has_finish_mode();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40600.finish_mode)
}

// optional .OPMessage.judgeItem get_off_close_door_time = 7;
inline bool Judge40600::has_get_off_close_door_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Judge40600::set_has_get_off_close_door_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Judge40600::clear_has_get_off_close_door_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Judge40600::clear_get_off_close_door_time() {
  if (get_off_close_door_time_ != NULL) get_off_close_door_time_->::OPMessage::judgeItem::Clear();
  clear_has_get_off_close_door_time();
}
inline const ::OPMessage::judgeItem& Judge40600::get_off_close_door_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40600.get_off_close_door_time)
  return get_off_close_door_time_ != NULL ? *get_off_close_door_time_ : *default_instance_->get_off_close_door_time_;
}
inline ::OPMessage::judgeItem* Judge40600::mutable_get_off_close_door_time() {
  set_has_get_off_close_door_time();
  if (get_off_close_door_time_ == NULL) get_off_close_door_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40600.get_off_close_door_time)
  return get_off_close_door_time_;
}
inline ::OPMessage::judgeItem* Judge40600::release_get_off_close_door_time() {
  clear_has_get_off_close_door_time();
  ::OPMessage::judgeItem* temp = get_off_close_door_time_;
  get_off_close_door_time_ = NULL;
  return temp;
}
inline void Judge40600::set_allocated_get_off_close_door_time(::OPMessage::judgeItem* get_off_close_door_time) {
  delete get_off_close_door_time_;
  get_off_close_door_time_ = get_off_close_door_time;
  if (get_off_close_door_time) {
    set_has_get_off_close_door_time();
  } else {
    clear_has_get_off_close_door_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40600.get_off_close_door_time)
}

// optional .OPMessage.judgeItem sideline_check_sensor = 8;
inline bool Judge40600::has_sideline_check_sensor() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Judge40600::set_has_sideline_check_sensor() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Judge40600::clear_has_sideline_check_sensor() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Judge40600::clear_sideline_check_sensor() {
  if (sideline_check_sensor_ != NULL) sideline_check_sensor_->::OPMessage::judgeItem::Clear();
  clear_has_sideline_check_sensor();
}
inline const ::OPMessage::judgeItem& Judge40600::sideline_check_sensor() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40600.sideline_check_sensor)
  return sideline_check_sensor_ != NULL ? *sideline_check_sensor_ : *default_instance_->sideline_check_sensor_;
}
inline ::OPMessage::judgeItem* Judge40600::mutable_sideline_check_sensor() {
  set_has_sideline_check_sensor();
  if (sideline_check_sensor_ == NULL) sideline_check_sensor_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40600.sideline_check_sensor)
  return sideline_check_sensor_;
}
inline ::OPMessage::judgeItem* Judge40600::release_sideline_check_sensor() {
  clear_has_sideline_check_sensor();
  ::OPMessage::judgeItem* temp = sideline_check_sensor_;
  sideline_check_sensor_ = NULL;
  return temp;
}
inline void Judge40600::set_allocated_sideline_check_sensor(::OPMessage::judgeItem* sideline_check_sensor) {
  delete sideline_check_sensor_;
  sideline_check_sensor_ = sideline_check_sensor;
  if (sideline_check_sensor) {
    set_has_sideline_check_sensor();
  } else {
    clear_has_sideline_check_sensor();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40600.sideline_check_sensor)
}

// optional .OPMessage.voiceItem vi_40600_start_exam = 9;
inline bool Judge40600::has_vi_40600_start_exam() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Judge40600::set_has_vi_40600_start_exam() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Judge40600::clear_has_vi_40600_start_exam() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Judge40600::clear_vi_40600_start_exam() {
  if (vi_40600_start_exam_ != NULL) vi_40600_start_exam_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40600_start_exam();
}
inline const ::OPMessage::voiceItem& Judge40600::vi_40600_start_exam() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40600.vi_40600_start_exam)
  return vi_40600_start_exam_ != NULL ? *vi_40600_start_exam_ : *default_instance_->vi_40600_start_exam_;
}
inline ::OPMessage::voiceItem* Judge40600::mutable_vi_40600_start_exam() {
  set_has_vi_40600_start_exam();
  if (vi_40600_start_exam_ == NULL) vi_40600_start_exam_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40600.vi_40600_start_exam)
  return vi_40600_start_exam_;
}
inline ::OPMessage::voiceItem* Judge40600::release_vi_40600_start_exam() {
  clear_has_vi_40600_start_exam();
  ::OPMessage::voiceItem* temp = vi_40600_start_exam_;
  vi_40600_start_exam_ = NULL;
  return temp;
}
inline void Judge40600::set_allocated_vi_40600_start_exam(::OPMessage::voiceItem* vi_40600_start_exam) {
  delete vi_40600_start_exam_;
  vi_40600_start_exam_ = vi_40600_start_exam;
  if (vi_40600_start_exam) {
    set_has_vi_40600_start_exam();
  } else {
    clear_has_vi_40600_start_exam();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40600.vi_40600_start_exam)
}

// optional .OPMessage.voiceItem vi_40600_end_exam = 10;
inline bool Judge40600::has_vi_40600_end_exam() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Judge40600::set_has_vi_40600_end_exam() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Judge40600::clear_has_vi_40600_end_exam() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Judge40600::clear_vi_40600_end_exam() {
  if (vi_40600_end_exam_ != NULL) vi_40600_end_exam_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40600_end_exam();
}
inline const ::OPMessage::voiceItem& Judge40600::vi_40600_end_exam() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40600.vi_40600_end_exam)
  return vi_40600_end_exam_ != NULL ? *vi_40600_end_exam_ : *default_instance_->vi_40600_end_exam_;
}
inline ::OPMessage::voiceItem* Judge40600::mutable_vi_40600_end_exam() {
  set_has_vi_40600_end_exam();
  if (vi_40600_end_exam_ == NULL) vi_40600_end_exam_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40600.vi_40600_end_exam)
  return vi_40600_end_exam_;
}
inline ::OPMessage::voiceItem* Judge40600::release_vi_40600_end_exam() {
  clear_has_vi_40600_end_exam();
  ::OPMessage::voiceItem* temp = vi_40600_end_exam_;
  vi_40600_end_exam_ = NULL;
  return temp;
}
inline void Judge40600::set_allocated_vi_40600_end_exam(::OPMessage::voiceItem* vi_40600_end_exam) {
  delete vi_40600_end_exam_;
  vi_40600_end_exam_ = vi_40600_end_exam;
  if (vi_40600_end_exam) {
    set_has_vi_40600_end_exam();
  } else {
    clear_has_vi_40600_end_exam();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40600.vi_40600_end_exam)
}

// optional .OPMessage.voiceItem vi_40600_not_finish = 11;
inline bool Judge40600::has_vi_40600_not_finish() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Judge40600::set_has_vi_40600_not_finish() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Judge40600::clear_has_vi_40600_not_finish() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Judge40600::clear_vi_40600_not_finish() {
  if (vi_40600_not_finish_ != NULL) vi_40600_not_finish_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40600_not_finish();
}
inline const ::OPMessage::voiceItem& Judge40600::vi_40600_not_finish() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40600.vi_40600_not_finish)
  return vi_40600_not_finish_ != NULL ? *vi_40600_not_finish_ : *default_instance_->vi_40600_not_finish_;
}
inline ::OPMessage::voiceItem* Judge40600::mutable_vi_40600_not_finish() {
  set_has_vi_40600_not_finish();
  if (vi_40600_not_finish_ == NULL) vi_40600_not_finish_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40600.vi_40600_not_finish)
  return vi_40600_not_finish_;
}
inline ::OPMessage::voiceItem* Judge40600::release_vi_40600_not_finish() {
  clear_has_vi_40600_not_finish();
  ::OPMessage::voiceItem* temp = vi_40600_not_finish_;
  vi_40600_not_finish_ = NULL;
  return temp;
}
inline void Judge40600::set_allocated_vi_40600_not_finish(::OPMessage::voiceItem* vi_40600_not_finish) {
  delete vi_40600_not_finish_;
  vi_40600_not_finish_ = vi_40600_not_finish;
  if (vi_40600_not_finish) {
    set_has_vi_40600_not_finish();
  } else {
    clear_has_vi_40600_not_finish();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40600.vi_40600_not_finish)
}

// optional .OPMessage.voiceItem vi_40600_not_handbrake = 12;
inline bool Judge40600::has_vi_40600_not_handbrake() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Judge40600::set_has_vi_40600_not_handbrake() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Judge40600::clear_has_vi_40600_not_handbrake() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Judge40600::clear_vi_40600_not_handbrake() {
  if (vi_40600_not_handbrake_ != NULL) vi_40600_not_handbrake_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40600_not_handbrake();
}
inline const ::OPMessage::voiceItem& Judge40600::vi_40600_not_handbrake() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40600.vi_40600_not_handbrake)
  return vi_40600_not_handbrake_ != NULL ? *vi_40600_not_handbrake_ : *default_instance_->vi_40600_not_handbrake_;
}
inline ::OPMessage::voiceItem* Judge40600::mutable_vi_40600_not_handbrake() {
  set_has_vi_40600_not_handbrake();
  if (vi_40600_not_handbrake_ == NULL) vi_40600_not_handbrake_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40600.vi_40600_not_handbrake)
  return vi_40600_not_handbrake_;
}
inline ::OPMessage::voiceItem* Judge40600::release_vi_40600_not_handbrake() {
  clear_has_vi_40600_not_handbrake();
  ::OPMessage::voiceItem* temp = vi_40600_not_handbrake_;
  vi_40600_not_handbrake_ = NULL;
  return temp;
}
inline void Judge40600::set_allocated_vi_40600_not_handbrake(::OPMessage::voiceItem* vi_40600_not_handbrake) {
  delete vi_40600_not_handbrake_;
  vi_40600_not_handbrake_ = vi_40600_not_handbrake;
  if (vi_40600_not_handbrake) {
    set_has_vi_40600_not_handbrake();
  } else {
    clear_has_vi_40600_not_handbrake();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40600.vi_40600_not_handbrake)
}

// optional .OPMessage.voiceItem vi_40600_not_close_door = 13;
inline bool Judge40600::has_vi_40600_not_close_door() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Judge40600::set_has_vi_40600_not_close_door() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Judge40600::clear_has_vi_40600_not_close_door() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Judge40600::clear_vi_40600_not_close_door() {
  if (vi_40600_not_close_door_ != NULL) vi_40600_not_close_door_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40600_not_close_door();
}
inline const ::OPMessage::voiceItem& Judge40600::vi_40600_not_close_door() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40600.vi_40600_not_close_door)
  return vi_40600_not_close_door_ != NULL ? *vi_40600_not_close_door_ : *default_instance_->vi_40600_not_close_door_;
}
inline ::OPMessage::voiceItem* Judge40600::mutable_vi_40600_not_close_door() {
  set_has_vi_40600_not_close_door();
  if (vi_40600_not_close_door_ == NULL) vi_40600_not_close_door_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40600.vi_40600_not_close_door)
  return vi_40600_not_close_door_;
}
inline ::OPMessage::voiceItem* Judge40600::release_vi_40600_not_close_door() {
  clear_has_vi_40600_not_close_door();
  ::OPMessage::voiceItem* temp = vi_40600_not_close_door_;
  vi_40600_not_close_door_ = NULL;
  return temp;
}
inline void Judge40600::set_allocated_vi_40600_not_close_door(::OPMessage::voiceItem* vi_40600_not_close_door) {
  delete vi_40600_not_close_door_;
  vi_40600_not_close_door_ = vi_40600_not_close_door;
  if (vi_40600_not_close_door) {
    set_has_vi_40600_not_close_door();
  } else {
    clear_has_vi_40600_not_close_door();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40600.vi_40600_not_close_door)
}

// optional .OPMessage.voiceItem vi_40600_not_flameout = 14;
inline bool Judge40600::has_vi_40600_not_flameout() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Judge40600::set_has_vi_40600_not_flameout() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Judge40600::clear_has_vi_40600_not_flameout() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Judge40600::clear_vi_40600_not_flameout() {
  if (vi_40600_not_flameout_ != NULL) vi_40600_not_flameout_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40600_not_flameout();
}
inline const ::OPMessage::voiceItem& Judge40600::vi_40600_not_flameout() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40600.vi_40600_not_flameout)
  return vi_40600_not_flameout_ != NULL ? *vi_40600_not_flameout_ : *default_instance_->vi_40600_not_flameout_;
}
inline ::OPMessage::voiceItem* Judge40600::mutable_vi_40600_not_flameout() {
  set_has_vi_40600_not_flameout();
  if (vi_40600_not_flameout_ == NULL) vi_40600_not_flameout_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40600.vi_40600_not_flameout)
  return vi_40600_not_flameout_;
}
inline ::OPMessage::voiceItem* Judge40600::release_vi_40600_not_flameout() {
  clear_has_vi_40600_not_flameout();
  ::OPMessage::voiceItem* temp = vi_40600_not_flameout_;
  vi_40600_not_flameout_ = NULL;
  return temp;
}
inline void Judge40600::set_allocated_vi_40600_not_flameout(::OPMessage::voiceItem* vi_40600_not_flameout) {
  delete vi_40600_not_flameout_;
  vi_40600_not_flameout_ = vi_40600_not_flameout;
  if (vi_40600_not_flameout) {
    set_has_vi_40600_not_flameout();
  } else {
    clear_has_vi_40600_not_flameout();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40600.vi_40600_not_flameout)
}

// optional .OPMessage.voiceItem vi_40600_turn_lamp_use_error = 15;
inline bool Judge40600::has_vi_40600_turn_lamp_use_error() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Judge40600::set_has_vi_40600_turn_lamp_use_error() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Judge40600::clear_has_vi_40600_turn_lamp_use_error() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Judge40600::clear_vi_40600_turn_lamp_use_error() {
  if (vi_40600_turn_lamp_use_error_ != NULL) vi_40600_turn_lamp_use_error_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40600_turn_lamp_use_error();
}
inline const ::OPMessage::voiceItem& Judge40600::vi_40600_turn_lamp_use_error() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40600.vi_40600_turn_lamp_use_error)
  return vi_40600_turn_lamp_use_error_ != NULL ? *vi_40600_turn_lamp_use_error_ : *default_instance_->vi_40600_turn_lamp_use_error_;
}
inline ::OPMessage::voiceItem* Judge40600::mutable_vi_40600_turn_lamp_use_error() {
  set_has_vi_40600_turn_lamp_use_error();
  if (vi_40600_turn_lamp_use_error_ == NULL) vi_40600_turn_lamp_use_error_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40600.vi_40600_turn_lamp_use_error)
  return vi_40600_turn_lamp_use_error_;
}
inline ::OPMessage::voiceItem* Judge40600::release_vi_40600_turn_lamp_use_error() {
  clear_has_vi_40600_turn_lamp_use_error();
  ::OPMessage::voiceItem* temp = vi_40600_turn_lamp_use_error_;
  vi_40600_turn_lamp_use_error_ = NULL;
  return temp;
}
inline void Judge40600::set_allocated_vi_40600_turn_lamp_use_error(::OPMessage::voiceItem* vi_40600_turn_lamp_use_error) {
  delete vi_40600_turn_lamp_use_error_;
  vi_40600_turn_lamp_use_error_ = vi_40600_turn_lamp_use_error;
  if (vi_40600_turn_lamp_use_error) {
    set_has_vi_40600_turn_lamp_use_error();
  } else {
    clear_has_vi_40600_turn_lamp_use_error();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40600.vi_40600_turn_lamp_use_error)
}

// optional .OPMessage.voiceItem vi_40600_turn_lamp_not_use = 16;
inline bool Judge40600::has_vi_40600_turn_lamp_not_use() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Judge40600::set_has_vi_40600_turn_lamp_not_use() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Judge40600::clear_has_vi_40600_turn_lamp_not_use() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Judge40600::clear_vi_40600_turn_lamp_not_use() {
  if (vi_40600_turn_lamp_not_use_ != NULL) vi_40600_turn_lamp_not_use_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40600_turn_lamp_not_use();
}
inline const ::OPMessage::voiceItem& Judge40600::vi_40600_turn_lamp_not_use() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40600.vi_40600_turn_lamp_not_use)
  return vi_40600_turn_lamp_not_use_ != NULL ? *vi_40600_turn_lamp_not_use_ : *default_instance_->vi_40600_turn_lamp_not_use_;
}
inline ::OPMessage::voiceItem* Judge40600::mutable_vi_40600_turn_lamp_not_use() {
  set_has_vi_40600_turn_lamp_not_use();
  if (vi_40600_turn_lamp_not_use_ == NULL) vi_40600_turn_lamp_not_use_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40600.vi_40600_turn_lamp_not_use)
  return vi_40600_turn_lamp_not_use_;
}
inline ::OPMessage::voiceItem* Judge40600::release_vi_40600_turn_lamp_not_use() {
  clear_has_vi_40600_turn_lamp_not_use();
  ::OPMessage::voiceItem* temp = vi_40600_turn_lamp_not_use_;
  vi_40600_turn_lamp_not_use_ = NULL;
  return temp;
}
inline void Judge40600::set_allocated_vi_40600_turn_lamp_not_use(::OPMessage::voiceItem* vi_40600_turn_lamp_not_use) {
  delete vi_40600_turn_lamp_not_use_;
  vi_40600_turn_lamp_not_use_ = vi_40600_turn_lamp_not_use;
  if (vi_40600_turn_lamp_not_use) {
    set_has_vi_40600_turn_lamp_not_use();
  } else {
    clear_has_vi_40600_turn_lamp_not_use();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40600.vi_40600_turn_lamp_not_use)
}

// optional .OPMessage.voiceItem vi_40600_handbrake_footbrake_order_error = 17;
inline bool Judge40600::has_vi_40600_handbrake_footbrake_order_error() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Judge40600::set_has_vi_40600_handbrake_footbrake_order_error() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Judge40600::clear_has_vi_40600_handbrake_footbrake_order_error() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Judge40600::clear_vi_40600_handbrake_footbrake_order_error() {
  if (vi_40600_handbrake_footbrake_order_error_ != NULL) vi_40600_handbrake_footbrake_order_error_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40600_handbrake_footbrake_order_error();
}
inline const ::OPMessage::voiceItem& Judge40600::vi_40600_handbrake_footbrake_order_error() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40600.vi_40600_handbrake_footbrake_order_error)
  return vi_40600_handbrake_footbrake_order_error_ != NULL ? *vi_40600_handbrake_footbrake_order_error_ : *default_instance_->vi_40600_handbrake_footbrake_order_error_;
}
inline ::OPMessage::voiceItem* Judge40600::mutable_vi_40600_handbrake_footbrake_order_error() {
  set_has_vi_40600_handbrake_footbrake_order_error();
  if (vi_40600_handbrake_footbrake_order_error_ == NULL) vi_40600_handbrake_footbrake_order_error_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40600.vi_40600_handbrake_footbrake_order_error)
  return vi_40600_handbrake_footbrake_order_error_;
}
inline ::OPMessage::voiceItem* Judge40600::release_vi_40600_handbrake_footbrake_order_error() {
  clear_has_vi_40600_handbrake_footbrake_order_error();
  ::OPMessage::voiceItem* temp = vi_40600_handbrake_footbrake_order_error_;
  vi_40600_handbrake_footbrake_order_error_ = NULL;
  return temp;
}
inline void Judge40600::set_allocated_vi_40600_handbrake_footbrake_order_error(::OPMessage::voiceItem* vi_40600_handbrake_footbrake_order_error) {
  delete vi_40600_handbrake_footbrake_order_error_;
  vi_40600_handbrake_footbrake_order_error_ = vi_40600_handbrake_footbrake_order_error;
  if (vi_40600_handbrake_footbrake_order_error) {
    set_has_vi_40600_handbrake_footbrake_order_error();
  } else {
    clear_has_vi_40600_handbrake_footbrake_order_error();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40600.vi_40600_handbrake_footbrake_order_error)
}

// -------------------------------------------------------------------

// Judge40601

// optional int32 itemCode = 1;
inline bool Judge40601::has_itemcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Judge40601::set_has_itemcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Judge40601::clear_has_itemcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Judge40601::clear_itemcode() {
  itemcode_ = 0;
  clear_has_itemcode();
}
inline ::google::protobuf::int32 Judge40601::itemcode() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40601.itemCode)
  return itemcode_;
}
inline void Judge40601::set_itemcode(::google::protobuf::int32 value) {
  set_has_itemcode();
  itemcode_ = value;
  // @@protoc_insertion_point(field_set:OPMessage.Judge40601.itemCode)
}

// optional string itemName = 2;
inline bool Judge40601::has_itemname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Judge40601::set_has_itemname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Judge40601::clear_has_itemname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Judge40601::clear_itemname() {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_->clear();
  }
  clear_has_itemname();
}
inline const ::std::string& Judge40601::itemname() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40601.itemName)
  return *itemname_;
}
inline void Judge40601::set_itemname(const ::std::string& value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
  // @@protoc_insertion_point(field_set:OPMessage.Judge40601.itemName)
}
inline void Judge40601::set_itemname(const char* value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
  // @@protoc_insertion_point(field_set_char:OPMessage.Judge40601.itemName)
}
inline void Judge40601::set_itemname(const char* value, size_t size) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OPMessage.Judge40601.itemName)
}
inline ::std::string* Judge40601::mutable_itemname() {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40601.itemName)
  return itemname_;
}
inline ::std::string* Judge40601::release_itemname() {
  clear_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = itemname_;
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Judge40601::set_allocated_itemname(::std::string* itemname) {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (itemname) {
    set_has_itemname();
    itemname_ = itemname;
  } else {
    clear_has_itemname();
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40601.itemName)
}

// optional .OPMessage.judgeItem max_time = 3;
inline bool Judge40601::has_max_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Judge40601::set_has_max_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Judge40601::clear_has_max_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Judge40601::clear_max_time() {
  if (max_time_ != NULL) max_time_->::OPMessage::judgeItem::Clear();
  clear_has_max_time();
}
inline const ::OPMessage::judgeItem& Judge40601::max_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40601.max_time)
  return max_time_ != NULL ? *max_time_ : *default_instance_->max_time_;
}
inline ::OPMessage::judgeItem* Judge40601::mutable_max_time() {
  set_has_max_time();
  if (max_time_ == NULL) max_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40601.max_time)
  return max_time_;
}
inline ::OPMessage::judgeItem* Judge40601::release_max_time() {
  clear_has_max_time();
  ::OPMessage::judgeItem* temp = max_time_;
  max_time_ = NULL;
  return temp;
}
inline void Judge40601::set_allocated_max_time(::OPMessage::judgeItem* max_time) {
  delete max_time_;
  max_time_ = max_time;
  if (max_time) {
    set_has_max_time();
  } else {
    clear_has_max_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40601.max_time)
}

// optional .OPMessage.judgeItem max_trigger_distance = 4;
inline bool Judge40601::has_max_trigger_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Judge40601::set_has_max_trigger_distance() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Judge40601::clear_has_max_trigger_distance() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Judge40601::clear_max_trigger_distance() {
  if (max_trigger_distance_ != NULL) max_trigger_distance_->::OPMessage::judgeItem::Clear();
  clear_has_max_trigger_distance();
}
inline const ::OPMessage::judgeItem& Judge40601::max_trigger_distance() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40601.max_trigger_distance)
  return max_trigger_distance_ != NULL ? *max_trigger_distance_ : *default_instance_->max_trigger_distance_;
}
inline ::OPMessage::judgeItem* Judge40601::mutable_max_trigger_distance() {
  set_has_max_trigger_distance();
  if (max_trigger_distance_ == NULL) max_trigger_distance_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40601.max_trigger_distance)
  return max_trigger_distance_;
}
inline ::OPMessage::judgeItem* Judge40601::release_max_trigger_distance() {
  clear_has_max_trigger_distance();
  ::OPMessage::judgeItem* temp = max_trigger_distance_;
  max_trigger_distance_ = NULL;
  return temp;
}
inline void Judge40601::set_allocated_max_trigger_distance(::OPMessage::judgeItem* max_trigger_distance) {
  delete max_trigger_distance_;
  max_trigger_distance_ = max_trigger_distance;
  if (max_trigger_distance) {
    set_has_max_trigger_distance();
  } else {
    clear_has_max_trigger_distance();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40601.max_trigger_distance)
}

// optional .OPMessage.judgeItem min_turn_signal_time = 5;
inline bool Judge40601::has_min_turn_signal_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Judge40601::set_has_min_turn_signal_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Judge40601::clear_has_min_turn_signal_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Judge40601::clear_min_turn_signal_time() {
  if (min_turn_signal_time_ != NULL) min_turn_signal_time_->::OPMessage::judgeItem::Clear();
  clear_has_min_turn_signal_time();
}
inline const ::OPMessage::judgeItem& Judge40601::min_turn_signal_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40601.min_turn_signal_time)
  return min_turn_signal_time_ != NULL ? *min_turn_signal_time_ : *default_instance_->min_turn_signal_time_;
}
inline ::OPMessage::judgeItem* Judge40601::mutable_min_turn_signal_time() {
  set_has_min_turn_signal_time();
  if (min_turn_signal_time_ == NULL) min_turn_signal_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40601.min_turn_signal_time)
  return min_turn_signal_time_;
}
inline ::OPMessage::judgeItem* Judge40601::release_min_turn_signal_time() {
  clear_has_min_turn_signal_time();
  ::OPMessage::judgeItem* temp = min_turn_signal_time_;
  min_turn_signal_time_ = NULL;
  return temp;
}
inline void Judge40601::set_allocated_min_turn_signal_time(::OPMessage::judgeItem* min_turn_signal_time) {
  delete min_turn_signal_time_;
  min_turn_signal_time_ = min_turn_signal_time;
  if (min_turn_signal_time) {
    set_has_min_turn_signal_time();
  } else {
    clear_has_min_turn_signal_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40601.min_turn_signal_time)
}

// optional .OPMessage.judgeItem finish_mode = 6;
inline bool Judge40601::has_finish_mode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Judge40601::set_has_finish_mode() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Judge40601::clear_has_finish_mode() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Judge40601::clear_finish_mode() {
  if (finish_mode_ != NULL) finish_mode_->::OPMessage::judgeItem::Clear();
  clear_has_finish_mode();
}
inline const ::OPMessage::judgeItem& Judge40601::finish_mode() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40601.finish_mode)
  return finish_mode_ != NULL ? *finish_mode_ : *default_instance_->finish_mode_;
}
inline ::OPMessage::judgeItem* Judge40601::mutable_finish_mode() {
  set_has_finish_mode();
  if (finish_mode_ == NULL) finish_mode_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40601.finish_mode)
  return finish_mode_;
}
inline ::OPMessage::judgeItem* Judge40601::release_finish_mode() {
  clear_has_finish_mode();
  ::OPMessage::judgeItem* temp = finish_mode_;
  finish_mode_ = NULL;
  return temp;
}
inline void Judge40601::set_allocated_finish_mode(::OPMessage::judgeItem* finish_mode) {
  delete finish_mode_;
  finish_mode_ = finish_mode;
  if (finish_mode) {
    set_has_finish_mode();
  } else {
    clear_has_finish_mode();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40601.finish_mode)
}

// optional .OPMessage.judgeItem min_horn_time = 7;
inline bool Judge40601::has_min_horn_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Judge40601::set_has_min_horn_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Judge40601::clear_has_min_horn_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Judge40601::clear_min_horn_time() {
  if (min_horn_time_ != NULL) min_horn_time_->::OPMessage::judgeItem::Clear();
  clear_has_min_horn_time();
}
inline const ::OPMessage::judgeItem& Judge40601::min_horn_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40601.min_horn_time)
  return min_horn_time_ != NULL ? *min_horn_time_ : *default_instance_->min_horn_time_;
}
inline ::OPMessage::judgeItem* Judge40601::mutable_min_horn_time() {
  set_has_min_horn_time();
  if (min_horn_time_ == NULL) min_horn_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40601.min_horn_time)
  return min_horn_time_;
}
inline ::OPMessage::judgeItem* Judge40601::release_min_horn_time() {
  clear_has_min_horn_time();
  ::OPMessage::judgeItem* temp = min_horn_time_;
  min_horn_time_ = NULL;
  return temp;
}
inline void Judge40601::set_allocated_min_horn_time(::OPMessage::judgeItem* min_horn_time) {
  delete min_horn_time_;
  min_horn_time_ = min_horn_time;
  if (min_horn_time) {
    set_has_min_horn_time();
  } else {
    clear_has_min_horn_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40601.min_horn_time)
}

// optional .OPMessage.judgeItem sideline_check_sensor = 8;
inline bool Judge40601::has_sideline_check_sensor() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Judge40601::set_has_sideline_check_sensor() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Judge40601::clear_has_sideline_check_sensor() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Judge40601::clear_sideline_check_sensor() {
  if (sideline_check_sensor_ != NULL) sideline_check_sensor_->::OPMessage::judgeItem::Clear();
  clear_has_sideline_check_sensor();
}
inline const ::OPMessage::judgeItem& Judge40601::sideline_check_sensor() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40601.sideline_check_sensor)
  return sideline_check_sensor_ != NULL ? *sideline_check_sensor_ : *default_instance_->sideline_check_sensor_;
}
inline ::OPMessage::judgeItem* Judge40601::mutable_sideline_check_sensor() {
  set_has_sideline_check_sensor();
  if (sideline_check_sensor_ == NULL) sideline_check_sensor_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40601.sideline_check_sensor)
  return sideline_check_sensor_;
}
inline ::OPMessage::judgeItem* Judge40601::release_sideline_check_sensor() {
  clear_has_sideline_check_sensor();
  ::OPMessage::judgeItem* temp = sideline_check_sensor_;
  sideline_check_sensor_ = NULL;
  return temp;
}
inline void Judge40601::set_allocated_sideline_check_sensor(::OPMessage::judgeItem* sideline_check_sensor) {
  delete sideline_check_sensor_;
  sideline_check_sensor_ = sideline_check_sensor;
  if (sideline_check_sensor) {
    set_has_sideline_check_sensor();
  } else {
    clear_has_sideline_check_sensor();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40601.sideline_check_sensor)
}

// optional .OPMessage.voiceItem vi_40600_sideline_error = 9;
inline bool Judge40601::has_vi_40600_sideline_error() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Judge40601::set_has_vi_40600_sideline_error() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Judge40601::clear_has_vi_40600_sideline_error() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Judge40601::clear_vi_40600_sideline_error() {
  if (vi_40600_sideline_error_ != NULL) vi_40600_sideline_error_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40600_sideline_error();
}
inline const ::OPMessage::voiceItem& Judge40601::vi_40600_sideline_error() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40601.vi_40600_sideline_error)
  return vi_40600_sideline_error_ != NULL ? *vi_40600_sideline_error_ : *default_instance_->vi_40600_sideline_error_;
}
inline ::OPMessage::voiceItem* Judge40601::mutable_vi_40600_sideline_error() {
  set_has_vi_40600_sideline_error();
  if (vi_40600_sideline_error_ == NULL) vi_40600_sideline_error_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40601.vi_40600_sideline_error)
  return vi_40600_sideline_error_;
}
inline ::OPMessage::voiceItem* Judge40601::release_vi_40600_sideline_error() {
  clear_has_vi_40600_sideline_error();
  ::OPMessage::voiceItem* temp = vi_40600_sideline_error_;
  vi_40600_sideline_error_ = NULL;
  return temp;
}
inline void Judge40601::set_allocated_vi_40600_sideline_error(::OPMessage::voiceItem* vi_40600_sideline_error) {
  delete vi_40600_sideline_error_;
  vi_40600_sideline_error_ = vi_40600_sideline_error;
  if (vi_40600_sideline_error) {
    set_has_vi_40600_sideline_error();
  } else {
    clear_has_vi_40600_sideline_error();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40601.vi_40600_sideline_error)
}

// optional .OPMessage.voiceItem vi_40601_start_exam = 10;
inline bool Judge40601::has_vi_40601_start_exam() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Judge40601::set_has_vi_40601_start_exam() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Judge40601::clear_has_vi_40601_start_exam() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Judge40601::clear_vi_40601_start_exam() {
  if (vi_40601_start_exam_ != NULL) vi_40601_start_exam_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40601_start_exam();
}
inline const ::OPMessage::voiceItem& Judge40601::vi_40601_start_exam() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40601.vi_40601_start_exam)
  return vi_40601_start_exam_ != NULL ? *vi_40601_start_exam_ : *default_instance_->vi_40601_start_exam_;
}
inline ::OPMessage::voiceItem* Judge40601::mutable_vi_40601_start_exam() {
  set_has_vi_40601_start_exam();
  if (vi_40601_start_exam_ == NULL) vi_40601_start_exam_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40601.vi_40601_start_exam)
  return vi_40601_start_exam_;
}
inline ::OPMessage::voiceItem* Judge40601::release_vi_40601_start_exam() {
  clear_has_vi_40601_start_exam();
  ::OPMessage::voiceItem* temp = vi_40601_start_exam_;
  vi_40601_start_exam_ = NULL;
  return temp;
}
inline void Judge40601::set_allocated_vi_40601_start_exam(::OPMessage::voiceItem* vi_40601_start_exam) {
  delete vi_40601_start_exam_;
  vi_40601_start_exam_ = vi_40601_start_exam;
  if (vi_40601_start_exam) {
    set_has_vi_40601_start_exam();
  } else {
    clear_has_vi_40601_start_exam();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40601.vi_40601_start_exam)
}

// optional .OPMessage.voiceItem vi_40601_end_exam = 11;
inline bool Judge40601::has_vi_40601_end_exam() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Judge40601::set_has_vi_40601_end_exam() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Judge40601::clear_has_vi_40601_end_exam() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Judge40601::clear_vi_40601_end_exam() {
  if (vi_40601_end_exam_ != NULL) vi_40601_end_exam_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40601_end_exam();
}
inline const ::OPMessage::voiceItem& Judge40601::vi_40601_end_exam() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40601.vi_40601_end_exam)
  return vi_40601_end_exam_ != NULL ? *vi_40601_end_exam_ : *default_instance_->vi_40601_end_exam_;
}
inline ::OPMessage::voiceItem* Judge40601::mutable_vi_40601_end_exam() {
  set_has_vi_40601_end_exam();
  if (vi_40601_end_exam_ == NULL) vi_40601_end_exam_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40601.vi_40601_end_exam)
  return vi_40601_end_exam_;
}
inline ::OPMessage::voiceItem* Judge40601::release_vi_40601_end_exam() {
  clear_has_vi_40601_end_exam();
  ::OPMessage::voiceItem* temp = vi_40601_end_exam_;
  vi_40601_end_exam_ = NULL;
  return temp;
}
inline void Judge40601::set_allocated_vi_40601_end_exam(::OPMessage::voiceItem* vi_40601_end_exam) {
  delete vi_40601_end_exam_;
  vi_40601_end_exam_ = vi_40601_end_exam;
  if (vi_40601_end_exam) {
    set_has_vi_40601_end_exam();
  } else {
    clear_has_vi_40601_end_exam();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40601.vi_40601_end_exam)
}

// optional .OPMessage.voiceItem vi_40601_start_driving = 12;
inline bool Judge40601::has_vi_40601_start_driving() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Judge40601::set_has_vi_40601_start_driving() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Judge40601::clear_has_vi_40601_start_driving() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Judge40601::clear_vi_40601_start_driving() {
  if (vi_40601_start_driving_ != NULL) vi_40601_start_driving_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40601_start_driving();
}
inline const ::OPMessage::voiceItem& Judge40601::vi_40601_start_driving() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40601.vi_40601_start_driving)
  return vi_40601_start_driving_ != NULL ? *vi_40601_start_driving_ : *default_instance_->vi_40601_start_driving_;
}
inline ::OPMessage::voiceItem* Judge40601::mutable_vi_40601_start_driving() {
  set_has_vi_40601_start_driving();
  if (vi_40601_start_driving_ == NULL) vi_40601_start_driving_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40601.vi_40601_start_driving)
  return vi_40601_start_driving_;
}
inline ::OPMessage::voiceItem* Judge40601::release_vi_40601_start_driving() {
  clear_has_vi_40601_start_driving();
  ::OPMessage::voiceItem* temp = vi_40601_start_driving_;
  vi_40601_start_driving_ = NULL;
  return temp;
}
inline void Judge40601::set_allocated_vi_40601_start_driving(::OPMessage::voiceItem* vi_40601_start_driving) {
  delete vi_40601_start_driving_;
  vi_40601_start_driving_ = vi_40601_start_driving;
  if (vi_40601_start_driving) {
    set_has_vi_40601_start_driving();
  } else {
    clear_has_vi_40601_start_driving();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40601.vi_40601_start_driving)
}

// optional .OPMessage.voiceItem vi_40601_finish_driving = 13;
inline bool Judge40601::has_vi_40601_finish_driving() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Judge40601::set_has_vi_40601_finish_driving() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Judge40601::clear_has_vi_40601_finish_driving() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Judge40601::clear_vi_40601_finish_driving() {
  if (vi_40601_finish_driving_ != NULL) vi_40601_finish_driving_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40601_finish_driving();
}
inline const ::OPMessage::voiceItem& Judge40601::vi_40601_finish_driving() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40601.vi_40601_finish_driving)
  return vi_40601_finish_driving_ != NULL ? *vi_40601_finish_driving_ : *default_instance_->vi_40601_finish_driving_;
}
inline ::OPMessage::voiceItem* Judge40601::mutable_vi_40601_finish_driving() {
  set_has_vi_40601_finish_driving();
  if (vi_40601_finish_driving_ == NULL) vi_40601_finish_driving_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40601.vi_40601_finish_driving)
  return vi_40601_finish_driving_;
}
inline ::OPMessage::voiceItem* Judge40601::release_vi_40601_finish_driving() {
  clear_has_vi_40601_finish_driving();
  ::OPMessage::voiceItem* temp = vi_40601_finish_driving_;
  vi_40601_finish_driving_ = NULL;
  return temp;
}
inline void Judge40601::set_allocated_vi_40601_finish_driving(::OPMessage::voiceItem* vi_40601_finish_driving) {
  delete vi_40601_finish_driving_;
  vi_40601_finish_driving_ = vi_40601_finish_driving;
  if (vi_40601_finish_driving) {
    set_has_vi_40601_finish_driving();
  } else {
    clear_has_vi_40601_finish_driving();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40601.vi_40601_finish_driving)
}

// optional .OPMessage.voiceItem vi_40601_not_finish = 14;
inline bool Judge40601::has_vi_40601_not_finish() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Judge40601::set_has_vi_40601_not_finish() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Judge40601::clear_has_vi_40601_not_finish() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Judge40601::clear_vi_40601_not_finish() {
  if (vi_40601_not_finish_ != NULL) vi_40601_not_finish_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40601_not_finish();
}
inline const ::OPMessage::voiceItem& Judge40601::vi_40601_not_finish() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40601.vi_40601_not_finish)
  return vi_40601_not_finish_ != NULL ? *vi_40601_not_finish_ : *default_instance_->vi_40601_not_finish_;
}
inline ::OPMessage::voiceItem* Judge40601::mutable_vi_40601_not_finish() {
  set_has_vi_40601_not_finish();
  if (vi_40601_not_finish_ == NULL) vi_40601_not_finish_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40601.vi_40601_not_finish)
  return vi_40601_not_finish_;
}
inline ::OPMessage::voiceItem* Judge40601::release_vi_40601_not_finish() {
  clear_has_vi_40601_not_finish();
  ::OPMessage::voiceItem* temp = vi_40601_not_finish_;
  vi_40601_not_finish_ = NULL;
  return temp;
}
inline void Judge40601::set_allocated_vi_40601_not_finish(::OPMessage::voiceItem* vi_40601_not_finish) {
  delete vi_40601_not_finish_;
  vi_40601_not_finish_ = vi_40601_not_finish;
  if (vi_40601_not_finish) {
    set_has_vi_40601_not_finish();
  } else {
    clear_has_vi_40601_not_finish();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40601.vi_40601_not_finish)
}

// optional .OPMessage.voiceItem vi_40601_turn_lamp_use_error = 15;
inline bool Judge40601::has_vi_40601_turn_lamp_use_error() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Judge40601::set_has_vi_40601_turn_lamp_use_error() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Judge40601::clear_has_vi_40601_turn_lamp_use_error() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Judge40601::clear_vi_40601_turn_lamp_use_error() {
  if (vi_40601_turn_lamp_use_error_ != NULL) vi_40601_turn_lamp_use_error_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40601_turn_lamp_use_error();
}
inline const ::OPMessage::voiceItem& Judge40601::vi_40601_turn_lamp_use_error() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40601.vi_40601_turn_lamp_use_error)
  return vi_40601_turn_lamp_use_error_ != NULL ? *vi_40601_turn_lamp_use_error_ : *default_instance_->vi_40601_turn_lamp_use_error_;
}
inline ::OPMessage::voiceItem* Judge40601::mutable_vi_40601_turn_lamp_use_error() {
  set_has_vi_40601_turn_lamp_use_error();
  if (vi_40601_turn_lamp_use_error_ == NULL) vi_40601_turn_lamp_use_error_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40601.vi_40601_turn_lamp_use_error)
  return vi_40601_turn_lamp_use_error_;
}
inline ::OPMessage::voiceItem* Judge40601::release_vi_40601_turn_lamp_use_error() {
  clear_has_vi_40601_turn_lamp_use_error();
  ::OPMessage::voiceItem* temp = vi_40601_turn_lamp_use_error_;
  vi_40601_turn_lamp_use_error_ = NULL;
  return temp;
}
inline void Judge40601::set_allocated_vi_40601_turn_lamp_use_error(::OPMessage::voiceItem* vi_40601_turn_lamp_use_error) {
  delete vi_40601_turn_lamp_use_error_;
  vi_40601_turn_lamp_use_error_ = vi_40601_turn_lamp_use_error;
  if (vi_40601_turn_lamp_use_error) {
    set_has_vi_40601_turn_lamp_use_error();
  } else {
    clear_has_vi_40601_turn_lamp_use_error();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40601.vi_40601_turn_lamp_use_error)
}

// optional .OPMessage.voiceItem vi_40601_turn_lamp_not_use = 16;
inline bool Judge40601::has_vi_40601_turn_lamp_not_use() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Judge40601::set_has_vi_40601_turn_lamp_not_use() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Judge40601::clear_has_vi_40601_turn_lamp_not_use() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Judge40601::clear_vi_40601_turn_lamp_not_use() {
  if (vi_40601_turn_lamp_not_use_ != NULL) vi_40601_turn_lamp_not_use_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40601_turn_lamp_not_use();
}
inline const ::OPMessage::voiceItem& Judge40601::vi_40601_turn_lamp_not_use() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40601.vi_40601_turn_lamp_not_use)
  return vi_40601_turn_lamp_not_use_ != NULL ? *vi_40601_turn_lamp_not_use_ : *default_instance_->vi_40601_turn_lamp_not_use_;
}
inline ::OPMessage::voiceItem* Judge40601::mutable_vi_40601_turn_lamp_not_use() {
  set_has_vi_40601_turn_lamp_not_use();
  if (vi_40601_turn_lamp_not_use_ == NULL) vi_40601_turn_lamp_not_use_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40601.vi_40601_turn_lamp_not_use)
  return vi_40601_turn_lamp_not_use_;
}
inline ::OPMessage::voiceItem* Judge40601::release_vi_40601_turn_lamp_not_use() {
  clear_has_vi_40601_turn_lamp_not_use();
  ::OPMessage::voiceItem* temp = vi_40601_turn_lamp_not_use_;
  vi_40601_turn_lamp_not_use_ = NULL;
  return temp;
}
inline void Judge40601::set_allocated_vi_40601_turn_lamp_not_use(::OPMessage::voiceItem* vi_40601_turn_lamp_not_use) {
  delete vi_40601_turn_lamp_not_use_;
  vi_40601_turn_lamp_not_use_ = vi_40601_turn_lamp_not_use;
  if (vi_40601_turn_lamp_not_use) {
    set_has_vi_40601_turn_lamp_not_use();
  } else {
    clear_has_vi_40601_turn_lamp_not_use();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40601.vi_40601_turn_lamp_not_use)
}

// optional .OPMessage.voiceItem vi_40601_not_handbrake = 17;
inline bool Judge40601::has_vi_40601_not_handbrake() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Judge40601::set_has_vi_40601_not_handbrake() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Judge40601::clear_has_vi_40601_not_handbrake() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Judge40601::clear_vi_40601_not_handbrake() {
  if (vi_40601_not_handbrake_ != NULL) vi_40601_not_handbrake_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40601_not_handbrake();
}
inline const ::OPMessage::voiceItem& Judge40601::vi_40601_not_handbrake() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40601.vi_40601_not_handbrake)
  return vi_40601_not_handbrake_ != NULL ? *vi_40601_not_handbrake_ : *default_instance_->vi_40601_not_handbrake_;
}
inline ::OPMessage::voiceItem* Judge40601::mutable_vi_40601_not_handbrake() {
  set_has_vi_40601_not_handbrake();
  if (vi_40601_not_handbrake_ == NULL) vi_40601_not_handbrake_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40601.vi_40601_not_handbrake)
  return vi_40601_not_handbrake_;
}
inline ::OPMessage::voiceItem* Judge40601::release_vi_40601_not_handbrake() {
  clear_has_vi_40601_not_handbrake();
  ::OPMessage::voiceItem* temp = vi_40601_not_handbrake_;
  vi_40601_not_handbrake_ = NULL;
  return temp;
}
inline void Judge40601::set_allocated_vi_40601_not_handbrake(::OPMessage::voiceItem* vi_40601_not_handbrake) {
  delete vi_40601_not_handbrake_;
  vi_40601_not_handbrake_ = vi_40601_not_handbrake;
  if (vi_40601_not_handbrake) {
    set_has_vi_40601_not_handbrake();
  } else {
    clear_has_vi_40601_not_handbrake();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40601.vi_40601_not_handbrake)
}

// optional .OPMessage.voiceItem vi_40601_handbrake_footbrake_order_error = 18;
inline bool Judge40601::has_vi_40601_handbrake_footbrake_order_error() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Judge40601::set_has_vi_40601_handbrake_footbrake_order_error() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Judge40601::clear_has_vi_40601_handbrake_footbrake_order_error() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Judge40601::clear_vi_40601_handbrake_footbrake_order_error() {
  if (vi_40601_handbrake_footbrake_order_error_ != NULL) vi_40601_handbrake_footbrake_order_error_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40601_handbrake_footbrake_order_error();
}
inline const ::OPMessage::voiceItem& Judge40601::vi_40601_handbrake_footbrake_order_error() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40601.vi_40601_handbrake_footbrake_order_error)
  return vi_40601_handbrake_footbrake_order_error_ != NULL ? *vi_40601_handbrake_footbrake_order_error_ : *default_instance_->vi_40601_handbrake_footbrake_order_error_;
}
inline ::OPMessage::voiceItem* Judge40601::mutable_vi_40601_handbrake_footbrake_order_error() {
  set_has_vi_40601_handbrake_footbrake_order_error();
  if (vi_40601_handbrake_footbrake_order_error_ == NULL) vi_40601_handbrake_footbrake_order_error_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40601.vi_40601_handbrake_footbrake_order_error)
  return vi_40601_handbrake_footbrake_order_error_;
}
inline ::OPMessage::voiceItem* Judge40601::release_vi_40601_handbrake_footbrake_order_error() {
  clear_has_vi_40601_handbrake_footbrake_order_error();
  ::OPMessage::voiceItem* temp = vi_40601_handbrake_footbrake_order_error_;
  vi_40601_handbrake_footbrake_order_error_ = NULL;
  return temp;
}
inline void Judge40601::set_allocated_vi_40601_handbrake_footbrake_order_error(::OPMessage::voiceItem* vi_40601_handbrake_footbrake_order_error) {
  delete vi_40601_handbrake_footbrake_order_error_;
  vi_40601_handbrake_footbrake_order_error_ = vi_40601_handbrake_footbrake_order_error;
  if (vi_40601_handbrake_footbrake_order_error) {
    set_has_vi_40601_handbrake_footbrake_order_error();
  } else {
    clear_has_vi_40601_handbrake_footbrake_order_error();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40601.vi_40601_handbrake_footbrake_order_error)
}

// optional .OPMessage.voiceItem vi_40601_horn_not_use = 19;
inline bool Judge40601::has_vi_40601_horn_not_use() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Judge40601::set_has_vi_40601_horn_not_use() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Judge40601::clear_has_vi_40601_horn_not_use() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Judge40601::clear_vi_40601_horn_not_use() {
  if (vi_40601_horn_not_use_ != NULL) vi_40601_horn_not_use_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40601_horn_not_use();
}
inline const ::OPMessage::voiceItem& Judge40601::vi_40601_horn_not_use() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40601.vi_40601_horn_not_use)
  return vi_40601_horn_not_use_ != NULL ? *vi_40601_horn_not_use_ : *default_instance_->vi_40601_horn_not_use_;
}
inline ::OPMessage::voiceItem* Judge40601::mutable_vi_40601_horn_not_use() {
  set_has_vi_40601_horn_not_use();
  if (vi_40601_horn_not_use_ == NULL) vi_40601_horn_not_use_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40601.vi_40601_horn_not_use)
  return vi_40601_horn_not_use_;
}
inline ::OPMessage::voiceItem* Judge40601::release_vi_40601_horn_not_use() {
  clear_has_vi_40601_horn_not_use();
  ::OPMessage::voiceItem* temp = vi_40601_horn_not_use_;
  vi_40601_horn_not_use_ = NULL;
  return temp;
}
inline void Judge40601::set_allocated_vi_40601_horn_not_use(::OPMessage::voiceItem* vi_40601_horn_not_use) {
  delete vi_40601_horn_not_use_;
  vi_40601_horn_not_use_ = vi_40601_horn_not_use;
  if (vi_40601_horn_not_use) {
    set_has_vi_40601_horn_not_use();
  } else {
    clear_has_vi_40601_horn_not_use();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40601.vi_40601_horn_not_use)
}

// optional .OPMessage.voiceItem vi_40601_sideline_error = 20;
inline bool Judge40601::has_vi_40601_sideline_error() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Judge40601::set_has_vi_40601_sideline_error() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Judge40601::clear_has_vi_40601_sideline_error() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Judge40601::clear_vi_40601_sideline_error() {
  if (vi_40601_sideline_error_ != NULL) vi_40601_sideline_error_->::OPMessage::voiceItem::Clear();
  clear_has_vi_40601_sideline_error();
}
inline const ::OPMessage::voiceItem& Judge40601::vi_40601_sideline_error() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge40601.vi_40601_sideline_error)
  return vi_40601_sideline_error_ != NULL ? *vi_40601_sideline_error_ : *default_instance_->vi_40601_sideline_error_;
}
inline ::OPMessage::voiceItem* Judge40601::mutable_vi_40601_sideline_error() {
  set_has_vi_40601_sideline_error();
  if (vi_40601_sideline_error_ == NULL) vi_40601_sideline_error_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge40601.vi_40601_sideline_error)
  return vi_40601_sideline_error_;
}
inline ::OPMessage::voiceItem* Judge40601::release_vi_40601_sideline_error() {
  clear_has_vi_40601_sideline_error();
  ::OPMessage::voiceItem* temp = vi_40601_sideline_error_;
  vi_40601_sideline_error_ = NULL;
  return temp;
}
inline void Judge40601::set_allocated_vi_40601_sideline_error(::OPMessage::voiceItem* vi_40601_sideline_error) {
  delete vi_40601_sideline_error_;
  vi_40601_sideline_error_ = vi_40601_sideline_error;
  if (vi_40601_sideline_error) {
    set_has_vi_40601_sideline_error();
  } else {
    clear_has_vi_40601_sideline_error();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge40601.vi_40601_sideline_error)
}

// -------------------------------------------------------------------

// Judge50001

// optional int32 itemCode = 1;
inline bool Judge50001::has_itemcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Judge50001::set_has_itemcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Judge50001::clear_has_itemcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Judge50001::clear_itemcode() {
  itemcode_ = 0;
  clear_has_itemcode();
}
inline ::google::protobuf::int32 Judge50001::itemcode() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50001.itemCode)
  return itemcode_;
}
inline void Judge50001::set_itemcode(::google::protobuf::int32 value) {
  set_has_itemcode();
  itemcode_ = value;
  // @@protoc_insertion_point(field_set:OPMessage.Judge50001.itemCode)
}

// optional string itemName = 2;
inline bool Judge50001::has_itemname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Judge50001::set_has_itemname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Judge50001::clear_has_itemname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Judge50001::clear_itemname() {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_->clear();
  }
  clear_has_itemname();
}
inline const ::std::string& Judge50001::itemname() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50001.itemName)
  return *itemname_;
}
inline void Judge50001::set_itemname(const ::std::string& value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
  // @@protoc_insertion_point(field_set:OPMessage.Judge50001.itemName)
}
inline void Judge50001::set_itemname(const char* value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
  // @@protoc_insertion_point(field_set_char:OPMessage.Judge50001.itemName)
}
inline void Judge50001::set_itemname(const char* value, size_t size) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OPMessage.Judge50001.itemName)
}
inline ::std::string* Judge50001::mutable_itemname() {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50001.itemName)
  return itemname_;
}
inline ::std::string* Judge50001::release_itemname() {
  clear_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = itemname_;
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Judge50001::set_allocated_itemname(::std::string* itemname) {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (itemname) {
    set_has_itemname();
    itemname_ = itemname;
  } else {
    clear_has_itemname();
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50001.itemName)
}

// optional .OPMessage.judgeItem max_time = 3;
inline bool Judge50001::has_max_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Judge50001::set_has_max_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Judge50001::clear_has_max_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Judge50001::clear_max_time() {
  if (max_time_ != NULL) max_time_->::OPMessage::judgeItem::Clear();
  clear_has_max_time();
}
inline const ::OPMessage::judgeItem& Judge50001::max_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50001.max_time)
  return max_time_ != NULL ? *max_time_ : *default_instance_->max_time_;
}
inline ::OPMessage::judgeItem* Judge50001::mutable_max_time() {
  set_has_max_time();
  if (max_time_ == NULL) max_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50001.max_time)
  return max_time_;
}
inline ::OPMessage::judgeItem* Judge50001::release_max_time() {
  clear_has_max_time();
  ::OPMessage::judgeItem* temp = max_time_;
  max_time_ = NULL;
  return temp;
}
inline void Judge50001::set_allocated_max_time(::OPMessage::judgeItem* max_time) {
  delete max_time_;
  max_time_ = max_time;
  if (max_time) {
    set_has_max_time();
  } else {
    clear_has_max_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50001.max_time)
}

// optional .OPMessage.judgeItem max_speed = 4;
inline bool Judge50001::has_max_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Judge50001::set_has_max_speed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Judge50001::clear_has_max_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Judge50001::clear_max_speed() {
  if (max_speed_ != NULL) max_speed_->::OPMessage::judgeItem::Clear();
  clear_has_max_speed();
}
inline const ::OPMessage::judgeItem& Judge50001::max_speed() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50001.max_speed)
  return max_speed_ != NULL ? *max_speed_ : *default_instance_->max_speed_;
}
inline ::OPMessage::judgeItem* Judge50001::mutable_max_speed() {
  set_has_max_speed();
  if (max_speed_ == NULL) max_speed_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50001.max_speed)
  return max_speed_;
}
inline ::OPMessage::judgeItem* Judge50001::release_max_speed() {
  clear_has_max_speed();
  ::OPMessage::judgeItem* temp = max_speed_;
  max_speed_ = NULL;
  return temp;
}
inline void Judge50001::set_allocated_max_speed(::OPMessage::judgeItem* max_speed) {
  delete max_speed_;
  max_speed_ = max_speed;
  if (max_speed) {
    set_has_max_speed();
  } else {
    clear_has_max_speed();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50001.max_speed)
}

// optional .OPMessage.judgeItem judge_mode = 5;
inline bool Judge50001::has_judge_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Judge50001::set_has_judge_mode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Judge50001::clear_has_judge_mode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Judge50001::clear_judge_mode() {
  if (judge_mode_ != NULL) judge_mode_->::OPMessage::judgeItem::Clear();
  clear_has_judge_mode();
}
inline const ::OPMessage::judgeItem& Judge50001::judge_mode() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50001.judge_mode)
  return judge_mode_ != NULL ? *judge_mode_ : *default_instance_->judge_mode_;
}
inline ::OPMessage::judgeItem* Judge50001::mutable_judge_mode() {
  set_has_judge_mode();
  if (judge_mode_ == NULL) judge_mode_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50001.judge_mode)
  return judge_mode_;
}
inline ::OPMessage::judgeItem* Judge50001::release_judge_mode() {
  clear_has_judge_mode();
  ::OPMessage::judgeItem* temp = judge_mode_;
  judge_mode_ = NULL;
  return temp;
}
inline void Judge50001::set_allocated_judge_mode(::OPMessage::judgeItem* judge_mode) {
  delete judge_mode_;
  judge_mode_ = judge_mode;
  if (judge_mode) {
    set_has_judge_mode();
  } else {
    clear_has_judge_mode();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50001.judge_mode)
}

// optional .OPMessage.judgeItem min_left_turn_signal_time = 6;
inline bool Judge50001::has_min_left_turn_signal_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Judge50001::set_has_min_left_turn_signal_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Judge50001::clear_has_min_left_turn_signal_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Judge50001::clear_min_left_turn_signal_time() {
  if (min_left_turn_signal_time_ != NULL) min_left_turn_signal_time_->::OPMessage::judgeItem::Clear();
  clear_has_min_left_turn_signal_time();
}
inline const ::OPMessage::judgeItem& Judge50001::min_left_turn_signal_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50001.min_left_turn_signal_time)
  return min_left_turn_signal_time_ != NULL ? *min_left_turn_signal_time_ : *default_instance_->min_left_turn_signal_time_;
}
inline ::OPMessage::judgeItem* Judge50001::mutable_min_left_turn_signal_time() {
  set_has_min_left_turn_signal_time();
  if (min_left_turn_signal_time_ == NULL) min_left_turn_signal_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50001.min_left_turn_signal_time)
  return min_left_turn_signal_time_;
}
inline ::OPMessage::judgeItem* Judge50001::release_min_left_turn_signal_time() {
  clear_has_min_left_turn_signal_time();
  ::OPMessage::judgeItem* temp = min_left_turn_signal_time_;
  min_left_turn_signal_time_ = NULL;
  return temp;
}
inline void Judge50001::set_allocated_min_left_turn_signal_time(::OPMessage::judgeItem* min_left_turn_signal_time) {
  delete min_left_turn_signal_time_;
  min_left_turn_signal_time_ = min_left_turn_signal_time;
  if (min_left_turn_signal_time) {
    set_has_min_left_turn_signal_time();
  } else {
    clear_has_min_left_turn_signal_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50001.min_left_turn_signal_time)
}

// optional .OPMessage.judgeItem min_right_turn_signal_time = 7;
inline bool Judge50001::has_min_right_turn_signal_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Judge50001::set_has_min_right_turn_signal_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Judge50001::clear_has_min_right_turn_signal_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Judge50001::clear_min_right_turn_signal_time() {
  if (min_right_turn_signal_time_ != NULL) min_right_turn_signal_time_->::OPMessage::judgeItem::Clear();
  clear_has_min_right_turn_signal_time();
}
inline const ::OPMessage::judgeItem& Judge50001::min_right_turn_signal_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50001.min_right_turn_signal_time)
  return min_right_turn_signal_time_ != NULL ? *min_right_turn_signal_time_ : *default_instance_->min_right_turn_signal_time_;
}
inline ::OPMessage::judgeItem* Judge50001::mutable_min_right_turn_signal_time() {
  set_has_min_right_turn_signal_time();
  if (min_right_turn_signal_time_ == NULL) min_right_turn_signal_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50001.min_right_turn_signal_time)
  return min_right_turn_signal_time_;
}
inline ::OPMessage::judgeItem* Judge50001::release_min_right_turn_signal_time() {
  clear_has_min_right_turn_signal_time();
  ::OPMessage::judgeItem* temp = min_right_turn_signal_time_;
  min_right_turn_signal_time_ = NULL;
  return temp;
}
inline void Judge50001::set_allocated_min_right_turn_signal_time(::OPMessage::judgeItem* min_right_turn_signal_time) {
  delete min_right_turn_signal_time_;
  min_right_turn_signal_time_ = min_right_turn_signal_time;
  if (min_right_turn_signal_time) {
    set_has_min_right_turn_signal_time();
  } else {
    clear_has_min_right_turn_signal_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50001.min_right_turn_signal_time)
}

// optional .OPMessage.judgeItem need_near_far_lamp_flash = 8;
inline bool Judge50001::has_need_near_far_lamp_flash() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Judge50001::set_has_need_near_far_lamp_flash() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Judge50001::clear_has_need_near_far_lamp_flash() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Judge50001::clear_need_near_far_lamp_flash() {
  if (need_near_far_lamp_flash_ != NULL) need_near_far_lamp_flash_->::OPMessage::judgeItem::Clear();
  clear_has_need_near_far_lamp_flash();
}
inline const ::OPMessage::judgeItem& Judge50001::need_near_far_lamp_flash() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50001.need_near_far_lamp_flash)
  return need_near_far_lamp_flash_ != NULL ? *need_near_far_lamp_flash_ : *default_instance_->need_near_far_lamp_flash_;
}
inline ::OPMessage::judgeItem* Judge50001::mutable_need_near_far_lamp_flash() {
  set_has_need_near_far_lamp_flash();
  if (need_near_far_lamp_flash_ == NULL) need_near_far_lamp_flash_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50001.need_near_far_lamp_flash)
  return need_near_far_lamp_flash_;
}
inline ::OPMessage::judgeItem* Judge50001::release_need_near_far_lamp_flash() {
  clear_has_need_near_far_lamp_flash();
  ::OPMessage::judgeItem* temp = need_near_far_lamp_flash_;
  need_near_far_lamp_flash_ = NULL;
  return temp;
}
inline void Judge50001::set_allocated_need_near_far_lamp_flash(::OPMessage::judgeItem* need_near_far_lamp_flash) {
  delete need_near_far_lamp_flash_;
  need_near_far_lamp_flash_ = need_near_far_lamp_flash;
  if (need_near_far_lamp_flash) {
    set_has_need_near_far_lamp_flash();
  } else {
    clear_has_need_near_far_lamp_flash();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50001.need_near_far_lamp_flash)
}

// optional .OPMessage.judgeItem check_far_lamp = 9;
inline bool Judge50001::has_check_far_lamp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Judge50001::set_has_check_far_lamp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Judge50001::clear_has_check_far_lamp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Judge50001::clear_check_far_lamp() {
  if (check_far_lamp_ != NULL) check_far_lamp_->::OPMessage::judgeItem::Clear();
  clear_has_check_far_lamp();
}
inline const ::OPMessage::judgeItem& Judge50001::check_far_lamp() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50001.check_far_lamp)
  return check_far_lamp_ != NULL ? *check_far_lamp_ : *default_instance_->check_far_lamp_;
}
inline ::OPMessage::judgeItem* Judge50001::mutable_check_far_lamp() {
  set_has_check_far_lamp();
  if (check_far_lamp_ == NULL) check_far_lamp_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50001.check_far_lamp)
  return check_far_lamp_;
}
inline ::OPMessage::judgeItem* Judge50001::release_check_far_lamp() {
  clear_has_check_far_lamp();
  ::OPMessage::judgeItem* temp = check_far_lamp_;
  check_far_lamp_ = NULL;
  return temp;
}
inline void Judge50001::set_allocated_check_far_lamp(::OPMessage::judgeItem* check_far_lamp) {
  delete check_far_lamp_;
  check_far_lamp_ = check_far_lamp;
  if (check_far_lamp) {
    set_has_check_far_lamp();
  } else {
    clear_has_check_far_lamp();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50001.check_far_lamp)
}

// optional .OPMessage.judgeItem check_near_lamp = 10;
inline bool Judge50001::has_check_near_lamp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Judge50001::set_has_check_near_lamp() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Judge50001::clear_has_check_near_lamp() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Judge50001::clear_check_near_lamp() {
  if (check_near_lamp_ != NULL) check_near_lamp_->::OPMessage::judgeItem::Clear();
  clear_has_check_near_lamp();
}
inline const ::OPMessage::judgeItem& Judge50001::check_near_lamp() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50001.check_near_lamp)
  return check_near_lamp_ != NULL ? *check_near_lamp_ : *default_instance_->check_near_lamp_;
}
inline ::OPMessage::judgeItem* Judge50001::mutable_check_near_lamp() {
  set_has_check_near_lamp();
  if (check_near_lamp_ == NULL) check_near_lamp_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50001.check_near_lamp)
  return check_near_lamp_;
}
inline ::OPMessage::judgeItem* Judge50001::release_check_near_lamp() {
  clear_has_check_near_lamp();
  ::OPMessage::judgeItem* temp = check_near_lamp_;
  check_near_lamp_ = NULL;
  return temp;
}
inline void Judge50001::set_allocated_check_near_lamp(::OPMessage::judgeItem* check_near_lamp) {
  delete check_near_lamp_;
  check_near_lamp_ = check_near_lamp;
  if (check_near_lamp) {
    set_has_check_near_lamp();
  } else {
    clear_has_check_near_lamp();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50001.check_near_lamp)
}

// optional .OPMessage.voiceItem vi_50001_start_exam = 11;
inline bool Judge50001::has_vi_50001_start_exam() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Judge50001::set_has_vi_50001_start_exam() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Judge50001::clear_has_vi_50001_start_exam() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Judge50001::clear_vi_50001_start_exam() {
  if (vi_50001_start_exam_ != NULL) vi_50001_start_exam_->::OPMessage::voiceItem::Clear();
  clear_has_vi_50001_start_exam();
}
inline const ::OPMessage::voiceItem& Judge50001::vi_50001_start_exam() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50001.vi_50001_start_exam)
  return vi_50001_start_exam_ != NULL ? *vi_50001_start_exam_ : *default_instance_->vi_50001_start_exam_;
}
inline ::OPMessage::voiceItem* Judge50001::mutable_vi_50001_start_exam() {
  set_has_vi_50001_start_exam();
  if (vi_50001_start_exam_ == NULL) vi_50001_start_exam_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50001.vi_50001_start_exam)
  return vi_50001_start_exam_;
}
inline ::OPMessage::voiceItem* Judge50001::release_vi_50001_start_exam() {
  clear_has_vi_50001_start_exam();
  ::OPMessage::voiceItem* temp = vi_50001_start_exam_;
  vi_50001_start_exam_ = NULL;
  return temp;
}
inline void Judge50001::set_allocated_vi_50001_start_exam(::OPMessage::voiceItem* vi_50001_start_exam) {
  delete vi_50001_start_exam_;
  vi_50001_start_exam_ = vi_50001_start_exam;
  if (vi_50001_start_exam) {
    set_has_vi_50001_start_exam();
  } else {
    clear_has_vi_50001_start_exam();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50001.vi_50001_start_exam)
}

// optional .OPMessage.voiceItem vi_50001_end_exam = 12;
inline bool Judge50001::has_vi_50001_end_exam() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Judge50001::set_has_vi_50001_end_exam() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Judge50001::clear_has_vi_50001_end_exam() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Judge50001::clear_vi_50001_end_exam() {
  if (vi_50001_end_exam_ != NULL) vi_50001_end_exam_->::OPMessage::voiceItem::Clear();
  clear_has_vi_50001_end_exam();
}
inline const ::OPMessage::voiceItem& Judge50001::vi_50001_end_exam() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50001.vi_50001_end_exam)
  return vi_50001_end_exam_ != NULL ? *vi_50001_end_exam_ : *default_instance_->vi_50001_end_exam_;
}
inline ::OPMessage::voiceItem* Judge50001::mutable_vi_50001_end_exam() {
  set_has_vi_50001_end_exam();
  if (vi_50001_end_exam_ == NULL) vi_50001_end_exam_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50001.vi_50001_end_exam)
  return vi_50001_end_exam_;
}
inline ::OPMessage::voiceItem* Judge50001::release_vi_50001_end_exam() {
  clear_has_vi_50001_end_exam();
  ::OPMessage::voiceItem* temp = vi_50001_end_exam_;
  vi_50001_end_exam_ = NULL;
  return temp;
}
inline void Judge50001::set_allocated_vi_50001_end_exam(::OPMessage::voiceItem* vi_50001_end_exam) {
  delete vi_50001_end_exam_;
  vi_50001_end_exam_ = vi_50001_end_exam;
  if (vi_50001_end_exam) {
    set_has_vi_50001_end_exam();
  } else {
    clear_has_vi_50001_end_exam();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50001.vi_50001_end_exam)
}

// optional .OPMessage.voiceItem vi_50001_not_slowdown = 13;
inline bool Judge50001::has_vi_50001_not_slowdown() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Judge50001::set_has_vi_50001_not_slowdown() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Judge50001::clear_has_vi_50001_not_slowdown() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Judge50001::clear_vi_50001_not_slowdown() {
  if (vi_50001_not_slowdown_ != NULL) vi_50001_not_slowdown_->::OPMessage::voiceItem::Clear();
  clear_has_vi_50001_not_slowdown();
}
inline const ::OPMessage::voiceItem& Judge50001::vi_50001_not_slowdown() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50001.vi_50001_not_slowdown)
  return vi_50001_not_slowdown_ != NULL ? *vi_50001_not_slowdown_ : *default_instance_->vi_50001_not_slowdown_;
}
inline ::OPMessage::voiceItem* Judge50001::mutable_vi_50001_not_slowdown() {
  set_has_vi_50001_not_slowdown();
  if (vi_50001_not_slowdown_ == NULL) vi_50001_not_slowdown_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50001.vi_50001_not_slowdown)
  return vi_50001_not_slowdown_;
}
inline ::OPMessage::voiceItem* Judge50001::release_vi_50001_not_slowdown() {
  clear_has_vi_50001_not_slowdown();
  ::OPMessage::voiceItem* temp = vi_50001_not_slowdown_;
  vi_50001_not_slowdown_ = NULL;
  return temp;
}
inline void Judge50001::set_allocated_vi_50001_not_slowdown(::OPMessage::voiceItem* vi_50001_not_slowdown) {
  delete vi_50001_not_slowdown_;
  vi_50001_not_slowdown_ = vi_50001_not_slowdown;
  if (vi_50001_not_slowdown) {
    set_has_vi_50001_not_slowdown();
  } else {
    clear_has_vi_50001_not_slowdown();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50001.vi_50001_not_slowdown)
}

// optional .OPMessage.voiceItem vi_50001_turn_lamp_use_error = 14;
inline bool Judge50001::has_vi_50001_turn_lamp_use_error() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Judge50001::set_has_vi_50001_turn_lamp_use_error() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Judge50001::clear_has_vi_50001_turn_lamp_use_error() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Judge50001::clear_vi_50001_turn_lamp_use_error() {
  if (vi_50001_turn_lamp_use_error_ != NULL) vi_50001_turn_lamp_use_error_->::OPMessage::voiceItem::Clear();
  clear_has_vi_50001_turn_lamp_use_error();
}
inline const ::OPMessage::voiceItem& Judge50001::vi_50001_turn_lamp_use_error() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50001.vi_50001_turn_lamp_use_error)
  return vi_50001_turn_lamp_use_error_ != NULL ? *vi_50001_turn_lamp_use_error_ : *default_instance_->vi_50001_turn_lamp_use_error_;
}
inline ::OPMessage::voiceItem* Judge50001::mutable_vi_50001_turn_lamp_use_error() {
  set_has_vi_50001_turn_lamp_use_error();
  if (vi_50001_turn_lamp_use_error_ == NULL) vi_50001_turn_lamp_use_error_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50001.vi_50001_turn_lamp_use_error)
  return vi_50001_turn_lamp_use_error_;
}
inline ::OPMessage::voiceItem* Judge50001::release_vi_50001_turn_lamp_use_error() {
  clear_has_vi_50001_turn_lamp_use_error();
  ::OPMessage::voiceItem* temp = vi_50001_turn_lamp_use_error_;
  vi_50001_turn_lamp_use_error_ = NULL;
  return temp;
}
inline void Judge50001::set_allocated_vi_50001_turn_lamp_use_error(::OPMessage::voiceItem* vi_50001_turn_lamp_use_error) {
  delete vi_50001_turn_lamp_use_error_;
  vi_50001_turn_lamp_use_error_ = vi_50001_turn_lamp_use_error;
  if (vi_50001_turn_lamp_use_error) {
    set_has_vi_50001_turn_lamp_use_error();
  } else {
    clear_has_vi_50001_turn_lamp_use_error();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50001.vi_50001_turn_lamp_use_error)
}

// optional .OPMessage.voiceItem vi_50001_turn_lamp_not_use = 15;
inline bool Judge50001::has_vi_50001_turn_lamp_not_use() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Judge50001::set_has_vi_50001_turn_lamp_not_use() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Judge50001::clear_has_vi_50001_turn_lamp_not_use() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Judge50001::clear_vi_50001_turn_lamp_not_use() {
  if (vi_50001_turn_lamp_not_use_ != NULL) vi_50001_turn_lamp_not_use_->::OPMessage::voiceItem::Clear();
  clear_has_vi_50001_turn_lamp_not_use();
}
inline const ::OPMessage::voiceItem& Judge50001::vi_50001_turn_lamp_not_use() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50001.vi_50001_turn_lamp_not_use)
  return vi_50001_turn_lamp_not_use_ != NULL ? *vi_50001_turn_lamp_not_use_ : *default_instance_->vi_50001_turn_lamp_not_use_;
}
inline ::OPMessage::voiceItem* Judge50001::mutable_vi_50001_turn_lamp_not_use() {
  set_has_vi_50001_turn_lamp_not_use();
  if (vi_50001_turn_lamp_not_use_ == NULL) vi_50001_turn_lamp_not_use_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50001.vi_50001_turn_lamp_not_use)
  return vi_50001_turn_lamp_not_use_;
}
inline ::OPMessage::voiceItem* Judge50001::release_vi_50001_turn_lamp_not_use() {
  clear_has_vi_50001_turn_lamp_not_use();
  ::OPMessage::voiceItem* temp = vi_50001_turn_lamp_not_use_;
  vi_50001_turn_lamp_not_use_ = NULL;
  return temp;
}
inline void Judge50001::set_allocated_vi_50001_turn_lamp_not_use(::OPMessage::voiceItem* vi_50001_turn_lamp_not_use) {
  delete vi_50001_turn_lamp_not_use_;
  vi_50001_turn_lamp_not_use_ = vi_50001_turn_lamp_not_use;
  if (vi_50001_turn_lamp_not_use) {
    set_has_vi_50001_turn_lamp_not_use();
  } else {
    clear_has_vi_50001_turn_lamp_not_use();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50001.vi_50001_turn_lamp_not_use)
}

// optional .OPMessage.voiceItem vi_50001_horn_not_use = 16;
inline bool Judge50001::has_vi_50001_horn_not_use() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Judge50001::set_has_vi_50001_horn_not_use() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Judge50001::clear_has_vi_50001_horn_not_use() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Judge50001::clear_vi_50001_horn_not_use() {
  if (vi_50001_horn_not_use_ != NULL) vi_50001_horn_not_use_->::OPMessage::voiceItem::Clear();
  clear_has_vi_50001_horn_not_use();
}
inline const ::OPMessage::voiceItem& Judge50001::vi_50001_horn_not_use() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50001.vi_50001_horn_not_use)
  return vi_50001_horn_not_use_ != NULL ? *vi_50001_horn_not_use_ : *default_instance_->vi_50001_horn_not_use_;
}
inline ::OPMessage::voiceItem* Judge50001::mutable_vi_50001_horn_not_use() {
  set_has_vi_50001_horn_not_use();
  if (vi_50001_horn_not_use_ == NULL) vi_50001_horn_not_use_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50001.vi_50001_horn_not_use)
  return vi_50001_horn_not_use_;
}
inline ::OPMessage::voiceItem* Judge50001::release_vi_50001_horn_not_use() {
  clear_has_vi_50001_horn_not_use();
  ::OPMessage::voiceItem* temp = vi_50001_horn_not_use_;
  vi_50001_horn_not_use_ = NULL;
  return temp;
}
inline void Judge50001::set_allocated_vi_50001_horn_not_use(::OPMessage::voiceItem* vi_50001_horn_not_use) {
  delete vi_50001_horn_not_use_;
  vi_50001_horn_not_use_ = vi_50001_horn_not_use;
  if (vi_50001_horn_not_use) {
    set_has_vi_50001_horn_not_use();
  } else {
    clear_has_vi_50001_horn_not_use();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50001.vi_50001_horn_not_use)
}

// optional .OPMessage.voiceItem vi_50001_not_open_near_lamp = 17;
inline bool Judge50001::has_vi_50001_not_open_near_lamp() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Judge50001::set_has_vi_50001_not_open_near_lamp() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Judge50001::clear_has_vi_50001_not_open_near_lamp() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Judge50001::clear_vi_50001_not_open_near_lamp() {
  if (vi_50001_not_open_near_lamp_ != NULL) vi_50001_not_open_near_lamp_->::OPMessage::voiceItem::Clear();
  clear_has_vi_50001_not_open_near_lamp();
}
inline const ::OPMessage::voiceItem& Judge50001::vi_50001_not_open_near_lamp() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50001.vi_50001_not_open_near_lamp)
  return vi_50001_not_open_near_lamp_ != NULL ? *vi_50001_not_open_near_lamp_ : *default_instance_->vi_50001_not_open_near_lamp_;
}
inline ::OPMessage::voiceItem* Judge50001::mutable_vi_50001_not_open_near_lamp() {
  set_has_vi_50001_not_open_near_lamp();
  if (vi_50001_not_open_near_lamp_ == NULL) vi_50001_not_open_near_lamp_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50001.vi_50001_not_open_near_lamp)
  return vi_50001_not_open_near_lamp_;
}
inline ::OPMessage::voiceItem* Judge50001::release_vi_50001_not_open_near_lamp() {
  clear_has_vi_50001_not_open_near_lamp();
  ::OPMessage::voiceItem* temp = vi_50001_not_open_near_lamp_;
  vi_50001_not_open_near_lamp_ = NULL;
  return temp;
}
inline void Judge50001::set_allocated_vi_50001_not_open_near_lamp(::OPMessage::voiceItem* vi_50001_not_open_near_lamp) {
  delete vi_50001_not_open_near_lamp_;
  vi_50001_not_open_near_lamp_ = vi_50001_not_open_near_lamp;
  if (vi_50001_not_open_near_lamp) {
    set_has_vi_50001_not_open_near_lamp();
  } else {
    clear_has_vi_50001_not_open_near_lamp();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50001.vi_50001_not_open_near_lamp)
}

// optional .OPMessage.voiceItem vi_50001_not_open_far_lamp = 18;
inline bool Judge50001::has_vi_50001_not_open_far_lamp() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Judge50001::set_has_vi_50001_not_open_far_lamp() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Judge50001::clear_has_vi_50001_not_open_far_lamp() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Judge50001::clear_vi_50001_not_open_far_lamp() {
  if (vi_50001_not_open_far_lamp_ != NULL) vi_50001_not_open_far_lamp_->::OPMessage::voiceItem::Clear();
  clear_has_vi_50001_not_open_far_lamp();
}
inline const ::OPMessage::voiceItem& Judge50001::vi_50001_not_open_far_lamp() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50001.vi_50001_not_open_far_lamp)
  return vi_50001_not_open_far_lamp_ != NULL ? *vi_50001_not_open_far_lamp_ : *default_instance_->vi_50001_not_open_far_lamp_;
}
inline ::OPMessage::voiceItem* Judge50001::mutable_vi_50001_not_open_far_lamp() {
  set_has_vi_50001_not_open_far_lamp();
  if (vi_50001_not_open_far_lamp_ == NULL) vi_50001_not_open_far_lamp_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50001.vi_50001_not_open_far_lamp)
  return vi_50001_not_open_far_lamp_;
}
inline ::OPMessage::voiceItem* Judge50001::release_vi_50001_not_open_far_lamp() {
  clear_has_vi_50001_not_open_far_lamp();
  ::OPMessage::voiceItem* temp = vi_50001_not_open_far_lamp_;
  vi_50001_not_open_far_lamp_ = NULL;
  return temp;
}
inline void Judge50001::set_allocated_vi_50001_not_open_far_lamp(::OPMessage::voiceItem* vi_50001_not_open_far_lamp) {
  delete vi_50001_not_open_far_lamp_;
  vi_50001_not_open_far_lamp_ = vi_50001_not_open_far_lamp;
  if (vi_50001_not_open_far_lamp) {
    set_has_vi_50001_not_open_far_lamp();
  } else {
    clear_has_vi_50001_not_open_far_lamp();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50001.vi_50001_not_open_far_lamp)
}

// -------------------------------------------------------------------

// Judge50002

// optional int32 itemCode = 1;
inline bool Judge50002::has_itemcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Judge50002::set_has_itemcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Judge50002::clear_has_itemcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Judge50002::clear_itemcode() {
  itemcode_ = 0;
  clear_has_itemcode();
}
inline ::google::protobuf::int32 Judge50002::itemcode() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50002.itemCode)
  return itemcode_;
}
inline void Judge50002::set_itemcode(::google::protobuf::int32 value) {
  set_has_itemcode();
  itemcode_ = value;
  // @@protoc_insertion_point(field_set:OPMessage.Judge50002.itemCode)
}

// optional string itemName = 2;
inline bool Judge50002::has_itemname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Judge50002::set_has_itemname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Judge50002::clear_has_itemname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Judge50002::clear_itemname() {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_->clear();
  }
  clear_has_itemname();
}
inline const ::std::string& Judge50002::itemname() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50002.itemName)
  return *itemname_;
}
inline void Judge50002::set_itemname(const ::std::string& value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
  // @@protoc_insertion_point(field_set:OPMessage.Judge50002.itemName)
}
inline void Judge50002::set_itemname(const char* value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
  // @@protoc_insertion_point(field_set_char:OPMessage.Judge50002.itemName)
}
inline void Judge50002::set_itemname(const char* value, size_t size) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OPMessage.Judge50002.itemName)
}
inline ::std::string* Judge50002::mutable_itemname() {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50002.itemName)
  return itemname_;
}
inline ::std::string* Judge50002::release_itemname() {
  clear_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = itemname_;
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Judge50002::set_allocated_itemname(::std::string* itemname) {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (itemname) {
    set_has_itemname();
    itemname_ = itemname;
  } else {
    clear_has_itemname();
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50002.itemName)
}

// optional .OPMessage.judgeItem max_time = 3;
inline bool Judge50002::has_max_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Judge50002::set_has_max_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Judge50002::clear_has_max_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Judge50002::clear_max_time() {
  if (max_time_ != NULL) max_time_->::OPMessage::judgeItem::Clear();
  clear_has_max_time();
}
inline const ::OPMessage::judgeItem& Judge50002::max_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50002.max_time)
  return max_time_ != NULL ? *max_time_ : *default_instance_->max_time_;
}
inline ::OPMessage::judgeItem* Judge50002::mutable_max_time() {
  set_has_max_time();
  if (max_time_ == NULL) max_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50002.max_time)
  return max_time_;
}
inline ::OPMessage::judgeItem* Judge50002::release_max_time() {
  clear_has_max_time();
  ::OPMessage::judgeItem* temp = max_time_;
  max_time_ = NULL;
  return temp;
}
inline void Judge50002::set_allocated_max_time(::OPMessage::judgeItem* max_time) {
  delete max_time_;
  max_time_ = max_time;
  if (max_time) {
    set_has_max_time();
  } else {
    clear_has_max_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50002.max_time)
}

// optional .OPMessage.judgeItem max_speed = 4;
inline bool Judge50002::has_max_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Judge50002::set_has_max_speed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Judge50002::clear_has_max_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Judge50002::clear_max_speed() {
  if (max_speed_ != NULL) max_speed_->::OPMessage::judgeItem::Clear();
  clear_has_max_speed();
}
inline const ::OPMessage::judgeItem& Judge50002::max_speed() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50002.max_speed)
  return max_speed_ != NULL ? *max_speed_ : *default_instance_->max_speed_;
}
inline ::OPMessage::judgeItem* Judge50002::mutable_max_speed() {
  set_has_max_speed();
  if (max_speed_ == NULL) max_speed_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50002.max_speed)
  return max_speed_;
}
inline ::OPMessage::judgeItem* Judge50002::release_max_speed() {
  clear_has_max_speed();
  ::OPMessage::judgeItem* temp = max_speed_;
  max_speed_ = NULL;
  return temp;
}
inline void Judge50002::set_allocated_max_speed(::OPMessage::judgeItem* max_speed) {
  delete max_speed_;
  max_speed_ = max_speed;
  if (max_speed) {
    set_has_max_speed();
  } else {
    clear_has_max_speed();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50002.max_speed)
}

// optional .OPMessage.judgeItem judge_mode = 5;
inline bool Judge50002::has_judge_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Judge50002::set_has_judge_mode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Judge50002::clear_has_judge_mode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Judge50002::clear_judge_mode() {
  if (judge_mode_ != NULL) judge_mode_->::OPMessage::judgeItem::Clear();
  clear_has_judge_mode();
}
inline const ::OPMessage::judgeItem& Judge50002::judge_mode() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50002.judge_mode)
  return judge_mode_ != NULL ? *judge_mode_ : *default_instance_->judge_mode_;
}
inline ::OPMessage::judgeItem* Judge50002::mutable_judge_mode() {
  set_has_judge_mode();
  if (judge_mode_ == NULL) judge_mode_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50002.judge_mode)
  return judge_mode_;
}
inline ::OPMessage::judgeItem* Judge50002::release_judge_mode() {
  clear_has_judge_mode();
  ::OPMessage::judgeItem* temp = judge_mode_;
  judge_mode_ = NULL;
  return temp;
}
inline void Judge50002::set_allocated_judge_mode(::OPMessage::judgeItem* judge_mode) {
  delete judge_mode_;
  judge_mode_ = judge_mode;
  if (judge_mode) {
    set_has_judge_mode();
  } else {
    clear_has_judge_mode();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50002.judge_mode)
}

// optional .OPMessage.judgeItem min_left_turn_signal_time = 6;
inline bool Judge50002::has_min_left_turn_signal_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Judge50002::set_has_min_left_turn_signal_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Judge50002::clear_has_min_left_turn_signal_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Judge50002::clear_min_left_turn_signal_time() {
  if (min_left_turn_signal_time_ != NULL) min_left_turn_signal_time_->::OPMessage::judgeItem::Clear();
  clear_has_min_left_turn_signal_time();
}
inline const ::OPMessage::judgeItem& Judge50002::min_left_turn_signal_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50002.min_left_turn_signal_time)
  return min_left_turn_signal_time_ != NULL ? *min_left_turn_signal_time_ : *default_instance_->min_left_turn_signal_time_;
}
inline ::OPMessage::judgeItem* Judge50002::mutable_min_left_turn_signal_time() {
  set_has_min_left_turn_signal_time();
  if (min_left_turn_signal_time_ == NULL) min_left_turn_signal_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50002.min_left_turn_signal_time)
  return min_left_turn_signal_time_;
}
inline ::OPMessage::judgeItem* Judge50002::release_min_left_turn_signal_time() {
  clear_has_min_left_turn_signal_time();
  ::OPMessage::judgeItem* temp = min_left_turn_signal_time_;
  min_left_turn_signal_time_ = NULL;
  return temp;
}
inline void Judge50002::set_allocated_min_left_turn_signal_time(::OPMessage::judgeItem* min_left_turn_signal_time) {
  delete min_left_turn_signal_time_;
  min_left_turn_signal_time_ = min_left_turn_signal_time;
  if (min_left_turn_signal_time) {
    set_has_min_left_turn_signal_time();
  } else {
    clear_has_min_left_turn_signal_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50002.min_left_turn_signal_time)
}

// optional .OPMessage.judgeItem min_right_turn_signal_time = 7;
inline bool Judge50002::has_min_right_turn_signal_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Judge50002::set_has_min_right_turn_signal_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Judge50002::clear_has_min_right_turn_signal_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Judge50002::clear_min_right_turn_signal_time() {
  if (min_right_turn_signal_time_ != NULL) min_right_turn_signal_time_->::OPMessage::judgeItem::Clear();
  clear_has_min_right_turn_signal_time();
}
inline const ::OPMessage::judgeItem& Judge50002::min_right_turn_signal_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50002.min_right_turn_signal_time)
  return min_right_turn_signal_time_ != NULL ? *min_right_turn_signal_time_ : *default_instance_->min_right_turn_signal_time_;
}
inline ::OPMessage::judgeItem* Judge50002::mutable_min_right_turn_signal_time() {
  set_has_min_right_turn_signal_time();
  if (min_right_turn_signal_time_ == NULL) min_right_turn_signal_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50002.min_right_turn_signal_time)
  return min_right_turn_signal_time_;
}
inline ::OPMessage::judgeItem* Judge50002::release_min_right_turn_signal_time() {
  clear_has_min_right_turn_signal_time();
  ::OPMessage::judgeItem* temp = min_right_turn_signal_time_;
  min_right_turn_signal_time_ = NULL;
  return temp;
}
inline void Judge50002::set_allocated_min_right_turn_signal_time(::OPMessage::judgeItem* min_right_turn_signal_time) {
  delete min_right_turn_signal_time_;
  min_right_turn_signal_time_ = min_right_turn_signal_time;
  if (min_right_turn_signal_time) {
    set_has_min_right_turn_signal_time();
  } else {
    clear_has_min_right_turn_signal_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50002.min_right_turn_signal_time)
}

// optional .OPMessage.judgeItem need_near_far_lamp_flash = 8;
inline bool Judge50002::has_need_near_far_lamp_flash() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Judge50002::set_has_need_near_far_lamp_flash() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Judge50002::clear_has_need_near_far_lamp_flash() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Judge50002::clear_need_near_far_lamp_flash() {
  if (need_near_far_lamp_flash_ != NULL) need_near_far_lamp_flash_->::OPMessage::judgeItem::Clear();
  clear_has_need_near_far_lamp_flash();
}
inline const ::OPMessage::judgeItem& Judge50002::need_near_far_lamp_flash() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50002.need_near_far_lamp_flash)
  return need_near_far_lamp_flash_ != NULL ? *need_near_far_lamp_flash_ : *default_instance_->need_near_far_lamp_flash_;
}
inline ::OPMessage::judgeItem* Judge50002::mutable_need_near_far_lamp_flash() {
  set_has_need_near_far_lamp_flash();
  if (need_near_far_lamp_flash_ == NULL) need_near_far_lamp_flash_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50002.need_near_far_lamp_flash)
  return need_near_far_lamp_flash_;
}
inline ::OPMessage::judgeItem* Judge50002::release_need_near_far_lamp_flash() {
  clear_has_need_near_far_lamp_flash();
  ::OPMessage::judgeItem* temp = need_near_far_lamp_flash_;
  need_near_far_lamp_flash_ = NULL;
  return temp;
}
inline void Judge50002::set_allocated_need_near_far_lamp_flash(::OPMessage::judgeItem* need_near_far_lamp_flash) {
  delete need_near_far_lamp_flash_;
  need_near_far_lamp_flash_ = need_near_far_lamp_flash;
  if (need_near_far_lamp_flash) {
    set_has_need_near_far_lamp_flash();
  } else {
    clear_has_need_near_far_lamp_flash();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50002.need_near_far_lamp_flash)
}

// optional .OPMessage.judgeItem check_far_lamp = 9;
inline bool Judge50002::has_check_far_lamp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Judge50002::set_has_check_far_lamp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Judge50002::clear_has_check_far_lamp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Judge50002::clear_check_far_lamp() {
  if (check_far_lamp_ != NULL) check_far_lamp_->::OPMessage::judgeItem::Clear();
  clear_has_check_far_lamp();
}
inline const ::OPMessage::judgeItem& Judge50002::check_far_lamp() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50002.check_far_lamp)
  return check_far_lamp_ != NULL ? *check_far_lamp_ : *default_instance_->check_far_lamp_;
}
inline ::OPMessage::judgeItem* Judge50002::mutable_check_far_lamp() {
  set_has_check_far_lamp();
  if (check_far_lamp_ == NULL) check_far_lamp_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50002.check_far_lamp)
  return check_far_lamp_;
}
inline ::OPMessage::judgeItem* Judge50002::release_check_far_lamp() {
  clear_has_check_far_lamp();
  ::OPMessage::judgeItem* temp = check_far_lamp_;
  check_far_lamp_ = NULL;
  return temp;
}
inline void Judge50002::set_allocated_check_far_lamp(::OPMessage::judgeItem* check_far_lamp) {
  delete check_far_lamp_;
  check_far_lamp_ = check_far_lamp;
  if (check_far_lamp) {
    set_has_check_far_lamp();
  } else {
    clear_has_check_far_lamp();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50002.check_far_lamp)
}

// optional .OPMessage.judgeItem check_near_lamp = 10;
inline bool Judge50002::has_check_near_lamp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Judge50002::set_has_check_near_lamp() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Judge50002::clear_has_check_near_lamp() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Judge50002::clear_check_near_lamp() {
  if (check_near_lamp_ != NULL) check_near_lamp_->::OPMessage::judgeItem::Clear();
  clear_has_check_near_lamp();
}
inline const ::OPMessage::judgeItem& Judge50002::check_near_lamp() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50002.check_near_lamp)
  return check_near_lamp_ != NULL ? *check_near_lamp_ : *default_instance_->check_near_lamp_;
}
inline ::OPMessage::judgeItem* Judge50002::mutable_check_near_lamp() {
  set_has_check_near_lamp();
  if (check_near_lamp_ == NULL) check_near_lamp_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50002.check_near_lamp)
  return check_near_lamp_;
}
inline ::OPMessage::judgeItem* Judge50002::release_check_near_lamp() {
  clear_has_check_near_lamp();
  ::OPMessage::judgeItem* temp = check_near_lamp_;
  check_near_lamp_ = NULL;
  return temp;
}
inline void Judge50002::set_allocated_check_near_lamp(::OPMessage::judgeItem* check_near_lamp) {
  delete check_near_lamp_;
  check_near_lamp_ = check_near_lamp;
  if (check_near_lamp) {
    set_has_check_near_lamp();
  } else {
    clear_has_check_near_lamp();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50002.check_near_lamp)
}

// optional .OPMessage.voiceItem vi_50002_start_exam = 11;
inline bool Judge50002::has_vi_50002_start_exam() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Judge50002::set_has_vi_50002_start_exam() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Judge50002::clear_has_vi_50002_start_exam() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Judge50002::clear_vi_50002_start_exam() {
  if (vi_50002_start_exam_ != NULL) vi_50002_start_exam_->::OPMessage::voiceItem::Clear();
  clear_has_vi_50002_start_exam();
}
inline const ::OPMessage::voiceItem& Judge50002::vi_50002_start_exam() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50002.vi_50002_start_exam)
  return vi_50002_start_exam_ != NULL ? *vi_50002_start_exam_ : *default_instance_->vi_50002_start_exam_;
}
inline ::OPMessage::voiceItem* Judge50002::mutable_vi_50002_start_exam() {
  set_has_vi_50002_start_exam();
  if (vi_50002_start_exam_ == NULL) vi_50002_start_exam_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50002.vi_50002_start_exam)
  return vi_50002_start_exam_;
}
inline ::OPMessage::voiceItem* Judge50002::release_vi_50002_start_exam() {
  clear_has_vi_50002_start_exam();
  ::OPMessage::voiceItem* temp = vi_50002_start_exam_;
  vi_50002_start_exam_ = NULL;
  return temp;
}
inline void Judge50002::set_allocated_vi_50002_start_exam(::OPMessage::voiceItem* vi_50002_start_exam) {
  delete vi_50002_start_exam_;
  vi_50002_start_exam_ = vi_50002_start_exam;
  if (vi_50002_start_exam) {
    set_has_vi_50002_start_exam();
  } else {
    clear_has_vi_50002_start_exam();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50002.vi_50002_start_exam)
}

// optional .OPMessage.voiceItem vi_50002_end_exam = 12;
inline bool Judge50002::has_vi_50002_end_exam() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Judge50002::set_has_vi_50002_end_exam() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Judge50002::clear_has_vi_50002_end_exam() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Judge50002::clear_vi_50002_end_exam() {
  if (vi_50002_end_exam_ != NULL) vi_50002_end_exam_->::OPMessage::voiceItem::Clear();
  clear_has_vi_50002_end_exam();
}
inline const ::OPMessage::voiceItem& Judge50002::vi_50002_end_exam() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50002.vi_50002_end_exam)
  return vi_50002_end_exam_ != NULL ? *vi_50002_end_exam_ : *default_instance_->vi_50002_end_exam_;
}
inline ::OPMessage::voiceItem* Judge50002::mutable_vi_50002_end_exam() {
  set_has_vi_50002_end_exam();
  if (vi_50002_end_exam_ == NULL) vi_50002_end_exam_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50002.vi_50002_end_exam)
  return vi_50002_end_exam_;
}
inline ::OPMessage::voiceItem* Judge50002::release_vi_50002_end_exam() {
  clear_has_vi_50002_end_exam();
  ::OPMessage::voiceItem* temp = vi_50002_end_exam_;
  vi_50002_end_exam_ = NULL;
  return temp;
}
inline void Judge50002::set_allocated_vi_50002_end_exam(::OPMessage::voiceItem* vi_50002_end_exam) {
  delete vi_50002_end_exam_;
  vi_50002_end_exam_ = vi_50002_end_exam;
  if (vi_50002_end_exam) {
    set_has_vi_50002_end_exam();
  } else {
    clear_has_vi_50002_end_exam();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50002.vi_50002_end_exam)
}

// optional .OPMessage.voiceItem vi_50002_not_slowdown = 13;
inline bool Judge50002::has_vi_50002_not_slowdown() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Judge50002::set_has_vi_50002_not_slowdown() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Judge50002::clear_has_vi_50002_not_slowdown() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Judge50002::clear_vi_50002_not_slowdown() {
  if (vi_50002_not_slowdown_ != NULL) vi_50002_not_slowdown_->::OPMessage::voiceItem::Clear();
  clear_has_vi_50002_not_slowdown();
}
inline const ::OPMessage::voiceItem& Judge50002::vi_50002_not_slowdown() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50002.vi_50002_not_slowdown)
  return vi_50002_not_slowdown_ != NULL ? *vi_50002_not_slowdown_ : *default_instance_->vi_50002_not_slowdown_;
}
inline ::OPMessage::voiceItem* Judge50002::mutable_vi_50002_not_slowdown() {
  set_has_vi_50002_not_slowdown();
  if (vi_50002_not_slowdown_ == NULL) vi_50002_not_slowdown_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50002.vi_50002_not_slowdown)
  return vi_50002_not_slowdown_;
}
inline ::OPMessage::voiceItem* Judge50002::release_vi_50002_not_slowdown() {
  clear_has_vi_50002_not_slowdown();
  ::OPMessage::voiceItem* temp = vi_50002_not_slowdown_;
  vi_50002_not_slowdown_ = NULL;
  return temp;
}
inline void Judge50002::set_allocated_vi_50002_not_slowdown(::OPMessage::voiceItem* vi_50002_not_slowdown) {
  delete vi_50002_not_slowdown_;
  vi_50002_not_slowdown_ = vi_50002_not_slowdown;
  if (vi_50002_not_slowdown) {
    set_has_vi_50002_not_slowdown();
  } else {
    clear_has_vi_50002_not_slowdown();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50002.vi_50002_not_slowdown)
}

// optional .OPMessage.voiceItem vi_50002_turn_lamp_use_error = 14;
inline bool Judge50002::has_vi_50002_turn_lamp_use_error() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Judge50002::set_has_vi_50002_turn_lamp_use_error() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Judge50002::clear_has_vi_50002_turn_lamp_use_error() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Judge50002::clear_vi_50002_turn_lamp_use_error() {
  if (vi_50002_turn_lamp_use_error_ != NULL) vi_50002_turn_lamp_use_error_->::OPMessage::voiceItem::Clear();
  clear_has_vi_50002_turn_lamp_use_error();
}
inline const ::OPMessage::voiceItem& Judge50002::vi_50002_turn_lamp_use_error() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50002.vi_50002_turn_lamp_use_error)
  return vi_50002_turn_lamp_use_error_ != NULL ? *vi_50002_turn_lamp_use_error_ : *default_instance_->vi_50002_turn_lamp_use_error_;
}
inline ::OPMessage::voiceItem* Judge50002::mutable_vi_50002_turn_lamp_use_error() {
  set_has_vi_50002_turn_lamp_use_error();
  if (vi_50002_turn_lamp_use_error_ == NULL) vi_50002_turn_lamp_use_error_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50002.vi_50002_turn_lamp_use_error)
  return vi_50002_turn_lamp_use_error_;
}
inline ::OPMessage::voiceItem* Judge50002::release_vi_50002_turn_lamp_use_error() {
  clear_has_vi_50002_turn_lamp_use_error();
  ::OPMessage::voiceItem* temp = vi_50002_turn_lamp_use_error_;
  vi_50002_turn_lamp_use_error_ = NULL;
  return temp;
}
inline void Judge50002::set_allocated_vi_50002_turn_lamp_use_error(::OPMessage::voiceItem* vi_50002_turn_lamp_use_error) {
  delete vi_50002_turn_lamp_use_error_;
  vi_50002_turn_lamp_use_error_ = vi_50002_turn_lamp_use_error;
  if (vi_50002_turn_lamp_use_error) {
    set_has_vi_50002_turn_lamp_use_error();
  } else {
    clear_has_vi_50002_turn_lamp_use_error();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50002.vi_50002_turn_lamp_use_error)
}

// optional .OPMessage.voiceItem vi_50002_turn_lamp_not_use = 15;
inline bool Judge50002::has_vi_50002_turn_lamp_not_use() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Judge50002::set_has_vi_50002_turn_lamp_not_use() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Judge50002::clear_has_vi_50002_turn_lamp_not_use() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Judge50002::clear_vi_50002_turn_lamp_not_use() {
  if (vi_50002_turn_lamp_not_use_ != NULL) vi_50002_turn_lamp_not_use_->::OPMessage::voiceItem::Clear();
  clear_has_vi_50002_turn_lamp_not_use();
}
inline const ::OPMessage::voiceItem& Judge50002::vi_50002_turn_lamp_not_use() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50002.vi_50002_turn_lamp_not_use)
  return vi_50002_turn_lamp_not_use_ != NULL ? *vi_50002_turn_lamp_not_use_ : *default_instance_->vi_50002_turn_lamp_not_use_;
}
inline ::OPMessage::voiceItem* Judge50002::mutable_vi_50002_turn_lamp_not_use() {
  set_has_vi_50002_turn_lamp_not_use();
  if (vi_50002_turn_lamp_not_use_ == NULL) vi_50002_turn_lamp_not_use_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50002.vi_50002_turn_lamp_not_use)
  return vi_50002_turn_lamp_not_use_;
}
inline ::OPMessage::voiceItem* Judge50002::release_vi_50002_turn_lamp_not_use() {
  clear_has_vi_50002_turn_lamp_not_use();
  ::OPMessage::voiceItem* temp = vi_50002_turn_lamp_not_use_;
  vi_50002_turn_lamp_not_use_ = NULL;
  return temp;
}
inline void Judge50002::set_allocated_vi_50002_turn_lamp_not_use(::OPMessage::voiceItem* vi_50002_turn_lamp_not_use) {
  delete vi_50002_turn_lamp_not_use_;
  vi_50002_turn_lamp_not_use_ = vi_50002_turn_lamp_not_use;
  if (vi_50002_turn_lamp_not_use) {
    set_has_vi_50002_turn_lamp_not_use();
  } else {
    clear_has_vi_50002_turn_lamp_not_use();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50002.vi_50002_turn_lamp_not_use)
}

// optional .OPMessage.voiceItem vi_50002_horn_not_use = 16;
inline bool Judge50002::has_vi_50002_horn_not_use() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Judge50002::set_has_vi_50002_horn_not_use() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Judge50002::clear_has_vi_50002_horn_not_use() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Judge50002::clear_vi_50002_horn_not_use() {
  if (vi_50002_horn_not_use_ != NULL) vi_50002_horn_not_use_->::OPMessage::voiceItem::Clear();
  clear_has_vi_50002_horn_not_use();
}
inline const ::OPMessage::voiceItem& Judge50002::vi_50002_horn_not_use() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50002.vi_50002_horn_not_use)
  return vi_50002_horn_not_use_ != NULL ? *vi_50002_horn_not_use_ : *default_instance_->vi_50002_horn_not_use_;
}
inline ::OPMessage::voiceItem* Judge50002::mutable_vi_50002_horn_not_use() {
  set_has_vi_50002_horn_not_use();
  if (vi_50002_horn_not_use_ == NULL) vi_50002_horn_not_use_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50002.vi_50002_horn_not_use)
  return vi_50002_horn_not_use_;
}
inline ::OPMessage::voiceItem* Judge50002::release_vi_50002_horn_not_use() {
  clear_has_vi_50002_horn_not_use();
  ::OPMessage::voiceItem* temp = vi_50002_horn_not_use_;
  vi_50002_horn_not_use_ = NULL;
  return temp;
}
inline void Judge50002::set_allocated_vi_50002_horn_not_use(::OPMessage::voiceItem* vi_50002_horn_not_use) {
  delete vi_50002_horn_not_use_;
  vi_50002_horn_not_use_ = vi_50002_horn_not_use;
  if (vi_50002_horn_not_use) {
    set_has_vi_50002_horn_not_use();
  } else {
    clear_has_vi_50002_horn_not_use();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50002.vi_50002_horn_not_use)
}

// optional .OPMessage.voiceItem vi_50002_not_open_near_lamp = 17;
inline bool Judge50002::has_vi_50002_not_open_near_lamp() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Judge50002::set_has_vi_50002_not_open_near_lamp() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Judge50002::clear_has_vi_50002_not_open_near_lamp() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Judge50002::clear_vi_50002_not_open_near_lamp() {
  if (vi_50002_not_open_near_lamp_ != NULL) vi_50002_not_open_near_lamp_->::OPMessage::voiceItem::Clear();
  clear_has_vi_50002_not_open_near_lamp();
}
inline const ::OPMessage::voiceItem& Judge50002::vi_50002_not_open_near_lamp() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50002.vi_50002_not_open_near_lamp)
  return vi_50002_not_open_near_lamp_ != NULL ? *vi_50002_not_open_near_lamp_ : *default_instance_->vi_50002_not_open_near_lamp_;
}
inline ::OPMessage::voiceItem* Judge50002::mutable_vi_50002_not_open_near_lamp() {
  set_has_vi_50002_not_open_near_lamp();
  if (vi_50002_not_open_near_lamp_ == NULL) vi_50002_not_open_near_lamp_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50002.vi_50002_not_open_near_lamp)
  return vi_50002_not_open_near_lamp_;
}
inline ::OPMessage::voiceItem* Judge50002::release_vi_50002_not_open_near_lamp() {
  clear_has_vi_50002_not_open_near_lamp();
  ::OPMessage::voiceItem* temp = vi_50002_not_open_near_lamp_;
  vi_50002_not_open_near_lamp_ = NULL;
  return temp;
}
inline void Judge50002::set_allocated_vi_50002_not_open_near_lamp(::OPMessage::voiceItem* vi_50002_not_open_near_lamp) {
  delete vi_50002_not_open_near_lamp_;
  vi_50002_not_open_near_lamp_ = vi_50002_not_open_near_lamp;
  if (vi_50002_not_open_near_lamp) {
    set_has_vi_50002_not_open_near_lamp();
  } else {
    clear_has_vi_50002_not_open_near_lamp();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50002.vi_50002_not_open_near_lamp)
}

// optional .OPMessage.voiceItem vi_50002_not_open_far_lamp = 18;
inline bool Judge50002::has_vi_50002_not_open_far_lamp() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Judge50002::set_has_vi_50002_not_open_far_lamp() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Judge50002::clear_has_vi_50002_not_open_far_lamp() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Judge50002::clear_vi_50002_not_open_far_lamp() {
  if (vi_50002_not_open_far_lamp_ != NULL) vi_50002_not_open_far_lamp_->::OPMessage::voiceItem::Clear();
  clear_has_vi_50002_not_open_far_lamp();
}
inline const ::OPMessage::voiceItem& Judge50002::vi_50002_not_open_far_lamp() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50002.vi_50002_not_open_far_lamp)
  return vi_50002_not_open_far_lamp_ != NULL ? *vi_50002_not_open_far_lamp_ : *default_instance_->vi_50002_not_open_far_lamp_;
}
inline ::OPMessage::voiceItem* Judge50002::mutable_vi_50002_not_open_far_lamp() {
  set_has_vi_50002_not_open_far_lamp();
  if (vi_50002_not_open_far_lamp_ == NULL) vi_50002_not_open_far_lamp_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50002.vi_50002_not_open_far_lamp)
  return vi_50002_not_open_far_lamp_;
}
inline ::OPMessage::voiceItem* Judge50002::release_vi_50002_not_open_far_lamp() {
  clear_has_vi_50002_not_open_far_lamp();
  ::OPMessage::voiceItem* temp = vi_50002_not_open_far_lamp_;
  vi_50002_not_open_far_lamp_ = NULL;
  return temp;
}
inline void Judge50002::set_allocated_vi_50002_not_open_far_lamp(::OPMessage::voiceItem* vi_50002_not_open_far_lamp) {
  delete vi_50002_not_open_far_lamp_;
  vi_50002_not_open_far_lamp_ = vi_50002_not_open_far_lamp;
  if (vi_50002_not_open_far_lamp) {
    set_has_vi_50002_not_open_far_lamp();
  } else {
    clear_has_vi_50002_not_open_far_lamp();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50002.vi_50002_not_open_far_lamp)
}

// -------------------------------------------------------------------

// Judge50003

// optional int32 itemCode = 1;
inline bool Judge50003::has_itemcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Judge50003::set_has_itemcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Judge50003::clear_has_itemcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Judge50003::clear_itemcode() {
  itemcode_ = 0;
  clear_has_itemcode();
}
inline ::google::protobuf::int32 Judge50003::itemcode() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50003.itemCode)
  return itemcode_;
}
inline void Judge50003::set_itemcode(::google::protobuf::int32 value) {
  set_has_itemcode();
  itemcode_ = value;
  // @@protoc_insertion_point(field_set:OPMessage.Judge50003.itemCode)
}

// optional string itemName = 2;
inline bool Judge50003::has_itemname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Judge50003::set_has_itemname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Judge50003::clear_has_itemname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Judge50003::clear_itemname() {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_->clear();
  }
  clear_has_itemname();
}
inline const ::std::string& Judge50003::itemname() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50003.itemName)
  return *itemname_;
}
inline void Judge50003::set_itemname(const ::std::string& value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
  // @@protoc_insertion_point(field_set:OPMessage.Judge50003.itemName)
}
inline void Judge50003::set_itemname(const char* value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
  // @@protoc_insertion_point(field_set_char:OPMessage.Judge50003.itemName)
}
inline void Judge50003::set_itemname(const char* value, size_t size) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OPMessage.Judge50003.itemName)
}
inline ::std::string* Judge50003::mutable_itemname() {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50003.itemName)
  return itemname_;
}
inline ::std::string* Judge50003::release_itemname() {
  clear_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = itemname_;
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Judge50003::set_allocated_itemname(::std::string* itemname) {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (itemname) {
    set_has_itemname();
    itemname_ = itemname;
  } else {
    clear_has_itemname();
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50003.itemName)
}

// optional .OPMessage.judgeItem max_time = 3;
inline bool Judge50003::has_max_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Judge50003::set_has_max_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Judge50003::clear_has_max_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Judge50003::clear_max_time() {
  if (max_time_ != NULL) max_time_->::OPMessage::judgeItem::Clear();
  clear_has_max_time();
}
inline const ::OPMessage::judgeItem& Judge50003::max_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50003.max_time)
  return max_time_ != NULL ? *max_time_ : *default_instance_->max_time_;
}
inline ::OPMessage::judgeItem* Judge50003::mutable_max_time() {
  set_has_max_time();
  if (max_time_ == NULL) max_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50003.max_time)
  return max_time_;
}
inline ::OPMessage::judgeItem* Judge50003::release_max_time() {
  clear_has_max_time();
  ::OPMessage::judgeItem* temp = max_time_;
  max_time_ = NULL;
  return temp;
}
inline void Judge50003::set_allocated_max_time(::OPMessage::judgeItem* max_time) {
  delete max_time_;
  max_time_ = max_time;
  if (max_time) {
    set_has_max_time();
  } else {
    clear_has_max_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50003.max_time)
}

// optional .OPMessage.judgeItem max_speed = 4;
inline bool Judge50003::has_max_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Judge50003::set_has_max_speed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Judge50003::clear_has_max_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Judge50003::clear_max_speed() {
  if (max_speed_ != NULL) max_speed_->::OPMessage::judgeItem::Clear();
  clear_has_max_speed();
}
inline const ::OPMessage::judgeItem& Judge50003::max_speed() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50003.max_speed)
  return max_speed_ != NULL ? *max_speed_ : *default_instance_->max_speed_;
}
inline ::OPMessage::judgeItem* Judge50003::mutable_max_speed() {
  set_has_max_speed();
  if (max_speed_ == NULL) max_speed_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50003.max_speed)
  return max_speed_;
}
inline ::OPMessage::judgeItem* Judge50003::release_max_speed() {
  clear_has_max_speed();
  ::OPMessage::judgeItem* temp = max_speed_;
  max_speed_ = NULL;
  return temp;
}
inline void Judge50003::set_allocated_max_speed(::OPMessage::judgeItem* max_speed) {
  delete max_speed_;
  max_speed_ = max_speed;
  if (max_speed) {
    set_has_max_speed();
  } else {
    clear_has_max_speed();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50003.max_speed)
}

// optional .OPMessage.judgeItem judge_mode = 5;
inline bool Judge50003::has_judge_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Judge50003::set_has_judge_mode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Judge50003::clear_has_judge_mode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Judge50003::clear_judge_mode() {
  if (judge_mode_ != NULL) judge_mode_->::OPMessage::judgeItem::Clear();
  clear_has_judge_mode();
}
inline const ::OPMessage::judgeItem& Judge50003::judge_mode() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50003.judge_mode)
  return judge_mode_ != NULL ? *judge_mode_ : *default_instance_->judge_mode_;
}
inline ::OPMessage::judgeItem* Judge50003::mutable_judge_mode() {
  set_has_judge_mode();
  if (judge_mode_ == NULL) judge_mode_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50003.judge_mode)
  return judge_mode_;
}
inline ::OPMessage::judgeItem* Judge50003::release_judge_mode() {
  clear_has_judge_mode();
  ::OPMessage::judgeItem* temp = judge_mode_;
  judge_mode_ = NULL;
  return temp;
}
inline void Judge50003::set_allocated_judge_mode(::OPMessage::judgeItem* judge_mode) {
  delete judge_mode_;
  judge_mode_ = judge_mode;
  if (judge_mode) {
    set_has_judge_mode();
  } else {
    clear_has_judge_mode();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50003.judge_mode)
}

// optional .OPMessage.judgeItem min_left_turn_signal_time = 6;
inline bool Judge50003::has_min_left_turn_signal_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Judge50003::set_has_min_left_turn_signal_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Judge50003::clear_has_min_left_turn_signal_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Judge50003::clear_min_left_turn_signal_time() {
  if (min_left_turn_signal_time_ != NULL) min_left_turn_signal_time_->::OPMessage::judgeItem::Clear();
  clear_has_min_left_turn_signal_time();
}
inline const ::OPMessage::judgeItem& Judge50003::min_left_turn_signal_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50003.min_left_turn_signal_time)
  return min_left_turn_signal_time_ != NULL ? *min_left_turn_signal_time_ : *default_instance_->min_left_turn_signal_time_;
}
inline ::OPMessage::judgeItem* Judge50003::mutable_min_left_turn_signal_time() {
  set_has_min_left_turn_signal_time();
  if (min_left_turn_signal_time_ == NULL) min_left_turn_signal_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50003.min_left_turn_signal_time)
  return min_left_turn_signal_time_;
}
inline ::OPMessage::judgeItem* Judge50003::release_min_left_turn_signal_time() {
  clear_has_min_left_turn_signal_time();
  ::OPMessage::judgeItem* temp = min_left_turn_signal_time_;
  min_left_turn_signal_time_ = NULL;
  return temp;
}
inline void Judge50003::set_allocated_min_left_turn_signal_time(::OPMessage::judgeItem* min_left_turn_signal_time) {
  delete min_left_turn_signal_time_;
  min_left_turn_signal_time_ = min_left_turn_signal_time;
  if (min_left_turn_signal_time) {
    set_has_min_left_turn_signal_time();
  } else {
    clear_has_min_left_turn_signal_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50003.min_left_turn_signal_time)
}

// optional .OPMessage.judgeItem min_right_turn_signal_time = 7;
inline bool Judge50003::has_min_right_turn_signal_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Judge50003::set_has_min_right_turn_signal_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Judge50003::clear_has_min_right_turn_signal_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Judge50003::clear_min_right_turn_signal_time() {
  if (min_right_turn_signal_time_ != NULL) min_right_turn_signal_time_->::OPMessage::judgeItem::Clear();
  clear_has_min_right_turn_signal_time();
}
inline const ::OPMessage::judgeItem& Judge50003::min_right_turn_signal_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50003.min_right_turn_signal_time)
  return min_right_turn_signal_time_ != NULL ? *min_right_turn_signal_time_ : *default_instance_->min_right_turn_signal_time_;
}
inline ::OPMessage::judgeItem* Judge50003::mutable_min_right_turn_signal_time() {
  set_has_min_right_turn_signal_time();
  if (min_right_turn_signal_time_ == NULL) min_right_turn_signal_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50003.min_right_turn_signal_time)
  return min_right_turn_signal_time_;
}
inline ::OPMessage::judgeItem* Judge50003::release_min_right_turn_signal_time() {
  clear_has_min_right_turn_signal_time();
  ::OPMessage::judgeItem* temp = min_right_turn_signal_time_;
  min_right_turn_signal_time_ = NULL;
  return temp;
}
inline void Judge50003::set_allocated_min_right_turn_signal_time(::OPMessage::judgeItem* min_right_turn_signal_time) {
  delete min_right_turn_signal_time_;
  min_right_turn_signal_time_ = min_right_turn_signal_time;
  if (min_right_turn_signal_time) {
    set_has_min_right_turn_signal_time();
  } else {
    clear_has_min_right_turn_signal_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50003.min_right_turn_signal_time)
}

// optional .OPMessage.judgeItem need_near_far_lamp_flash = 8;
inline bool Judge50003::has_need_near_far_lamp_flash() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Judge50003::set_has_need_near_far_lamp_flash() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Judge50003::clear_has_need_near_far_lamp_flash() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Judge50003::clear_need_near_far_lamp_flash() {
  if (need_near_far_lamp_flash_ != NULL) need_near_far_lamp_flash_->::OPMessage::judgeItem::Clear();
  clear_has_need_near_far_lamp_flash();
}
inline const ::OPMessage::judgeItem& Judge50003::need_near_far_lamp_flash() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50003.need_near_far_lamp_flash)
  return need_near_far_lamp_flash_ != NULL ? *need_near_far_lamp_flash_ : *default_instance_->need_near_far_lamp_flash_;
}
inline ::OPMessage::judgeItem* Judge50003::mutable_need_near_far_lamp_flash() {
  set_has_need_near_far_lamp_flash();
  if (need_near_far_lamp_flash_ == NULL) need_near_far_lamp_flash_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50003.need_near_far_lamp_flash)
  return need_near_far_lamp_flash_;
}
inline ::OPMessage::judgeItem* Judge50003::release_need_near_far_lamp_flash() {
  clear_has_need_near_far_lamp_flash();
  ::OPMessage::judgeItem* temp = need_near_far_lamp_flash_;
  need_near_far_lamp_flash_ = NULL;
  return temp;
}
inline void Judge50003::set_allocated_need_near_far_lamp_flash(::OPMessage::judgeItem* need_near_far_lamp_flash) {
  delete need_near_far_lamp_flash_;
  need_near_far_lamp_flash_ = need_near_far_lamp_flash;
  if (need_near_far_lamp_flash) {
    set_has_need_near_far_lamp_flash();
  } else {
    clear_has_need_near_far_lamp_flash();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50003.need_near_far_lamp_flash)
}

// optional .OPMessage.judgeItem check_far_lamp = 9;
inline bool Judge50003::has_check_far_lamp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Judge50003::set_has_check_far_lamp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Judge50003::clear_has_check_far_lamp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Judge50003::clear_check_far_lamp() {
  if (check_far_lamp_ != NULL) check_far_lamp_->::OPMessage::judgeItem::Clear();
  clear_has_check_far_lamp();
}
inline const ::OPMessage::judgeItem& Judge50003::check_far_lamp() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50003.check_far_lamp)
  return check_far_lamp_ != NULL ? *check_far_lamp_ : *default_instance_->check_far_lamp_;
}
inline ::OPMessage::judgeItem* Judge50003::mutable_check_far_lamp() {
  set_has_check_far_lamp();
  if (check_far_lamp_ == NULL) check_far_lamp_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50003.check_far_lamp)
  return check_far_lamp_;
}
inline ::OPMessage::judgeItem* Judge50003::release_check_far_lamp() {
  clear_has_check_far_lamp();
  ::OPMessage::judgeItem* temp = check_far_lamp_;
  check_far_lamp_ = NULL;
  return temp;
}
inline void Judge50003::set_allocated_check_far_lamp(::OPMessage::judgeItem* check_far_lamp) {
  delete check_far_lamp_;
  check_far_lamp_ = check_far_lamp;
  if (check_far_lamp) {
    set_has_check_far_lamp();
  } else {
    clear_has_check_far_lamp();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50003.check_far_lamp)
}

// optional .OPMessage.judgeItem check_near_lamp = 10;
inline bool Judge50003::has_check_near_lamp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Judge50003::set_has_check_near_lamp() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Judge50003::clear_has_check_near_lamp() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Judge50003::clear_check_near_lamp() {
  if (check_near_lamp_ != NULL) check_near_lamp_->::OPMessage::judgeItem::Clear();
  clear_has_check_near_lamp();
}
inline const ::OPMessage::judgeItem& Judge50003::check_near_lamp() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50003.check_near_lamp)
  return check_near_lamp_ != NULL ? *check_near_lamp_ : *default_instance_->check_near_lamp_;
}
inline ::OPMessage::judgeItem* Judge50003::mutable_check_near_lamp() {
  set_has_check_near_lamp();
  if (check_near_lamp_ == NULL) check_near_lamp_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50003.check_near_lamp)
  return check_near_lamp_;
}
inline ::OPMessage::judgeItem* Judge50003::release_check_near_lamp() {
  clear_has_check_near_lamp();
  ::OPMessage::judgeItem* temp = check_near_lamp_;
  check_near_lamp_ = NULL;
  return temp;
}
inline void Judge50003::set_allocated_check_near_lamp(::OPMessage::judgeItem* check_near_lamp) {
  delete check_near_lamp_;
  check_near_lamp_ = check_near_lamp;
  if (check_near_lamp) {
    set_has_check_near_lamp();
  } else {
    clear_has_check_near_lamp();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50003.check_near_lamp)
}

// optional .OPMessage.voiceItem vi_50003_start_exam = 11;
inline bool Judge50003::has_vi_50003_start_exam() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Judge50003::set_has_vi_50003_start_exam() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Judge50003::clear_has_vi_50003_start_exam() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Judge50003::clear_vi_50003_start_exam() {
  if (vi_50003_start_exam_ != NULL) vi_50003_start_exam_->::OPMessage::voiceItem::Clear();
  clear_has_vi_50003_start_exam();
}
inline const ::OPMessage::voiceItem& Judge50003::vi_50003_start_exam() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50003.vi_50003_start_exam)
  return vi_50003_start_exam_ != NULL ? *vi_50003_start_exam_ : *default_instance_->vi_50003_start_exam_;
}
inline ::OPMessage::voiceItem* Judge50003::mutable_vi_50003_start_exam() {
  set_has_vi_50003_start_exam();
  if (vi_50003_start_exam_ == NULL) vi_50003_start_exam_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50003.vi_50003_start_exam)
  return vi_50003_start_exam_;
}
inline ::OPMessage::voiceItem* Judge50003::release_vi_50003_start_exam() {
  clear_has_vi_50003_start_exam();
  ::OPMessage::voiceItem* temp = vi_50003_start_exam_;
  vi_50003_start_exam_ = NULL;
  return temp;
}
inline void Judge50003::set_allocated_vi_50003_start_exam(::OPMessage::voiceItem* vi_50003_start_exam) {
  delete vi_50003_start_exam_;
  vi_50003_start_exam_ = vi_50003_start_exam;
  if (vi_50003_start_exam) {
    set_has_vi_50003_start_exam();
  } else {
    clear_has_vi_50003_start_exam();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50003.vi_50003_start_exam)
}

// optional .OPMessage.voiceItem vi_50003_end_exam = 12;
inline bool Judge50003::has_vi_50003_end_exam() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Judge50003::set_has_vi_50003_end_exam() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Judge50003::clear_has_vi_50003_end_exam() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Judge50003::clear_vi_50003_end_exam() {
  if (vi_50003_end_exam_ != NULL) vi_50003_end_exam_->::OPMessage::voiceItem::Clear();
  clear_has_vi_50003_end_exam();
}
inline const ::OPMessage::voiceItem& Judge50003::vi_50003_end_exam() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50003.vi_50003_end_exam)
  return vi_50003_end_exam_ != NULL ? *vi_50003_end_exam_ : *default_instance_->vi_50003_end_exam_;
}
inline ::OPMessage::voiceItem* Judge50003::mutable_vi_50003_end_exam() {
  set_has_vi_50003_end_exam();
  if (vi_50003_end_exam_ == NULL) vi_50003_end_exam_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50003.vi_50003_end_exam)
  return vi_50003_end_exam_;
}
inline ::OPMessage::voiceItem* Judge50003::release_vi_50003_end_exam() {
  clear_has_vi_50003_end_exam();
  ::OPMessage::voiceItem* temp = vi_50003_end_exam_;
  vi_50003_end_exam_ = NULL;
  return temp;
}
inline void Judge50003::set_allocated_vi_50003_end_exam(::OPMessage::voiceItem* vi_50003_end_exam) {
  delete vi_50003_end_exam_;
  vi_50003_end_exam_ = vi_50003_end_exam;
  if (vi_50003_end_exam) {
    set_has_vi_50003_end_exam();
  } else {
    clear_has_vi_50003_end_exam();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50003.vi_50003_end_exam)
}

// optional .OPMessage.voiceItem vi_50003_not_slowdown = 13;
inline bool Judge50003::has_vi_50003_not_slowdown() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Judge50003::set_has_vi_50003_not_slowdown() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Judge50003::clear_has_vi_50003_not_slowdown() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Judge50003::clear_vi_50003_not_slowdown() {
  if (vi_50003_not_slowdown_ != NULL) vi_50003_not_slowdown_->::OPMessage::voiceItem::Clear();
  clear_has_vi_50003_not_slowdown();
}
inline const ::OPMessage::voiceItem& Judge50003::vi_50003_not_slowdown() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50003.vi_50003_not_slowdown)
  return vi_50003_not_slowdown_ != NULL ? *vi_50003_not_slowdown_ : *default_instance_->vi_50003_not_slowdown_;
}
inline ::OPMessage::voiceItem* Judge50003::mutable_vi_50003_not_slowdown() {
  set_has_vi_50003_not_slowdown();
  if (vi_50003_not_slowdown_ == NULL) vi_50003_not_slowdown_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50003.vi_50003_not_slowdown)
  return vi_50003_not_slowdown_;
}
inline ::OPMessage::voiceItem* Judge50003::release_vi_50003_not_slowdown() {
  clear_has_vi_50003_not_slowdown();
  ::OPMessage::voiceItem* temp = vi_50003_not_slowdown_;
  vi_50003_not_slowdown_ = NULL;
  return temp;
}
inline void Judge50003::set_allocated_vi_50003_not_slowdown(::OPMessage::voiceItem* vi_50003_not_slowdown) {
  delete vi_50003_not_slowdown_;
  vi_50003_not_slowdown_ = vi_50003_not_slowdown;
  if (vi_50003_not_slowdown) {
    set_has_vi_50003_not_slowdown();
  } else {
    clear_has_vi_50003_not_slowdown();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50003.vi_50003_not_slowdown)
}

// optional .OPMessage.voiceItem vi_50003_turn_lamp_use_error = 14;
inline bool Judge50003::has_vi_50003_turn_lamp_use_error() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Judge50003::set_has_vi_50003_turn_lamp_use_error() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Judge50003::clear_has_vi_50003_turn_lamp_use_error() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Judge50003::clear_vi_50003_turn_lamp_use_error() {
  if (vi_50003_turn_lamp_use_error_ != NULL) vi_50003_turn_lamp_use_error_->::OPMessage::voiceItem::Clear();
  clear_has_vi_50003_turn_lamp_use_error();
}
inline const ::OPMessage::voiceItem& Judge50003::vi_50003_turn_lamp_use_error() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50003.vi_50003_turn_lamp_use_error)
  return vi_50003_turn_lamp_use_error_ != NULL ? *vi_50003_turn_lamp_use_error_ : *default_instance_->vi_50003_turn_lamp_use_error_;
}
inline ::OPMessage::voiceItem* Judge50003::mutable_vi_50003_turn_lamp_use_error() {
  set_has_vi_50003_turn_lamp_use_error();
  if (vi_50003_turn_lamp_use_error_ == NULL) vi_50003_turn_lamp_use_error_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50003.vi_50003_turn_lamp_use_error)
  return vi_50003_turn_lamp_use_error_;
}
inline ::OPMessage::voiceItem* Judge50003::release_vi_50003_turn_lamp_use_error() {
  clear_has_vi_50003_turn_lamp_use_error();
  ::OPMessage::voiceItem* temp = vi_50003_turn_lamp_use_error_;
  vi_50003_turn_lamp_use_error_ = NULL;
  return temp;
}
inline void Judge50003::set_allocated_vi_50003_turn_lamp_use_error(::OPMessage::voiceItem* vi_50003_turn_lamp_use_error) {
  delete vi_50003_turn_lamp_use_error_;
  vi_50003_turn_lamp_use_error_ = vi_50003_turn_lamp_use_error;
  if (vi_50003_turn_lamp_use_error) {
    set_has_vi_50003_turn_lamp_use_error();
  } else {
    clear_has_vi_50003_turn_lamp_use_error();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50003.vi_50003_turn_lamp_use_error)
}

// optional .OPMessage.voiceItem vi_50003_turn_lamp_not_use = 15;
inline bool Judge50003::has_vi_50003_turn_lamp_not_use() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Judge50003::set_has_vi_50003_turn_lamp_not_use() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Judge50003::clear_has_vi_50003_turn_lamp_not_use() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Judge50003::clear_vi_50003_turn_lamp_not_use() {
  if (vi_50003_turn_lamp_not_use_ != NULL) vi_50003_turn_lamp_not_use_->::OPMessage::voiceItem::Clear();
  clear_has_vi_50003_turn_lamp_not_use();
}
inline const ::OPMessage::voiceItem& Judge50003::vi_50003_turn_lamp_not_use() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50003.vi_50003_turn_lamp_not_use)
  return vi_50003_turn_lamp_not_use_ != NULL ? *vi_50003_turn_lamp_not_use_ : *default_instance_->vi_50003_turn_lamp_not_use_;
}
inline ::OPMessage::voiceItem* Judge50003::mutable_vi_50003_turn_lamp_not_use() {
  set_has_vi_50003_turn_lamp_not_use();
  if (vi_50003_turn_lamp_not_use_ == NULL) vi_50003_turn_lamp_not_use_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50003.vi_50003_turn_lamp_not_use)
  return vi_50003_turn_lamp_not_use_;
}
inline ::OPMessage::voiceItem* Judge50003::release_vi_50003_turn_lamp_not_use() {
  clear_has_vi_50003_turn_lamp_not_use();
  ::OPMessage::voiceItem* temp = vi_50003_turn_lamp_not_use_;
  vi_50003_turn_lamp_not_use_ = NULL;
  return temp;
}
inline void Judge50003::set_allocated_vi_50003_turn_lamp_not_use(::OPMessage::voiceItem* vi_50003_turn_lamp_not_use) {
  delete vi_50003_turn_lamp_not_use_;
  vi_50003_turn_lamp_not_use_ = vi_50003_turn_lamp_not_use;
  if (vi_50003_turn_lamp_not_use) {
    set_has_vi_50003_turn_lamp_not_use();
  } else {
    clear_has_vi_50003_turn_lamp_not_use();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50003.vi_50003_turn_lamp_not_use)
}

// optional .OPMessage.voiceItem vi_50003_horn_not_use = 16;
inline bool Judge50003::has_vi_50003_horn_not_use() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Judge50003::set_has_vi_50003_horn_not_use() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Judge50003::clear_has_vi_50003_horn_not_use() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Judge50003::clear_vi_50003_horn_not_use() {
  if (vi_50003_horn_not_use_ != NULL) vi_50003_horn_not_use_->::OPMessage::voiceItem::Clear();
  clear_has_vi_50003_horn_not_use();
}
inline const ::OPMessage::voiceItem& Judge50003::vi_50003_horn_not_use() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50003.vi_50003_horn_not_use)
  return vi_50003_horn_not_use_ != NULL ? *vi_50003_horn_not_use_ : *default_instance_->vi_50003_horn_not_use_;
}
inline ::OPMessage::voiceItem* Judge50003::mutable_vi_50003_horn_not_use() {
  set_has_vi_50003_horn_not_use();
  if (vi_50003_horn_not_use_ == NULL) vi_50003_horn_not_use_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50003.vi_50003_horn_not_use)
  return vi_50003_horn_not_use_;
}
inline ::OPMessage::voiceItem* Judge50003::release_vi_50003_horn_not_use() {
  clear_has_vi_50003_horn_not_use();
  ::OPMessage::voiceItem* temp = vi_50003_horn_not_use_;
  vi_50003_horn_not_use_ = NULL;
  return temp;
}
inline void Judge50003::set_allocated_vi_50003_horn_not_use(::OPMessage::voiceItem* vi_50003_horn_not_use) {
  delete vi_50003_horn_not_use_;
  vi_50003_horn_not_use_ = vi_50003_horn_not_use;
  if (vi_50003_horn_not_use) {
    set_has_vi_50003_horn_not_use();
  } else {
    clear_has_vi_50003_horn_not_use();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50003.vi_50003_horn_not_use)
}

// optional .OPMessage.voiceItem vi_50003_not_open_near_lamp = 17;
inline bool Judge50003::has_vi_50003_not_open_near_lamp() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Judge50003::set_has_vi_50003_not_open_near_lamp() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Judge50003::clear_has_vi_50003_not_open_near_lamp() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Judge50003::clear_vi_50003_not_open_near_lamp() {
  if (vi_50003_not_open_near_lamp_ != NULL) vi_50003_not_open_near_lamp_->::OPMessage::voiceItem::Clear();
  clear_has_vi_50003_not_open_near_lamp();
}
inline const ::OPMessage::voiceItem& Judge50003::vi_50003_not_open_near_lamp() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50003.vi_50003_not_open_near_lamp)
  return vi_50003_not_open_near_lamp_ != NULL ? *vi_50003_not_open_near_lamp_ : *default_instance_->vi_50003_not_open_near_lamp_;
}
inline ::OPMessage::voiceItem* Judge50003::mutable_vi_50003_not_open_near_lamp() {
  set_has_vi_50003_not_open_near_lamp();
  if (vi_50003_not_open_near_lamp_ == NULL) vi_50003_not_open_near_lamp_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50003.vi_50003_not_open_near_lamp)
  return vi_50003_not_open_near_lamp_;
}
inline ::OPMessage::voiceItem* Judge50003::release_vi_50003_not_open_near_lamp() {
  clear_has_vi_50003_not_open_near_lamp();
  ::OPMessage::voiceItem* temp = vi_50003_not_open_near_lamp_;
  vi_50003_not_open_near_lamp_ = NULL;
  return temp;
}
inline void Judge50003::set_allocated_vi_50003_not_open_near_lamp(::OPMessage::voiceItem* vi_50003_not_open_near_lamp) {
  delete vi_50003_not_open_near_lamp_;
  vi_50003_not_open_near_lamp_ = vi_50003_not_open_near_lamp;
  if (vi_50003_not_open_near_lamp) {
    set_has_vi_50003_not_open_near_lamp();
  } else {
    clear_has_vi_50003_not_open_near_lamp();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50003.vi_50003_not_open_near_lamp)
}

// optional .OPMessage.voiceItem vi_50003_not_open_far_lamp = 18;
inline bool Judge50003::has_vi_50003_not_open_far_lamp() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Judge50003::set_has_vi_50003_not_open_far_lamp() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Judge50003::clear_has_vi_50003_not_open_far_lamp() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Judge50003::clear_vi_50003_not_open_far_lamp() {
  if (vi_50003_not_open_far_lamp_ != NULL) vi_50003_not_open_far_lamp_->::OPMessage::voiceItem::Clear();
  clear_has_vi_50003_not_open_far_lamp();
}
inline const ::OPMessage::voiceItem& Judge50003::vi_50003_not_open_far_lamp() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50003.vi_50003_not_open_far_lamp)
  return vi_50003_not_open_far_lamp_ != NULL ? *vi_50003_not_open_far_lamp_ : *default_instance_->vi_50003_not_open_far_lamp_;
}
inline ::OPMessage::voiceItem* Judge50003::mutable_vi_50003_not_open_far_lamp() {
  set_has_vi_50003_not_open_far_lamp();
  if (vi_50003_not_open_far_lamp_ == NULL) vi_50003_not_open_far_lamp_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50003.vi_50003_not_open_far_lamp)
  return vi_50003_not_open_far_lamp_;
}
inline ::OPMessage::voiceItem* Judge50003::release_vi_50003_not_open_far_lamp() {
  clear_has_vi_50003_not_open_far_lamp();
  ::OPMessage::voiceItem* temp = vi_50003_not_open_far_lamp_;
  vi_50003_not_open_far_lamp_ = NULL;
  return temp;
}
inline void Judge50003::set_allocated_vi_50003_not_open_far_lamp(::OPMessage::voiceItem* vi_50003_not_open_far_lamp) {
  delete vi_50003_not_open_far_lamp_;
  vi_50003_not_open_far_lamp_ = vi_50003_not_open_far_lamp;
  if (vi_50003_not_open_far_lamp) {
    set_has_vi_50003_not_open_far_lamp();
  } else {
    clear_has_vi_50003_not_open_far_lamp();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50003.vi_50003_not_open_far_lamp)
}

// -------------------------------------------------------------------

// Judge50004

// optional int32 itemCode = 1;
inline bool Judge50004::has_itemcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Judge50004::set_has_itemcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Judge50004::clear_has_itemcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Judge50004::clear_itemcode() {
  itemcode_ = 0;
  clear_has_itemcode();
}
inline ::google::protobuf::int32 Judge50004::itemcode() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50004.itemCode)
  return itemcode_;
}
inline void Judge50004::set_itemcode(::google::protobuf::int32 value) {
  set_has_itemcode();
  itemcode_ = value;
  // @@protoc_insertion_point(field_set:OPMessage.Judge50004.itemCode)
}

// optional string itemName = 2;
inline bool Judge50004::has_itemname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Judge50004::set_has_itemname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Judge50004::clear_has_itemname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Judge50004::clear_itemname() {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_->clear();
  }
  clear_has_itemname();
}
inline const ::std::string& Judge50004::itemname() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50004.itemName)
  return *itemname_;
}
inline void Judge50004::set_itemname(const ::std::string& value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
  // @@protoc_insertion_point(field_set:OPMessage.Judge50004.itemName)
}
inline void Judge50004::set_itemname(const char* value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
  // @@protoc_insertion_point(field_set_char:OPMessage.Judge50004.itemName)
}
inline void Judge50004::set_itemname(const char* value, size_t size) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OPMessage.Judge50004.itemName)
}
inline ::std::string* Judge50004::mutable_itemname() {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50004.itemName)
  return itemname_;
}
inline ::std::string* Judge50004::release_itemname() {
  clear_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = itemname_;
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Judge50004::set_allocated_itemname(::std::string* itemname) {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (itemname) {
    set_has_itemname();
    itemname_ = itemname;
  } else {
    clear_has_itemname();
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50004.itemName)
}

// optional .OPMessage.judgeItem max_time = 3;
inline bool Judge50004::has_max_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Judge50004::set_has_max_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Judge50004::clear_has_max_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Judge50004::clear_max_time() {
  if (max_time_ != NULL) max_time_->::OPMessage::judgeItem::Clear();
  clear_has_max_time();
}
inline const ::OPMessage::judgeItem& Judge50004::max_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50004.max_time)
  return max_time_ != NULL ? *max_time_ : *default_instance_->max_time_;
}
inline ::OPMessage::judgeItem* Judge50004::mutable_max_time() {
  set_has_max_time();
  if (max_time_ == NULL) max_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50004.max_time)
  return max_time_;
}
inline ::OPMessage::judgeItem* Judge50004::release_max_time() {
  clear_has_max_time();
  ::OPMessage::judgeItem* temp = max_time_;
  max_time_ = NULL;
  return temp;
}
inline void Judge50004::set_allocated_max_time(::OPMessage::judgeItem* max_time) {
  delete max_time_;
  max_time_ = max_time;
  if (max_time) {
    set_has_max_time();
  } else {
    clear_has_max_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50004.max_time)
}

// optional .OPMessage.judgeItem max_speed = 4;
inline bool Judge50004::has_max_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Judge50004::set_has_max_speed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Judge50004::clear_has_max_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Judge50004::clear_max_speed() {
  if (max_speed_ != NULL) max_speed_->::OPMessage::judgeItem::Clear();
  clear_has_max_speed();
}
inline const ::OPMessage::judgeItem& Judge50004::max_speed() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50004.max_speed)
  return max_speed_ != NULL ? *max_speed_ : *default_instance_->max_speed_;
}
inline ::OPMessage::judgeItem* Judge50004::mutable_max_speed() {
  set_has_max_speed();
  if (max_speed_ == NULL) max_speed_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50004.max_speed)
  return max_speed_;
}
inline ::OPMessage::judgeItem* Judge50004::release_max_speed() {
  clear_has_max_speed();
  ::OPMessage::judgeItem* temp = max_speed_;
  max_speed_ = NULL;
  return temp;
}
inline void Judge50004::set_allocated_max_speed(::OPMessage::judgeItem* max_speed) {
  delete max_speed_;
  max_speed_ = max_speed;
  if (max_speed) {
    set_has_max_speed();
  } else {
    clear_has_max_speed();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50004.max_speed)
}

// optional .OPMessage.judgeItem judge_mode = 5;
inline bool Judge50004::has_judge_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Judge50004::set_has_judge_mode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Judge50004::clear_has_judge_mode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Judge50004::clear_judge_mode() {
  if (judge_mode_ != NULL) judge_mode_->::OPMessage::judgeItem::Clear();
  clear_has_judge_mode();
}
inline const ::OPMessage::judgeItem& Judge50004::judge_mode() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50004.judge_mode)
  return judge_mode_ != NULL ? *judge_mode_ : *default_instance_->judge_mode_;
}
inline ::OPMessage::judgeItem* Judge50004::mutable_judge_mode() {
  set_has_judge_mode();
  if (judge_mode_ == NULL) judge_mode_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50004.judge_mode)
  return judge_mode_;
}
inline ::OPMessage::judgeItem* Judge50004::release_judge_mode() {
  clear_has_judge_mode();
  ::OPMessage::judgeItem* temp = judge_mode_;
  judge_mode_ = NULL;
  return temp;
}
inline void Judge50004::set_allocated_judge_mode(::OPMessage::judgeItem* judge_mode) {
  delete judge_mode_;
  judge_mode_ = judge_mode;
  if (judge_mode) {
    set_has_judge_mode();
  } else {
    clear_has_judge_mode();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50004.judge_mode)
}

// optional .OPMessage.judgeItem min_left_turn_signal_time = 6;
inline bool Judge50004::has_min_left_turn_signal_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Judge50004::set_has_min_left_turn_signal_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Judge50004::clear_has_min_left_turn_signal_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Judge50004::clear_min_left_turn_signal_time() {
  if (min_left_turn_signal_time_ != NULL) min_left_turn_signal_time_->::OPMessage::judgeItem::Clear();
  clear_has_min_left_turn_signal_time();
}
inline const ::OPMessage::judgeItem& Judge50004::min_left_turn_signal_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50004.min_left_turn_signal_time)
  return min_left_turn_signal_time_ != NULL ? *min_left_turn_signal_time_ : *default_instance_->min_left_turn_signal_time_;
}
inline ::OPMessage::judgeItem* Judge50004::mutable_min_left_turn_signal_time() {
  set_has_min_left_turn_signal_time();
  if (min_left_turn_signal_time_ == NULL) min_left_turn_signal_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50004.min_left_turn_signal_time)
  return min_left_turn_signal_time_;
}
inline ::OPMessage::judgeItem* Judge50004::release_min_left_turn_signal_time() {
  clear_has_min_left_turn_signal_time();
  ::OPMessage::judgeItem* temp = min_left_turn_signal_time_;
  min_left_turn_signal_time_ = NULL;
  return temp;
}
inline void Judge50004::set_allocated_min_left_turn_signal_time(::OPMessage::judgeItem* min_left_turn_signal_time) {
  delete min_left_turn_signal_time_;
  min_left_turn_signal_time_ = min_left_turn_signal_time;
  if (min_left_turn_signal_time) {
    set_has_min_left_turn_signal_time();
  } else {
    clear_has_min_left_turn_signal_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50004.min_left_turn_signal_time)
}

// optional .OPMessage.judgeItem min_right_turn_signal_time = 7;
inline bool Judge50004::has_min_right_turn_signal_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Judge50004::set_has_min_right_turn_signal_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Judge50004::clear_has_min_right_turn_signal_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Judge50004::clear_min_right_turn_signal_time() {
  if (min_right_turn_signal_time_ != NULL) min_right_turn_signal_time_->::OPMessage::judgeItem::Clear();
  clear_has_min_right_turn_signal_time();
}
inline const ::OPMessage::judgeItem& Judge50004::min_right_turn_signal_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50004.min_right_turn_signal_time)
  return min_right_turn_signal_time_ != NULL ? *min_right_turn_signal_time_ : *default_instance_->min_right_turn_signal_time_;
}
inline ::OPMessage::judgeItem* Judge50004::mutable_min_right_turn_signal_time() {
  set_has_min_right_turn_signal_time();
  if (min_right_turn_signal_time_ == NULL) min_right_turn_signal_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50004.min_right_turn_signal_time)
  return min_right_turn_signal_time_;
}
inline ::OPMessage::judgeItem* Judge50004::release_min_right_turn_signal_time() {
  clear_has_min_right_turn_signal_time();
  ::OPMessage::judgeItem* temp = min_right_turn_signal_time_;
  min_right_turn_signal_time_ = NULL;
  return temp;
}
inline void Judge50004::set_allocated_min_right_turn_signal_time(::OPMessage::judgeItem* min_right_turn_signal_time) {
  delete min_right_turn_signal_time_;
  min_right_turn_signal_time_ = min_right_turn_signal_time;
  if (min_right_turn_signal_time) {
    set_has_min_right_turn_signal_time();
  } else {
    clear_has_min_right_turn_signal_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50004.min_right_turn_signal_time)
}

// optional .OPMessage.judgeItem need_near_far_lamp_flash = 8;
inline bool Judge50004::has_need_near_far_lamp_flash() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Judge50004::set_has_need_near_far_lamp_flash() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Judge50004::clear_has_need_near_far_lamp_flash() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Judge50004::clear_need_near_far_lamp_flash() {
  if (need_near_far_lamp_flash_ != NULL) need_near_far_lamp_flash_->::OPMessage::judgeItem::Clear();
  clear_has_need_near_far_lamp_flash();
}
inline const ::OPMessage::judgeItem& Judge50004::need_near_far_lamp_flash() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50004.need_near_far_lamp_flash)
  return need_near_far_lamp_flash_ != NULL ? *need_near_far_lamp_flash_ : *default_instance_->need_near_far_lamp_flash_;
}
inline ::OPMessage::judgeItem* Judge50004::mutable_need_near_far_lamp_flash() {
  set_has_need_near_far_lamp_flash();
  if (need_near_far_lamp_flash_ == NULL) need_near_far_lamp_flash_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50004.need_near_far_lamp_flash)
  return need_near_far_lamp_flash_;
}
inline ::OPMessage::judgeItem* Judge50004::release_need_near_far_lamp_flash() {
  clear_has_need_near_far_lamp_flash();
  ::OPMessage::judgeItem* temp = need_near_far_lamp_flash_;
  need_near_far_lamp_flash_ = NULL;
  return temp;
}
inline void Judge50004::set_allocated_need_near_far_lamp_flash(::OPMessage::judgeItem* need_near_far_lamp_flash) {
  delete need_near_far_lamp_flash_;
  need_near_far_lamp_flash_ = need_near_far_lamp_flash;
  if (need_near_far_lamp_flash) {
    set_has_need_near_far_lamp_flash();
  } else {
    clear_has_need_near_far_lamp_flash();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50004.need_near_far_lamp_flash)
}

// optional .OPMessage.judgeItem check_far_lamp = 9;
inline bool Judge50004::has_check_far_lamp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Judge50004::set_has_check_far_lamp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Judge50004::clear_has_check_far_lamp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Judge50004::clear_check_far_lamp() {
  if (check_far_lamp_ != NULL) check_far_lamp_->::OPMessage::judgeItem::Clear();
  clear_has_check_far_lamp();
}
inline const ::OPMessage::judgeItem& Judge50004::check_far_lamp() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50004.check_far_lamp)
  return check_far_lamp_ != NULL ? *check_far_lamp_ : *default_instance_->check_far_lamp_;
}
inline ::OPMessage::judgeItem* Judge50004::mutable_check_far_lamp() {
  set_has_check_far_lamp();
  if (check_far_lamp_ == NULL) check_far_lamp_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50004.check_far_lamp)
  return check_far_lamp_;
}
inline ::OPMessage::judgeItem* Judge50004::release_check_far_lamp() {
  clear_has_check_far_lamp();
  ::OPMessage::judgeItem* temp = check_far_lamp_;
  check_far_lamp_ = NULL;
  return temp;
}
inline void Judge50004::set_allocated_check_far_lamp(::OPMessage::judgeItem* check_far_lamp) {
  delete check_far_lamp_;
  check_far_lamp_ = check_far_lamp;
  if (check_far_lamp) {
    set_has_check_far_lamp();
  } else {
    clear_has_check_far_lamp();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50004.check_far_lamp)
}

// optional .OPMessage.judgeItem check_near_lamp = 10;
inline bool Judge50004::has_check_near_lamp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Judge50004::set_has_check_near_lamp() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Judge50004::clear_has_check_near_lamp() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Judge50004::clear_check_near_lamp() {
  if (check_near_lamp_ != NULL) check_near_lamp_->::OPMessage::judgeItem::Clear();
  clear_has_check_near_lamp();
}
inline const ::OPMessage::judgeItem& Judge50004::check_near_lamp() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50004.check_near_lamp)
  return check_near_lamp_ != NULL ? *check_near_lamp_ : *default_instance_->check_near_lamp_;
}
inline ::OPMessage::judgeItem* Judge50004::mutable_check_near_lamp() {
  set_has_check_near_lamp();
  if (check_near_lamp_ == NULL) check_near_lamp_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50004.check_near_lamp)
  return check_near_lamp_;
}
inline ::OPMessage::judgeItem* Judge50004::release_check_near_lamp() {
  clear_has_check_near_lamp();
  ::OPMessage::judgeItem* temp = check_near_lamp_;
  check_near_lamp_ = NULL;
  return temp;
}
inline void Judge50004::set_allocated_check_near_lamp(::OPMessage::judgeItem* check_near_lamp) {
  delete check_near_lamp_;
  check_near_lamp_ = check_near_lamp;
  if (check_near_lamp) {
    set_has_check_near_lamp();
  } else {
    clear_has_check_near_lamp();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50004.check_near_lamp)
}

// optional .OPMessage.voiceItem vi_50004_start_exam = 11;
inline bool Judge50004::has_vi_50004_start_exam() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Judge50004::set_has_vi_50004_start_exam() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Judge50004::clear_has_vi_50004_start_exam() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Judge50004::clear_vi_50004_start_exam() {
  if (vi_50004_start_exam_ != NULL) vi_50004_start_exam_->::OPMessage::voiceItem::Clear();
  clear_has_vi_50004_start_exam();
}
inline const ::OPMessage::voiceItem& Judge50004::vi_50004_start_exam() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50004.vi_50004_start_exam)
  return vi_50004_start_exam_ != NULL ? *vi_50004_start_exam_ : *default_instance_->vi_50004_start_exam_;
}
inline ::OPMessage::voiceItem* Judge50004::mutable_vi_50004_start_exam() {
  set_has_vi_50004_start_exam();
  if (vi_50004_start_exam_ == NULL) vi_50004_start_exam_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50004.vi_50004_start_exam)
  return vi_50004_start_exam_;
}
inline ::OPMessage::voiceItem* Judge50004::release_vi_50004_start_exam() {
  clear_has_vi_50004_start_exam();
  ::OPMessage::voiceItem* temp = vi_50004_start_exam_;
  vi_50004_start_exam_ = NULL;
  return temp;
}
inline void Judge50004::set_allocated_vi_50004_start_exam(::OPMessage::voiceItem* vi_50004_start_exam) {
  delete vi_50004_start_exam_;
  vi_50004_start_exam_ = vi_50004_start_exam;
  if (vi_50004_start_exam) {
    set_has_vi_50004_start_exam();
  } else {
    clear_has_vi_50004_start_exam();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50004.vi_50004_start_exam)
}

// optional .OPMessage.voiceItem vi_50004_end_exam = 12;
inline bool Judge50004::has_vi_50004_end_exam() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Judge50004::set_has_vi_50004_end_exam() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Judge50004::clear_has_vi_50004_end_exam() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Judge50004::clear_vi_50004_end_exam() {
  if (vi_50004_end_exam_ != NULL) vi_50004_end_exam_->::OPMessage::voiceItem::Clear();
  clear_has_vi_50004_end_exam();
}
inline const ::OPMessage::voiceItem& Judge50004::vi_50004_end_exam() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50004.vi_50004_end_exam)
  return vi_50004_end_exam_ != NULL ? *vi_50004_end_exam_ : *default_instance_->vi_50004_end_exam_;
}
inline ::OPMessage::voiceItem* Judge50004::mutable_vi_50004_end_exam() {
  set_has_vi_50004_end_exam();
  if (vi_50004_end_exam_ == NULL) vi_50004_end_exam_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50004.vi_50004_end_exam)
  return vi_50004_end_exam_;
}
inline ::OPMessage::voiceItem* Judge50004::release_vi_50004_end_exam() {
  clear_has_vi_50004_end_exam();
  ::OPMessage::voiceItem* temp = vi_50004_end_exam_;
  vi_50004_end_exam_ = NULL;
  return temp;
}
inline void Judge50004::set_allocated_vi_50004_end_exam(::OPMessage::voiceItem* vi_50004_end_exam) {
  delete vi_50004_end_exam_;
  vi_50004_end_exam_ = vi_50004_end_exam;
  if (vi_50004_end_exam) {
    set_has_vi_50004_end_exam();
  } else {
    clear_has_vi_50004_end_exam();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50004.vi_50004_end_exam)
}

// optional .OPMessage.voiceItem vi_50004_not_slowdown = 13;
inline bool Judge50004::has_vi_50004_not_slowdown() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Judge50004::set_has_vi_50004_not_slowdown() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Judge50004::clear_has_vi_50004_not_slowdown() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Judge50004::clear_vi_50004_not_slowdown() {
  if (vi_50004_not_slowdown_ != NULL) vi_50004_not_slowdown_->::OPMessage::voiceItem::Clear();
  clear_has_vi_50004_not_slowdown();
}
inline const ::OPMessage::voiceItem& Judge50004::vi_50004_not_slowdown() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50004.vi_50004_not_slowdown)
  return vi_50004_not_slowdown_ != NULL ? *vi_50004_not_slowdown_ : *default_instance_->vi_50004_not_slowdown_;
}
inline ::OPMessage::voiceItem* Judge50004::mutable_vi_50004_not_slowdown() {
  set_has_vi_50004_not_slowdown();
  if (vi_50004_not_slowdown_ == NULL) vi_50004_not_slowdown_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50004.vi_50004_not_slowdown)
  return vi_50004_not_slowdown_;
}
inline ::OPMessage::voiceItem* Judge50004::release_vi_50004_not_slowdown() {
  clear_has_vi_50004_not_slowdown();
  ::OPMessage::voiceItem* temp = vi_50004_not_slowdown_;
  vi_50004_not_slowdown_ = NULL;
  return temp;
}
inline void Judge50004::set_allocated_vi_50004_not_slowdown(::OPMessage::voiceItem* vi_50004_not_slowdown) {
  delete vi_50004_not_slowdown_;
  vi_50004_not_slowdown_ = vi_50004_not_slowdown;
  if (vi_50004_not_slowdown) {
    set_has_vi_50004_not_slowdown();
  } else {
    clear_has_vi_50004_not_slowdown();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50004.vi_50004_not_slowdown)
}

// optional .OPMessage.voiceItem vi_50004_turn_lamp_use_error = 14;
inline bool Judge50004::has_vi_50004_turn_lamp_use_error() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Judge50004::set_has_vi_50004_turn_lamp_use_error() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Judge50004::clear_has_vi_50004_turn_lamp_use_error() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Judge50004::clear_vi_50004_turn_lamp_use_error() {
  if (vi_50004_turn_lamp_use_error_ != NULL) vi_50004_turn_lamp_use_error_->::OPMessage::voiceItem::Clear();
  clear_has_vi_50004_turn_lamp_use_error();
}
inline const ::OPMessage::voiceItem& Judge50004::vi_50004_turn_lamp_use_error() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50004.vi_50004_turn_lamp_use_error)
  return vi_50004_turn_lamp_use_error_ != NULL ? *vi_50004_turn_lamp_use_error_ : *default_instance_->vi_50004_turn_lamp_use_error_;
}
inline ::OPMessage::voiceItem* Judge50004::mutable_vi_50004_turn_lamp_use_error() {
  set_has_vi_50004_turn_lamp_use_error();
  if (vi_50004_turn_lamp_use_error_ == NULL) vi_50004_turn_lamp_use_error_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50004.vi_50004_turn_lamp_use_error)
  return vi_50004_turn_lamp_use_error_;
}
inline ::OPMessage::voiceItem* Judge50004::release_vi_50004_turn_lamp_use_error() {
  clear_has_vi_50004_turn_lamp_use_error();
  ::OPMessage::voiceItem* temp = vi_50004_turn_lamp_use_error_;
  vi_50004_turn_lamp_use_error_ = NULL;
  return temp;
}
inline void Judge50004::set_allocated_vi_50004_turn_lamp_use_error(::OPMessage::voiceItem* vi_50004_turn_lamp_use_error) {
  delete vi_50004_turn_lamp_use_error_;
  vi_50004_turn_lamp_use_error_ = vi_50004_turn_lamp_use_error;
  if (vi_50004_turn_lamp_use_error) {
    set_has_vi_50004_turn_lamp_use_error();
  } else {
    clear_has_vi_50004_turn_lamp_use_error();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50004.vi_50004_turn_lamp_use_error)
}

// optional .OPMessage.voiceItem vi_50004_turn_lamp_not_use = 15;
inline bool Judge50004::has_vi_50004_turn_lamp_not_use() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Judge50004::set_has_vi_50004_turn_lamp_not_use() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Judge50004::clear_has_vi_50004_turn_lamp_not_use() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Judge50004::clear_vi_50004_turn_lamp_not_use() {
  if (vi_50004_turn_lamp_not_use_ != NULL) vi_50004_turn_lamp_not_use_->::OPMessage::voiceItem::Clear();
  clear_has_vi_50004_turn_lamp_not_use();
}
inline const ::OPMessage::voiceItem& Judge50004::vi_50004_turn_lamp_not_use() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50004.vi_50004_turn_lamp_not_use)
  return vi_50004_turn_lamp_not_use_ != NULL ? *vi_50004_turn_lamp_not_use_ : *default_instance_->vi_50004_turn_lamp_not_use_;
}
inline ::OPMessage::voiceItem* Judge50004::mutable_vi_50004_turn_lamp_not_use() {
  set_has_vi_50004_turn_lamp_not_use();
  if (vi_50004_turn_lamp_not_use_ == NULL) vi_50004_turn_lamp_not_use_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50004.vi_50004_turn_lamp_not_use)
  return vi_50004_turn_lamp_not_use_;
}
inline ::OPMessage::voiceItem* Judge50004::release_vi_50004_turn_lamp_not_use() {
  clear_has_vi_50004_turn_lamp_not_use();
  ::OPMessage::voiceItem* temp = vi_50004_turn_lamp_not_use_;
  vi_50004_turn_lamp_not_use_ = NULL;
  return temp;
}
inline void Judge50004::set_allocated_vi_50004_turn_lamp_not_use(::OPMessage::voiceItem* vi_50004_turn_lamp_not_use) {
  delete vi_50004_turn_lamp_not_use_;
  vi_50004_turn_lamp_not_use_ = vi_50004_turn_lamp_not_use;
  if (vi_50004_turn_lamp_not_use) {
    set_has_vi_50004_turn_lamp_not_use();
  } else {
    clear_has_vi_50004_turn_lamp_not_use();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50004.vi_50004_turn_lamp_not_use)
}

// optional .OPMessage.voiceItem vi_50004_horn_not_use = 16;
inline bool Judge50004::has_vi_50004_horn_not_use() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Judge50004::set_has_vi_50004_horn_not_use() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Judge50004::clear_has_vi_50004_horn_not_use() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Judge50004::clear_vi_50004_horn_not_use() {
  if (vi_50004_horn_not_use_ != NULL) vi_50004_horn_not_use_->::OPMessage::voiceItem::Clear();
  clear_has_vi_50004_horn_not_use();
}
inline const ::OPMessage::voiceItem& Judge50004::vi_50004_horn_not_use() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50004.vi_50004_horn_not_use)
  return vi_50004_horn_not_use_ != NULL ? *vi_50004_horn_not_use_ : *default_instance_->vi_50004_horn_not_use_;
}
inline ::OPMessage::voiceItem* Judge50004::mutable_vi_50004_horn_not_use() {
  set_has_vi_50004_horn_not_use();
  if (vi_50004_horn_not_use_ == NULL) vi_50004_horn_not_use_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50004.vi_50004_horn_not_use)
  return vi_50004_horn_not_use_;
}
inline ::OPMessage::voiceItem* Judge50004::release_vi_50004_horn_not_use() {
  clear_has_vi_50004_horn_not_use();
  ::OPMessage::voiceItem* temp = vi_50004_horn_not_use_;
  vi_50004_horn_not_use_ = NULL;
  return temp;
}
inline void Judge50004::set_allocated_vi_50004_horn_not_use(::OPMessage::voiceItem* vi_50004_horn_not_use) {
  delete vi_50004_horn_not_use_;
  vi_50004_horn_not_use_ = vi_50004_horn_not_use;
  if (vi_50004_horn_not_use) {
    set_has_vi_50004_horn_not_use();
  } else {
    clear_has_vi_50004_horn_not_use();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50004.vi_50004_horn_not_use)
}

// optional .OPMessage.voiceItem vi_50004_not_open_near_lamp = 17;
inline bool Judge50004::has_vi_50004_not_open_near_lamp() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Judge50004::set_has_vi_50004_not_open_near_lamp() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Judge50004::clear_has_vi_50004_not_open_near_lamp() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Judge50004::clear_vi_50004_not_open_near_lamp() {
  if (vi_50004_not_open_near_lamp_ != NULL) vi_50004_not_open_near_lamp_->::OPMessage::voiceItem::Clear();
  clear_has_vi_50004_not_open_near_lamp();
}
inline const ::OPMessage::voiceItem& Judge50004::vi_50004_not_open_near_lamp() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50004.vi_50004_not_open_near_lamp)
  return vi_50004_not_open_near_lamp_ != NULL ? *vi_50004_not_open_near_lamp_ : *default_instance_->vi_50004_not_open_near_lamp_;
}
inline ::OPMessage::voiceItem* Judge50004::mutable_vi_50004_not_open_near_lamp() {
  set_has_vi_50004_not_open_near_lamp();
  if (vi_50004_not_open_near_lamp_ == NULL) vi_50004_not_open_near_lamp_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50004.vi_50004_not_open_near_lamp)
  return vi_50004_not_open_near_lamp_;
}
inline ::OPMessage::voiceItem* Judge50004::release_vi_50004_not_open_near_lamp() {
  clear_has_vi_50004_not_open_near_lamp();
  ::OPMessage::voiceItem* temp = vi_50004_not_open_near_lamp_;
  vi_50004_not_open_near_lamp_ = NULL;
  return temp;
}
inline void Judge50004::set_allocated_vi_50004_not_open_near_lamp(::OPMessage::voiceItem* vi_50004_not_open_near_lamp) {
  delete vi_50004_not_open_near_lamp_;
  vi_50004_not_open_near_lamp_ = vi_50004_not_open_near_lamp;
  if (vi_50004_not_open_near_lamp) {
    set_has_vi_50004_not_open_near_lamp();
  } else {
    clear_has_vi_50004_not_open_near_lamp();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50004.vi_50004_not_open_near_lamp)
}

// optional .OPMessage.voiceItem vi_50004_not_open_far_lamp = 18;
inline bool Judge50004::has_vi_50004_not_open_far_lamp() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Judge50004::set_has_vi_50004_not_open_far_lamp() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Judge50004::clear_has_vi_50004_not_open_far_lamp() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Judge50004::clear_vi_50004_not_open_far_lamp() {
  if (vi_50004_not_open_far_lamp_ != NULL) vi_50004_not_open_far_lamp_->::OPMessage::voiceItem::Clear();
  clear_has_vi_50004_not_open_far_lamp();
}
inline const ::OPMessage::voiceItem& Judge50004::vi_50004_not_open_far_lamp() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50004.vi_50004_not_open_far_lamp)
  return vi_50004_not_open_far_lamp_ != NULL ? *vi_50004_not_open_far_lamp_ : *default_instance_->vi_50004_not_open_far_lamp_;
}
inline ::OPMessage::voiceItem* Judge50004::mutable_vi_50004_not_open_far_lamp() {
  set_has_vi_50004_not_open_far_lamp();
  if (vi_50004_not_open_far_lamp_ == NULL) vi_50004_not_open_far_lamp_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50004.vi_50004_not_open_far_lamp)
  return vi_50004_not_open_far_lamp_;
}
inline ::OPMessage::voiceItem* Judge50004::release_vi_50004_not_open_far_lamp() {
  clear_has_vi_50004_not_open_far_lamp();
  ::OPMessage::voiceItem* temp = vi_50004_not_open_far_lamp_;
  vi_50004_not_open_far_lamp_ = NULL;
  return temp;
}
inline void Judge50004::set_allocated_vi_50004_not_open_far_lamp(::OPMessage::voiceItem* vi_50004_not_open_far_lamp) {
  delete vi_50004_not_open_far_lamp_;
  vi_50004_not_open_far_lamp_ = vi_50004_not_open_far_lamp;
  if (vi_50004_not_open_far_lamp) {
    set_has_vi_50004_not_open_far_lamp();
  } else {
    clear_has_vi_50004_not_open_far_lamp();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50004.vi_50004_not_open_far_lamp)
}

// -------------------------------------------------------------------

// Judge50005

// optional int32 itemCode = 1;
inline bool Judge50005::has_itemcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Judge50005::set_has_itemcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Judge50005::clear_has_itemcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Judge50005::clear_itemcode() {
  itemcode_ = 0;
  clear_has_itemcode();
}
inline ::google::protobuf::int32 Judge50005::itemcode() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50005.itemCode)
  return itemcode_;
}
inline void Judge50005::set_itemcode(::google::protobuf::int32 value) {
  set_has_itemcode();
  itemcode_ = value;
  // @@protoc_insertion_point(field_set:OPMessage.Judge50005.itemCode)
}

// optional string itemName = 2;
inline bool Judge50005::has_itemname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Judge50005::set_has_itemname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Judge50005::clear_has_itemname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Judge50005::clear_itemname() {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_->clear();
  }
  clear_has_itemname();
}
inline const ::std::string& Judge50005::itemname() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50005.itemName)
  return *itemname_;
}
inline void Judge50005::set_itemname(const ::std::string& value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
  // @@protoc_insertion_point(field_set:OPMessage.Judge50005.itemName)
}
inline void Judge50005::set_itemname(const char* value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
  // @@protoc_insertion_point(field_set_char:OPMessage.Judge50005.itemName)
}
inline void Judge50005::set_itemname(const char* value, size_t size) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OPMessage.Judge50005.itemName)
}
inline ::std::string* Judge50005::mutable_itemname() {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50005.itemName)
  return itemname_;
}
inline ::std::string* Judge50005::release_itemname() {
  clear_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = itemname_;
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Judge50005::set_allocated_itemname(::std::string* itemname) {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (itemname) {
    set_has_itemname();
    itemname_ = itemname;
  } else {
    clear_has_itemname();
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50005.itemName)
}

// optional .OPMessage.judgeItem max_time = 3;
inline bool Judge50005::has_max_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Judge50005::set_has_max_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Judge50005::clear_has_max_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Judge50005::clear_max_time() {
  if (max_time_ != NULL) max_time_->::OPMessage::judgeItem::Clear();
  clear_has_max_time();
}
inline const ::OPMessage::judgeItem& Judge50005::max_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50005.max_time)
  return max_time_ != NULL ? *max_time_ : *default_instance_->max_time_;
}
inline ::OPMessage::judgeItem* Judge50005::mutable_max_time() {
  set_has_max_time();
  if (max_time_ == NULL) max_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50005.max_time)
  return max_time_;
}
inline ::OPMessage::judgeItem* Judge50005::release_max_time() {
  clear_has_max_time();
  ::OPMessage::judgeItem* temp = max_time_;
  max_time_ = NULL;
  return temp;
}
inline void Judge50005::set_allocated_max_time(::OPMessage::judgeItem* max_time) {
  delete max_time_;
  max_time_ = max_time;
  if (max_time) {
    set_has_max_time();
  } else {
    clear_has_max_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50005.max_time)
}

// optional .OPMessage.judgeItem max_speed = 4;
inline bool Judge50005::has_max_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Judge50005::set_has_max_speed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Judge50005::clear_has_max_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Judge50005::clear_max_speed() {
  if (max_speed_ != NULL) max_speed_->::OPMessage::judgeItem::Clear();
  clear_has_max_speed();
}
inline const ::OPMessage::judgeItem& Judge50005::max_speed() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50005.max_speed)
  return max_speed_ != NULL ? *max_speed_ : *default_instance_->max_speed_;
}
inline ::OPMessage::judgeItem* Judge50005::mutable_max_speed() {
  set_has_max_speed();
  if (max_speed_ == NULL) max_speed_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50005.max_speed)
  return max_speed_;
}
inline ::OPMessage::judgeItem* Judge50005::release_max_speed() {
  clear_has_max_speed();
  ::OPMessage::judgeItem* temp = max_speed_;
  max_speed_ = NULL;
  return temp;
}
inline void Judge50005::set_allocated_max_speed(::OPMessage::judgeItem* max_speed) {
  delete max_speed_;
  max_speed_ = max_speed;
  if (max_speed) {
    set_has_max_speed();
  } else {
    clear_has_max_speed();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50005.max_speed)
}

// optional .OPMessage.judgeItem judge_mode = 5;
inline bool Judge50005::has_judge_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Judge50005::set_has_judge_mode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Judge50005::clear_has_judge_mode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Judge50005::clear_judge_mode() {
  if (judge_mode_ != NULL) judge_mode_->::OPMessage::judgeItem::Clear();
  clear_has_judge_mode();
}
inline const ::OPMessage::judgeItem& Judge50005::judge_mode() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50005.judge_mode)
  return judge_mode_ != NULL ? *judge_mode_ : *default_instance_->judge_mode_;
}
inline ::OPMessage::judgeItem* Judge50005::mutable_judge_mode() {
  set_has_judge_mode();
  if (judge_mode_ == NULL) judge_mode_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50005.judge_mode)
  return judge_mode_;
}
inline ::OPMessage::judgeItem* Judge50005::release_judge_mode() {
  clear_has_judge_mode();
  ::OPMessage::judgeItem* temp = judge_mode_;
  judge_mode_ = NULL;
  return temp;
}
inline void Judge50005::set_allocated_judge_mode(::OPMessage::judgeItem* judge_mode) {
  delete judge_mode_;
  judge_mode_ = judge_mode;
  if (judge_mode) {
    set_has_judge_mode();
  } else {
    clear_has_judge_mode();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50005.judge_mode)
}

// optional .OPMessage.judgeItem min_left_turn_signal_time = 6;
inline bool Judge50005::has_min_left_turn_signal_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Judge50005::set_has_min_left_turn_signal_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Judge50005::clear_has_min_left_turn_signal_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Judge50005::clear_min_left_turn_signal_time() {
  if (min_left_turn_signal_time_ != NULL) min_left_turn_signal_time_->::OPMessage::judgeItem::Clear();
  clear_has_min_left_turn_signal_time();
}
inline const ::OPMessage::judgeItem& Judge50005::min_left_turn_signal_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50005.min_left_turn_signal_time)
  return min_left_turn_signal_time_ != NULL ? *min_left_turn_signal_time_ : *default_instance_->min_left_turn_signal_time_;
}
inline ::OPMessage::judgeItem* Judge50005::mutable_min_left_turn_signal_time() {
  set_has_min_left_turn_signal_time();
  if (min_left_turn_signal_time_ == NULL) min_left_turn_signal_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50005.min_left_turn_signal_time)
  return min_left_turn_signal_time_;
}
inline ::OPMessage::judgeItem* Judge50005::release_min_left_turn_signal_time() {
  clear_has_min_left_turn_signal_time();
  ::OPMessage::judgeItem* temp = min_left_turn_signal_time_;
  min_left_turn_signal_time_ = NULL;
  return temp;
}
inline void Judge50005::set_allocated_min_left_turn_signal_time(::OPMessage::judgeItem* min_left_turn_signal_time) {
  delete min_left_turn_signal_time_;
  min_left_turn_signal_time_ = min_left_turn_signal_time;
  if (min_left_turn_signal_time) {
    set_has_min_left_turn_signal_time();
  } else {
    clear_has_min_left_turn_signal_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50005.min_left_turn_signal_time)
}

// optional .OPMessage.judgeItem min_right_turn_signal_time = 7;
inline bool Judge50005::has_min_right_turn_signal_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Judge50005::set_has_min_right_turn_signal_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Judge50005::clear_has_min_right_turn_signal_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Judge50005::clear_min_right_turn_signal_time() {
  if (min_right_turn_signal_time_ != NULL) min_right_turn_signal_time_->::OPMessage::judgeItem::Clear();
  clear_has_min_right_turn_signal_time();
}
inline const ::OPMessage::judgeItem& Judge50005::min_right_turn_signal_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50005.min_right_turn_signal_time)
  return min_right_turn_signal_time_ != NULL ? *min_right_turn_signal_time_ : *default_instance_->min_right_turn_signal_time_;
}
inline ::OPMessage::judgeItem* Judge50005::mutable_min_right_turn_signal_time() {
  set_has_min_right_turn_signal_time();
  if (min_right_turn_signal_time_ == NULL) min_right_turn_signal_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50005.min_right_turn_signal_time)
  return min_right_turn_signal_time_;
}
inline ::OPMessage::judgeItem* Judge50005::release_min_right_turn_signal_time() {
  clear_has_min_right_turn_signal_time();
  ::OPMessage::judgeItem* temp = min_right_turn_signal_time_;
  min_right_turn_signal_time_ = NULL;
  return temp;
}
inline void Judge50005::set_allocated_min_right_turn_signal_time(::OPMessage::judgeItem* min_right_turn_signal_time) {
  delete min_right_turn_signal_time_;
  min_right_turn_signal_time_ = min_right_turn_signal_time;
  if (min_right_turn_signal_time) {
    set_has_min_right_turn_signal_time();
  } else {
    clear_has_min_right_turn_signal_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50005.min_right_turn_signal_time)
}

// optional .OPMessage.judgeItem need_near_far_lamp_flash = 8;
inline bool Judge50005::has_need_near_far_lamp_flash() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Judge50005::set_has_need_near_far_lamp_flash() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Judge50005::clear_has_need_near_far_lamp_flash() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Judge50005::clear_need_near_far_lamp_flash() {
  if (need_near_far_lamp_flash_ != NULL) need_near_far_lamp_flash_->::OPMessage::judgeItem::Clear();
  clear_has_need_near_far_lamp_flash();
}
inline const ::OPMessage::judgeItem& Judge50005::need_near_far_lamp_flash() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50005.need_near_far_lamp_flash)
  return need_near_far_lamp_flash_ != NULL ? *need_near_far_lamp_flash_ : *default_instance_->need_near_far_lamp_flash_;
}
inline ::OPMessage::judgeItem* Judge50005::mutable_need_near_far_lamp_flash() {
  set_has_need_near_far_lamp_flash();
  if (need_near_far_lamp_flash_ == NULL) need_near_far_lamp_flash_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50005.need_near_far_lamp_flash)
  return need_near_far_lamp_flash_;
}
inline ::OPMessage::judgeItem* Judge50005::release_need_near_far_lamp_flash() {
  clear_has_need_near_far_lamp_flash();
  ::OPMessage::judgeItem* temp = need_near_far_lamp_flash_;
  need_near_far_lamp_flash_ = NULL;
  return temp;
}
inline void Judge50005::set_allocated_need_near_far_lamp_flash(::OPMessage::judgeItem* need_near_far_lamp_flash) {
  delete need_near_far_lamp_flash_;
  need_near_far_lamp_flash_ = need_near_far_lamp_flash;
  if (need_near_far_lamp_flash) {
    set_has_need_near_far_lamp_flash();
  } else {
    clear_has_need_near_far_lamp_flash();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50005.need_near_far_lamp_flash)
}

// optional .OPMessage.judgeItem check_far_lamp = 9;
inline bool Judge50005::has_check_far_lamp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Judge50005::set_has_check_far_lamp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Judge50005::clear_has_check_far_lamp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Judge50005::clear_check_far_lamp() {
  if (check_far_lamp_ != NULL) check_far_lamp_->::OPMessage::judgeItem::Clear();
  clear_has_check_far_lamp();
}
inline const ::OPMessage::judgeItem& Judge50005::check_far_lamp() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50005.check_far_lamp)
  return check_far_lamp_ != NULL ? *check_far_lamp_ : *default_instance_->check_far_lamp_;
}
inline ::OPMessage::judgeItem* Judge50005::mutable_check_far_lamp() {
  set_has_check_far_lamp();
  if (check_far_lamp_ == NULL) check_far_lamp_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50005.check_far_lamp)
  return check_far_lamp_;
}
inline ::OPMessage::judgeItem* Judge50005::release_check_far_lamp() {
  clear_has_check_far_lamp();
  ::OPMessage::judgeItem* temp = check_far_lamp_;
  check_far_lamp_ = NULL;
  return temp;
}
inline void Judge50005::set_allocated_check_far_lamp(::OPMessage::judgeItem* check_far_lamp) {
  delete check_far_lamp_;
  check_far_lamp_ = check_far_lamp;
  if (check_far_lamp) {
    set_has_check_far_lamp();
  } else {
    clear_has_check_far_lamp();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50005.check_far_lamp)
}

// optional .OPMessage.judgeItem check_near_lamp = 10;
inline bool Judge50005::has_check_near_lamp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Judge50005::set_has_check_near_lamp() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Judge50005::clear_has_check_near_lamp() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Judge50005::clear_check_near_lamp() {
  if (check_near_lamp_ != NULL) check_near_lamp_->::OPMessage::judgeItem::Clear();
  clear_has_check_near_lamp();
}
inline const ::OPMessage::judgeItem& Judge50005::check_near_lamp() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50005.check_near_lamp)
  return check_near_lamp_ != NULL ? *check_near_lamp_ : *default_instance_->check_near_lamp_;
}
inline ::OPMessage::judgeItem* Judge50005::mutable_check_near_lamp() {
  set_has_check_near_lamp();
  if (check_near_lamp_ == NULL) check_near_lamp_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50005.check_near_lamp)
  return check_near_lamp_;
}
inline ::OPMessage::judgeItem* Judge50005::release_check_near_lamp() {
  clear_has_check_near_lamp();
  ::OPMessage::judgeItem* temp = check_near_lamp_;
  check_near_lamp_ = NULL;
  return temp;
}
inline void Judge50005::set_allocated_check_near_lamp(::OPMessage::judgeItem* check_near_lamp) {
  delete check_near_lamp_;
  check_near_lamp_ = check_near_lamp;
  if (check_near_lamp) {
    set_has_check_near_lamp();
  } else {
    clear_has_check_near_lamp();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50005.check_near_lamp)
}

// optional .OPMessage.voiceItem vi_50005_start_exam = 11;
inline bool Judge50005::has_vi_50005_start_exam() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Judge50005::set_has_vi_50005_start_exam() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Judge50005::clear_has_vi_50005_start_exam() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Judge50005::clear_vi_50005_start_exam() {
  if (vi_50005_start_exam_ != NULL) vi_50005_start_exam_->::OPMessage::voiceItem::Clear();
  clear_has_vi_50005_start_exam();
}
inline const ::OPMessage::voiceItem& Judge50005::vi_50005_start_exam() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50005.vi_50005_start_exam)
  return vi_50005_start_exam_ != NULL ? *vi_50005_start_exam_ : *default_instance_->vi_50005_start_exam_;
}
inline ::OPMessage::voiceItem* Judge50005::mutable_vi_50005_start_exam() {
  set_has_vi_50005_start_exam();
  if (vi_50005_start_exam_ == NULL) vi_50005_start_exam_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50005.vi_50005_start_exam)
  return vi_50005_start_exam_;
}
inline ::OPMessage::voiceItem* Judge50005::release_vi_50005_start_exam() {
  clear_has_vi_50005_start_exam();
  ::OPMessage::voiceItem* temp = vi_50005_start_exam_;
  vi_50005_start_exam_ = NULL;
  return temp;
}
inline void Judge50005::set_allocated_vi_50005_start_exam(::OPMessage::voiceItem* vi_50005_start_exam) {
  delete vi_50005_start_exam_;
  vi_50005_start_exam_ = vi_50005_start_exam;
  if (vi_50005_start_exam) {
    set_has_vi_50005_start_exam();
  } else {
    clear_has_vi_50005_start_exam();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50005.vi_50005_start_exam)
}

// optional .OPMessage.voiceItem vi_50005_end_exam = 12;
inline bool Judge50005::has_vi_50005_end_exam() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Judge50005::set_has_vi_50005_end_exam() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Judge50005::clear_has_vi_50005_end_exam() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Judge50005::clear_vi_50005_end_exam() {
  if (vi_50005_end_exam_ != NULL) vi_50005_end_exam_->::OPMessage::voiceItem::Clear();
  clear_has_vi_50005_end_exam();
}
inline const ::OPMessage::voiceItem& Judge50005::vi_50005_end_exam() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50005.vi_50005_end_exam)
  return vi_50005_end_exam_ != NULL ? *vi_50005_end_exam_ : *default_instance_->vi_50005_end_exam_;
}
inline ::OPMessage::voiceItem* Judge50005::mutable_vi_50005_end_exam() {
  set_has_vi_50005_end_exam();
  if (vi_50005_end_exam_ == NULL) vi_50005_end_exam_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50005.vi_50005_end_exam)
  return vi_50005_end_exam_;
}
inline ::OPMessage::voiceItem* Judge50005::release_vi_50005_end_exam() {
  clear_has_vi_50005_end_exam();
  ::OPMessage::voiceItem* temp = vi_50005_end_exam_;
  vi_50005_end_exam_ = NULL;
  return temp;
}
inline void Judge50005::set_allocated_vi_50005_end_exam(::OPMessage::voiceItem* vi_50005_end_exam) {
  delete vi_50005_end_exam_;
  vi_50005_end_exam_ = vi_50005_end_exam;
  if (vi_50005_end_exam) {
    set_has_vi_50005_end_exam();
  } else {
    clear_has_vi_50005_end_exam();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50005.vi_50005_end_exam)
}

// optional .OPMessage.voiceItem vi_50005_not_slowdown = 13;
inline bool Judge50005::has_vi_50005_not_slowdown() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Judge50005::set_has_vi_50005_not_slowdown() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Judge50005::clear_has_vi_50005_not_slowdown() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Judge50005::clear_vi_50005_not_slowdown() {
  if (vi_50005_not_slowdown_ != NULL) vi_50005_not_slowdown_->::OPMessage::voiceItem::Clear();
  clear_has_vi_50005_not_slowdown();
}
inline const ::OPMessage::voiceItem& Judge50005::vi_50005_not_slowdown() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50005.vi_50005_not_slowdown)
  return vi_50005_not_slowdown_ != NULL ? *vi_50005_not_slowdown_ : *default_instance_->vi_50005_not_slowdown_;
}
inline ::OPMessage::voiceItem* Judge50005::mutable_vi_50005_not_slowdown() {
  set_has_vi_50005_not_slowdown();
  if (vi_50005_not_slowdown_ == NULL) vi_50005_not_slowdown_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50005.vi_50005_not_slowdown)
  return vi_50005_not_slowdown_;
}
inline ::OPMessage::voiceItem* Judge50005::release_vi_50005_not_slowdown() {
  clear_has_vi_50005_not_slowdown();
  ::OPMessage::voiceItem* temp = vi_50005_not_slowdown_;
  vi_50005_not_slowdown_ = NULL;
  return temp;
}
inline void Judge50005::set_allocated_vi_50005_not_slowdown(::OPMessage::voiceItem* vi_50005_not_slowdown) {
  delete vi_50005_not_slowdown_;
  vi_50005_not_slowdown_ = vi_50005_not_slowdown;
  if (vi_50005_not_slowdown) {
    set_has_vi_50005_not_slowdown();
  } else {
    clear_has_vi_50005_not_slowdown();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50005.vi_50005_not_slowdown)
}

// optional .OPMessage.voiceItem vi_50005_turn_lamp_use_error = 14;
inline bool Judge50005::has_vi_50005_turn_lamp_use_error() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Judge50005::set_has_vi_50005_turn_lamp_use_error() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Judge50005::clear_has_vi_50005_turn_lamp_use_error() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Judge50005::clear_vi_50005_turn_lamp_use_error() {
  if (vi_50005_turn_lamp_use_error_ != NULL) vi_50005_turn_lamp_use_error_->::OPMessage::voiceItem::Clear();
  clear_has_vi_50005_turn_lamp_use_error();
}
inline const ::OPMessage::voiceItem& Judge50005::vi_50005_turn_lamp_use_error() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50005.vi_50005_turn_lamp_use_error)
  return vi_50005_turn_lamp_use_error_ != NULL ? *vi_50005_turn_lamp_use_error_ : *default_instance_->vi_50005_turn_lamp_use_error_;
}
inline ::OPMessage::voiceItem* Judge50005::mutable_vi_50005_turn_lamp_use_error() {
  set_has_vi_50005_turn_lamp_use_error();
  if (vi_50005_turn_lamp_use_error_ == NULL) vi_50005_turn_lamp_use_error_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50005.vi_50005_turn_lamp_use_error)
  return vi_50005_turn_lamp_use_error_;
}
inline ::OPMessage::voiceItem* Judge50005::release_vi_50005_turn_lamp_use_error() {
  clear_has_vi_50005_turn_lamp_use_error();
  ::OPMessage::voiceItem* temp = vi_50005_turn_lamp_use_error_;
  vi_50005_turn_lamp_use_error_ = NULL;
  return temp;
}
inline void Judge50005::set_allocated_vi_50005_turn_lamp_use_error(::OPMessage::voiceItem* vi_50005_turn_lamp_use_error) {
  delete vi_50005_turn_lamp_use_error_;
  vi_50005_turn_lamp_use_error_ = vi_50005_turn_lamp_use_error;
  if (vi_50005_turn_lamp_use_error) {
    set_has_vi_50005_turn_lamp_use_error();
  } else {
    clear_has_vi_50005_turn_lamp_use_error();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50005.vi_50005_turn_lamp_use_error)
}

// optional .OPMessage.voiceItem vi_50005_turn_lamp_not_use = 15;
inline bool Judge50005::has_vi_50005_turn_lamp_not_use() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Judge50005::set_has_vi_50005_turn_lamp_not_use() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Judge50005::clear_has_vi_50005_turn_lamp_not_use() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Judge50005::clear_vi_50005_turn_lamp_not_use() {
  if (vi_50005_turn_lamp_not_use_ != NULL) vi_50005_turn_lamp_not_use_->::OPMessage::voiceItem::Clear();
  clear_has_vi_50005_turn_lamp_not_use();
}
inline const ::OPMessage::voiceItem& Judge50005::vi_50005_turn_lamp_not_use() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50005.vi_50005_turn_lamp_not_use)
  return vi_50005_turn_lamp_not_use_ != NULL ? *vi_50005_turn_lamp_not_use_ : *default_instance_->vi_50005_turn_lamp_not_use_;
}
inline ::OPMessage::voiceItem* Judge50005::mutable_vi_50005_turn_lamp_not_use() {
  set_has_vi_50005_turn_lamp_not_use();
  if (vi_50005_turn_lamp_not_use_ == NULL) vi_50005_turn_lamp_not_use_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50005.vi_50005_turn_lamp_not_use)
  return vi_50005_turn_lamp_not_use_;
}
inline ::OPMessage::voiceItem* Judge50005::release_vi_50005_turn_lamp_not_use() {
  clear_has_vi_50005_turn_lamp_not_use();
  ::OPMessage::voiceItem* temp = vi_50005_turn_lamp_not_use_;
  vi_50005_turn_lamp_not_use_ = NULL;
  return temp;
}
inline void Judge50005::set_allocated_vi_50005_turn_lamp_not_use(::OPMessage::voiceItem* vi_50005_turn_lamp_not_use) {
  delete vi_50005_turn_lamp_not_use_;
  vi_50005_turn_lamp_not_use_ = vi_50005_turn_lamp_not_use;
  if (vi_50005_turn_lamp_not_use) {
    set_has_vi_50005_turn_lamp_not_use();
  } else {
    clear_has_vi_50005_turn_lamp_not_use();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50005.vi_50005_turn_lamp_not_use)
}

// optional .OPMessage.voiceItem vi_50005_horn_not_use = 16;
inline bool Judge50005::has_vi_50005_horn_not_use() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Judge50005::set_has_vi_50005_horn_not_use() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Judge50005::clear_has_vi_50005_horn_not_use() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Judge50005::clear_vi_50005_horn_not_use() {
  if (vi_50005_horn_not_use_ != NULL) vi_50005_horn_not_use_->::OPMessage::voiceItem::Clear();
  clear_has_vi_50005_horn_not_use();
}
inline const ::OPMessage::voiceItem& Judge50005::vi_50005_horn_not_use() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50005.vi_50005_horn_not_use)
  return vi_50005_horn_not_use_ != NULL ? *vi_50005_horn_not_use_ : *default_instance_->vi_50005_horn_not_use_;
}
inline ::OPMessage::voiceItem* Judge50005::mutable_vi_50005_horn_not_use() {
  set_has_vi_50005_horn_not_use();
  if (vi_50005_horn_not_use_ == NULL) vi_50005_horn_not_use_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50005.vi_50005_horn_not_use)
  return vi_50005_horn_not_use_;
}
inline ::OPMessage::voiceItem* Judge50005::release_vi_50005_horn_not_use() {
  clear_has_vi_50005_horn_not_use();
  ::OPMessage::voiceItem* temp = vi_50005_horn_not_use_;
  vi_50005_horn_not_use_ = NULL;
  return temp;
}
inline void Judge50005::set_allocated_vi_50005_horn_not_use(::OPMessage::voiceItem* vi_50005_horn_not_use) {
  delete vi_50005_horn_not_use_;
  vi_50005_horn_not_use_ = vi_50005_horn_not_use;
  if (vi_50005_horn_not_use) {
    set_has_vi_50005_horn_not_use();
  } else {
    clear_has_vi_50005_horn_not_use();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50005.vi_50005_horn_not_use)
}

// optional .OPMessage.voiceItem vi_50005_not_open_near_lamp = 17;
inline bool Judge50005::has_vi_50005_not_open_near_lamp() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Judge50005::set_has_vi_50005_not_open_near_lamp() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Judge50005::clear_has_vi_50005_not_open_near_lamp() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Judge50005::clear_vi_50005_not_open_near_lamp() {
  if (vi_50005_not_open_near_lamp_ != NULL) vi_50005_not_open_near_lamp_->::OPMessage::voiceItem::Clear();
  clear_has_vi_50005_not_open_near_lamp();
}
inline const ::OPMessage::voiceItem& Judge50005::vi_50005_not_open_near_lamp() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50005.vi_50005_not_open_near_lamp)
  return vi_50005_not_open_near_lamp_ != NULL ? *vi_50005_not_open_near_lamp_ : *default_instance_->vi_50005_not_open_near_lamp_;
}
inline ::OPMessage::voiceItem* Judge50005::mutable_vi_50005_not_open_near_lamp() {
  set_has_vi_50005_not_open_near_lamp();
  if (vi_50005_not_open_near_lamp_ == NULL) vi_50005_not_open_near_lamp_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50005.vi_50005_not_open_near_lamp)
  return vi_50005_not_open_near_lamp_;
}
inline ::OPMessage::voiceItem* Judge50005::release_vi_50005_not_open_near_lamp() {
  clear_has_vi_50005_not_open_near_lamp();
  ::OPMessage::voiceItem* temp = vi_50005_not_open_near_lamp_;
  vi_50005_not_open_near_lamp_ = NULL;
  return temp;
}
inline void Judge50005::set_allocated_vi_50005_not_open_near_lamp(::OPMessage::voiceItem* vi_50005_not_open_near_lamp) {
  delete vi_50005_not_open_near_lamp_;
  vi_50005_not_open_near_lamp_ = vi_50005_not_open_near_lamp;
  if (vi_50005_not_open_near_lamp) {
    set_has_vi_50005_not_open_near_lamp();
  } else {
    clear_has_vi_50005_not_open_near_lamp();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50005.vi_50005_not_open_near_lamp)
}

// optional .OPMessage.voiceItem vi_50005_not_open_far_lamp = 18;
inline bool Judge50005::has_vi_50005_not_open_far_lamp() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Judge50005::set_has_vi_50005_not_open_far_lamp() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Judge50005::clear_has_vi_50005_not_open_far_lamp() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Judge50005::clear_vi_50005_not_open_far_lamp() {
  if (vi_50005_not_open_far_lamp_ != NULL) vi_50005_not_open_far_lamp_->::OPMessage::voiceItem::Clear();
  clear_has_vi_50005_not_open_far_lamp();
}
inline const ::OPMessage::voiceItem& Judge50005::vi_50005_not_open_far_lamp() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50005.vi_50005_not_open_far_lamp)
  return vi_50005_not_open_far_lamp_ != NULL ? *vi_50005_not_open_far_lamp_ : *default_instance_->vi_50005_not_open_far_lamp_;
}
inline ::OPMessage::voiceItem* Judge50005::mutable_vi_50005_not_open_far_lamp() {
  set_has_vi_50005_not_open_far_lamp();
  if (vi_50005_not_open_far_lamp_ == NULL) vi_50005_not_open_far_lamp_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50005.vi_50005_not_open_far_lamp)
  return vi_50005_not_open_far_lamp_;
}
inline ::OPMessage::voiceItem* Judge50005::release_vi_50005_not_open_far_lamp() {
  clear_has_vi_50005_not_open_far_lamp();
  ::OPMessage::voiceItem* temp = vi_50005_not_open_far_lamp_;
  vi_50005_not_open_far_lamp_ = NULL;
  return temp;
}
inline void Judge50005::set_allocated_vi_50005_not_open_far_lamp(::OPMessage::voiceItem* vi_50005_not_open_far_lamp) {
  delete vi_50005_not_open_far_lamp_;
  vi_50005_not_open_far_lamp_ = vi_50005_not_open_far_lamp;
  if (vi_50005_not_open_far_lamp) {
    set_has_vi_50005_not_open_far_lamp();
  } else {
    clear_has_vi_50005_not_open_far_lamp();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50005.vi_50005_not_open_far_lamp)
}

// -------------------------------------------------------------------

// Judge50006

// optional int32 itemCode = 1;
inline bool Judge50006::has_itemcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Judge50006::set_has_itemcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Judge50006::clear_has_itemcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Judge50006::clear_itemcode() {
  itemcode_ = 0;
  clear_has_itemcode();
}
inline ::google::protobuf::int32 Judge50006::itemcode() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50006.itemCode)
  return itemcode_;
}
inline void Judge50006::set_itemcode(::google::protobuf::int32 value) {
  set_has_itemcode();
  itemcode_ = value;
  // @@protoc_insertion_point(field_set:OPMessage.Judge50006.itemCode)
}

// optional string itemName = 2;
inline bool Judge50006::has_itemname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Judge50006::set_has_itemname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Judge50006::clear_has_itemname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Judge50006::clear_itemname() {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_->clear();
  }
  clear_has_itemname();
}
inline const ::std::string& Judge50006::itemname() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50006.itemName)
  return *itemname_;
}
inline void Judge50006::set_itemname(const ::std::string& value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
  // @@protoc_insertion_point(field_set:OPMessage.Judge50006.itemName)
}
inline void Judge50006::set_itemname(const char* value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
  // @@protoc_insertion_point(field_set_char:OPMessage.Judge50006.itemName)
}
inline void Judge50006::set_itemname(const char* value, size_t size) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OPMessage.Judge50006.itemName)
}
inline ::std::string* Judge50006::mutable_itemname() {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50006.itemName)
  return itemname_;
}
inline ::std::string* Judge50006::release_itemname() {
  clear_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = itemname_;
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Judge50006::set_allocated_itemname(::std::string* itemname) {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (itemname) {
    set_has_itemname();
    itemname_ = itemname;
  } else {
    clear_has_itemname();
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50006.itemName)
}

// optional .OPMessage.judgeItem max_time = 3;
inline bool Judge50006::has_max_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Judge50006::set_has_max_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Judge50006::clear_has_max_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Judge50006::clear_max_time() {
  if (max_time_ != NULL) max_time_->::OPMessage::judgeItem::Clear();
  clear_has_max_time();
}
inline const ::OPMessage::judgeItem& Judge50006::max_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50006.max_time)
  return max_time_ != NULL ? *max_time_ : *default_instance_->max_time_;
}
inline ::OPMessage::judgeItem* Judge50006::mutable_max_time() {
  set_has_max_time();
  if (max_time_ == NULL) max_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50006.max_time)
  return max_time_;
}
inline ::OPMessage::judgeItem* Judge50006::release_max_time() {
  clear_has_max_time();
  ::OPMessage::judgeItem* temp = max_time_;
  max_time_ = NULL;
  return temp;
}
inline void Judge50006::set_allocated_max_time(::OPMessage::judgeItem* max_time) {
  delete max_time_;
  max_time_ = max_time;
  if (max_time) {
    set_has_max_time();
  } else {
    clear_has_max_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50006.max_time)
}

// optional .OPMessage.judgeItem max_speed = 4;
inline bool Judge50006::has_max_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Judge50006::set_has_max_speed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Judge50006::clear_has_max_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Judge50006::clear_max_speed() {
  if (max_speed_ != NULL) max_speed_->::OPMessage::judgeItem::Clear();
  clear_has_max_speed();
}
inline const ::OPMessage::judgeItem& Judge50006::max_speed() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50006.max_speed)
  return max_speed_ != NULL ? *max_speed_ : *default_instance_->max_speed_;
}
inline ::OPMessage::judgeItem* Judge50006::mutable_max_speed() {
  set_has_max_speed();
  if (max_speed_ == NULL) max_speed_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50006.max_speed)
  return max_speed_;
}
inline ::OPMessage::judgeItem* Judge50006::release_max_speed() {
  clear_has_max_speed();
  ::OPMessage::judgeItem* temp = max_speed_;
  max_speed_ = NULL;
  return temp;
}
inline void Judge50006::set_allocated_max_speed(::OPMessage::judgeItem* max_speed) {
  delete max_speed_;
  max_speed_ = max_speed;
  if (max_speed) {
    set_has_max_speed();
  } else {
    clear_has_max_speed();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50006.max_speed)
}

// optional .OPMessage.judgeItem judge_mode = 5;
inline bool Judge50006::has_judge_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Judge50006::set_has_judge_mode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Judge50006::clear_has_judge_mode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Judge50006::clear_judge_mode() {
  if (judge_mode_ != NULL) judge_mode_->::OPMessage::judgeItem::Clear();
  clear_has_judge_mode();
}
inline const ::OPMessage::judgeItem& Judge50006::judge_mode() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50006.judge_mode)
  return judge_mode_ != NULL ? *judge_mode_ : *default_instance_->judge_mode_;
}
inline ::OPMessage::judgeItem* Judge50006::mutable_judge_mode() {
  set_has_judge_mode();
  if (judge_mode_ == NULL) judge_mode_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50006.judge_mode)
  return judge_mode_;
}
inline ::OPMessage::judgeItem* Judge50006::release_judge_mode() {
  clear_has_judge_mode();
  ::OPMessage::judgeItem* temp = judge_mode_;
  judge_mode_ = NULL;
  return temp;
}
inline void Judge50006::set_allocated_judge_mode(::OPMessage::judgeItem* judge_mode) {
  delete judge_mode_;
  judge_mode_ = judge_mode;
  if (judge_mode) {
    set_has_judge_mode();
  } else {
    clear_has_judge_mode();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50006.judge_mode)
}

// optional .OPMessage.judgeItem min_left_turn_signal_time = 6;
inline bool Judge50006::has_min_left_turn_signal_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Judge50006::set_has_min_left_turn_signal_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Judge50006::clear_has_min_left_turn_signal_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Judge50006::clear_min_left_turn_signal_time() {
  if (min_left_turn_signal_time_ != NULL) min_left_turn_signal_time_->::OPMessage::judgeItem::Clear();
  clear_has_min_left_turn_signal_time();
}
inline const ::OPMessage::judgeItem& Judge50006::min_left_turn_signal_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50006.min_left_turn_signal_time)
  return min_left_turn_signal_time_ != NULL ? *min_left_turn_signal_time_ : *default_instance_->min_left_turn_signal_time_;
}
inline ::OPMessage::judgeItem* Judge50006::mutable_min_left_turn_signal_time() {
  set_has_min_left_turn_signal_time();
  if (min_left_turn_signal_time_ == NULL) min_left_turn_signal_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50006.min_left_turn_signal_time)
  return min_left_turn_signal_time_;
}
inline ::OPMessage::judgeItem* Judge50006::release_min_left_turn_signal_time() {
  clear_has_min_left_turn_signal_time();
  ::OPMessage::judgeItem* temp = min_left_turn_signal_time_;
  min_left_turn_signal_time_ = NULL;
  return temp;
}
inline void Judge50006::set_allocated_min_left_turn_signal_time(::OPMessage::judgeItem* min_left_turn_signal_time) {
  delete min_left_turn_signal_time_;
  min_left_turn_signal_time_ = min_left_turn_signal_time;
  if (min_left_turn_signal_time) {
    set_has_min_left_turn_signal_time();
  } else {
    clear_has_min_left_turn_signal_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50006.min_left_turn_signal_time)
}

// optional .OPMessage.judgeItem min_right_turn_signal_time = 7;
inline bool Judge50006::has_min_right_turn_signal_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Judge50006::set_has_min_right_turn_signal_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Judge50006::clear_has_min_right_turn_signal_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Judge50006::clear_min_right_turn_signal_time() {
  if (min_right_turn_signal_time_ != NULL) min_right_turn_signal_time_->::OPMessage::judgeItem::Clear();
  clear_has_min_right_turn_signal_time();
}
inline const ::OPMessage::judgeItem& Judge50006::min_right_turn_signal_time() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50006.min_right_turn_signal_time)
  return min_right_turn_signal_time_ != NULL ? *min_right_turn_signal_time_ : *default_instance_->min_right_turn_signal_time_;
}
inline ::OPMessage::judgeItem* Judge50006::mutable_min_right_turn_signal_time() {
  set_has_min_right_turn_signal_time();
  if (min_right_turn_signal_time_ == NULL) min_right_turn_signal_time_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50006.min_right_turn_signal_time)
  return min_right_turn_signal_time_;
}
inline ::OPMessage::judgeItem* Judge50006::release_min_right_turn_signal_time() {
  clear_has_min_right_turn_signal_time();
  ::OPMessage::judgeItem* temp = min_right_turn_signal_time_;
  min_right_turn_signal_time_ = NULL;
  return temp;
}
inline void Judge50006::set_allocated_min_right_turn_signal_time(::OPMessage::judgeItem* min_right_turn_signal_time) {
  delete min_right_turn_signal_time_;
  min_right_turn_signal_time_ = min_right_turn_signal_time;
  if (min_right_turn_signal_time) {
    set_has_min_right_turn_signal_time();
  } else {
    clear_has_min_right_turn_signal_time();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50006.min_right_turn_signal_time)
}

// optional .OPMessage.judgeItem need_near_far_lamp_flash = 8;
inline bool Judge50006::has_need_near_far_lamp_flash() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Judge50006::set_has_need_near_far_lamp_flash() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Judge50006::clear_has_need_near_far_lamp_flash() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Judge50006::clear_need_near_far_lamp_flash() {
  if (need_near_far_lamp_flash_ != NULL) need_near_far_lamp_flash_->::OPMessage::judgeItem::Clear();
  clear_has_need_near_far_lamp_flash();
}
inline const ::OPMessage::judgeItem& Judge50006::need_near_far_lamp_flash() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50006.need_near_far_lamp_flash)
  return need_near_far_lamp_flash_ != NULL ? *need_near_far_lamp_flash_ : *default_instance_->need_near_far_lamp_flash_;
}
inline ::OPMessage::judgeItem* Judge50006::mutable_need_near_far_lamp_flash() {
  set_has_need_near_far_lamp_flash();
  if (need_near_far_lamp_flash_ == NULL) need_near_far_lamp_flash_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50006.need_near_far_lamp_flash)
  return need_near_far_lamp_flash_;
}
inline ::OPMessage::judgeItem* Judge50006::release_need_near_far_lamp_flash() {
  clear_has_need_near_far_lamp_flash();
  ::OPMessage::judgeItem* temp = need_near_far_lamp_flash_;
  need_near_far_lamp_flash_ = NULL;
  return temp;
}
inline void Judge50006::set_allocated_need_near_far_lamp_flash(::OPMessage::judgeItem* need_near_far_lamp_flash) {
  delete need_near_far_lamp_flash_;
  need_near_far_lamp_flash_ = need_near_far_lamp_flash;
  if (need_near_far_lamp_flash) {
    set_has_need_near_far_lamp_flash();
  } else {
    clear_has_need_near_far_lamp_flash();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50006.need_near_far_lamp_flash)
}

// optional .OPMessage.judgeItem check_far_lamp = 9;
inline bool Judge50006::has_check_far_lamp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Judge50006::set_has_check_far_lamp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Judge50006::clear_has_check_far_lamp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Judge50006::clear_check_far_lamp() {
  if (check_far_lamp_ != NULL) check_far_lamp_->::OPMessage::judgeItem::Clear();
  clear_has_check_far_lamp();
}
inline const ::OPMessage::judgeItem& Judge50006::check_far_lamp() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50006.check_far_lamp)
  return check_far_lamp_ != NULL ? *check_far_lamp_ : *default_instance_->check_far_lamp_;
}
inline ::OPMessage::judgeItem* Judge50006::mutable_check_far_lamp() {
  set_has_check_far_lamp();
  if (check_far_lamp_ == NULL) check_far_lamp_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50006.check_far_lamp)
  return check_far_lamp_;
}
inline ::OPMessage::judgeItem* Judge50006::release_check_far_lamp() {
  clear_has_check_far_lamp();
  ::OPMessage::judgeItem* temp = check_far_lamp_;
  check_far_lamp_ = NULL;
  return temp;
}
inline void Judge50006::set_allocated_check_far_lamp(::OPMessage::judgeItem* check_far_lamp) {
  delete check_far_lamp_;
  check_far_lamp_ = check_far_lamp;
  if (check_far_lamp) {
    set_has_check_far_lamp();
  } else {
    clear_has_check_far_lamp();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50006.check_far_lamp)
}

// optional .OPMessage.judgeItem check_near_lamp = 10;
inline bool Judge50006::has_check_near_lamp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Judge50006::set_has_check_near_lamp() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Judge50006::clear_has_check_near_lamp() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Judge50006::clear_check_near_lamp() {
  if (check_near_lamp_ != NULL) check_near_lamp_->::OPMessage::judgeItem::Clear();
  clear_has_check_near_lamp();
}
inline const ::OPMessage::judgeItem& Judge50006::check_near_lamp() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50006.check_near_lamp)
  return check_near_lamp_ != NULL ? *check_near_lamp_ : *default_instance_->check_near_lamp_;
}
inline ::OPMessage::judgeItem* Judge50006::mutable_check_near_lamp() {
  set_has_check_near_lamp();
  if (check_near_lamp_ == NULL) check_near_lamp_ = new ::OPMessage::judgeItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50006.check_near_lamp)
  return check_near_lamp_;
}
inline ::OPMessage::judgeItem* Judge50006::release_check_near_lamp() {
  clear_has_check_near_lamp();
  ::OPMessage::judgeItem* temp = check_near_lamp_;
  check_near_lamp_ = NULL;
  return temp;
}
inline void Judge50006::set_allocated_check_near_lamp(::OPMessage::judgeItem* check_near_lamp) {
  delete check_near_lamp_;
  check_near_lamp_ = check_near_lamp;
  if (check_near_lamp) {
    set_has_check_near_lamp();
  } else {
    clear_has_check_near_lamp();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50006.check_near_lamp)
}

// optional .OPMessage.voiceItem vi_50006_start_exam = 11;
inline bool Judge50006::has_vi_50006_start_exam() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Judge50006::set_has_vi_50006_start_exam() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Judge50006::clear_has_vi_50006_start_exam() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Judge50006::clear_vi_50006_start_exam() {
  if (vi_50006_start_exam_ != NULL) vi_50006_start_exam_->::OPMessage::voiceItem::Clear();
  clear_has_vi_50006_start_exam();
}
inline const ::OPMessage::voiceItem& Judge50006::vi_50006_start_exam() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50006.vi_50006_start_exam)
  return vi_50006_start_exam_ != NULL ? *vi_50006_start_exam_ : *default_instance_->vi_50006_start_exam_;
}
inline ::OPMessage::voiceItem* Judge50006::mutable_vi_50006_start_exam() {
  set_has_vi_50006_start_exam();
  if (vi_50006_start_exam_ == NULL) vi_50006_start_exam_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50006.vi_50006_start_exam)
  return vi_50006_start_exam_;
}
inline ::OPMessage::voiceItem* Judge50006::release_vi_50006_start_exam() {
  clear_has_vi_50006_start_exam();
  ::OPMessage::voiceItem* temp = vi_50006_start_exam_;
  vi_50006_start_exam_ = NULL;
  return temp;
}
inline void Judge50006::set_allocated_vi_50006_start_exam(::OPMessage::voiceItem* vi_50006_start_exam) {
  delete vi_50006_start_exam_;
  vi_50006_start_exam_ = vi_50006_start_exam;
  if (vi_50006_start_exam) {
    set_has_vi_50006_start_exam();
  } else {
    clear_has_vi_50006_start_exam();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50006.vi_50006_start_exam)
}

// optional .OPMessage.voiceItem vi_50006_end_exam = 12;
inline bool Judge50006::has_vi_50006_end_exam() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Judge50006::set_has_vi_50006_end_exam() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Judge50006::clear_has_vi_50006_end_exam() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Judge50006::clear_vi_50006_end_exam() {
  if (vi_50006_end_exam_ != NULL) vi_50006_end_exam_->::OPMessage::voiceItem::Clear();
  clear_has_vi_50006_end_exam();
}
inline const ::OPMessage::voiceItem& Judge50006::vi_50006_end_exam() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50006.vi_50006_end_exam)
  return vi_50006_end_exam_ != NULL ? *vi_50006_end_exam_ : *default_instance_->vi_50006_end_exam_;
}
inline ::OPMessage::voiceItem* Judge50006::mutable_vi_50006_end_exam() {
  set_has_vi_50006_end_exam();
  if (vi_50006_end_exam_ == NULL) vi_50006_end_exam_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50006.vi_50006_end_exam)
  return vi_50006_end_exam_;
}
inline ::OPMessage::voiceItem* Judge50006::release_vi_50006_end_exam() {
  clear_has_vi_50006_end_exam();
  ::OPMessage::voiceItem* temp = vi_50006_end_exam_;
  vi_50006_end_exam_ = NULL;
  return temp;
}
inline void Judge50006::set_allocated_vi_50006_end_exam(::OPMessage::voiceItem* vi_50006_end_exam) {
  delete vi_50006_end_exam_;
  vi_50006_end_exam_ = vi_50006_end_exam;
  if (vi_50006_end_exam) {
    set_has_vi_50006_end_exam();
  } else {
    clear_has_vi_50006_end_exam();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50006.vi_50006_end_exam)
}

// optional .OPMessage.voiceItem vi_50006_not_slowdown = 13;
inline bool Judge50006::has_vi_50006_not_slowdown() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Judge50006::set_has_vi_50006_not_slowdown() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Judge50006::clear_has_vi_50006_not_slowdown() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Judge50006::clear_vi_50006_not_slowdown() {
  if (vi_50006_not_slowdown_ != NULL) vi_50006_not_slowdown_->::OPMessage::voiceItem::Clear();
  clear_has_vi_50006_not_slowdown();
}
inline const ::OPMessage::voiceItem& Judge50006::vi_50006_not_slowdown() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50006.vi_50006_not_slowdown)
  return vi_50006_not_slowdown_ != NULL ? *vi_50006_not_slowdown_ : *default_instance_->vi_50006_not_slowdown_;
}
inline ::OPMessage::voiceItem* Judge50006::mutable_vi_50006_not_slowdown() {
  set_has_vi_50006_not_slowdown();
  if (vi_50006_not_slowdown_ == NULL) vi_50006_not_slowdown_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50006.vi_50006_not_slowdown)
  return vi_50006_not_slowdown_;
}
inline ::OPMessage::voiceItem* Judge50006::release_vi_50006_not_slowdown() {
  clear_has_vi_50006_not_slowdown();
  ::OPMessage::voiceItem* temp = vi_50006_not_slowdown_;
  vi_50006_not_slowdown_ = NULL;
  return temp;
}
inline void Judge50006::set_allocated_vi_50006_not_slowdown(::OPMessage::voiceItem* vi_50006_not_slowdown) {
  delete vi_50006_not_slowdown_;
  vi_50006_not_slowdown_ = vi_50006_not_slowdown;
  if (vi_50006_not_slowdown) {
    set_has_vi_50006_not_slowdown();
  } else {
    clear_has_vi_50006_not_slowdown();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50006.vi_50006_not_slowdown)
}

// optional .OPMessage.voiceItem vi_50006_turn_lamp_use_error = 14;
inline bool Judge50006::has_vi_50006_turn_lamp_use_error() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Judge50006::set_has_vi_50006_turn_lamp_use_error() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Judge50006::clear_has_vi_50006_turn_lamp_use_error() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Judge50006::clear_vi_50006_turn_lamp_use_error() {
  if (vi_50006_turn_lamp_use_error_ != NULL) vi_50006_turn_lamp_use_error_->::OPMessage::voiceItem::Clear();
  clear_has_vi_50006_turn_lamp_use_error();
}
inline const ::OPMessage::voiceItem& Judge50006::vi_50006_turn_lamp_use_error() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50006.vi_50006_turn_lamp_use_error)
  return vi_50006_turn_lamp_use_error_ != NULL ? *vi_50006_turn_lamp_use_error_ : *default_instance_->vi_50006_turn_lamp_use_error_;
}
inline ::OPMessage::voiceItem* Judge50006::mutable_vi_50006_turn_lamp_use_error() {
  set_has_vi_50006_turn_lamp_use_error();
  if (vi_50006_turn_lamp_use_error_ == NULL) vi_50006_turn_lamp_use_error_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50006.vi_50006_turn_lamp_use_error)
  return vi_50006_turn_lamp_use_error_;
}
inline ::OPMessage::voiceItem* Judge50006::release_vi_50006_turn_lamp_use_error() {
  clear_has_vi_50006_turn_lamp_use_error();
  ::OPMessage::voiceItem* temp = vi_50006_turn_lamp_use_error_;
  vi_50006_turn_lamp_use_error_ = NULL;
  return temp;
}
inline void Judge50006::set_allocated_vi_50006_turn_lamp_use_error(::OPMessage::voiceItem* vi_50006_turn_lamp_use_error) {
  delete vi_50006_turn_lamp_use_error_;
  vi_50006_turn_lamp_use_error_ = vi_50006_turn_lamp_use_error;
  if (vi_50006_turn_lamp_use_error) {
    set_has_vi_50006_turn_lamp_use_error();
  } else {
    clear_has_vi_50006_turn_lamp_use_error();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50006.vi_50006_turn_lamp_use_error)
}

// optional .OPMessage.voiceItem vi_50006_turn_lamp_not_use = 15;
inline bool Judge50006::has_vi_50006_turn_lamp_not_use() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Judge50006::set_has_vi_50006_turn_lamp_not_use() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Judge50006::clear_has_vi_50006_turn_lamp_not_use() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Judge50006::clear_vi_50006_turn_lamp_not_use() {
  if (vi_50006_turn_lamp_not_use_ != NULL) vi_50006_turn_lamp_not_use_->::OPMessage::voiceItem::Clear();
  clear_has_vi_50006_turn_lamp_not_use();
}
inline const ::OPMessage::voiceItem& Judge50006::vi_50006_turn_lamp_not_use() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50006.vi_50006_turn_lamp_not_use)
  return vi_50006_turn_lamp_not_use_ != NULL ? *vi_50006_turn_lamp_not_use_ : *default_instance_->vi_50006_turn_lamp_not_use_;
}
inline ::OPMessage::voiceItem* Judge50006::mutable_vi_50006_turn_lamp_not_use() {
  set_has_vi_50006_turn_lamp_not_use();
  if (vi_50006_turn_lamp_not_use_ == NULL) vi_50006_turn_lamp_not_use_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50006.vi_50006_turn_lamp_not_use)
  return vi_50006_turn_lamp_not_use_;
}
inline ::OPMessage::voiceItem* Judge50006::release_vi_50006_turn_lamp_not_use() {
  clear_has_vi_50006_turn_lamp_not_use();
  ::OPMessage::voiceItem* temp = vi_50006_turn_lamp_not_use_;
  vi_50006_turn_lamp_not_use_ = NULL;
  return temp;
}
inline void Judge50006::set_allocated_vi_50006_turn_lamp_not_use(::OPMessage::voiceItem* vi_50006_turn_lamp_not_use) {
  delete vi_50006_turn_lamp_not_use_;
  vi_50006_turn_lamp_not_use_ = vi_50006_turn_lamp_not_use;
  if (vi_50006_turn_lamp_not_use) {
    set_has_vi_50006_turn_lamp_not_use();
  } else {
    clear_has_vi_50006_turn_lamp_not_use();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50006.vi_50006_turn_lamp_not_use)
}

// optional .OPMessage.voiceItem vi_50006_horn_not_use = 16;
inline bool Judge50006::has_vi_50006_horn_not_use() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Judge50006::set_has_vi_50006_horn_not_use() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Judge50006::clear_has_vi_50006_horn_not_use() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Judge50006::clear_vi_50006_horn_not_use() {
  if (vi_50006_horn_not_use_ != NULL) vi_50006_horn_not_use_->::OPMessage::voiceItem::Clear();
  clear_has_vi_50006_horn_not_use();
}
inline const ::OPMessage::voiceItem& Judge50006::vi_50006_horn_not_use() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50006.vi_50006_horn_not_use)
  return vi_50006_horn_not_use_ != NULL ? *vi_50006_horn_not_use_ : *default_instance_->vi_50006_horn_not_use_;
}
inline ::OPMessage::voiceItem* Judge50006::mutable_vi_50006_horn_not_use() {
  set_has_vi_50006_horn_not_use();
  if (vi_50006_horn_not_use_ == NULL) vi_50006_horn_not_use_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50006.vi_50006_horn_not_use)
  return vi_50006_horn_not_use_;
}
inline ::OPMessage::voiceItem* Judge50006::release_vi_50006_horn_not_use() {
  clear_has_vi_50006_horn_not_use();
  ::OPMessage::voiceItem* temp = vi_50006_horn_not_use_;
  vi_50006_horn_not_use_ = NULL;
  return temp;
}
inline void Judge50006::set_allocated_vi_50006_horn_not_use(::OPMessage::voiceItem* vi_50006_horn_not_use) {
  delete vi_50006_horn_not_use_;
  vi_50006_horn_not_use_ = vi_50006_horn_not_use;
  if (vi_50006_horn_not_use) {
    set_has_vi_50006_horn_not_use();
  } else {
    clear_has_vi_50006_horn_not_use();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50006.vi_50006_horn_not_use)
}

// optional .OPMessage.voiceItem vi_50006_not_open_near_lamp = 17;
inline bool Judge50006::has_vi_50006_not_open_near_lamp() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Judge50006::set_has_vi_50006_not_open_near_lamp() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Judge50006::clear_has_vi_50006_not_open_near_lamp() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Judge50006::clear_vi_50006_not_open_near_lamp() {
  if (vi_50006_not_open_near_lamp_ != NULL) vi_50006_not_open_near_lamp_->::OPMessage::voiceItem::Clear();
  clear_has_vi_50006_not_open_near_lamp();
}
inline const ::OPMessage::voiceItem& Judge50006::vi_50006_not_open_near_lamp() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50006.vi_50006_not_open_near_lamp)
  return vi_50006_not_open_near_lamp_ != NULL ? *vi_50006_not_open_near_lamp_ : *default_instance_->vi_50006_not_open_near_lamp_;
}
inline ::OPMessage::voiceItem* Judge50006::mutable_vi_50006_not_open_near_lamp() {
  set_has_vi_50006_not_open_near_lamp();
  if (vi_50006_not_open_near_lamp_ == NULL) vi_50006_not_open_near_lamp_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50006.vi_50006_not_open_near_lamp)
  return vi_50006_not_open_near_lamp_;
}
inline ::OPMessage::voiceItem* Judge50006::release_vi_50006_not_open_near_lamp() {
  clear_has_vi_50006_not_open_near_lamp();
  ::OPMessage::voiceItem* temp = vi_50006_not_open_near_lamp_;
  vi_50006_not_open_near_lamp_ = NULL;
  return temp;
}
inline void Judge50006::set_allocated_vi_50006_not_open_near_lamp(::OPMessage::voiceItem* vi_50006_not_open_near_lamp) {
  delete vi_50006_not_open_near_lamp_;
  vi_50006_not_open_near_lamp_ = vi_50006_not_open_near_lamp;
  if (vi_50006_not_open_near_lamp) {
    set_has_vi_50006_not_open_near_lamp();
  } else {
    clear_has_vi_50006_not_open_near_lamp();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50006.vi_50006_not_open_near_lamp)
}

// optional .OPMessage.voiceItem vi_50006_not_open_far_lamp = 18;
inline bool Judge50006::has_vi_50006_not_open_far_lamp() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Judge50006::set_has_vi_50006_not_open_far_lamp() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Judge50006::clear_has_vi_50006_not_open_far_lamp() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Judge50006::clear_vi_50006_not_open_far_lamp() {
  if (vi_50006_not_open_far_lamp_ != NULL) vi_50006_not_open_far_lamp_->::OPMessage::voiceItem::Clear();
  clear_has_vi_50006_not_open_far_lamp();
}
inline const ::OPMessage::voiceItem& Judge50006::vi_50006_not_open_far_lamp() const {
  // @@protoc_insertion_point(field_get:OPMessage.Judge50006.vi_50006_not_open_far_lamp)
  return vi_50006_not_open_far_lamp_ != NULL ? *vi_50006_not_open_far_lamp_ : *default_instance_->vi_50006_not_open_far_lamp_;
}
inline ::OPMessage::voiceItem* Judge50006::mutable_vi_50006_not_open_far_lamp() {
  set_has_vi_50006_not_open_far_lamp();
  if (vi_50006_not_open_far_lamp_ == NULL) vi_50006_not_open_far_lamp_ = new ::OPMessage::voiceItem;
  // @@protoc_insertion_point(field_mutable:OPMessage.Judge50006.vi_50006_not_open_far_lamp)
  return vi_50006_not_open_far_lamp_;
}
inline ::OPMessage::voiceItem* Judge50006::release_vi_50006_not_open_far_lamp() {
  clear_has_vi_50006_not_open_far_lamp();
  ::OPMessage::voiceItem* temp = vi_50006_not_open_far_lamp_;
  vi_50006_not_open_far_lamp_ = NULL;
  return temp;
}
inline void Judge50006::set_allocated_vi_50006_not_open_far_lamp(::OPMessage::voiceItem* vi_50006_not_open_far_lamp) {
  delete vi_50006_not_open_far_lamp_;
  vi_50006_not_open_far_lamp_ = vi_50006_not_open_far_lamp;
  if (vi_50006_not_open_far_lamp) {
    set_has_vi_50006_not_open_far_lamp();
  } else {
    clear_has_vi_50006_not_open_far_lamp();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Judge50006.vi_50006_not_open_far_lamp)
}

// -------------------------------------------------------------------

// Km3Judge

// optional .OPMessage.Judge0 judge0 = 1;
inline bool Km3Judge::has_judge0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Km3Judge::set_has_judge0() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Km3Judge::clear_has_judge0() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Km3Judge::clear_judge0() {
  if (judge0_ != NULL) judge0_->::OPMessage::Judge0::Clear();
  clear_has_judge0();
}
inline const ::OPMessage::Judge0& Km3Judge::judge0() const {
  // @@protoc_insertion_point(field_get:OPMessage.Km3Judge.judge0)
  return judge0_ != NULL ? *judge0_ : *default_instance_->judge0_;
}
inline ::OPMessage::Judge0* Km3Judge::mutable_judge0() {
  set_has_judge0();
  if (judge0_ == NULL) judge0_ = new ::OPMessage::Judge0;
  // @@protoc_insertion_point(field_mutable:OPMessage.Km3Judge.judge0)
  return judge0_;
}
inline ::OPMessage::Judge0* Km3Judge::release_judge0() {
  clear_has_judge0();
  ::OPMessage::Judge0* temp = judge0_;
  judge0_ = NULL;
  return temp;
}
inline void Km3Judge::set_allocated_judge0(::OPMessage::Judge0* judge0) {
  delete judge0_;
  judge0_ = judge0;
  if (judge0) {
    set_has_judge0();
  } else {
    clear_has_judge0();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Km3Judge.judge0)
}

// optional .OPMessage.Judge40100 judge40100 = 2;
inline bool Km3Judge::has_judge40100() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Km3Judge::set_has_judge40100() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Km3Judge::clear_has_judge40100() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Km3Judge::clear_judge40100() {
  if (judge40100_ != NULL) judge40100_->::OPMessage::Judge40100::Clear();
  clear_has_judge40100();
}
inline const ::OPMessage::Judge40100& Km3Judge::judge40100() const {
  // @@protoc_insertion_point(field_get:OPMessage.Km3Judge.judge40100)
  return judge40100_ != NULL ? *judge40100_ : *default_instance_->judge40100_;
}
inline ::OPMessage::Judge40100* Km3Judge::mutable_judge40100() {
  set_has_judge40100();
  if (judge40100_ == NULL) judge40100_ = new ::OPMessage::Judge40100;
  // @@protoc_insertion_point(field_mutable:OPMessage.Km3Judge.judge40100)
  return judge40100_;
}
inline ::OPMessage::Judge40100* Km3Judge::release_judge40100() {
  clear_has_judge40100();
  ::OPMessage::Judge40100* temp = judge40100_;
  judge40100_ = NULL;
  return temp;
}
inline void Km3Judge::set_allocated_judge40100(::OPMessage::Judge40100* judge40100) {
  delete judge40100_;
  judge40100_ = judge40100;
  if (judge40100) {
    set_has_judge40100();
  } else {
    clear_has_judge40100();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Km3Judge.judge40100)
}

// optional .OPMessage.Judge41600 judge41600 = 3;
inline bool Km3Judge::has_judge41600() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Km3Judge::set_has_judge41600() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Km3Judge::clear_has_judge41600() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Km3Judge::clear_judge41600() {
  if (judge41600_ != NULL) judge41600_->::OPMessage::Judge41600::Clear();
  clear_has_judge41600();
}
inline const ::OPMessage::Judge41600& Km3Judge::judge41600() const {
  // @@protoc_insertion_point(field_get:OPMessage.Km3Judge.judge41600)
  return judge41600_ != NULL ? *judge41600_ : *default_instance_->judge41600_;
}
inline ::OPMessage::Judge41600* Km3Judge::mutable_judge41600() {
  set_has_judge41600();
  if (judge41600_ == NULL) judge41600_ = new ::OPMessage::Judge41600;
  // @@protoc_insertion_point(field_mutable:OPMessage.Km3Judge.judge41600)
  return judge41600_;
}
inline ::OPMessage::Judge41600* Km3Judge::release_judge41600() {
  clear_has_judge41600();
  ::OPMessage::Judge41600* temp = judge41600_;
  judge41600_ = NULL;
  return temp;
}
inline void Km3Judge::set_allocated_judge41600(::OPMessage::Judge41600* judge41600) {
  delete judge41600_;
  judge41600_ = judge41600;
  if (judge41600) {
    set_has_judge41600();
  } else {
    clear_has_judge41600();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Km3Judge.judge41600)
}

// optional .OPMessage.Judge40200 judge40200 = 4;
inline bool Km3Judge::has_judge40200() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Km3Judge::set_has_judge40200() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Km3Judge::clear_has_judge40200() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Km3Judge::clear_judge40200() {
  if (judge40200_ != NULL) judge40200_->::OPMessage::Judge40200::Clear();
  clear_has_judge40200();
}
inline const ::OPMessage::Judge40200& Km3Judge::judge40200() const {
  // @@protoc_insertion_point(field_get:OPMessage.Km3Judge.judge40200)
  return judge40200_ != NULL ? *judge40200_ : *default_instance_->judge40200_;
}
inline ::OPMessage::Judge40200* Km3Judge::mutable_judge40200() {
  set_has_judge40200();
  if (judge40200_ == NULL) judge40200_ = new ::OPMessage::Judge40200;
  // @@protoc_insertion_point(field_mutable:OPMessage.Km3Judge.judge40200)
  return judge40200_;
}
inline ::OPMessage::Judge40200* Km3Judge::release_judge40200() {
  clear_has_judge40200();
  ::OPMessage::Judge40200* temp = judge40200_;
  judge40200_ = NULL;
  return temp;
}
inline void Km3Judge::set_allocated_judge40200(::OPMessage::Judge40200* judge40200) {
  delete judge40200_;
  judge40200_ = judge40200;
  if (judge40200) {
    set_has_judge40200();
  } else {
    clear_has_judge40200();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Km3Judge.judge40200)
}

// optional .OPMessage.Judge40400 judge40400 = 5;
inline bool Km3Judge::has_judge40400() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Km3Judge::set_has_judge40400() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Km3Judge::clear_has_judge40400() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Km3Judge::clear_judge40400() {
  if (judge40400_ != NULL) judge40400_->::OPMessage::Judge40400::Clear();
  clear_has_judge40400();
}
inline const ::OPMessage::Judge40400& Km3Judge::judge40400() const {
  // @@protoc_insertion_point(field_get:OPMessage.Km3Judge.judge40400)
  return judge40400_ != NULL ? *judge40400_ : *default_instance_->judge40400_;
}
inline ::OPMessage::Judge40400* Km3Judge::mutable_judge40400() {
  set_has_judge40400();
  if (judge40400_ == NULL) judge40400_ = new ::OPMessage::Judge40400;
  // @@protoc_insertion_point(field_mutable:OPMessage.Km3Judge.judge40400)
  return judge40400_;
}
inline ::OPMessage::Judge40400* Km3Judge::release_judge40400() {
  clear_has_judge40400();
  ::OPMessage::Judge40400* temp = judge40400_;
  judge40400_ = NULL;
  return temp;
}
inline void Km3Judge::set_allocated_judge40400(::OPMessage::Judge40400* judge40400) {
  delete judge40400_;
  judge40400_ = judge40400;
  if (judge40400) {
    set_has_judge40400();
  } else {
    clear_has_judge40400();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Km3Judge.judge40400)
}

// optional .OPMessage.Judge41000 judge41000 = 6;
inline bool Km3Judge::has_judge41000() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Km3Judge::set_has_judge41000() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Km3Judge::clear_has_judge41000() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Km3Judge::clear_judge41000() {
  if (judge41000_ != NULL) judge41000_->::OPMessage::Judge41000::Clear();
  clear_has_judge41000();
}
inline const ::OPMessage::Judge41000& Km3Judge::judge41000() const {
  // @@protoc_insertion_point(field_get:OPMessage.Km3Judge.judge41000)
  return judge41000_ != NULL ? *judge41000_ : *default_instance_->judge41000_;
}
inline ::OPMessage::Judge41000* Km3Judge::mutable_judge41000() {
  set_has_judge41000();
  if (judge41000_ == NULL) judge41000_ = new ::OPMessage::Judge41000;
  // @@protoc_insertion_point(field_mutable:OPMessage.Km3Judge.judge41000)
  return judge41000_;
}
inline ::OPMessage::Judge41000* Km3Judge::release_judge41000() {
  clear_has_judge41000();
  ::OPMessage::Judge41000* temp = judge41000_;
  judge41000_ = NULL;
  return temp;
}
inline void Km3Judge::set_allocated_judge41000(::OPMessage::Judge41000* judge41000) {
  delete judge41000_;
  judge41000_ = judge41000;
  if (judge41000) {
    set_has_judge41000();
  } else {
    clear_has_judge41000();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Km3Judge.judge41000)
}

// optional .OPMessage.Judge41001 judge41001 = 7;
inline bool Km3Judge::has_judge41001() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Km3Judge::set_has_judge41001() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Km3Judge::clear_has_judge41001() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Km3Judge::clear_judge41001() {
  if (judge41001_ != NULL) judge41001_->::OPMessage::Judge41001::Clear();
  clear_has_judge41001();
}
inline const ::OPMessage::Judge41001& Km3Judge::judge41001() const {
  // @@protoc_insertion_point(field_get:OPMessage.Km3Judge.judge41001)
  return judge41001_ != NULL ? *judge41001_ : *default_instance_->judge41001_;
}
inline ::OPMessage::Judge41001* Km3Judge::mutable_judge41001() {
  set_has_judge41001();
  if (judge41001_ == NULL) judge41001_ = new ::OPMessage::Judge41001;
  // @@protoc_insertion_point(field_mutable:OPMessage.Km3Judge.judge41001)
  return judge41001_;
}
inline ::OPMessage::Judge41001* Km3Judge::release_judge41001() {
  clear_has_judge41001();
  ::OPMessage::Judge41001* temp = judge41001_;
  judge41001_ = NULL;
  return temp;
}
inline void Km3Judge::set_allocated_judge41001(::OPMessage::Judge41001* judge41001) {
  delete judge41001_;
  judge41001_ = judge41001;
  if (judge41001) {
    set_has_judge41001();
  } else {
    clear_has_judge41001();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Km3Judge.judge41001)
}

// optional .OPMessage.Judge41200 judge41200 = 8;
inline bool Km3Judge::has_judge41200() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Km3Judge::set_has_judge41200() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Km3Judge::clear_has_judge41200() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Km3Judge::clear_judge41200() {
  if (judge41200_ != NULL) judge41200_->::OPMessage::Judge41200::Clear();
  clear_has_judge41200();
}
inline const ::OPMessage::Judge41200& Km3Judge::judge41200() const {
  // @@protoc_insertion_point(field_get:OPMessage.Km3Judge.judge41200)
  return judge41200_ != NULL ? *judge41200_ : *default_instance_->judge41200_;
}
inline ::OPMessage::Judge41200* Km3Judge::mutable_judge41200() {
  set_has_judge41200();
  if (judge41200_ == NULL) judge41200_ = new ::OPMessage::Judge41200;
  // @@protoc_insertion_point(field_mutable:OPMessage.Km3Judge.judge41200)
  return judge41200_;
}
inline ::OPMessage::Judge41200* Km3Judge::release_judge41200() {
  clear_has_judge41200();
  ::OPMessage::Judge41200* temp = judge41200_;
  judge41200_ = NULL;
  return temp;
}
inline void Km3Judge::set_allocated_judge41200(::OPMessage::Judge41200* judge41200) {
  delete judge41200_;
  judge41200_ = judge41200;
  if (judge41200) {
    set_has_judge41200();
  } else {
    clear_has_judge41200();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Km3Judge.judge41200)
}

// optional .OPMessage.Judge41100 judge41100 = 9;
inline bool Km3Judge::has_judge41100() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Km3Judge::set_has_judge41100() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Km3Judge::clear_has_judge41100() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Km3Judge::clear_judge41100() {
  if (judge41100_ != NULL) judge41100_->::OPMessage::Judge41100::Clear();
  clear_has_judge41100();
}
inline const ::OPMessage::Judge41100& Km3Judge::judge41100() const {
  // @@protoc_insertion_point(field_get:OPMessage.Km3Judge.judge41100)
  return judge41100_ != NULL ? *judge41100_ : *default_instance_->judge41100_;
}
inline ::OPMessage::Judge41100* Km3Judge::mutable_judge41100() {
  set_has_judge41100();
  if (judge41100_ == NULL) judge41100_ = new ::OPMessage::Judge41100;
  // @@protoc_insertion_point(field_mutable:OPMessage.Km3Judge.judge41100)
  return judge41100_;
}
inline ::OPMessage::Judge41100* Km3Judge::release_judge41100() {
  clear_has_judge41100();
  ::OPMessage::Judge41100* temp = judge41100_;
  judge41100_ = NULL;
  return temp;
}
inline void Km3Judge::set_allocated_judge41100(::OPMessage::Judge41100* judge41100) {
  delete judge41100_;
  judge41100_ = judge41100;
  if (judge41100) {
    set_has_judge41100();
  } else {
    clear_has_judge41100();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Km3Judge.judge41100)
}

// optional .OPMessage.Judge40700 judge40700 = 10;
inline bool Km3Judge::has_judge40700() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Km3Judge::set_has_judge40700() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Km3Judge::clear_has_judge40700() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Km3Judge::clear_judge40700() {
  if (judge40700_ != NULL) judge40700_->::OPMessage::Judge40700::Clear();
  clear_has_judge40700();
}
inline const ::OPMessage::Judge40700& Km3Judge::judge40700() const {
  // @@protoc_insertion_point(field_get:OPMessage.Km3Judge.judge40700)
  return judge40700_ != NULL ? *judge40700_ : *default_instance_->judge40700_;
}
inline ::OPMessage::Judge40700* Km3Judge::mutable_judge40700() {
  set_has_judge40700();
  if (judge40700_ == NULL) judge40700_ = new ::OPMessage::Judge40700;
  // @@protoc_insertion_point(field_mutable:OPMessage.Km3Judge.judge40700)
  return judge40700_;
}
inline ::OPMessage::Judge40700* Km3Judge::release_judge40700() {
  clear_has_judge40700();
  ::OPMessage::Judge40700* temp = judge40700_;
  judge40700_ = NULL;
  return temp;
}
inline void Km3Judge::set_allocated_judge40700(::OPMessage::Judge40700* judge40700) {
  delete judge40700_;
  judge40700_ = judge40700;
  if (judge40700) {
    set_has_judge40700();
  } else {
    clear_has_judge40700();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Km3Judge.judge40700)
}

// optional .OPMessage.Judge41500 judge41500 = 11;
inline bool Km3Judge::has_judge41500() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Km3Judge::set_has_judge41500() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Km3Judge::clear_has_judge41500() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Km3Judge::clear_judge41500() {
  if (judge41500_ != NULL) judge41500_->::OPMessage::Judge41500::Clear();
  clear_has_judge41500();
}
inline const ::OPMessage::Judge41500& Km3Judge::judge41500() const {
  // @@protoc_insertion_point(field_get:OPMessage.Km3Judge.judge41500)
  return judge41500_ != NULL ? *judge41500_ : *default_instance_->judge41500_;
}
inline ::OPMessage::Judge41500* Km3Judge::mutable_judge41500() {
  set_has_judge41500();
  if (judge41500_ == NULL) judge41500_ = new ::OPMessage::Judge41500;
  // @@protoc_insertion_point(field_mutable:OPMessage.Km3Judge.judge41500)
  return judge41500_;
}
inline ::OPMessage::Judge41500* Km3Judge::release_judge41500() {
  clear_has_judge41500();
  ::OPMessage::Judge41500* temp = judge41500_;
  judge41500_ = NULL;
  return temp;
}
inline void Km3Judge::set_allocated_judge41500(::OPMessage::Judge41500* judge41500) {
  delete judge41500_;
  judge41500_ = judge41500;
  if (judge41500) {
    set_has_judge41500();
  } else {
    clear_has_judge41500();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Km3Judge.judge41500)
}

// optional .OPMessage.Judge40800 judge40800 = 12;
inline bool Km3Judge::has_judge40800() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Km3Judge::set_has_judge40800() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Km3Judge::clear_has_judge40800() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Km3Judge::clear_judge40800() {
  if (judge40800_ != NULL) judge40800_->::OPMessage::Judge40800::Clear();
  clear_has_judge40800();
}
inline const ::OPMessage::Judge40800& Km3Judge::judge40800() const {
  // @@protoc_insertion_point(field_get:OPMessage.Km3Judge.judge40800)
  return judge40800_ != NULL ? *judge40800_ : *default_instance_->judge40800_;
}
inline ::OPMessage::Judge40800* Km3Judge::mutable_judge40800() {
  set_has_judge40800();
  if (judge40800_ == NULL) judge40800_ = new ::OPMessage::Judge40800;
  // @@protoc_insertion_point(field_mutable:OPMessage.Km3Judge.judge40800)
  return judge40800_;
}
inline ::OPMessage::Judge40800* Km3Judge::release_judge40800() {
  clear_has_judge40800();
  ::OPMessage::Judge40800* temp = judge40800_;
  judge40800_ = NULL;
  return temp;
}
inline void Km3Judge::set_allocated_judge40800(::OPMessage::Judge40800* judge40800) {
  delete judge40800_;
  judge40800_ = judge40800;
  if (judge40800) {
    set_has_judge40800();
  } else {
    clear_has_judge40800();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Km3Judge.judge40800)
}

// optional .OPMessage.Judge40900 judge40900 = 13;
inline bool Km3Judge::has_judge40900() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Km3Judge::set_has_judge40900() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Km3Judge::clear_has_judge40900() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Km3Judge::clear_judge40900() {
  if (judge40900_ != NULL) judge40900_->::OPMessage::Judge40900::Clear();
  clear_has_judge40900();
}
inline const ::OPMessage::Judge40900& Km3Judge::judge40900() const {
  // @@protoc_insertion_point(field_get:OPMessage.Km3Judge.judge40900)
  return judge40900_ != NULL ? *judge40900_ : *default_instance_->judge40900_;
}
inline ::OPMessage::Judge40900* Km3Judge::mutable_judge40900() {
  set_has_judge40900();
  if (judge40900_ == NULL) judge40900_ = new ::OPMessage::Judge40900;
  // @@protoc_insertion_point(field_mutable:OPMessage.Km3Judge.judge40900)
  return judge40900_;
}
inline ::OPMessage::Judge40900* Km3Judge::release_judge40900() {
  clear_has_judge40900();
  ::OPMessage::Judge40900* temp = judge40900_;
  judge40900_ = NULL;
  return temp;
}
inline void Km3Judge::set_allocated_judge40900(::OPMessage::Judge40900* judge40900) {
  delete judge40900_;
  judge40900_ = judge40900;
  if (judge40900) {
    set_has_judge40900();
  } else {
    clear_has_judge40900();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Km3Judge.judge40900)
}

// optional .OPMessage.Judge41400 judge41400 = 14;
inline bool Km3Judge::has_judge41400() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Km3Judge::set_has_judge41400() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Km3Judge::clear_has_judge41400() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Km3Judge::clear_judge41400() {
  if (judge41400_ != NULL) judge41400_->::OPMessage::Judge41400::Clear();
  clear_has_judge41400();
}
inline const ::OPMessage::Judge41400& Km3Judge::judge41400() const {
  // @@protoc_insertion_point(field_get:OPMessage.Km3Judge.judge41400)
  return judge41400_ != NULL ? *judge41400_ : *default_instance_->judge41400_;
}
inline ::OPMessage::Judge41400* Km3Judge::mutable_judge41400() {
  set_has_judge41400();
  if (judge41400_ == NULL) judge41400_ = new ::OPMessage::Judge41400;
  // @@protoc_insertion_point(field_mutable:OPMessage.Km3Judge.judge41400)
  return judge41400_;
}
inline ::OPMessage::Judge41400* Km3Judge::release_judge41400() {
  clear_has_judge41400();
  ::OPMessage::Judge41400* temp = judge41400_;
  judge41400_ = NULL;
  return temp;
}
inline void Km3Judge::set_allocated_judge41400(::OPMessage::Judge41400* judge41400) {
  delete judge41400_;
  judge41400_ = judge41400;
  if (judge41400) {
    set_has_judge41400();
  } else {
    clear_has_judge41400();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Km3Judge.judge41400)
}

// optional .OPMessage.Judge40500 judge40500 = 15;
inline bool Km3Judge::has_judge40500() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Km3Judge::set_has_judge40500() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Km3Judge::clear_has_judge40500() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Km3Judge::clear_judge40500() {
  if (judge40500_ != NULL) judge40500_->::OPMessage::Judge40500::Clear();
  clear_has_judge40500();
}
inline const ::OPMessage::Judge40500& Km3Judge::judge40500() const {
  // @@protoc_insertion_point(field_get:OPMessage.Km3Judge.judge40500)
  return judge40500_ != NULL ? *judge40500_ : *default_instance_->judge40500_;
}
inline ::OPMessage::Judge40500* Km3Judge::mutable_judge40500() {
  set_has_judge40500();
  if (judge40500_ == NULL) judge40500_ = new ::OPMessage::Judge40500;
  // @@protoc_insertion_point(field_mutable:OPMessage.Km3Judge.judge40500)
  return judge40500_;
}
inline ::OPMessage::Judge40500* Km3Judge::release_judge40500() {
  clear_has_judge40500();
  ::OPMessage::Judge40500* temp = judge40500_;
  judge40500_ = NULL;
  return temp;
}
inline void Km3Judge::set_allocated_judge40500(::OPMessage::Judge40500* judge40500) {
  delete judge40500_;
  judge40500_ = judge40500;
  if (judge40500) {
    set_has_judge40500();
  } else {
    clear_has_judge40500();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Km3Judge.judge40500)
}

// optional .OPMessage.Judge41300 judge41300 = 16;
inline bool Km3Judge::has_judge41300() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Km3Judge::set_has_judge41300() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Km3Judge::clear_has_judge41300() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Km3Judge::clear_judge41300() {
  if (judge41300_ != NULL) judge41300_->::OPMessage::Judge41300::Clear();
  clear_has_judge41300();
}
inline const ::OPMessage::Judge41300& Km3Judge::judge41300() const {
  // @@protoc_insertion_point(field_get:OPMessage.Km3Judge.judge41300)
  return judge41300_ != NULL ? *judge41300_ : *default_instance_->judge41300_;
}
inline ::OPMessage::Judge41300* Km3Judge::mutable_judge41300() {
  set_has_judge41300();
  if (judge41300_ == NULL) judge41300_ = new ::OPMessage::Judge41300;
  // @@protoc_insertion_point(field_mutable:OPMessage.Km3Judge.judge41300)
  return judge41300_;
}
inline ::OPMessage::Judge41300* Km3Judge::release_judge41300() {
  clear_has_judge41300();
  ::OPMessage::Judge41300* temp = judge41300_;
  judge41300_ = NULL;
  return temp;
}
inline void Km3Judge::set_allocated_judge41300(::OPMessage::Judge41300* judge41300) {
  delete judge41300_;
  judge41300_ = judge41300;
  if (judge41300) {
    set_has_judge41300();
  } else {
    clear_has_judge41300();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Km3Judge.judge41300)
}

// optional .OPMessage.Judge40300 judge40300 = 17;
inline bool Km3Judge::has_judge40300() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Km3Judge::set_has_judge40300() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Km3Judge::clear_has_judge40300() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Km3Judge::clear_judge40300() {
  if (judge40300_ != NULL) judge40300_->::OPMessage::Judge40300::Clear();
  clear_has_judge40300();
}
inline const ::OPMessage::Judge40300& Km3Judge::judge40300() const {
  // @@protoc_insertion_point(field_get:OPMessage.Km3Judge.judge40300)
  return judge40300_ != NULL ? *judge40300_ : *default_instance_->judge40300_;
}
inline ::OPMessage::Judge40300* Km3Judge::mutable_judge40300() {
  set_has_judge40300();
  if (judge40300_ == NULL) judge40300_ = new ::OPMessage::Judge40300;
  // @@protoc_insertion_point(field_mutable:OPMessage.Km3Judge.judge40300)
  return judge40300_;
}
inline ::OPMessage::Judge40300* Km3Judge::release_judge40300() {
  clear_has_judge40300();
  ::OPMessage::Judge40300* temp = judge40300_;
  judge40300_ = NULL;
  return temp;
}
inline void Km3Judge::set_allocated_judge40300(::OPMessage::Judge40300* judge40300) {
  delete judge40300_;
  judge40300_ = judge40300;
  if (judge40300) {
    set_has_judge40300();
  } else {
    clear_has_judge40300();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Km3Judge.judge40300)
}

// optional .OPMessage.Judge40600 judge40600 = 18;
inline bool Km3Judge::has_judge40600() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Km3Judge::set_has_judge40600() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Km3Judge::clear_has_judge40600() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Km3Judge::clear_judge40600() {
  if (judge40600_ != NULL) judge40600_->::OPMessage::Judge40600::Clear();
  clear_has_judge40600();
}
inline const ::OPMessage::Judge40600& Km3Judge::judge40600() const {
  // @@protoc_insertion_point(field_get:OPMessage.Km3Judge.judge40600)
  return judge40600_ != NULL ? *judge40600_ : *default_instance_->judge40600_;
}
inline ::OPMessage::Judge40600* Km3Judge::mutable_judge40600() {
  set_has_judge40600();
  if (judge40600_ == NULL) judge40600_ = new ::OPMessage::Judge40600;
  // @@protoc_insertion_point(field_mutable:OPMessage.Km3Judge.judge40600)
  return judge40600_;
}
inline ::OPMessage::Judge40600* Km3Judge::release_judge40600() {
  clear_has_judge40600();
  ::OPMessage::Judge40600* temp = judge40600_;
  judge40600_ = NULL;
  return temp;
}
inline void Km3Judge::set_allocated_judge40600(::OPMessage::Judge40600* judge40600) {
  delete judge40600_;
  judge40600_ = judge40600;
  if (judge40600) {
    set_has_judge40600();
  } else {
    clear_has_judge40600();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Km3Judge.judge40600)
}

// optional .OPMessage.Judge40601 judge40601 = 19;
inline bool Km3Judge::has_judge40601() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Km3Judge::set_has_judge40601() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Km3Judge::clear_has_judge40601() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Km3Judge::clear_judge40601() {
  if (judge40601_ != NULL) judge40601_->::OPMessage::Judge40601::Clear();
  clear_has_judge40601();
}
inline const ::OPMessage::Judge40601& Km3Judge::judge40601() const {
  // @@protoc_insertion_point(field_get:OPMessage.Km3Judge.judge40601)
  return judge40601_ != NULL ? *judge40601_ : *default_instance_->judge40601_;
}
inline ::OPMessage::Judge40601* Km3Judge::mutable_judge40601() {
  set_has_judge40601();
  if (judge40601_ == NULL) judge40601_ = new ::OPMessage::Judge40601;
  // @@protoc_insertion_point(field_mutable:OPMessage.Km3Judge.judge40601)
  return judge40601_;
}
inline ::OPMessage::Judge40601* Km3Judge::release_judge40601() {
  clear_has_judge40601();
  ::OPMessage::Judge40601* temp = judge40601_;
  judge40601_ = NULL;
  return temp;
}
inline void Km3Judge::set_allocated_judge40601(::OPMessage::Judge40601* judge40601) {
  delete judge40601_;
  judge40601_ = judge40601;
  if (judge40601) {
    set_has_judge40601();
  } else {
    clear_has_judge40601();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Km3Judge.judge40601)
}

// optional .OPMessage.Judge50001 judge50001 = 20;
inline bool Km3Judge::has_judge50001() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Km3Judge::set_has_judge50001() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Km3Judge::clear_has_judge50001() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Km3Judge::clear_judge50001() {
  if (judge50001_ != NULL) judge50001_->::OPMessage::Judge50001::Clear();
  clear_has_judge50001();
}
inline const ::OPMessage::Judge50001& Km3Judge::judge50001() const {
  // @@protoc_insertion_point(field_get:OPMessage.Km3Judge.judge50001)
  return judge50001_ != NULL ? *judge50001_ : *default_instance_->judge50001_;
}
inline ::OPMessage::Judge50001* Km3Judge::mutable_judge50001() {
  set_has_judge50001();
  if (judge50001_ == NULL) judge50001_ = new ::OPMessage::Judge50001;
  // @@protoc_insertion_point(field_mutable:OPMessage.Km3Judge.judge50001)
  return judge50001_;
}
inline ::OPMessage::Judge50001* Km3Judge::release_judge50001() {
  clear_has_judge50001();
  ::OPMessage::Judge50001* temp = judge50001_;
  judge50001_ = NULL;
  return temp;
}
inline void Km3Judge::set_allocated_judge50001(::OPMessage::Judge50001* judge50001) {
  delete judge50001_;
  judge50001_ = judge50001;
  if (judge50001) {
    set_has_judge50001();
  } else {
    clear_has_judge50001();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Km3Judge.judge50001)
}

// optional .OPMessage.Judge50002 judge50002 = 21;
inline bool Km3Judge::has_judge50002() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Km3Judge::set_has_judge50002() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Km3Judge::clear_has_judge50002() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Km3Judge::clear_judge50002() {
  if (judge50002_ != NULL) judge50002_->::OPMessage::Judge50002::Clear();
  clear_has_judge50002();
}
inline const ::OPMessage::Judge50002& Km3Judge::judge50002() const {
  // @@protoc_insertion_point(field_get:OPMessage.Km3Judge.judge50002)
  return judge50002_ != NULL ? *judge50002_ : *default_instance_->judge50002_;
}
inline ::OPMessage::Judge50002* Km3Judge::mutable_judge50002() {
  set_has_judge50002();
  if (judge50002_ == NULL) judge50002_ = new ::OPMessage::Judge50002;
  // @@protoc_insertion_point(field_mutable:OPMessage.Km3Judge.judge50002)
  return judge50002_;
}
inline ::OPMessage::Judge50002* Km3Judge::release_judge50002() {
  clear_has_judge50002();
  ::OPMessage::Judge50002* temp = judge50002_;
  judge50002_ = NULL;
  return temp;
}
inline void Km3Judge::set_allocated_judge50002(::OPMessage::Judge50002* judge50002) {
  delete judge50002_;
  judge50002_ = judge50002;
  if (judge50002) {
    set_has_judge50002();
  } else {
    clear_has_judge50002();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Km3Judge.judge50002)
}

// optional .OPMessage.Judge50003 judge50003 = 22;
inline bool Km3Judge::has_judge50003() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Km3Judge::set_has_judge50003() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Km3Judge::clear_has_judge50003() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Km3Judge::clear_judge50003() {
  if (judge50003_ != NULL) judge50003_->::OPMessage::Judge50003::Clear();
  clear_has_judge50003();
}
inline const ::OPMessage::Judge50003& Km3Judge::judge50003() const {
  // @@protoc_insertion_point(field_get:OPMessage.Km3Judge.judge50003)
  return judge50003_ != NULL ? *judge50003_ : *default_instance_->judge50003_;
}
inline ::OPMessage::Judge50003* Km3Judge::mutable_judge50003() {
  set_has_judge50003();
  if (judge50003_ == NULL) judge50003_ = new ::OPMessage::Judge50003;
  // @@protoc_insertion_point(field_mutable:OPMessage.Km3Judge.judge50003)
  return judge50003_;
}
inline ::OPMessage::Judge50003* Km3Judge::release_judge50003() {
  clear_has_judge50003();
  ::OPMessage::Judge50003* temp = judge50003_;
  judge50003_ = NULL;
  return temp;
}
inline void Km3Judge::set_allocated_judge50003(::OPMessage::Judge50003* judge50003) {
  delete judge50003_;
  judge50003_ = judge50003;
  if (judge50003) {
    set_has_judge50003();
  } else {
    clear_has_judge50003();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Km3Judge.judge50003)
}

// optional .OPMessage.Judge50004 judge50004 = 23;
inline bool Km3Judge::has_judge50004() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Km3Judge::set_has_judge50004() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Km3Judge::clear_has_judge50004() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Km3Judge::clear_judge50004() {
  if (judge50004_ != NULL) judge50004_->::OPMessage::Judge50004::Clear();
  clear_has_judge50004();
}
inline const ::OPMessage::Judge50004& Km3Judge::judge50004() const {
  // @@protoc_insertion_point(field_get:OPMessage.Km3Judge.judge50004)
  return judge50004_ != NULL ? *judge50004_ : *default_instance_->judge50004_;
}
inline ::OPMessage::Judge50004* Km3Judge::mutable_judge50004() {
  set_has_judge50004();
  if (judge50004_ == NULL) judge50004_ = new ::OPMessage::Judge50004;
  // @@protoc_insertion_point(field_mutable:OPMessage.Km3Judge.judge50004)
  return judge50004_;
}
inline ::OPMessage::Judge50004* Km3Judge::release_judge50004() {
  clear_has_judge50004();
  ::OPMessage::Judge50004* temp = judge50004_;
  judge50004_ = NULL;
  return temp;
}
inline void Km3Judge::set_allocated_judge50004(::OPMessage::Judge50004* judge50004) {
  delete judge50004_;
  judge50004_ = judge50004;
  if (judge50004) {
    set_has_judge50004();
  } else {
    clear_has_judge50004();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Km3Judge.judge50004)
}

// optional .OPMessage.Judge50005 judge50005 = 24;
inline bool Km3Judge::has_judge50005() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Km3Judge::set_has_judge50005() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Km3Judge::clear_has_judge50005() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Km3Judge::clear_judge50005() {
  if (judge50005_ != NULL) judge50005_->::OPMessage::Judge50005::Clear();
  clear_has_judge50005();
}
inline const ::OPMessage::Judge50005& Km3Judge::judge50005() const {
  // @@protoc_insertion_point(field_get:OPMessage.Km3Judge.judge50005)
  return judge50005_ != NULL ? *judge50005_ : *default_instance_->judge50005_;
}
inline ::OPMessage::Judge50005* Km3Judge::mutable_judge50005() {
  set_has_judge50005();
  if (judge50005_ == NULL) judge50005_ = new ::OPMessage::Judge50005;
  // @@protoc_insertion_point(field_mutable:OPMessage.Km3Judge.judge50005)
  return judge50005_;
}
inline ::OPMessage::Judge50005* Km3Judge::release_judge50005() {
  clear_has_judge50005();
  ::OPMessage::Judge50005* temp = judge50005_;
  judge50005_ = NULL;
  return temp;
}
inline void Km3Judge::set_allocated_judge50005(::OPMessage::Judge50005* judge50005) {
  delete judge50005_;
  judge50005_ = judge50005;
  if (judge50005) {
    set_has_judge50005();
  } else {
    clear_has_judge50005();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Km3Judge.judge50005)
}

// optional .OPMessage.Judge50006 judge50006 = 25;
inline bool Km3Judge::has_judge50006() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Km3Judge::set_has_judge50006() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Km3Judge::clear_has_judge50006() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Km3Judge::clear_judge50006() {
  if (judge50006_ != NULL) judge50006_->::OPMessage::Judge50006::Clear();
  clear_has_judge50006();
}
inline const ::OPMessage::Judge50006& Km3Judge::judge50006() const {
  // @@protoc_insertion_point(field_get:OPMessage.Km3Judge.judge50006)
  return judge50006_ != NULL ? *judge50006_ : *default_instance_->judge50006_;
}
inline ::OPMessage::Judge50006* Km3Judge::mutable_judge50006() {
  set_has_judge50006();
  if (judge50006_ == NULL) judge50006_ = new ::OPMessage::Judge50006;
  // @@protoc_insertion_point(field_mutable:OPMessage.Km3Judge.judge50006)
  return judge50006_;
}
inline ::OPMessage::Judge50006* Km3Judge::release_judge50006() {
  clear_has_judge50006();
  ::OPMessage::Judge50006* temp = judge50006_;
  judge50006_ = NULL;
  return temp;
}
inline void Km3Judge::set_allocated_judge50006(::OPMessage::Judge50006* judge50006) {
  delete judge50006_;
  judge50006_ = judge50006;
  if (judge50006) {
    set_has_judge50006();
  } else {
    clear_has_judge50006();
  }
  // @@protoc_insertion_point(field_set_allocated:OPMessage.Km3Judge.judge50006)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace OPMessage

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MessageKm3Config_2eproto__INCLUDED
