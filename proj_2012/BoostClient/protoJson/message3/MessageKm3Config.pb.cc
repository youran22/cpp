// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageKm3Config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MessageKm3Config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace OPMessage {

namespace {

const ::google::protobuf::Descriptor* judgeItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  judgeItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* voiceItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  voiceItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Judge0_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Judge0_reflection_ = NULL;
const ::google::protobuf::Descriptor* Judge40100_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Judge40100_reflection_ = NULL;
const ::google::protobuf::Descriptor* Judge41600_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Judge41600_reflection_ = NULL;
const ::google::protobuf::Descriptor* Judge40200_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Judge40200_reflection_ = NULL;
const ::google::protobuf::Descriptor* Judge40400_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Judge40400_reflection_ = NULL;
const ::google::protobuf::Descriptor* Judge41000_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Judge41000_reflection_ = NULL;
const ::google::protobuf::Descriptor* Judge41001_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Judge41001_reflection_ = NULL;
const ::google::protobuf::Descriptor* Judge41200_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Judge41200_reflection_ = NULL;
const ::google::protobuf::Descriptor* Judge41100_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Judge41100_reflection_ = NULL;
const ::google::protobuf::Descriptor* Judge40700_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Judge40700_reflection_ = NULL;
const ::google::protobuf::Descriptor* Judge41500_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Judge41500_reflection_ = NULL;
const ::google::protobuf::Descriptor* Judge40800_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Judge40800_reflection_ = NULL;
const ::google::protobuf::Descriptor* Judge40900_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Judge40900_reflection_ = NULL;
const ::google::protobuf::Descriptor* Judge41400_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Judge41400_reflection_ = NULL;
const ::google::protobuf::Descriptor* Judge40500_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Judge40500_reflection_ = NULL;
const ::google::protobuf::Descriptor* Judge41300_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Judge41300_reflection_ = NULL;
const ::google::protobuf::Descriptor* Judge40300_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Judge40300_reflection_ = NULL;
const ::google::protobuf::Descriptor* Judge40600_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Judge40600_reflection_ = NULL;
const ::google::protobuf::Descriptor* Judge40601_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Judge40601_reflection_ = NULL;
const ::google::protobuf::Descriptor* Judge50001_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Judge50001_reflection_ = NULL;
const ::google::protobuf::Descriptor* Judge50002_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Judge50002_reflection_ = NULL;
const ::google::protobuf::Descriptor* Judge50003_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Judge50003_reflection_ = NULL;
const ::google::protobuf::Descriptor* Judge50004_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Judge50004_reflection_ = NULL;
const ::google::protobuf::Descriptor* Judge50005_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Judge50005_reflection_ = NULL;
const ::google::protobuf::Descriptor* Judge50006_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Judge50006_reflection_ = NULL;
const ::google::protobuf::Descriptor* Km3Judge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Km3Judge_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MessageKm3Config_2eproto() {
  protobuf_AddDesc_MessageKm3Config_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MessageKm3Config.proto");
  GOOGLE_CHECK(file != NULL);
  judgeItem_descriptor_ = file->message_type(0);
  static const int judgeItem_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(judgeItem, configfilename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(judgeItem, configitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(judgeItem, configname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(judgeItem, detailstr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(judgeItem, defvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(judgeItem, defvalues_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(judgeItem, strarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(judgeItem, force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(judgeItem, gear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(judgeItem, type_),
  };
  judgeItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      judgeItem_descriptor_,
      judgeItem::default_instance_,
      judgeItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(judgeItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(judgeItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(judgeItem));
  voiceItem_descriptor_ = file->message_type(1);
  static const int voiceItem_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(voiceItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(voiceItem, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(voiceItem, mistake_enable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(voiceItem, mistake_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(voiceItem, mistake_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(voiceItem, mistake_reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(voiceItem, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(voiceItem, tips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(voiceItem, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(voiceItem, voice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(voiceItem, voice_enable_),
  };
  voiceItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      voiceItem_descriptor_,
      voiceItem::default_instance_,
      voiceItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(voiceItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(voiceItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(voiceItem));
  Judge0_descriptor_ = file->message_type(2);
  static const int Judge0_offsets_[93] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, itemcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, itemname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, max_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, max_stop_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, max_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, max_off_course_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, max_near_lamp_off_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, max_far_lamp_on_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, auto_gear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, max_first_gear_distance_once_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, max_second_gear_distance_once_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, max_first_gear_distance_global_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, max_second_gear_distance_global_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, min_third_gear_distance_global_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, global_reach_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, min_global_reach_speed_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, max_rpm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, max_neutral_distance_once_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, gear_speed_match_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, gear_speed_match_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, gear_speed_match_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, gear_speed_match_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, gear_speed_match_4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, gear_speed_match_5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, max_turn_lamp_on_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, max_neutral_time_once_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, gear_speed_match_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, foot_brake_beep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, deduct_voice_speak_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, car_shake_rpm_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, car_shake_time_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, repeat_voice_time_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, min_fourth_gear_distance_global_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_app_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_not_wear_seat_belts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_not_close_door_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_falmeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_overspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_first_gear_distance_overrange_once_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_second_gear_distance_overrange_once_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_first_gear_distance_overrange_global_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_second_gear_distance_overrange_global_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_third_gear_distance_not_enough_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_fourth_gear_distance_not_enough_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_neutral_driving_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_high_speed_not_enough_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_rpm_overrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_gear_speed_not_match_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_exam_timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_turn_lamp_long_time_on_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_road_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_exam_over_pass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_exam_over_not_pass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_delay_speak_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_delay_speak_stop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_delay_speak_none_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_whole_exam_timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_start_driving_with_error_gear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_start_driving_not_release_handbrake_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_jump_gear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_car_shake_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_firingup_timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_notify_push_fingerprint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_fingerprint_pass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_global_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_40100_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_40200_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_40300_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_40400_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_40500_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_40600_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_40601_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_40700_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_40800_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_40900_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_41000_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_41001_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_41100_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_41200_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_41300_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_41400_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_41500_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_41600_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_50001_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_50002_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_50003_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_50004_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_50005_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_global_50006_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_41600_not_flash_near_far_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_41600_not_open_near_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_41600_open_far_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, vi_41600_not_open_lamp_),
  };
  Judge0_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Judge0_descriptor_,
      Judge0::default_instance_,
      Judge0_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge0, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Judge0));
  Judge40100_descriptor_ = file->message_type(3);
  static const int Judge40100_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40100, itemcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40100, itemname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40100, max_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40100, need_speak_touch_surround_sensor_voice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40100, check_surround_sensor_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40100, need_close_door_before_round_car_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40100, finish_exam_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40100, vi_40100_start_exam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40100, vi_40100_end_exam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40100, vi_40100_stop_car_before_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40100, vi_40100_operation_flag_voice_before_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40100, vi_40100_operation_flag_voice_over_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40100, vi_40100_operation_flag_notify_flameout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40100, vi_40100_operation_flag_notify_handbrake_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40100, vi_40100_round_car_lf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40100, vi_40100_round_car_rf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40100, vi_40100_round_car_lb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40100, vi_40100_round_car_rb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40100, vi_40100_operation_flag_notify_close_door_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40100, vi_40100_round_car_not_close_door_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40100, vi_40100_round_car_order_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40100, vi_40100_runnin_befor_finish_test_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40100, vi_40100_not_close_door_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40100, vi_40100_not_round_car_),
  };
  Judge40100_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Judge40100_descriptor_,
      Judge40100::default_instance_,
      Judge40100_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40100, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40100, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Judge40100));
  Judge41600_descriptor_ = file->message_type(4);
  static const int Judge41600_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41600, itemcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41600, itemname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41600, min_near_lamp_flash_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41600, min_far_lamp_flash_count_),
  };
  Judge41600_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Judge41600_descriptor_,
      Judge41600::default_instance_,
      Judge41600_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41600, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41600, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Judge41600));
  Judge40200_descriptor_ = file->message_type(5);
  static const int Judge40200_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40200, itemcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40200, itemname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40200, max_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40200, max_trigger_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40200, min_horn_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40200, min_turn_signal_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40200, vi_40200_start_exam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40200, vi_40200_end_exam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40200, vi_40200_turn_lamp_use_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40200, vi_40200_turn_lamp_not_use_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40200, vi_40200_horn_not_use_),
  };
  Judge40200_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Judge40200_descriptor_,
      Judge40200::default_instance_,
      Judge40200_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40200, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40200, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Judge40200));
  Judge40400_descriptor_ = file->message_type(6);
  static const int Judge40400_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40400, itemcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40400, itemname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40400, max_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40400, max_trigger_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40400, max_gear_finish_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40400, gear_actions_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40400, gear_actions_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40400, gear_actions_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40400, gear_actions_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40400, gear_actions_4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40400, notify_after_clutch_down_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40400, check_after_clutch_up_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40400, vi_40400_start_exam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40400, vi_40400_end_exam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40400, vi_40400_upto_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40400, vi_40400_upto_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40400, vi_40400_upto_4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40400, vi_40400_upto_5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40400, vi_40400_downto_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40400, vi_40400_downto_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40400, vi_40400_downto_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40400, vi_40400_downto_4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40400, vi_40400_gear_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40400, vi_40400_not_finish_operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40400, vi_40400_enter_gear_error_),
  };
  Judge40400_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Judge40400_descriptor_,
      Judge40400::default_instance_,
      Judge40400_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40400, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40400, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Judge40400));
  Judge41000_descriptor_ = file->message_type(7);
  static const int Judge41000_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41000, itemcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41000, itemname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41000, max_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41000, max_trigger_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41000, max_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41000, min_horn_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41000, min_turn_signal_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41000, judge_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41000, need_near_far_lamp_flash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41000, vi_41000_start_exam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41000, vi_41000_end_exam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41000, vi_41000_horn_not_use_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41000, vi_41000_not_slowdown_),
  };
  Judge41000_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Judge41000_descriptor_,
      Judge41000::default_instance_,
      Judge41000_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41000, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41000, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Judge41000));
  Judge41001_descriptor_ = file->message_type(8);
  static const int Judge41001_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41001, itemcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41001, itemname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41001, max_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41001, max_trigger_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41001, need_near_far_lamp_flash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41001, vi_41001_start_exam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41001, vi_41001_end_exam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41001, vi_41001_not_finish_operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41001, vi_41001_start_drive_),
  };
  Judge41001_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Judge41001_descriptor_,
      Judge41001::default_instance_,
      Judge41001_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41001, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41001, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Judge41001));
  Judge41200_descriptor_ = file->message_type(9);
  static const int Judge41200_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41200, itemcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41200, itemname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41200, max_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41200, max_trigger_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41200, max_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41200, min_horn_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41200, judge_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41200, need_near_far_lamp_flash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41200, vi_41200_start_exam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41200, vi_41200_end_exam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41200, vi_41200_horn_not_use_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41200, vi_41200_not_slowdown_),
  };
  Judge41200_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Judge41200_descriptor_,
      Judge41200::default_instance_,
      Judge41200_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41200, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41200, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Judge41200));
  Judge41100_descriptor_ = file->message_type(10);
  static const int Judge41100_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41100, itemcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41100, itemname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41100, max_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41100, max_trigger_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41100, max_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41100, min_horn_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41100, judge_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41100, need_near_far_lamp_flash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41100, vi_41100_start_exam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41100, vi_41100_end_exam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41100, vi_41100_horn_not_use_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41100, vi_41100_not_slowdown_),
  };
  Judge41100_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Judge41100_descriptor_,
      Judge41100::default_instance_,
      Judge41100_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41100, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41100, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Judge41100));
  Judge40700_descriptor_ = file->message_type(11);
  static const int Judge40700_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40700, itemcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40700, itemname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40700, max_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40700, max_trigger_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40700, max_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40700, min_horn_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40700, min_turn_signal_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40700, judge_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40700, need_near_far_lamp_flash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40700, vi_40700_start_exam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40700, vi_40700_end_exam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40700, vi_40700_horn_not_use_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40700, vi_40700_not_slowdown_),
  };
  Judge40700_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Judge40700_descriptor_,
      Judge40700::default_instance_,
      Judge40700_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40700, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40700, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Judge40700));
  Judge41500_descriptor_ = file->message_type(12);
  static const int Judge41500_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41500, itemcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41500, itemname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41500, max_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41500, max_trigger_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41500, min_turn_signal_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41500, max_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41500, judge_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41500, vi_41500_start_exam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41500, vi_41500_end_exam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41500, vi_41500_not_slowdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41500, vi_41500_turn_lamp_use_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41500, vi_41500_turn_lamp_not_use_),
  };
  Judge41500_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Judge41500_descriptor_,
      Judge41500::default_instance_,
      Judge41500_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41500, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41500, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Judge41500));
  Judge40800_descriptor_ = file->message_type(13);
  static const int Judge40800_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40800, itemcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40800, itemname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40800, max_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40800, max_trigger_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40800, max_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40800, min_horn_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40800, min_turn_signal_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40800, judge_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40800, need_near_far_lamp_flash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40800, vi_40800_start_exam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40800, vi_40800_end_exam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40800, vi_40800_horn_not_use_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40800, vi_40800_turn_lamp_use_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40800, vi_40800_turn_lamp_not_use_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40800, vi_40800_not_slowdown_),
  };
  Judge40800_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Judge40800_descriptor_,
      Judge40800::default_instance_,
      Judge40800_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40800, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40800, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Judge40800));
  Judge40900_descriptor_ = file->message_type(14);
  static const int Judge40900_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40900, itemcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40900, itemname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40900, max_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40900, max_trigger_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40900, max_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40900, min_horn_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40900, min_turn_signal_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40900, judge_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40900, need_near_far_lamp_flash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40900, vi_40900_start_exam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40900, vi_40900_end_exam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40900, vi_40900_horn_not_use_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40900, vi_40900_turn_lamp_use_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40900, vi_40900_turn_lamp_not_use_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40900, vi_40900_not_slowdown_),
  };
  Judge40900_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Judge40900_descriptor_,
      Judge40900::default_instance_,
      Judge40900_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40900, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40900, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Judge40900));
  Judge41400_descriptor_ = file->message_type(15);
  static const int Judge41400_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41400, itemcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41400, itemname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41400, max_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41400, max_trigger_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41400, min_turn_signal_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41400, lane_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41400, check_change_lane_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41400, start_change_lane_time_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41400, start_change_lane_distance_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41400, finish_change_lane_time_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41400, finish_change_lane_distance_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41400, need_near_far_lamp_flash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41400, need_return_lane_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41400, return_lane_time_dealy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41400, vi_41400_start_exam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41400, vi_41400_end_exam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41400, vi_41400_driving_in_one_lane_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41400, vi_41400_notify_change_lane_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41400, vi_41400_notify_return_lane_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41400, vi_41400_not_finish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41400, vi_41400_change_lane_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41400, vi_41400_return_lane_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41400, vi_41400_turn_lamp_use_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41400, vi_41400_not_keep_enough_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41400, vi_41400_turn_lamp_not_use_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41400, vi_41400_not_reach_min_speed_),
  };
  Judge41400_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Judge41400_descriptor_,
      Judge41400::default_instance_,
      Judge41400_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41400, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41400, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Judge41400));
  Judge40500_descriptor_ = file->message_type(16);
  static const int Judge40500_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40500, itemcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40500, itemname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40500, max_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40500, max_trigger_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40500, min_turn_signal_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40500, lane_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40500, check_change_lane_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40500, start_change_lane_time_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40500, start_change_lane_distance_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40500, finish_change_lane_time_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40500, finish_change_lane_distance_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40500, vi_40500_start_exam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40500, vi_40500_end_exam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40500, vi_40500_driving_in_one_lane_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40500, vi_40500_notify_change_lane_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40500, vi_40500_not_finish_change_lane_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40500, vi_40500_turn_lamp_use_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40500, vi_40500_turn_lamp_not_use_),
  };
  Judge40500_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Judge40500_descriptor_,
      Judge40500::default_instance_,
      Judge40500_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40500, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40500, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Judge40500));
  Judge41300_descriptor_ = file->message_type(17);
  static const int Judge41300_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41300, itemcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41300, itemname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41300, max_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41300, max_trigger_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41300, max_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41300, judge_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41300, vi_41300_start_exam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41300, vi_41300_end_exam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41300, vi_41300_not_slowdown_),
  };
  Judge41300_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Judge41300_descriptor_,
      Judge41300::default_instance_,
      Judge41300_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41300, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge41300, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Judge41300));
  Judge40300_descriptor_ = file->message_type(18);
  static const int Judge40300_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40300, itemcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40300, itemname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40300, max_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40300, min_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40300, max_trigger_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40300, max_error_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40300, enable_steering_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40300, max_error_steering_angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40300, vi_40300_start_exam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40300, vi_40300_end_exam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40300, vi_40300_not_go_straight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40300, vi_40300_not_reach_speed_),
  };
  Judge40300_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Judge40300_descriptor_,
      Judge40300::default_instance_,
      Judge40300_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40300, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40300, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Judge40300));
  Judge40600_descriptor_ = file->message_type(19);
  static const int Judge40600_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40600, itemcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40600, itemname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40600, max_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40600, max_trigger_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40600, min_turn_signal_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40600, finish_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40600, get_off_close_door_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40600, sideline_check_sensor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40600, vi_40600_start_exam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40600, vi_40600_end_exam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40600, vi_40600_not_finish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40600, vi_40600_not_handbrake_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40600, vi_40600_not_close_door_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40600, vi_40600_not_flameout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40600, vi_40600_turn_lamp_use_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40600, vi_40600_turn_lamp_not_use_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40600, vi_40600_handbrake_footbrake_order_error_),
  };
  Judge40600_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Judge40600_descriptor_,
      Judge40600::default_instance_,
      Judge40600_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40600, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40600, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Judge40600));
  Judge40601_descriptor_ = file->message_type(20);
  static const int Judge40601_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40601, itemcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40601, itemname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40601, max_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40601, max_trigger_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40601, min_turn_signal_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40601, finish_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40601, min_horn_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40601, sideline_check_sensor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40601, vi_40600_sideline_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40601, vi_40601_start_exam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40601, vi_40601_end_exam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40601, vi_40601_start_driving_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40601, vi_40601_finish_driving_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40601, vi_40601_not_finish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40601, vi_40601_turn_lamp_use_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40601, vi_40601_turn_lamp_not_use_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40601, vi_40601_not_handbrake_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40601, vi_40601_handbrake_footbrake_order_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40601, vi_40601_horn_not_use_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40601, vi_40601_sideline_error_),
  };
  Judge40601_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Judge40601_descriptor_,
      Judge40601::default_instance_,
      Judge40601_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40601, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge40601, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Judge40601));
  Judge50001_descriptor_ = file->message_type(21);
  static const int Judge50001_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50001, itemcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50001, itemname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50001, max_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50001, max_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50001, judge_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50001, min_left_turn_signal_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50001, min_right_turn_signal_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50001, need_near_far_lamp_flash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50001, check_far_lamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50001, check_near_lamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50001, vi_50001_start_exam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50001, vi_50001_end_exam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50001, vi_50001_not_slowdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50001, vi_50001_turn_lamp_use_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50001, vi_50001_turn_lamp_not_use_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50001, vi_50001_horn_not_use_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50001, vi_50001_not_open_near_lamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50001, vi_50001_not_open_far_lamp_),
  };
  Judge50001_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Judge50001_descriptor_,
      Judge50001::default_instance_,
      Judge50001_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50001, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50001, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Judge50001));
  Judge50002_descriptor_ = file->message_type(22);
  static const int Judge50002_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50002, itemcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50002, itemname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50002, max_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50002, max_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50002, judge_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50002, min_left_turn_signal_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50002, min_right_turn_signal_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50002, need_near_far_lamp_flash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50002, check_far_lamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50002, check_near_lamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50002, vi_50002_start_exam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50002, vi_50002_end_exam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50002, vi_50002_not_slowdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50002, vi_50002_turn_lamp_use_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50002, vi_50002_turn_lamp_not_use_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50002, vi_50002_horn_not_use_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50002, vi_50002_not_open_near_lamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50002, vi_50002_not_open_far_lamp_),
  };
  Judge50002_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Judge50002_descriptor_,
      Judge50002::default_instance_,
      Judge50002_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50002, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50002, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Judge50002));
  Judge50003_descriptor_ = file->message_type(23);
  static const int Judge50003_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50003, itemcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50003, itemname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50003, max_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50003, max_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50003, judge_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50003, min_left_turn_signal_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50003, min_right_turn_signal_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50003, need_near_far_lamp_flash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50003, check_far_lamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50003, check_near_lamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50003, vi_50003_start_exam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50003, vi_50003_end_exam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50003, vi_50003_not_slowdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50003, vi_50003_turn_lamp_use_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50003, vi_50003_turn_lamp_not_use_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50003, vi_50003_horn_not_use_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50003, vi_50003_not_open_near_lamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50003, vi_50003_not_open_far_lamp_),
  };
  Judge50003_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Judge50003_descriptor_,
      Judge50003::default_instance_,
      Judge50003_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50003, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50003, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Judge50003));
  Judge50004_descriptor_ = file->message_type(24);
  static const int Judge50004_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50004, itemcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50004, itemname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50004, max_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50004, max_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50004, judge_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50004, min_left_turn_signal_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50004, min_right_turn_signal_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50004, need_near_far_lamp_flash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50004, check_far_lamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50004, check_near_lamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50004, vi_50004_start_exam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50004, vi_50004_end_exam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50004, vi_50004_not_slowdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50004, vi_50004_turn_lamp_use_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50004, vi_50004_turn_lamp_not_use_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50004, vi_50004_horn_not_use_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50004, vi_50004_not_open_near_lamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50004, vi_50004_not_open_far_lamp_),
  };
  Judge50004_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Judge50004_descriptor_,
      Judge50004::default_instance_,
      Judge50004_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50004, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50004, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Judge50004));
  Judge50005_descriptor_ = file->message_type(25);
  static const int Judge50005_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50005, itemcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50005, itemname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50005, max_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50005, max_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50005, judge_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50005, min_left_turn_signal_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50005, min_right_turn_signal_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50005, need_near_far_lamp_flash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50005, check_far_lamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50005, check_near_lamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50005, vi_50005_start_exam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50005, vi_50005_end_exam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50005, vi_50005_not_slowdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50005, vi_50005_turn_lamp_use_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50005, vi_50005_turn_lamp_not_use_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50005, vi_50005_horn_not_use_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50005, vi_50005_not_open_near_lamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50005, vi_50005_not_open_far_lamp_),
  };
  Judge50005_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Judge50005_descriptor_,
      Judge50005::default_instance_,
      Judge50005_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50005, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50005, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Judge50005));
  Judge50006_descriptor_ = file->message_type(26);
  static const int Judge50006_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50006, itemcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50006, itemname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50006, max_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50006, max_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50006, judge_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50006, min_left_turn_signal_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50006, min_right_turn_signal_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50006, need_near_far_lamp_flash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50006, check_far_lamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50006, check_near_lamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50006, vi_50006_start_exam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50006, vi_50006_end_exam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50006, vi_50006_not_slowdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50006, vi_50006_turn_lamp_use_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50006, vi_50006_turn_lamp_not_use_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50006, vi_50006_horn_not_use_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50006, vi_50006_not_open_near_lamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50006, vi_50006_not_open_far_lamp_),
  };
  Judge50006_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Judge50006_descriptor_,
      Judge50006::default_instance_,
      Judge50006_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50006, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Judge50006, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Judge50006));
  Km3Judge_descriptor_ = file->message_type(27);
  static const int Km3Judge_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Km3Judge, judge0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Km3Judge, judge40100_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Km3Judge, judge41600_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Km3Judge, judge40200_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Km3Judge, judge40400_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Km3Judge, judge41000_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Km3Judge, judge41001_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Km3Judge, judge41200_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Km3Judge, judge41100_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Km3Judge, judge40700_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Km3Judge, judge41500_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Km3Judge, judge40800_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Km3Judge, judge40900_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Km3Judge, judge41400_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Km3Judge, judge40500_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Km3Judge, judge41300_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Km3Judge, judge40300_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Km3Judge, judge40600_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Km3Judge, judge40601_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Km3Judge, judge50001_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Km3Judge, judge50002_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Km3Judge, judge50003_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Km3Judge, judge50004_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Km3Judge, judge50005_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Km3Judge, judge50006_),
  };
  Km3Judge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Km3Judge_descriptor_,
      Km3Judge::default_instance_,
      Km3Judge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Km3Judge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Km3Judge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Km3Judge));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MessageKm3Config_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    judgeItem_descriptor_, &judgeItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    voiceItem_descriptor_, &voiceItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Judge0_descriptor_, &Judge0::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Judge40100_descriptor_, &Judge40100::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Judge41600_descriptor_, &Judge41600::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Judge40200_descriptor_, &Judge40200::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Judge40400_descriptor_, &Judge40400::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Judge41000_descriptor_, &Judge41000::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Judge41001_descriptor_, &Judge41001::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Judge41200_descriptor_, &Judge41200::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Judge41100_descriptor_, &Judge41100::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Judge40700_descriptor_, &Judge40700::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Judge41500_descriptor_, &Judge41500::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Judge40800_descriptor_, &Judge40800::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Judge40900_descriptor_, &Judge40900::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Judge41400_descriptor_, &Judge41400::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Judge40500_descriptor_, &Judge40500::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Judge41300_descriptor_, &Judge41300::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Judge40300_descriptor_, &Judge40300::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Judge40600_descriptor_, &Judge40600::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Judge40601_descriptor_, &Judge40601::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Judge50001_descriptor_, &Judge50001::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Judge50002_descriptor_, &Judge50002::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Judge50003_descriptor_, &Judge50003::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Judge50004_descriptor_, &Judge50004::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Judge50005_descriptor_, &Judge50005::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Judge50006_descriptor_, &Judge50006::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Km3Judge_descriptor_, &Km3Judge::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MessageKm3Config_2eproto() {
  delete judgeItem::default_instance_;
  delete judgeItem_reflection_;
  delete voiceItem::default_instance_;
  delete voiceItem_reflection_;
  delete Judge0::default_instance_;
  delete Judge0_reflection_;
  delete Judge40100::default_instance_;
  delete Judge40100_reflection_;
  delete Judge41600::default_instance_;
  delete Judge41600_reflection_;
  delete Judge40200::default_instance_;
  delete Judge40200_reflection_;
  delete Judge40400::default_instance_;
  delete Judge40400_reflection_;
  delete Judge41000::default_instance_;
  delete Judge41000_reflection_;
  delete Judge41001::default_instance_;
  delete Judge41001_reflection_;
  delete Judge41200::default_instance_;
  delete Judge41200_reflection_;
  delete Judge41100::default_instance_;
  delete Judge41100_reflection_;
  delete Judge40700::default_instance_;
  delete Judge40700_reflection_;
  delete Judge41500::default_instance_;
  delete Judge41500_reflection_;
  delete Judge40800::default_instance_;
  delete Judge40800_reflection_;
  delete Judge40900::default_instance_;
  delete Judge40900_reflection_;
  delete Judge41400::default_instance_;
  delete Judge41400_reflection_;
  delete Judge40500::default_instance_;
  delete Judge40500_reflection_;
  delete Judge41300::default_instance_;
  delete Judge41300_reflection_;
  delete Judge40300::default_instance_;
  delete Judge40300_reflection_;
  delete Judge40600::default_instance_;
  delete Judge40600_reflection_;
  delete Judge40601::default_instance_;
  delete Judge40601_reflection_;
  delete Judge50001::default_instance_;
  delete Judge50001_reflection_;
  delete Judge50002::default_instance_;
  delete Judge50002_reflection_;
  delete Judge50003::default_instance_;
  delete Judge50003_reflection_;
  delete Judge50004::default_instance_;
  delete Judge50004_reflection_;
  delete Judge50005::default_instance_;
  delete Judge50005_reflection_;
  delete Judge50006::default_instance_;
  delete Judge50006_reflection_;
  delete Km3Judge::default_instance_;
  delete Km3Judge_reflection_;
}

void protobuf_AddDesc_MessageKm3Config_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026MessageKm3Config.proto\022\tOPMessage\"\276\001\n\t"
    "judgeItem\022\026\n\016configFileName\030\001 \001(\t\022\022\n\ncon"
    "figItem\030\002 \001(\t\022\022\n\nconfigName\030\003 \001(\t\022\021\n\tdet"
    "ailStr\030\004 \001(\t\022\020\n\010defValue\030\005 \001(\001\022\021\n\tdefVal"
    "ues\030\006 \003(\005\022\016\n\006strArr\030\007 \003(\t\022\r\n\005force\030\010 \001(\010"
    "\022\014\n\004gear\030\t \001(\005\022\014\n\004type\030\n \001(\005\"\324\001\n\tvoiceIt"
    "em\022\n\n\002id\030\001 \001(\t\022\014\n\004item\030\002 \001(\005\022\026\n\016mistake_"
    "enable\030\003 \001(\005\022\022\n\nmistake_id\030\004 \001(\005\022\025\n\rmist"
    "ake_point\030\005 \001(\005\022\026\n\016mistake_reason\030\006 \001(\t\022"
    "\020\n\010position\030\007 \001(\005\022\014\n\004tips\030\010 \001(\t\022\r\n\005title"
    "\030\t \001(\005\022\r\n\005voice\030\n \001(\t\022\024\n\014voice_enable\030\013 "
    "\001(\005\"\371&\n\006Judge0\022\020\n\010itemCode\030\001 \001(\005\022\020\n\010item"
    "Name\030\002 \001(\t\022&\n\010max_time\030\003 \001(\0132\024.OPMessage"
    ".judgeItem\022,\n\016max_stop_speed\030\004 \001(\0132\024.OPM"
    "essage.judgeItem\022\'\n\tmax_speed\030\005 \001(\0132\024.OP"
    "Message.judgeItem\0225\n\027max_off_course_dist"
    "ance\030\006 \001(\0132\024.OPMessage.judgeItem\0224\n\026max_"
    "near_lamp_off_time\030\007 \001(\0132\024.OPMessage.jud"
    "geItem\0222\n\024max_far_lamp_on_time\030\010 \001(\0132\024.O"
    "PMessage.judgeItem\022\'\n\tauto_gear\030\t \001(\0132\024."
    "OPMessage.judgeItem\022:\n\034max_first_gear_di"
    "stance_once\030\n \001(\0132\024.OPMessage.judgeItem\022"
    ";\n\035max_second_gear_distance_once\030\013 \001(\0132\024"
    ".OPMessage.judgeItem\022<\n\036max_first_gear_d"
    "istance_global\030\014 \001(\0132\024.OPMessage.judgeIt"
    "em\022=\n\037max_second_gear_distance_global\030\r "
    "\001(\0132\024.OPMessage.judgeItem\022<\n\036min_third_g"
    "ear_distance_global\030\016 \001(\0132\024.OPMessage.ju"
    "dgeItem\0220\n\022global_reach_speed\030\017 \001(\0132\024.OP"
    "Message.judgeItem\022=\n\037min_global_reach_sp"
    "eed_distance\030\020 \001(\0132\024.OPMessage.judgeItem"
    "\022%\n\007max_rpm\030\021 \001(\0132\024.OPMessage.judgeItem\022"
    "7\n\031max_neutral_distance_once\030\022 \001(\0132\024.OPM"
    "essage.judgeItem\0220\n\022gear_speed_match_0\030\023"
    " \001(\0132\024.OPMessage.judgeItem\0220\n\022gear_speed"
    "_match_1\030\024 \001(\0132\024.OPMessage.judgeItem\0220\n\022"
    "gear_speed_match_2\030\025 \001(\0132\024.OPMessage.jud"
    "geItem\0220\n\022gear_speed_match_3\030\026 \001(\0132\024.OPM"
    "essage.judgeItem\0220\n\022gear_speed_match_4\030\027"
    " \001(\0132\024.OPMessage.judgeItem\0220\n\022gear_speed"
    "_match_5\030\030 \001(\0132\024.OPMessage.judgeItem\0223\n\025"
    "max_turn_lamp_on_time\030\031 \001(\0132\024.OPMessage."
    "judgeItem\0223\n\025max_neutral_time_once\030\032 \001(\013"
    "2\024.OPMessage.judgeItem\0223\n\025gear_speed_mat"
    "ch_time\030\033 \001(\0132\024.OPMessage.judgeItem\022-\n\017f"
    "oot_brake_beep\030\034 \001(\0132\024.OPMessage.judgeIt"
    "em\0225\n\027deduct_voice_speak_mode\030\035 \001(\0132\024.OP"
    "Message.judgeItem\0225\n\027car_shake_rpm_thres"
    "hold\030\036 \001(\0132\024.OPMessage.judgeItem\0226\n\030car_"
    "shake_time_threshold\030\037 \001(\0132\024.OPMessage.j"
    "udgeItem\0225\n\027repeat_voice_time_delay\030  \001("
    "\0132\024.OPMessage.judgeItem\022=\n\037min_fourth_ge"
    "ar_distance_global\030! \001(\0132\024.OPMessage.jud"
    "geItem\0221\n\023vi_global_app_start\030\" \001(\0132\024.OP"
    "Message.voiceItem\022;\n\035vi_global_not_wear_"
    "seat_belts\030# \001(\0132\024.OPMessage.voiceItem\0226"
    "\n\030vi_global_not_close_door\030$ \001(\0132\024.OPMes"
    "sage.voiceItem\0220\n\022vi_global_falmeout\030% \001"
    "(\0132\024.OPMessage.voiceItem\0221\n\023vi_global_ov"
    "erspeed\030& \001(\0132\024.OPMessage.voiceItem\022J\n,v"
    "i_global_first_gear_distance_overrange_o"
    "nce\030\' \001(\0132\024.OPMessage.voiceItem\022K\n-vi_gl"
    "obal_second_gear_distance_overrange_once"
    "\030( \001(\0132\024.OPMessage.voiceItem\022L\n.vi_globa"
    "l_first_gear_distance_overrange_global\030)"
    " \001(\0132\024.OPMessage.voiceItem\022M\n/vi_global_"
    "second_gear_distance_overrange_global\030* "
    "\001(\0132\024.OPMessage.voiceItem\022F\n(vi_global_t"
    "hird_gear_distance_not_enough\030+ \001(\0132\024.OP"
    "Message.voiceItem\022G\n)vi_global_fourth_ge"
    "ar_distance_not_enough\030, \001(\0132\024.OPMessage"
    ".voiceItem\0227\n\031vi_global_neutral_driving\030"
    "- \001(\0132\024.OPMessage.voiceItem\022=\n\037vi_global"
    "_high_speed_not_enough\030. \001(\0132\024.OPMessage"
    ".voiceItem\0225\n\027vi_global_rpm_overrange\030/ "
    "\001(\0132\024.OPMessage.voiceItem\022<\n\036vi_global_g"
    "ear_speed_not_match\0300 \001(\0132\024.OPMessage.vo"
    "iceItem\0224\n\026vi_global_exam_timeout\0301 \001(\0132"
    "\024.OPMessage.voiceItem\022>\n vi_global_turn_"
    "lamp_long_time_on\0302 \001(\0132\024.OPMessage.voic"
    "eItem\0222\n\024vi_global_road_error\0303 \001(\0132\024.OP"
    "Message.voiceItem\0226\n\030vi_global_exam_over"
    "_pass\0304 \001(\0132\024.OPMessage.voiceItem\022:\n\034vi_"
    "global_exam_over_not_pass\0305 \001(\0132\024.OPMess"
    "age.voiceItem\0229\n\033vi_global_delay_speak_s"
    "tart\0306 \001(\0132\024.OPMessage.voiceItem\0228\n\032vi_g"
    "lobal_delay_speak_stop\0307 \001(\0132\024.OPMessage"
    ".voiceItem\0228\n\032vi_global_delay_speak_none"
    "\0308 \001(\0132\024.OPMessage.voiceItem\022:\n\034vi_globa"
    "l_whole_exam_timeout\0309 \001(\0132\024.OPMessage.v"
    "oiceItem\022E\n\'vi_global_start_driving_with"
    "_error_gear\030: \001(\0132\024.OPMessage.voiceItem\022"
    "K\n-vi_global_start_driving_not_release_h"
    "andbrake\030; \001(\0132\024.OPMessage.voiceItem\0221\n\023"
    "vi_global_jump_gear\030< \001(\0132\024.OPMessage.vo"
    "iceItem\0221\n\023vi_global_car_shake\030= \001(\0132\024.O"
    "PMessage.voiceItem\0228\n\032vi_global_firingup"
    "_timeout\030> \001(\0132\024.OPMessage.voiceItem\022\?\n!"
    "vi_global_notify_push_fingerprint\030\? \001(\0132"
    "\024.OPMessage.voiceItem\0228\n\032vi_global_finge"
    "rprint_pass\030@ \001(\0132\024.OPMessage.voiceItem\022"
    ".\n\020vi_global_global\030A \001(\0132\024.OPMessage.vo"
    "iceItem\022-\n\017vi_global_40100\030B \001(\0132\024.OPMes"
    "sage.voiceItem\022-\n\017vi_global_40200\030C \001(\0132"
    "\024.OPMessage.voiceItem\022-\n\017vi_global_40300"
    "\030D \001(\0132\024.OPMessage.voiceItem\022-\n\017vi_globa"
    "l_40400\030E \001(\0132\024.OPMessage.voiceItem\022-\n\017v"
    "i_global_40500\030F \001(\0132\024.OPMessage.voiceIt"
    "em\022-\n\017vi_global_40600\030G \001(\0132\024.OPMessage."
    "voiceItem\022-\n\017vi_global_40601\030H \001(\0132\024.OPM"
    "essage.voiceItem\022-\n\017vi_global_40700\030I \001("
    "\0132\024.OPMessage.voiceItem\022-\n\017vi_global_408"
    "00\030J \001(\0132\024.OPMessage.voiceItem\022-\n\017vi_glo"
    "bal_40900\030K \001(\0132\024.OPMessage.voiceItem\022-\n"
    "\017vi_global_41000\030L \001(\0132\024.OPMessage.voice"
    "Item\022-\n\017vi_global_41001\030M \001(\0132\024.OPMessag"
    "e.voiceItem\022-\n\017vi_global_41100\030N \001(\0132\024.O"
    "PMessage.voiceItem\022-\n\017vi_global_41200\030O "
    "\001(\0132\024.OPMessage.voiceItem\022-\n\017vi_global_4"
    "1300\030P \001(\0132\024.OPMessage.voiceItem\022-\n\017vi_g"
    "lobal_41400\030Q \001(\0132\024.OPMessage.voiceItem\022"
    "-\n\017vi_global_41500\030R \001(\0132\024.OPMessage.voi"
    "ceItem\022-\n\017vi_global_41600\030S \001(\0132\024.OPMess"
    "age.voiceItem\022-\n\017vi_global_50001\030T \001(\0132\024"
    ".OPMessage.voiceItem\022-\n\017vi_global_50002\030"
    "U \001(\0132\024.OPMessage.voiceItem\022-\n\017vi_global"
    "_50003\030V \001(\0132\024.OPMessage.voiceItem\022-\n\017vi"
    "_global_50004\030W \001(\0132\024.OPMessage.voiceIte"
    "m\022-\n\017vi_global_50005\030X \001(\0132\024.OPMessage.v"
    "oiceItem\022-\n\017vi_global_50006\030Y \001(\0132\024.OPMe"
    "ssage.voiceItem\0229\n\033vi_41600_not_flash_ne"
    "ar_far\030Z \001(\0132\024.OPMessage.voiceItem\0224\n\026vi"
    "_41600_not_open_near\030[ \001(\0132\024.OPMessage.v"
    "oiceItem\022/\n\021vi_41600_open_far\030\\ \001(\0132\024.OP"
    "Message.voiceItem\0224\n\026vi_41600_not_open_l"
    "amp\030] \001(\0132\024.OPMessage.voiceItem\"\304\n\n\nJudg"
    "e40100\022\020\n\010itemCode\030\001 \001(\005\022\020\n\010itemName\030\002 \001"
    "(\t\022&\n\010max_time\030\003 \001(\0132\024.OPMessage.judgeIt"
    "em\022D\n&need_speak_touch_surround_sensor_v"
    "oice\030\004 \001(\0132\024.OPMessage.judgeItem\0229\n\033chec"
    "k_surround_sensor_count\030\005 \001(\0132\024.OPMessag"
    "e.judgeItem\022>\n need_close_door_before_ro"
    "und_car\030\006 \001(\0132\024.OPMessage.judgeItem\022.\n\020f"
    "inish_exam_type\030\007 \001(\0132\024.OPMessage.judgeI"
    "tem\0221\n\023vi_40100_start_exam\030\010 \001(\0132\024.OPMes"
    "sage.voiceItem\022/\n\021vi_40100_end_exam\030\t \001("
    "\0132\024.OPMessage.voiceItem\0226\n\030vi_40100_stop"
    "_car_before\030\n \001(\0132\024.OPMessage.voiceItem\022"
    "B\n$vi_40100_operation_flag_voice_before\030"
    "\013 \001(\0132\024.OPMessage.voiceItem\022@\n\"vi_40100_"
    "operation_flag_voice_over\030\014 \001(\0132\024.OPMess"
    "age.voiceItem\022E\n\'vi_40100_operation_flag"
    "_notify_flameout\030\r \001(\0132\024.OPMessage.voice"
    "Item\022F\n(vi_40100_operation_flag_notify_h"
    "andbrake\030\016 \001(\0132\024.OPMessage.voiceItem\0223\n\025"
    "vi_40100_round_car_lf\030\017 \001(\0132\024.OPMessage."
    "voiceItem\0223\n\025vi_40100_round_car_rf\030\020 \001(\013"
    "2\024.OPMessage.voiceItem\0223\n\025vi_40100_round"
    "_car_lb\030\021 \001(\0132\024.OPMessage.voiceItem\0223\n\025v"
    "i_40100_round_car_rb\030\022 \001(\0132\024.OPMessage.v"
    "oiceItem\022G\n)vi_40100_operation_flag_noti"
    "fy_close_door\030\023 \001(\0132\024.OPMessage.voiceIte"
    "m\022\?\n!vi_40100_round_car_not_close_door\030\024"
    " \001(\0132\024.OPMessage.voiceItem\022<\n\036vi_40100_r"
    "ound_car_order_error\030\025 \001(\0132\024.OPMessage.v"
    "oiceItem\022\?\n!vi_40100_runnin_befor_finish"
    "_test\030\026 \001(\0132\024.OPMessage.voiceItem\0225\n\027vi_"
    "40100_not_close_door\030\027 \001(\0132\024.OPMessage.v"
    "oiceItem\0224\n\026vi_40100_not_round_car\030\030 \001(\013"
    "2\024.OPMessage.voiceItem\"\241\001\n\nJudge41600\022\020\n"
    "\010itemCode\030\001 \001(\005\022\020\n\010itemName\030\002 \001(\t\0227\n\031min"
    "_near_lamp_flash_count\030\003 \001(\0132\024.OPMessage"
    ".judgeItem\0226\n\030min_far_lamp_flash_count\030\004"
    " \001(\0132\024.OPMessage.judgeItem\"\374\003\n\nJudge4020"
    "0\022\020\n\010itemCode\030\001 \001(\005\022\020\n\010itemName\030\002 \001(\t\022&\n"
    "\010max_time\030\003 \001(\0132\024.OPMessage.judgeItem\0222\n"
    "\024max_trigger_distance\030\004 \001(\0132\024.OPMessage."
    "judgeItem\022+\n\rmin_horn_time\030\005 \001(\0132\024.OPMes"
    "sage.judgeItem\0222\n\024min_turn_signal_time\030\006"
    " \001(\0132\024.OPMessage.judgeItem\0221\n\023vi_40200_s"
    "tart_exam\030\007 \001(\0132\024.OPMessage.voiceItem\022/\n"
    "\021vi_40200_end_exam\030\010 \001(\0132\024.OPMessage.voi"
    "ceItem\022:\n\034vi_40200_turn_lamp_use_error\030\t"
    " \001(\0132\024.OPMessage.voiceItem\0228\n\032vi_40200_t"
    "urn_lamp_not_use\030\n \001(\0132\024.OPMessage.voice"
    "Item\0223\n\025vi_40200_horn_not_use\030\013 \001(\0132\024.OP"
    "Message.voiceItem\"\240\t\n\nJudge40400\022\020\n\010item"
    "Code\030\001 \001(\005\022\020\n\010itemName\030\002 \001(\t\022&\n\010max_time"
    "\030\003 \001(\0132\024.OPMessage.judgeItem\0222\n\024max_trig"
    "ger_distance\030\004 \001(\0132\024.OPMessage.judgeItem"
    "\0222\n\024max_gear_finish_time\030\005 \001(\0132\024.OPMessa"
    "ge.judgeItem\022,\n\016gear_actions_0\030\006 \001(\0132\024.O"
    "PMessage.judgeItem\022,\n\016gear_actions_1\030\007 \001"
    "(\0132\024.OPMessage.judgeItem\022,\n\016gear_actions"
    "_2\030\010 \001(\0132\024.OPMessage.judgeItem\022,\n\016gear_a"
    "ctions_3\030\t \001(\0132\024.OPMessage.judgeItem\022,\n\016"
    "gear_actions_4\030\n \001(\0132\024.OPMessage.judgeIt"
    "em\0226\n\030notify_after_clutch_down\030\013 \001(\0132\024.O"
    "PMessage.judgeItem\0223\n\025check_after_clutch"
    "_up\030\014 \001(\0132\024.OPMessage.judgeItem\0221\n\023vi_40"
    "400_start_exam\030\r \001(\0132\024.OPMessage.voiceIt"
    "em\022/\n\021vi_40400_end_exam\030\016 \001(\0132\024.OPMessag"
    "e.voiceItem\022-\n\017vi_40400_upto_2\030\017 \001(\0132\024.O"
    "PMessage.voiceItem\022-\n\017vi_40400_upto_3\030\020 "
    "\001(\0132\024.OPMessage.voiceItem\022-\n\017vi_40400_up"
    "to_4\030\021 \001(\0132\024.OPMessage.voiceItem\022-\n\017vi_4"
    "0400_upto_5\030\022 \001(\0132\024.OPMessage.voiceItem\022"
    "/\n\021vi_40400_downto_1\030\023 \001(\0132\024.OPMessage.v"
    "oiceItem\022/\n\021vi_40400_downto_2\030\024 \001(\0132\024.OP"
    "Message.voiceItem\022/\n\021vi_40400_downto_3\030\025"
    " \001(\0132\024.OPMessage.voiceItem\022/\n\021vi_40400_d"
    "ownto_4\030\026 \001(\0132\024.OPMessage.voiceItem\0221\n\023v"
    "i_40400_gear_error\030\027 \001(\0132\024.OPMessage.voi"
    "ceItem\022;\n\035vi_40400_not_finish_operation\030"
    "\030 \001(\0132\024.OPMessage.voiceItem\0227\n\031vi_40400_"
    "enter_gear_error\030\031 \001(\0132\024.OPMessage.voice"
    "Item\"\306\004\n\nJudge41000\022\020\n\010itemCode\030\001 \001(\005\022\020\n"
    "\010itemName\030\002 \001(\t\022&\n\010max_time\030\003 \001(\0132\024.OPMe"
    "ssage.judgeItem\0222\n\024max_trigger_distance\030"
    "\004 \001(\0132\024.OPMessage.judgeItem\022\'\n\tmax_speed"
    "\030\005 \001(\0132\024.OPMessage.judgeItem\022+\n\rmin_horn"
    "_time\030\006 \001(\0132\024.OPMessage.judgeItem\0222\n\024min"
    "_turn_signal_time\030\007 \001(\0132\024.OPMessage.judg"
    "eItem\022(\n\njudge_mode\030\010 \001(\0132\024.OPMessage.ju"
    "dgeItem\0226\n\030need_near_far_lamp_flash\030\t \001("
    "\0132\024.OPMessage.judgeItem\0221\n\023vi_41000_star"
    "t_exam\030\n \001(\0132\024.OPMessage.voiceItem\022/\n\021vi"
    "_41000_end_exam\030\013 \001(\0132\024.OPMessage.voiceI"
    "tem\0223\n\025vi_41000_horn_not_use\030\014 \001(\0132\024.OPM"
    "essage.voiceItem\0223\n\025vi_41000_not_slowdow"
    "n\030\r \001(\0132\024.OPMessage.voiceItem\"\231\003\n\nJudge4"
    "1001\022\020\n\010itemCode\030\001 \001(\005\022\020\n\010itemName\030\002 \001(\t"
    "\022&\n\010max_time\030\003 \001(\0132\024.OPMessage.judgeItem"
    "\0222\n\024max_trigger_distance\030\004 \001(\0132\024.OPMessa"
    "ge.judgeItem\0226\n\030need_near_far_lamp_flash"
    "\030\005 \001(\0132\024.OPMessage.judgeItem\0221\n\023vi_41001"
    "_start_exam\030\006 \001(\0132\024.OPMessage.voiceItem\022"
    "/\n\021vi_41001_end_exam\030\007 \001(\0132\024.OPMessage.v"
    "oiceItem\022;\n\035vi_41001_not_finish_operatio"
    "n\030\010 \001(\0132\024.OPMessage.voiceItem\0222\n\024vi_4100"
    "1_start_drive\030\t \001(\0132\024.OPMessage.voiceIte"
    "m\"\222\004\n\nJudge41200\022\020\n\010itemCode\030\001 \001(\005\022\020\n\010it"
    "emName\030\002 \001(\t\022&\n\010max_time\030\003 \001(\0132\024.OPMessa"
    "ge.judgeItem\0222\n\024max_trigger_distance\030\004 \001"
    "(\0132\024.OPMessage.judgeItem\022\'\n\tmax_speed\030\005 "
    "\001(\0132\024.OPMessage.judgeItem\022+\n\rmin_horn_ti"
    "me\030\006 \001(\0132\024.OPMessage.judgeItem\022(\n\njudge_"
    "mode\030\007 \001(\0132\024.OPMessage.judgeItem\0226\n\030need"
    "_near_far_lamp_flash\030\010 \001(\0132\024.OPMessage.j"
    "udgeItem\0221\n\023vi_41200_start_exam\030\t \001(\0132\024."
    "OPMessage.voiceItem\022/\n\021vi_41200_end_exam"
    "\030\n \001(\0132\024.OPMessage.voiceItem\0223\n\025vi_41200"
    "_horn_not_use\030\013 \001(\0132\024.OPMessage.voiceIte"
    "m\0223\n\025vi_41200_not_slowdown\030\014 \001(\0132\024.OPMes"
    "sage.voiceItem\"\222\004\n\nJudge41100\022\020\n\010itemCod"
    "e\030\001 \001(\005\022\020\n\010itemName\030\002 \001(\t\022&\n\010max_time\030\003 "
    "\001(\0132\024.OPMessage.judgeItem\0222\n\024max_trigger"
    "_distance\030\004 \001(\0132\024.OPMessage.judgeItem\022\'\n"
    "\tmax_speed\030\005 \001(\0132\024.OPMessage.judgeItem\022+"
    "\n\rmin_horn_time\030\006 \001(\0132\024.OPMessage.judgeI"
    "tem\022(\n\njudge_mode\030\007 \001(\0132\024.OPMessage.judg"
    "eItem\0226\n\030need_near_far_lamp_flash\030\010 \001(\0132"
    "\024.OPMessage.judgeItem\0221\n\023vi_41100_start_"
    "exam\030\t \001(\0132\024.OPMessage.voiceItem\022/\n\021vi_4"
    "1100_end_exam\030\n \001(\0132\024.OPMessage.voiceIte"
    "m\0223\n\025vi_41100_horn_not_use\030\013 \001(\0132\024.OPMes"
    "sage.voiceItem\0223\n\025vi_41100_not_slowdown\030"
    "\014 \001(\0132\024.OPMessage.voiceItem\"\306\004\n\nJudge407"
    "00\022\020\n\010itemCode\030\001 \001(\005\022\020\n\010itemName\030\002 \001(\t\022&"
    "\n\010max_time\030\003 \001(\0132\024.OPMessage.judgeItem\0222"
    "\n\024max_trigger_distance\030\004 \001(\0132\024.OPMessage"
    ".judgeItem\022\'\n\tmax_speed\030\005 \001(\0132\024.OPMessag"
    "e.judgeItem\022+\n\rmin_horn_time\030\006 \001(\0132\024.OPM"
    "essage.judgeItem\0222\n\024min_turn_signal_time"
    "\030\007 \001(\0132\024.OPMessage.judgeItem\022(\n\njudge_mo"
    "de\030\010 \001(\0132\024.OPMessage.judgeItem\0226\n\030need_n"
    "ear_far_lamp_flash\030\t \001(\0132\024.OPMessage.jud"
    "geItem\0221\n\023vi_40700_start_exam\030\n \001(\0132\024.OP"
    "Message.voiceItem\022/\n\021vi_40700_end_exam\030\013"
    " \001(\0132\024.OPMessage.voiceItem\0223\n\025vi_40700_h"
    "orn_not_use\030\014 \001(\0132\024.OPMessage.voiceItem\022"
    "3\n\025vi_40700_not_slowdown\030\r \001(\0132\024.OPMessa"
    "ge.voiceItem\"\242\004\n\nJudge41500\022\020\n\010itemCode\030"
    "\001 \001(\005\022\020\n\010itemName\030\002 \001(\t\022&\n\010max_time\030\003 \001("
    "\0132\024.OPMessage.judgeItem\0222\n\024max_trigger_d"
    "istance\030\004 \001(\0132\024.OPMessage.judgeItem\0222\n\024m"
    "in_turn_signal_time\030\005 \001(\0132\024.OPMessage.ju"
    "dgeItem\022\'\n\tmax_speed\030\006 \001(\0132\024.OPMessage.j"
    "udgeItem\022(\n\njudge_mode\030\007 \001(\0132\024.OPMessage"
    ".judgeItem\0221\n\023vi_41500_start_exam\030\010 \001(\0132"
    "\024.OPMessage.voiceItem\022/\n\021vi_41500_end_ex"
    "am\030\t \001(\0132\024.OPMessage.voiceItem\0223\n\025vi_415"
    "00_not_slowdown\030\n \001(\0132\024.OPMessage.voiceI"
    "tem\022:\n\034vi_41500_turn_lamp_use_error\030\013 \001("
    "\0132\024.OPMessage.voiceItem\0228\n\032vi_41500_turn"
    "_lamp_not_use\030\014 \001(\0132\024.OPMessage.voiceIte"
    "m\"\274\005\n\nJudge40800\022\020\n\010itemCode\030\001 \001(\005\022\020\n\010it"
    "emName\030\002 \001(\t\022&\n\010max_time\030\003 \001(\0132\024.OPMessa"
    "ge.judgeItem\0222\n\024max_trigger_distance\030\004 \001"
    "(\0132\024.OPMessage.judgeItem\022\'\n\tmax_speed\030\005 "
    "\001(\0132\024.OPMessage.judgeItem\022+\n\rmin_horn_ti"
    "me\030\006 \001(\0132\024.OPMessage.judgeItem\0222\n\024min_tu"
    "rn_signal_time\030\007 \001(\0132\024.OPMessage.judgeIt"
    "em\022(\n\njudge_mode\030\010 \001(\0132\024.OPMessage.judge"
    "Item\0226\n\030need_near_far_lamp_flash\030\t \001(\0132\024"
    ".OPMessage.judgeItem\0221\n\023vi_40800_start_e"
    "xam\030\n \001(\0132\024.OPMessage.voiceItem\022/\n\021vi_40"
    "800_end_exam\030\013 \001(\0132\024.OPMessage.voiceItem"
    "\0223\n\025vi_40800_horn_not_use\030\014 \001(\0132\024.OPMess"
    "age.voiceItem\022:\n\034vi_40800_turn_lamp_use_"
    "error\030\r \001(\0132\024.OPMessage.voiceItem\0228\n\032vi_"
    "40800_turn_lamp_not_use\030\016 \001(\0132\024.OPMessag"
    "e.voiceItem\0223\n\025vi_40800_not_slowdown\030\017 \001"
    "(\0132\024.OPMessage.voiceItem\"\274\005\n\nJudge40900\022"
    "\020\n\010itemCode\030\001 \001(\005\022\020\n\010itemName\030\002 \001(\t\022&\n\010m"
    "ax_time\030\003 \001(\0132\024.OPMessage.judgeItem\0222\n\024m"
    "ax_trigger_distance\030\004 \001(\0132\024.OPMessage.ju"
    "dgeItem\022\'\n\tmax_speed\030\005 \001(\0132\024.OPMessage.j"
    "udgeItem\022+\n\rmin_horn_time\030\006 \001(\0132\024.OPMess"
    "age.judgeItem\0222\n\024min_turn_signal_time\030\007 "
    "\001(\0132\024.OPMessage.judgeItem\022(\n\njudge_mode\030"
    "\010 \001(\0132\024.OPMessage.judgeItem\0226\n\030need_near"
    "_far_lamp_flash\030\t \001(\0132\024.OPMessage.judgeI"
    "tem\0221\n\023vi_40900_start_exam\030\n \001(\0132\024.OPMes"
    "sage.voiceItem\022/\n\021vi_40900_end_exam\030\013 \001("
    "\0132\024.OPMessage.voiceItem\0223\n\025vi_40900_horn"
    "_not_use\030\014 \001(\0132\024.OPMessage.voiceItem\022:\n\034"
    "vi_40900_turn_lamp_use_error\030\r \001(\0132\024.OPM"
    "essage.voiceItem\0228\n\032vi_40900_turn_lamp_n"
    "ot_use\030\016 \001(\0132\024.OPMessage.voiceItem\0223\n\025vi"
    "_40900_not_slowdown\030\017 \001(\0132\024.OPMessage.vo"
    "iceItem\"\343\n\n\nJudge41400\022\020\n\010itemCode\030\001 \001(\005"
    "\022\020\n\010itemName\030\002 \001(\t\022&\n\010max_time\030\003 \001(\0132\024.O"
    "PMessage.judgeItem\0222\n\024max_trigger_distan"
    "ce\030\004 \001(\0132\024.OPMessage.judgeItem\0222\n\024min_tu"
    "rn_signal_time\030\005 \001(\0132\024.OPMessage.judgeIt"
    "em\022(\n\nlane_width\030\006 \001(\0132\024.OPMessage.judge"
    "Item\022/\n\021check_change_lane\030\007 \001(\0132\024.OPMess"
    "age.judgeItem\022:\n\034start_change_lane_time_"
    "delay\030\010 \001(\0132\024.OPMessage.judgeItem\022>\n sta"
    "rt_change_lane_distance_delay\030\t \001(\0132\024.OP"
    "Message.judgeItem\022;\n\035finish_change_lane_"
    "time_delay\030\n \001(\0132\024.OPMessage.judgeItem\022\?"
    "\n!finish_change_lane_distance_delay\030\013 \001("
    "\0132\024.OPMessage.judgeItem\0226\n\030need_near_far"
    "_lamp_flash\030\014 \001(\0132\024.OPMessage.judgeItem\022"
    ".\n\020need_return_lane\030\r \001(\0132\024.OPMessage.ju"
    "dgeItem\0224\n\026return_lane_time_dealy\030\016 \001(\0132"
    "\024.OPMessage.judgeItem\0221\n\023vi_41400_start_"
    "exam\030\017 \001(\0132\024.OPMessage.voiceItem\022/\n\021vi_4"
    "1400_end_exam\030\020 \001(\0132\024.OPMessage.voiceIte"
    "m\022:\n\034vi_41400_driving_in_one_lane\030\021 \001(\0132"
    "\024.OPMessage.voiceItem\0229\n\033vi_41400_notify"
    "_change_lane\030\022 \001(\0132\024.OPMessage.voiceItem"
    "\0229\n\033vi_41400_notify_return_lane\030\023 \001(\0132\024."
    "OPMessage.voiceItem\0221\n\023vi_41400_not_fini"
    "sh\030\024 \001(\0132\024.OPMessage.voiceItem\0228\n\032vi_414"
    "00_change_lane_error\030\025 \001(\0132\024.OPMessage.v"
    "oiceItem\0228\n\032vi_41400_return_lane_error\030\026"
    " \001(\0132\024.OPMessage.voiceItem\022:\n\034vi_41400_t"
    "urn_lamp_use_error\030\027 \001(\0132\024.OPMessage.voi"
    "ceItem\022\?\n!vi_41400_not_keep_enough_dista"
    "nce\030\030 \001(\0132\024.OPMessage.voiceItem\0228\n\032vi_41"
    "400_turn_lamp_not_use\030\031 \001(\0132\024.OPMessage."
    "voiceItem\022:\n\034vi_41400_not_reach_min_spee"
    "d\030\032 \001(\0132\024.OPMessage.voiceItem\"\245\007\n\nJudge4"
    "0500\022\020\n\010itemCode\030\001 \001(\005\022\020\n\010itemName\030\002 \001(\t"
    "\022&\n\010max_time\030\003 \001(\0132\024.OPMessage.judgeItem"
    "\0222\n\024max_trigger_distance\030\004 \001(\0132\024.OPMessa"
    "ge.judgeItem\0222\n\024min_turn_signal_time\030\005 \001"
    "(\0132\024.OPMessage.judgeItem\022(\n\nlane_width\030\006"
    " \001(\0132\024.OPMessage.judgeItem\022/\n\021check_chan"
    "ge_lane\030\007 \001(\0132\024.OPMessage.judgeItem\022:\n\034s"
    "tart_change_lane_time_delay\030\010 \001(\0132\024.OPMe"
    "ssage.judgeItem\022>\n start_change_lane_dis"
    "tance_delay\030\t \001(\0132\024.OPMessage.judgeItem\022"
    ";\n\035finish_change_lane_time_delay\030\n \001(\0132\024"
    ".OPMessage.judgeItem\022\?\n!finish_change_la"
    "ne_distance_delay\030\013 \001(\0132\024.OPMessage.judg"
    "eItem\0221\n\023vi_40500_start_exam\030\014 \001(\0132\024.OPM"
    "essage.voiceItem\022/\n\021vi_40500_end_exam\030\r "
    "\001(\0132\024.OPMessage.voiceItem\022:\n\034vi_40500_dr"
    "iving_in_one_lane\030\016 \001(\0132\024.OPMessage.voic"
    "eItem\0229\n\033vi_40500_notify_change_lane\030\017 \001"
    "(\0132\024.OPMessage.voiceItem\022=\n\037vi_40500_not"
    "_finish_change_lane\030\020 \001(\0132\024.OPMessage.vo"
    "iceItem\022:\n\034vi_40500_turn_lamp_use_error\030"
    "\021 \001(\0132\024.OPMessage.voiceItem\0228\n\032vi_40500_"
    "turn_lamp_not_use\030\022 \001(\0132\024.OPMessage.voic"
    "eItem\"\370\002\n\nJudge41300\022\020\n\010itemCode\030\001 \001(\005\022\020"
    "\n\010itemName\030\002 \001(\t\022&\n\010max_time\030\003 \001(\0132\024.OPM"
    "essage.judgeItem\0222\n\024max_trigger_distance"
    "\030\004 \001(\0132\024.OPMessage.judgeItem\022\'\n\tmax_spee"
    "d\030\005 \001(\0132\024.OPMessage.judgeItem\022(\n\njudge_m"
    "ode\030\006 \001(\0132\024.OPMessage.judgeItem\0221\n\023vi_41"
    "300_start_exam\030\007 \001(\0132\024.OPMessage.voiceIt"
    "em\022/\n\021vi_41300_end_exam\030\010 \001(\0132\024.OPMessag"
    "e.voiceItem\0223\n\025vi_41300_not_slowdown\030\t \001"
    "(\0132\024.OPMessage.voiceItem\"\242\004\n\nJudge40300\022"
    "\020\n\010itemCode\030\001 \001(\005\022\020\n\010itemName\030\002 \001(\t\022&\n\010m"
    "ax_time\030\003 \001(\0132\024.OPMessage.judgeItem\022\'\n\tm"
    "in_speed\030\004 \001(\0132\024.OPMessage.judgeItem\0222\n\024"
    "max_trigger_distance\030\005 \001(\0132\024.OPMessage.j"
    "udgeItem\0220\n\022max_error_distance\030\006 \001(\0132\024.O"
    "PMessage.judgeItem\022-\n\017enable_steering\030\007 "
    "\001(\0132\024.OPMessage.judgeItem\0226\n\030max_error_s"
    "teering_angle\030\010 \001(\0132\024.OPMessage.judgeIte"
    "m\0221\n\023vi_40300_start_exam\030\t \001(\0132\024.OPMessa"
    "ge.voiceItem\022/\n\021vi_40300_end_exam\030\n \001(\0132"
    "\024.OPMessage.voiceItem\0226\n\030vi_40300_not_go"
    "_straight\030\013 \001(\0132\024.OPMessage.voiceItem\0226\n"
    "\030vi_40300_not_reach_speed\030\014 \001(\0132\024.OPMess"
    "age.voiceItem\"\316\006\n\nJudge40600\022\020\n\010itemCode"
    "\030\001 \001(\005\022\020\n\010itemName\030\002 \001(\t\022&\n\010max_time\030\003 \001"
    "(\0132\024.OPMessage.judgeItem\0222\n\024max_trigger_"
    "distance\030\004 \001(\0132\024.OPMessage.judgeItem\0222\n\024"
    "min_turn_signal_time\030\005 \001(\0132\024.OPMessage.j"
    "udgeItem\022)\n\013finish_mode\030\006 \001(\0132\024.OPMessag"
    "e.judgeItem\0225\n\027get_off_close_door_time\030\007"
    " \001(\0132\024.OPMessage.judgeItem\0223\n\025sideline_c"
    "heck_sensor\030\010 \001(\0132\024.OPMessage.judgeItem\022"
    "1\n\023vi_40600_start_exam\030\t \001(\0132\024.OPMessage"
    ".voiceItem\022/\n\021vi_40600_end_exam\030\n \001(\0132\024."
    "OPMessage.voiceItem\0221\n\023vi_40600_not_fini"
    "sh\030\013 \001(\0132\024.OPMessage.voiceItem\0224\n\026vi_406"
    "00_not_handbrake\030\014 \001(\0132\024.OPMessage.voice"
    "Item\0225\n\027vi_40600_not_close_door\030\r \001(\0132\024."
    "OPMessage.voiceItem\0223\n\025vi_40600_not_flam"
    "eout\030\016 \001(\0132\024.OPMessage.voiceItem\022:\n\034vi_4"
    "0600_turn_lamp_use_error\030\017 \001(\0132\024.OPMessa"
    "ge.voiceItem\0228\n\032vi_40600_turn_lamp_not_u"
    "se\030\020 \001(\0132\024.OPMessage.voiceItem\022F\n(vi_406"
    "00_handbrake_footbrake_order_error\030\021 \001(\013"
    "2\024.OPMessage.voiceItem\"\350\007\n\nJudge40601\022\020\n"
    "\010itemCode\030\001 \001(\005\022\020\n\010itemName\030\002 \001(\t\022&\n\010max"
    "_time\030\003 \001(\0132\024.OPMessage.judgeItem\0222\n\024max"
    "_trigger_distance\030\004 \001(\0132\024.OPMessage.judg"
    "eItem\0222\n\024min_turn_signal_time\030\005 \001(\0132\024.OP"
    "Message.judgeItem\022)\n\013finish_mode\030\006 \001(\0132\024"
    ".OPMessage.judgeItem\022+\n\rmin_horn_time\030\007 "
    "\001(\0132\024.OPMessage.judgeItem\0223\n\025sideline_ch"
    "eck_sensor\030\010 \001(\0132\024.OPMessage.judgeItem\0225"
    "\n\027vi_40600_sideline_error\030\t \001(\0132\024.OPMess"
    "age.voiceItem\0221\n\023vi_40601_start_exam\030\n \001"
    "(\0132\024.OPMessage.voiceItem\022/\n\021vi_40601_end"
    "_exam\030\013 \001(\0132\024.OPMessage.voiceItem\0224\n\026vi_"
    "40601_start_driving\030\014 \001(\0132\024.OPMessage.vo"
    "iceItem\0225\n\027vi_40601_finish_driving\030\r \001(\013"
    "2\024.OPMessage.voiceItem\0221\n\023vi_40601_not_f"
    "inish\030\016 \001(\0132\024.OPMessage.voiceItem\022:\n\034vi_"
    "40601_turn_lamp_use_error\030\017 \001(\0132\024.OPMess"
    "age.voiceItem\0228\n\032vi_40601_turn_lamp_not_"
    "use\030\020 \001(\0132\024.OPMessage.voiceItem\0224\n\026vi_40"
    "601_not_handbrake\030\021 \001(\0132\024.OPMessage.voic"
    "eItem\022F\n(vi_40601_handbrake_footbrake_or"
    "der_error\030\022 \001(\0132\024.OPMessage.voiceItem\0223\n"
    "\025vi_40601_horn_not_use\030\023 \001(\0132\024.OPMessage"
    ".voiceItem\0225\n\027vi_40601_sideline_error\030\024 "
    "\001(\0132\024.OPMessage.voiceItem\"\354\006\n\nJudge50001"
    "\022\020\n\010itemCode\030\001 \001(\005\022\020\n\010itemName\030\002 \001(\t\022&\n\010"
    "max_time\030\003 \001(\0132\024.OPMessage.judgeItem\022\'\n\t"
    "max_speed\030\004 \001(\0132\024.OPMessage.judgeItem\022(\n"
    "\njudge_mode\030\005 \001(\0132\024.OPMessage.judgeItem\022"
    "7\n\031min_left_turn_signal_time\030\006 \001(\0132\024.OPM"
    "essage.judgeItem\0228\n\032min_right_turn_signa"
    "l_time\030\007 \001(\0132\024.OPMessage.judgeItem\0226\n\030ne"
    "ed_near_far_lamp_flash\030\010 \001(\0132\024.OPMessage"
    ".judgeItem\022,\n\016check_far_lamp\030\t \001(\0132\024.OPM"
    "essage.judgeItem\022-\n\017check_near_lamp\030\n \001("
    "\0132\024.OPMessage.judgeItem\0221\n\023vi_50001_star"
    "t_exam\030\013 \001(\0132\024.OPMessage.voiceItem\022/\n\021vi"
    "_50001_end_exam\030\014 \001(\0132\024.OPMessage.voiceI"
    "tem\0223\n\025vi_50001_not_slowdown\030\r \001(\0132\024.OPM"
    "essage.voiceItem\022:\n\034vi_50001_turn_lamp_u"
    "se_error\030\016 \001(\0132\024.OPMessage.voiceItem\0228\n\032"
    "vi_50001_turn_lamp_not_use\030\017 \001(\0132\024.OPMes"
    "sage.voiceItem\0223\n\025vi_50001_horn_not_use\030"
    "\020 \001(\0132\024.OPMessage.voiceItem\0229\n\033vi_50001_"
    "not_open_near_lamp\030\021 \001(\0132\024.OPMessage.voi"
    "ceItem\0228\n\032vi_50001_not_open_far_lamp\030\022 \001"
    "(\0132\024.OPMessage.voiceItem\"\354\006\n\nJudge50002\022"
    "\020\n\010itemCode\030\001 \001(\005\022\020\n\010itemName\030\002 \001(\t\022&\n\010m"
    "ax_time\030\003 \001(\0132\024.OPMessage.judgeItem\022\'\n\tm"
    "ax_speed\030\004 \001(\0132\024.OPMessage.judgeItem\022(\n\n"
    "judge_mode\030\005 \001(\0132\024.OPMessage.judgeItem\0227"
    "\n\031min_left_turn_signal_time\030\006 \001(\0132\024.OPMe"
    "ssage.judgeItem\0228\n\032min_right_turn_signal"
    "_time\030\007 \001(\0132\024.OPMessage.judgeItem\0226\n\030nee"
    "d_near_far_lamp_flash\030\010 \001(\0132\024.OPMessage."
    "judgeItem\022,\n\016check_far_lamp\030\t \001(\0132\024.OPMe"
    "ssage.judgeItem\022-\n\017check_near_lamp\030\n \001(\013"
    "2\024.OPMessage.judgeItem\0221\n\023vi_50002_start"
    "_exam\030\013 \001(\0132\024.OPMessage.voiceItem\022/\n\021vi_"
    "50002_end_exam\030\014 \001(\0132\024.OPMessage.voiceIt"
    "em\0223\n\025vi_50002_not_slowdown\030\r \001(\0132\024.OPMe"
    "ssage.voiceItem\022:\n\034vi_50002_turn_lamp_us"
    "e_error\030\016 \001(\0132\024.OPMessage.voiceItem\0228\n\032v"
    "i_50002_turn_lamp_not_use\030\017 \001(\0132\024.OPMess"
    "age.voiceItem\0223\n\025vi_50002_horn_not_use\030\020"
    " \001(\0132\024.OPMessage.voiceItem\0229\n\033vi_50002_n"
    "ot_open_near_lamp\030\021 \001(\0132\024.OPMessage.voic"
    "eItem\0228\n\032vi_50002_not_open_far_lamp\030\022 \001("
    "\0132\024.OPMessage.voiceItem\"\354\006\n\nJudge50003\022\020"
    "\n\010itemCode\030\001 \001(\005\022\020\n\010itemName\030\002 \001(\t\022&\n\010ma"
    "x_time\030\003 \001(\0132\024.OPMessage.judgeItem\022\'\n\tma"
    "x_speed\030\004 \001(\0132\024.OPMessage.judgeItem\022(\n\nj"
    "udge_mode\030\005 \001(\0132\024.OPMessage.judgeItem\0227\n"
    "\031min_left_turn_signal_time\030\006 \001(\0132\024.OPMes"
    "sage.judgeItem\0228\n\032min_right_turn_signal_"
    "time\030\007 \001(\0132\024.OPMessage.judgeItem\0226\n\030need"
    "_near_far_lamp_flash\030\010 \001(\0132\024.OPMessage.j"
    "udgeItem\022,\n\016check_far_lamp\030\t \001(\0132\024.OPMes"
    "sage.judgeItem\022-\n\017check_near_lamp\030\n \001(\0132"
    "\024.OPMessage.judgeItem\0221\n\023vi_50003_start_"
    "exam\030\013 \001(\0132\024.OPMessage.voiceItem\022/\n\021vi_5"
    "0003_end_exam\030\014 \001(\0132\024.OPMessage.voiceIte"
    "m\0223\n\025vi_50003_not_slowdown\030\r \001(\0132\024.OPMes"
    "sage.voiceItem\022:\n\034vi_50003_turn_lamp_use"
    "_error\030\016 \001(\0132\024.OPMessage.voiceItem\0228\n\032vi"
    "_50003_turn_lamp_not_use\030\017 \001(\0132\024.OPMessa"
    "ge.voiceItem\0223\n\025vi_50003_horn_not_use\030\020 "
    "\001(\0132\024.OPMessage.voiceItem\0229\n\033vi_50003_no"
    "t_open_near_lamp\030\021 \001(\0132\024.OPMessage.voice"
    "Item\0228\n\032vi_50003_not_open_far_lamp\030\022 \001(\013"
    "2\024.OPMessage.voiceItem\"\354\006\n\nJudge50004\022\020\n"
    "\010itemCode\030\001 \001(\005\022\020\n\010itemName\030\002 \001(\t\022&\n\010max"
    "_time\030\003 \001(\0132\024.OPMessage.judgeItem\022\'\n\tmax"
    "_speed\030\004 \001(\0132\024.OPMessage.judgeItem\022(\n\nju"
    "dge_mode\030\005 \001(\0132\024.OPMessage.judgeItem\0227\n\031"
    "min_left_turn_signal_time\030\006 \001(\0132\024.OPMess"
    "age.judgeItem\0228\n\032min_right_turn_signal_t"
    "ime\030\007 \001(\0132\024.OPMessage.judgeItem\0226\n\030need_"
    "near_far_lamp_flash\030\010 \001(\0132\024.OPMessage.ju"
    "dgeItem\022,\n\016check_far_lamp\030\t \001(\0132\024.OPMess"
    "age.judgeItem\022-\n\017check_near_lamp\030\n \001(\0132\024"
    ".OPMessage.judgeItem\0221\n\023vi_50004_start_e"
    "xam\030\013 \001(\0132\024.OPMessage.voiceItem\022/\n\021vi_50"
    "004_end_exam\030\014 \001(\0132\024.OPMessage.voiceItem"
    "\0223\n\025vi_50004_not_slowdown\030\r \001(\0132\024.OPMess"
    "age.voiceItem\022:\n\034vi_50004_turn_lamp_use_"
    "error\030\016 \001(\0132\024.OPMessage.voiceItem\0228\n\032vi_"
    "50004_turn_lamp_not_use\030\017 \001(\0132\024.OPMessag"
    "e.voiceItem\0223\n\025vi_50004_horn_not_use\030\020 \001"
    "(\0132\024.OPMessage.voiceItem\0229\n\033vi_50004_not"
    "_open_near_lamp\030\021 \001(\0132\024.OPMessage.voiceI"
    "tem\0228\n\032vi_50004_not_open_far_lamp\030\022 \001(\0132"
    "\024.OPMessage.voiceItem\"\354\006\n\nJudge50005\022\020\n\010"
    "itemCode\030\001 \001(\005\022\020\n\010itemName\030\002 \001(\t\022&\n\010max_"
    "time\030\003 \001(\0132\024.OPMessage.judgeItem\022\'\n\tmax_"
    "speed\030\004 \001(\0132\024.OPMessage.judgeItem\022(\n\njud"
    "ge_mode\030\005 \001(\0132\024.OPMessage.judgeItem\0227\n\031m"
    "in_left_turn_signal_time\030\006 \001(\0132\024.OPMessa"
    "ge.judgeItem\0228\n\032min_right_turn_signal_ti"
    "me\030\007 \001(\0132\024.OPMessage.judgeItem\0226\n\030need_n"
    "ear_far_lamp_flash\030\010 \001(\0132\024.OPMessage.jud"
    "geItem\022,\n\016check_far_lamp\030\t \001(\0132\024.OPMessa"
    "ge.judgeItem\022-\n\017check_near_lamp\030\n \001(\0132\024."
    "OPMessage.judgeItem\0221\n\023vi_50005_start_ex"
    "am\030\013 \001(\0132\024.OPMessage.voiceItem\022/\n\021vi_500"
    "05_end_exam\030\014 \001(\0132\024.OPMessage.voiceItem\022"
    "3\n\025vi_50005_not_slowdown\030\r \001(\0132\024.OPMessa"
    "ge.voiceItem\022:\n\034vi_50005_turn_lamp_use_e"
    "rror\030\016 \001(\0132\024.OPMessage.voiceItem\0228\n\032vi_5"
    "0005_turn_lamp_not_use\030\017 \001(\0132\024.OPMessage"
    ".voiceItem\0223\n\025vi_50005_horn_not_use\030\020 \001("
    "\0132\024.OPMessage.voiceItem\0229\n\033vi_50005_not_"
    "open_near_lamp\030\021 \001(\0132\024.OPMessage.voiceIt"
    "em\0228\n\032vi_50005_not_open_far_lamp\030\022 \001(\0132\024"
    ".OPMessage.voiceItem\"\354\006\n\nJudge50006\022\020\n\010i"
    "temCode\030\001 \001(\005\022\020\n\010itemName\030\002 \001(\t\022&\n\010max_t"
    "ime\030\003 \001(\0132\024.OPMessage.judgeItem\022\'\n\tmax_s"
    "peed\030\004 \001(\0132\024.OPMessage.judgeItem\022(\n\njudg"
    "e_mode\030\005 \001(\0132\024.OPMessage.judgeItem\0227\n\031mi"
    "n_left_turn_signal_time\030\006 \001(\0132\024.OPMessag"
    "e.judgeItem\0228\n\032min_right_turn_signal_tim"
    "e\030\007 \001(\0132\024.OPMessage.judgeItem\0226\n\030need_ne"
    "ar_far_lamp_flash\030\010 \001(\0132\024.OPMessage.judg"
    "eItem\022,\n\016check_far_lamp\030\t \001(\0132\024.OPMessag"
    "e.judgeItem\022-\n\017check_near_lamp\030\n \001(\0132\024.O"
    "PMessage.judgeItem\0221\n\023vi_50006_start_exa"
    "m\030\013 \001(\0132\024.OPMessage.voiceItem\022/\n\021vi_5000"
    "6_end_exam\030\014 \001(\0132\024.OPMessage.voiceItem\0223"
    "\n\025vi_50006_not_slowdown\030\r \001(\0132\024.OPMessag"
    "e.voiceItem\022:\n\034vi_50006_turn_lamp_use_er"
    "ror\030\016 \001(\0132\024.OPMessage.voiceItem\0228\n\032vi_50"
    "006_turn_lamp_not_use\030\017 \001(\0132\024.OPMessage."
    "voiceItem\0223\n\025vi_50006_horn_not_use\030\020 \001(\013"
    "2\024.OPMessage.voiceItem\0229\n\033vi_50006_not_o"
    "pen_near_lamp\030\021 \001(\0132\024.OPMessage.voiceIte"
    "m\0228\n\032vi_50006_not_open_far_lamp\030\022 \001(\0132\024."
    "OPMessage.voiceItem\"\265\010\n\010Km3Judge\022!\n\006judg"
    "e0\030\001 \001(\0132\021.OPMessage.Judge0\022)\n\njudge4010"
    "0\030\002 \001(\0132\025.OPMessage.Judge40100\022)\n\njudge4"
    "1600\030\003 \001(\0132\025.OPMessage.Judge41600\022)\n\njud"
    "ge40200\030\004 \001(\0132\025.OPMessage.Judge40200\022)\n\n"
    "judge40400\030\005 \001(\0132\025.OPMessage.Judge40400\022"
    ")\n\njudge41000\030\006 \001(\0132\025.OPMessage.Judge410"
    "00\022)\n\njudge41001\030\007 \001(\0132\025.OPMessage.Judge"
    "41001\022)\n\njudge41200\030\010 \001(\0132\025.OPMessage.Ju"
    "dge41200\022)\n\njudge41100\030\t \001(\0132\025.OPMessage"
    ".Judge41100\022)\n\njudge40700\030\n \001(\0132\025.OPMess"
    "age.Judge40700\022)\n\njudge41500\030\013 \001(\0132\025.OPM"
    "essage.Judge41500\022)\n\njudge40800\030\014 \001(\0132\025."
    "OPMessage.Judge40800\022)\n\njudge40900\030\r \001(\013"
    "2\025.OPMessage.Judge40900\022)\n\njudge41400\030\016 "
    "\001(\0132\025.OPMessage.Judge41400\022)\n\njudge40500"
    "\030\017 \001(\0132\025.OPMessage.Judge40500\022)\n\njudge41"
    "300\030\020 \001(\0132\025.OPMessage.Judge41300\022)\n\njudg"
    "e40300\030\021 \001(\0132\025.OPMessage.Judge40300\022)\n\nj"
    "udge40600\030\022 \001(\0132\025.OPMessage.Judge40600\022)"
    "\n\njudge40601\030\023 \001(\0132\025.OPMessage.Judge4060"
    "1\022)\n\njudge50001\030\024 \001(\0132\025.OPMessage.Judge5"
    "0001\022)\n\njudge50002\030\025 \001(\0132\025.OPMessage.Jud"
    "ge50002\022)\n\njudge50003\030\026 \001(\0132\025.OPMessage."
    "Judge50003\022)\n\njudge50004\030\027 \001(\0132\025.OPMessa"
    "ge.Judge50004\022)\n\njudge50005\030\030 \001(\0132\025.OPMe"
    "ssage.Judge50005\022)\n\njudge50006\030\031 \001(\0132\025.O"
    "PMessage.Judge50006", 24699);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MessageKm3Config.proto", &protobuf_RegisterTypes);
  judgeItem::default_instance_ = new judgeItem();
  voiceItem::default_instance_ = new voiceItem();
  Judge0::default_instance_ = new Judge0();
  Judge40100::default_instance_ = new Judge40100();
  Judge41600::default_instance_ = new Judge41600();
  Judge40200::default_instance_ = new Judge40200();
  Judge40400::default_instance_ = new Judge40400();
  Judge41000::default_instance_ = new Judge41000();
  Judge41001::default_instance_ = new Judge41001();
  Judge41200::default_instance_ = new Judge41200();
  Judge41100::default_instance_ = new Judge41100();
  Judge40700::default_instance_ = new Judge40700();
  Judge41500::default_instance_ = new Judge41500();
  Judge40800::default_instance_ = new Judge40800();
  Judge40900::default_instance_ = new Judge40900();
  Judge41400::default_instance_ = new Judge41400();
  Judge40500::default_instance_ = new Judge40500();
  Judge41300::default_instance_ = new Judge41300();
  Judge40300::default_instance_ = new Judge40300();
  Judge40600::default_instance_ = new Judge40600();
  Judge40601::default_instance_ = new Judge40601();
  Judge50001::default_instance_ = new Judge50001();
  Judge50002::default_instance_ = new Judge50002();
  Judge50003::default_instance_ = new Judge50003();
  Judge50004::default_instance_ = new Judge50004();
  Judge50005::default_instance_ = new Judge50005();
  Judge50006::default_instance_ = new Judge50006();
  Km3Judge::default_instance_ = new Km3Judge();
  judgeItem::default_instance_->InitAsDefaultInstance();
  voiceItem::default_instance_->InitAsDefaultInstance();
  Judge0::default_instance_->InitAsDefaultInstance();
  Judge40100::default_instance_->InitAsDefaultInstance();
  Judge41600::default_instance_->InitAsDefaultInstance();
  Judge40200::default_instance_->InitAsDefaultInstance();
  Judge40400::default_instance_->InitAsDefaultInstance();
  Judge41000::default_instance_->InitAsDefaultInstance();
  Judge41001::default_instance_->InitAsDefaultInstance();
  Judge41200::default_instance_->InitAsDefaultInstance();
  Judge41100::default_instance_->InitAsDefaultInstance();
  Judge40700::default_instance_->InitAsDefaultInstance();
  Judge41500::default_instance_->InitAsDefaultInstance();
  Judge40800::default_instance_->InitAsDefaultInstance();
  Judge40900::default_instance_->InitAsDefaultInstance();
  Judge41400::default_instance_->InitAsDefaultInstance();
  Judge40500::default_instance_->InitAsDefaultInstance();
  Judge41300::default_instance_->InitAsDefaultInstance();
  Judge40300::default_instance_->InitAsDefaultInstance();
  Judge40600::default_instance_->InitAsDefaultInstance();
  Judge40601::default_instance_->InitAsDefaultInstance();
  Judge50001::default_instance_->InitAsDefaultInstance();
  Judge50002::default_instance_->InitAsDefaultInstance();
  Judge50003::default_instance_->InitAsDefaultInstance();
  Judge50004::default_instance_->InitAsDefaultInstance();
  Judge50005::default_instance_->InitAsDefaultInstance();
  Judge50006::default_instance_->InitAsDefaultInstance();
  Km3Judge::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MessageKm3Config_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MessageKm3Config_2eproto {
  StaticDescriptorInitializer_MessageKm3Config_2eproto() {
    protobuf_AddDesc_MessageKm3Config_2eproto();
  }
} static_descriptor_initializer_MessageKm3Config_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int judgeItem::kConfigFileNameFieldNumber;
const int judgeItem::kConfigItemFieldNumber;
const int judgeItem::kConfigNameFieldNumber;
const int judgeItem::kDetailStrFieldNumber;
const int judgeItem::kDefValueFieldNumber;
const int judgeItem::kDefValuesFieldNumber;
const int judgeItem::kStrArrFieldNumber;
const int judgeItem::kForceFieldNumber;
const int judgeItem::kGearFieldNumber;
const int judgeItem::kTypeFieldNumber;
#endif  // !_MSC_VER

judgeItem::judgeItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OPMessage.judgeItem)
}

void judgeItem::InitAsDefaultInstance() {
}

judgeItem::judgeItem(const judgeItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OPMessage.judgeItem)
}

void judgeItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  configfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  configitem_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  configname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detailstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  defvalue_ = 0;
  force_ = false;
  gear_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

judgeItem::~judgeItem() {
  // @@protoc_insertion_point(destructor:OPMessage.judgeItem)
  SharedDtor();
}

void judgeItem::SharedDtor() {
  if (configfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete configfilename_;
  }
  if (configitem_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete configitem_;
  }
  if (configname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete configname_;
  }
  if (detailstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete detailstr_;
  }
  if (this != default_instance_) {
  }
}

void judgeItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* judgeItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return judgeItem_descriptor_;
}

const judgeItem& judgeItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageKm3Config_2eproto();
  return *default_instance_;
}

judgeItem* judgeItem::default_instance_ = NULL;

judgeItem* judgeItem::New() const {
  return new judgeItem;
}

void judgeItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<judgeItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 159) {
    if (has_configfilename()) {
      if (configfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        configfilename_->clear();
      }
    }
    if (has_configitem()) {
      if (configitem_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        configitem_->clear();
      }
    }
    if (has_configname()) {
      if (configname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        configname_->clear();
      }
    }
    if (has_detailstr()) {
      if (detailstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        detailstr_->clear();
      }
    }
    defvalue_ = 0;
    force_ = false;
  }
  ZR_(gear_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  defvalues_.Clear();
  strarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool judgeItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OPMessage.judgeItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string configFileName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_configfilename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->configfilename().data(), this->configfilename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "configfilename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_configItem;
        break;
      }

      // optional string configItem = 2;
      case 2: {
        if (tag == 18) {
         parse_configItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_configitem()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->configitem().data(), this->configitem().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "configitem");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_configName;
        break;
      }

      // optional string configName = 3;
      case 3: {
        if (tag == 26) {
         parse_configName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_configname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->configname().data(), this->configname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "configname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_detailStr;
        break;
      }

      // optional string detailStr = 4;
      case 4: {
        if (tag == 34) {
         parse_detailStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_detailstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->detailstr().data(), this->detailstr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "detailstr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_defValue;
        break;
      }

      // optional double defValue = 5;
      case 5: {
        if (tag == 41) {
         parse_defValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &defvalue_)));
          set_has_defvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_defValues;
        break;
      }

      // repeated int32 defValues = 6;
      case 6: {
        if (tag == 48) {
         parse_defValues:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_defvalues())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_defvalues())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_defValues;
        if (input->ExpectTag(58)) goto parse_strArr;
        break;
      }

      // repeated string strArr = 7;
      case 7: {
        if (tag == 58) {
         parse_strArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_strarr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->strarr(this->strarr_size() - 1).data(),
            this->strarr(this->strarr_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "strarr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_strArr;
        if (input->ExpectTag(64)) goto parse_force;
        break;
      }

      // optional bool force = 8;
      case 8: {
        if (tag == 64) {
         parse_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_)));
          set_has_force();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_gear;
        break;
      }

      // optional int32 gear = 9;
      case 9: {
        if (tag == 72) {
         parse_gear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gear_)));
          set_has_gear();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_type;
        break;
      }

      // optional int32 type = 10;
      case 10: {
        if (tag == 80) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OPMessage.judgeItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OPMessage.judgeItem)
  return false;
#undef DO_
}

void judgeItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OPMessage.judgeItem)
  // optional string configFileName = 1;
  if (has_configfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->configfilename().data(), this->configfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "configfilename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->configfilename(), output);
  }

  // optional string configItem = 2;
  if (has_configitem()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->configitem().data(), this->configitem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "configitem");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->configitem(), output);
  }

  // optional string configName = 3;
  if (has_configname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->configname().data(), this->configname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "configname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->configname(), output);
  }

  // optional string detailStr = 4;
  if (has_detailstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->detailstr().data(), this->detailstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "detailstr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->detailstr(), output);
  }

  // optional double defValue = 5;
  if (has_defvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->defvalue(), output);
  }

  // repeated int32 defValues = 6;
  for (int i = 0; i < this->defvalues_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->defvalues(i), output);
  }

  // repeated string strArr = 7;
  for (int i = 0; i < this->strarr_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->strarr(i).data(), this->strarr(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "strarr");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->strarr(i), output);
  }

  // optional bool force = 8;
  if (has_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->force(), output);
  }

  // optional int32 gear = 9;
  if (has_gear()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->gear(), output);
  }

  // optional int32 type = 10;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OPMessage.judgeItem)
}

::google::protobuf::uint8* judgeItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OPMessage.judgeItem)
  // optional string configFileName = 1;
  if (has_configfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->configfilename().data(), this->configfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "configfilename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->configfilename(), target);
  }

  // optional string configItem = 2;
  if (has_configitem()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->configitem().data(), this->configitem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "configitem");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->configitem(), target);
  }

  // optional string configName = 3;
  if (has_configname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->configname().data(), this->configname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "configname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->configname(), target);
  }

  // optional string detailStr = 4;
  if (has_detailstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->detailstr().data(), this->detailstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "detailstr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->detailstr(), target);
  }

  // optional double defValue = 5;
  if (has_defvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->defvalue(), target);
  }

  // repeated int32 defValues = 6;
  for (int i = 0; i < this->defvalues_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->defvalues(i), target);
  }

  // repeated string strArr = 7;
  for (int i = 0; i < this->strarr_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strarr(i).data(), this->strarr(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "strarr");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->strarr(i), target);
  }

  // optional bool force = 8;
  if (has_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->force(), target);
  }

  // optional int32 gear = 9;
  if (has_gear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->gear(), target);
  }

  // optional int32 type = 10;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OPMessage.judgeItem)
  return target;
}

int judgeItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string configFileName = 1;
    if (has_configfilename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->configfilename());
    }

    // optional string configItem = 2;
    if (has_configitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->configitem());
    }

    // optional string configName = 3;
    if (has_configname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->configname());
    }

    // optional string detailStr = 4;
    if (has_detailstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->detailstr());
    }

    // optional double defValue = 5;
    if (has_defvalue()) {
      total_size += 1 + 8;
    }

    // optional bool force = 8;
    if (has_force()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 gear = 9;
    if (has_gear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gear());
    }

    // optional int32 type = 10;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated int32 defValues = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->defvalues_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->defvalues(i));
    }
    total_size += 1 * this->defvalues_size() + data_size;
  }

  // repeated string strArr = 7;
  total_size += 1 * this->strarr_size();
  for (int i = 0; i < this->strarr_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->strarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void judgeItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const judgeItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const judgeItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void judgeItem::MergeFrom(const judgeItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  defvalues_.MergeFrom(from.defvalues_);
  strarr_.MergeFrom(from.strarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_configfilename()) {
      set_configfilename(from.configfilename());
    }
    if (from.has_configitem()) {
      set_configitem(from.configitem());
    }
    if (from.has_configname()) {
      set_configname(from.configname());
    }
    if (from.has_detailstr()) {
      set_detailstr(from.detailstr());
    }
    if (from.has_defvalue()) {
      set_defvalue(from.defvalue());
    }
    if (from.has_force()) {
      set_force(from.force());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_gear()) {
      set_gear(from.gear());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void judgeItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void judgeItem::CopyFrom(const judgeItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool judgeItem::IsInitialized() const {

  return true;
}

void judgeItem::Swap(judgeItem* other) {
  if (other != this) {
    std::swap(configfilename_, other->configfilename_);
    std::swap(configitem_, other->configitem_);
    std::swap(configname_, other->configname_);
    std::swap(detailstr_, other->detailstr_);
    std::swap(defvalue_, other->defvalue_);
    defvalues_.Swap(&other->defvalues_);
    strarr_.Swap(&other->strarr_);
    std::swap(force_, other->force_);
    std::swap(gear_, other->gear_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata judgeItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = judgeItem_descriptor_;
  metadata.reflection = judgeItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int voiceItem::kIdFieldNumber;
const int voiceItem::kItemFieldNumber;
const int voiceItem::kMistakeEnableFieldNumber;
const int voiceItem::kMistakeIdFieldNumber;
const int voiceItem::kMistakePointFieldNumber;
const int voiceItem::kMistakeReasonFieldNumber;
const int voiceItem::kPositionFieldNumber;
const int voiceItem::kTipsFieldNumber;
const int voiceItem::kTitleFieldNumber;
const int voiceItem::kVoiceFieldNumber;
const int voiceItem::kVoiceEnableFieldNumber;
#endif  // !_MSC_VER

voiceItem::voiceItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OPMessage.voiceItem)
}

void voiceItem::InitAsDefaultInstance() {
}

voiceItem::voiceItem(const voiceItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OPMessage.voiceItem)
}

void voiceItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_ = 0;
  mistake_enable_ = 0;
  mistake_id_ = 0;
  mistake_point_ = 0;
  mistake_reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_ = 0;
  tips_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_ = 0;
  voice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  voice_enable_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

voiceItem::~voiceItem() {
  // @@protoc_insertion_point(destructor:OPMessage.voiceItem)
  SharedDtor();
}

void voiceItem::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (mistake_reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mistake_reason_;
  }
  if (tips_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tips_;
  }
  if (voice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete voice_;
  }
  if (this != default_instance_) {
  }
}

void voiceItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* voiceItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return voiceItem_descriptor_;
}

const voiceItem& voiceItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageKm3Config_2eproto();
  return *default_instance_;
}

voiceItem* voiceItem::default_instance_ = NULL;

voiceItem* voiceItem::New() const {
  return new voiceItem;
}

void voiceItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<voiceItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(item_, mistake_point_);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_mistake_reason()) {
      if (mistake_reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mistake_reason_->clear();
      }
    }
    position_ = 0;
    if (has_tips()) {
      if (tips_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tips_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    title_ = 0;
    if (has_voice()) {
      if (voice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        voice_->clear();
      }
    }
    voice_enable_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool voiceItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OPMessage.voiceItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_item;
        break;
      }

      // optional int32 item = 2;
      case 2: {
        if (tag == 16) {
         parse_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_)));
          set_has_item();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mistake_enable;
        break;
      }

      // optional int32 mistake_enable = 3;
      case 3: {
        if (tag == 24) {
         parse_mistake_enable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mistake_enable_)));
          set_has_mistake_enable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mistake_id;
        break;
      }

      // optional int32 mistake_id = 4;
      case 4: {
        if (tag == 32) {
         parse_mistake_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mistake_id_)));
          set_has_mistake_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_mistake_point;
        break;
      }

      // optional int32 mistake_point = 5;
      case 5: {
        if (tag == 40) {
         parse_mistake_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mistake_point_)));
          set_has_mistake_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_mistake_reason;
        break;
      }

      // optional string mistake_reason = 6;
      case 6: {
        if (tag == 50) {
         parse_mistake_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mistake_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mistake_reason().data(), this->mistake_reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mistake_reason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_position;
        break;
      }

      // optional int32 position = 7;
      case 7: {
        if (tag == 56) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_tips;
        break;
      }

      // optional string tips = 8;
      case 8: {
        if (tag == 66) {
         parse_tips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tips()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tips().data(), this->tips().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tips");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_title;
        break;
      }

      // optional int32 title = 9;
      case 9: {
        if (tag == 72) {
         parse_title:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &title_)));
          set_has_title();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_voice;
        break;
      }

      // optional string voice = 10;
      case 10: {
        if (tag == 82) {
         parse_voice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_voice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->voice().data(), this->voice().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "voice");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_voice_enable;
        break;
      }

      // optional int32 voice_enable = 11;
      case 11: {
        if (tag == 88) {
         parse_voice_enable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &voice_enable_)));
          set_has_voice_enable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OPMessage.voiceItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OPMessage.voiceItem)
  return false;
#undef DO_
}

void voiceItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OPMessage.voiceItem)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional int32 item = 2;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item(), output);
  }

  // optional int32 mistake_enable = 3;
  if (has_mistake_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mistake_enable(), output);
  }

  // optional int32 mistake_id = 4;
  if (has_mistake_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mistake_id(), output);
  }

  // optional int32 mistake_point = 5;
  if (has_mistake_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mistake_point(), output);
  }

  // optional string mistake_reason = 6;
  if (has_mistake_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mistake_reason().data(), this->mistake_reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mistake_reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->mistake_reason(), output);
  }

  // optional int32 position = 7;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->position(), output);
  }

  // optional string tips = 8;
  if (has_tips()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tips().data(), this->tips().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tips");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->tips(), output);
  }

  // optional int32 title = 9;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->title(), output);
  }

  // optional string voice = 10;
  if (has_voice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->voice().data(), this->voice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "voice");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->voice(), output);
  }

  // optional int32 voice_enable = 11;
  if (has_voice_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->voice_enable(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OPMessage.voiceItem)
}

::google::protobuf::uint8* voiceItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OPMessage.voiceItem)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional int32 item = 2;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item(), target);
  }

  // optional int32 mistake_enable = 3;
  if (has_mistake_enable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mistake_enable(), target);
  }

  // optional int32 mistake_id = 4;
  if (has_mistake_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mistake_id(), target);
  }

  // optional int32 mistake_point = 5;
  if (has_mistake_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mistake_point(), target);
  }

  // optional string mistake_reason = 6;
  if (has_mistake_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mistake_reason().data(), this->mistake_reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mistake_reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->mistake_reason(), target);
  }

  // optional int32 position = 7;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->position(), target);
  }

  // optional string tips = 8;
  if (has_tips()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tips().data(), this->tips().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tips");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->tips(), target);
  }

  // optional int32 title = 9;
  if (has_title()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->title(), target);
  }

  // optional string voice = 10;
  if (has_voice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->voice().data(), this->voice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "voice");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->voice(), target);
  }

  // optional int32 voice_enable = 11;
  if (has_voice_enable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->voice_enable(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OPMessage.voiceItem)
  return target;
}

int voiceItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional int32 item = 2;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item());
    }

    // optional int32 mistake_enable = 3;
    if (has_mistake_enable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mistake_enable());
    }

    // optional int32 mistake_id = 4;
    if (has_mistake_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mistake_id());
    }

    // optional int32 mistake_point = 5;
    if (has_mistake_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mistake_point());
    }

    // optional string mistake_reason = 6;
    if (has_mistake_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mistake_reason());
    }

    // optional int32 position = 7;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }

    // optional string tips = 8;
    if (has_tips()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tips());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 title = 9;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->title());
    }

    // optional string voice = 10;
    if (has_voice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->voice());
    }

    // optional int32 voice_enable = 11;
    if (has_voice_enable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->voice_enable());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void voiceItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const voiceItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const voiceItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void voiceItem::MergeFrom(const voiceItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_item()) {
      set_item(from.item());
    }
    if (from.has_mistake_enable()) {
      set_mistake_enable(from.mistake_enable());
    }
    if (from.has_mistake_id()) {
      set_mistake_id(from.mistake_id());
    }
    if (from.has_mistake_point()) {
      set_mistake_point(from.mistake_point());
    }
    if (from.has_mistake_reason()) {
      set_mistake_reason(from.mistake_reason());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_tips()) {
      set_tips(from.tips());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_voice()) {
      set_voice(from.voice());
    }
    if (from.has_voice_enable()) {
      set_voice_enable(from.voice_enable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void voiceItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void voiceItem::CopyFrom(const voiceItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool voiceItem::IsInitialized() const {

  return true;
}

void voiceItem::Swap(voiceItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(item_, other->item_);
    std::swap(mistake_enable_, other->mistake_enable_);
    std::swap(mistake_id_, other->mistake_id_);
    std::swap(mistake_point_, other->mistake_point_);
    std::swap(mistake_reason_, other->mistake_reason_);
    std::swap(position_, other->position_);
    std::swap(tips_, other->tips_);
    std::swap(title_, other->title_);
    std::swap(voice_, other->voice_);
    std::swap(voice_enable_, other->voice_enable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata voiceItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = voiceItem_descriptor_;
  metadata.reflection = voiceItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Judge0::kItemCodeFieldNumber;
const int Judge0::kItemNameFieldNumber;
const int Judge0::kMaxTimeFieldNumber;
const int Judge0::kMaxStopSpeedFieldNumber;
const int Judge0::kMaxSpeedFieldNumber;
const int Judge0::kMaxOffCourseDistanceFieldNumber;
const int Judge0::kMaxNearLampOffTimeFieldNumber;
const int Judge0::kMaxFarLampOnTimeFieldNumber;
const int Judge0::kAutoGearFieldNumber;
const int Judge0::kMaxFirstGearDistanceOnceFieldNumber;
const int Judge0::kMaxSecondGearDistanceOnceFieldNumber;
const int Judge0::kMaxFirstGearDistanceGlobalFieldNumber;
const int Judge0::kMaxSecondGearDistanceGlobalFieldNumber;
const int Judge0::kMinThirdGearDistanceGlobalFieldNumber;
const int Judge0::kGlobalReachSpeedFieldNumber;
const int Judge0::kMinGlobalReachSpeedDistanceFieldNumber;
const int Judge0::kMaxRpmFieldNumber;
const int Judge0::kMaxNeutralDistanceOnceFieldNumber;
const int Judge0::kGearSpeedMatch0FieldNumber;
const int Judge0::kGearSpeedMatch1FieldNumber;
const int Judge0::kGearSpeedMatch2FieldNumber;
const int Judge0::kGearSpeedMatch3FieldNumber;
const int Judge0::kGearSpeedMatch4FieldNumber;
const int Judge0::kGearSpeedMatch5FieldNumber;
const int Judge0::kMaxTurnLampOnTimeFieldNumber;
const int Judge0::kMaxNeutralTimeOnceFieldNumber;
const int Judge0::kGearSpeedMatchTimeFieldNumber;
const int Judge0::kFootBrakeBeepFieldNumber;
const int Judge0::kDeductVoiceSpeakModeFieldNumber;
const int Judge0::kCarShakeRpmThresholdFieldNumber;
const int Judge0::kCarShakeTimeThresholdFieldNumber;
const int Judge0::kRepeatVoiceTimeDelayFieldNumber;
const int Judge0::kMinFourthGearDistanceGlobalFieldNumber;
const int Judge0::kViGlobalAppStartFieldNumber;
const int Judge0::kViGlobalNotWearSeatBeltsFieldNumber;
const int Judge0::kViGlobalNotCloseDoorFieldNumber;
const int Judge0::kViGlobalFalmeoutFieldNumber;
const int Judge0::kViGlobalOverspeedFieldNumber;
const int Judge0::kViGlobalFirstGearDistanceOverrangeOnceFieldNumber;
const int Judge0::kViGlobalSecondGearDistanceOverrangeOnceFieldNumber;
const int Judge0::kViGlobalFirstGearDistanceOverrangeGlobalFieldNumber;
const int Judge0::kViGlobalSecondGearDistanceOverrangeGlobalFieldNumber;
const int Judge0::kViGlobalThirdGearDistanceNotEnoughFieldNumber;
const int Judge0::kViGlobalFourthGearDistanceNotEnoughFieldNumber;
const int Judge0::kViGlobalNeutralDrivingFieldNumber;
const int Judge0::kViGlobalHighSpeedNotEnoughFieldNumber;
const int Judge0::kViGlobalRpmOverrangeFieldNumber;
const int Judge0::kViGlobalGearSpeedNotMatchFieldNumber;
const int Judge0::kViGlobalExamTimeoutFieldNumber;
const int Judge0::kViGlobalTurnLampLongTimeOnFieldNumber;
const int Judge0::kViGlobalRoadErrorFieldNumber;
const int Judge0::kViGlobalExamOverPassFieldNumber;
const int Judge0::kViGlobalExamOverNotPassFieldNumber;
const int Judge0::kViGlobalDelaySpeakStartFieldNumber;
const int Judge0::kViGlobalDelaySpeakStopFieldNumber;
const int Judge0::kViGlobalDelaySpeakNoneFieldNumber;
const int Judge0::kViGlobalWholeExamTimeoutFieldNumber;
const int Judge0::kViGlobalStartDrivingWithErrorGearFieldNumber;
const int Judge0::kViGlobalStartDrivingNotReleaseHandbrakeFieldNumber;
const int Judge0::kViGlobalJumpGearFieldNumber;
const int Judge0::kViGlobalCarShakeFieldNumber;
const int Judge0::kViGlobalFiringupTimeoutFieldNumber;
const int Judge0::kViGlobalNotifyPushFingerprintFieldNumber;
const int Judge0::kViGlobalFingerprintPassFieldNumber;
const int Judge0::kViGlobalGlobalFieldNumber;
const int Judge0::kViGlobal40100FieldNumber;
const int Judge0::kViGlobal40200FieldNumber;
const int Judge0::kViGlobal40300FieldNumber;
const int Judge0::kViGlobal40400FieldNumber;
const int Judge0::kViGlobal40500FieldNumber;
const int Judge0::kViGlobal40600FieldNumber;
const int Judge0::kViGlobal40601FieldNumber;
const int Judge0::kViGlobal40700FieldNumber;
const int Judge0::kViGlobal40800FieldNumber;
const int Judge0::kViGlobal40900FieldNumber;
const int Judge0::kViGlobal41000FieldNumber;
const int Judge0::kViGlobal41001FieldNumber;
const int Judge0::kViGlobal41100FieldNumber;
const int Judge0::kViGlobal41200FieldNumber;
const int Judge0::kViGlobal41300FieldNumber;
const int Judge0::kViGlobal41400FieldNumber;
const int Judge0::kViGlobal41500FieldNumber;
const int Judge0::kViGlobal41600FieldNumber;
const int Judge0::kViGlobal50001FieldNumber;
const int Judge0::kViGlobal50002FieldNumber;
const int Judge0::kViGlobal50003FieldNumber;
const int Judge0::kViGlobal50004FieldNumber;
const int Judge0::kViGlobal50005FieldNumber;
const int Judge0::kViGlobal50006FieldNumber;
const int Judge0::kVi41600NotFlashNearFarFieldNumber;
const int Judge0::kVi41600NotOpenNearFieldNumber;
const int Judge0::kVi41600OpenFarFieldNumber;
const int Judge0::kVi41600NotOpenLampFieldNumber;
#endif  // !_MSC_VER

Judge0::Judge0()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OPMessage.Judge0)
}

void Judge0::InitAsDefaultInstance() {
  max_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  max_stop_speed_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  max_speed_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  max_off_course_distance_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  max_near_lamp_off_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  max_far_lamp_on_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  auto_gear_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  max_first_gear_distance_once_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  max_second_gear_distance_once_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  max_first_gear_distance_global_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  max_second_gear_distance_global_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  min_third_gear_distance_global_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  global_reach_speed_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  min_global_reach_speed_distance_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  max_rpm_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  max_neutral_distance_once_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  gear_speed_match_0_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  gear_speed_match_1_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  gear_speed_match_2_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  gear_speed_match_3_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  gear_speed_match_4_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  gear_speed_match_5_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  max_turn_lamp_on_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  max_neutral_time_once_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  gear_speed_match_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  foot_brake_beep_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  deduct_voice_speak_mode_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  car_shake_rpm_threshold_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  car_shake_time_threshold_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  repeat_voice_time_delay_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  min_fourth_gear_distance_global_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  vi_global_app_start_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_not_wear_seat_belts_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_not_close_door_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_falmeout_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_overspeed_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_first_gear_distance_overrange_once_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_second_gear_distance_overrange_once_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_first_gear_distance_overrange_global_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_second_gear_distance_overrange_global_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_third_gear_distance_not_enough_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_fourth_gear_distance_not_enough_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_neutral_driving_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_high_speed_not_enough_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_rpm_overrange_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_gear_speed_not_match_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_exam_timeout_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_turn_lamp_long_time_on_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_road_error_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_exam_over_pass_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_exam_over_not_pass_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_delay_speak_start_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_delay_speak_stop_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_delay_speak_none_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_whole_exam_timeout_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_start_driving_with_error_gear_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_start_driving_not_release_handbrake_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_jump_gear_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_car_shake_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_firingup_timeout_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_notify_push_fingerprint_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_fingerprint_pass_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_global_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_40100_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_40200_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_40300_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_40400_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_40500_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_40600_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_40601_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_40700_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_40800_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_40900_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_41000_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_41001_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_41100_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_41200_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_41300_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_41400_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_41500_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_41600_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_50001_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_50002_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_50003_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_50004_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_50005_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_global_50006_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_41600_not_flash_near_far_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_41600_not_open_near_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_41600_open_far_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_41600_not_open_lamp_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
}

Judge0::Judge0(const Judge0& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OPMessage.Judge0)
}

void Judge0::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  itemcode_ = 0;
  itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_time_ = NULL;
  max_stop_speed_ = NULL;
  max_speed_ = NULL;
  max_off_course_distance_ = NULL;
  max_near_lamp_off_time_ = NULL;
  max_far_lamp_on_time_ = NULL;
  auto_gear_ = NULL;
  max_first_gear_distance_once_ = NULL;
  max_second_gear_distance_once_ = NULL;
  max_first_gear_distance_global_ = NULL;
  max_second_gear_distance_global_ = NULL;
  min_third_gear_distance_global_ = NULL;
  global_reach_speed_ = NULL;
  min_global_reach_speed_distance_ = NULL;
  max_rpm_ = NULL;
  max_neutral_distance_once_ = NULL;
  gear_speed_match_0_ = NULL;
  gear_speed_match_1_ = NULL;
  gear_speed_match_2_ = NULL;
  gear_speed_match_3_ = NULL;
  gear_speed_match_4_ = NULL;
  gear_speed_match_5_ = NULL;
  max_turn_lamp_on_time_ = NULL;
  max_neutral_time_once_ = NULL;
  gear_speed_match_time_ = NULL;
  foot_brake_beep_ = NULL;
  deduct_voice_speak_mode_ = NULL;
  car_shake_rpm_threshold_ = NULL;
  car_shake_time_threshold_ = NULL;
  repeat_voice_time_delay_ = NULL;
  min_fourth_gear_distance_global_ = NULL;
  vi_global_app_start_ = NULL;
  vi_global_not_wear_seat_belts_ = NULL;
  vi_global_not_close_door_ = NULL;
  vi_global_falmeout_ = NULL;
  vi_global_overspeed_ = NULL;
  vi_global_first_gear_distance_overrange_once_ = NULL;
  vi_global_second_gear_distance_overrange_once_ = NULL;
  vi_global_first_gear_distance_overrange_global_ = NULL;
  vi_global_second_gear_distance_overrange_global_ = NULL;
  vi_global_third_gear_distance_not_enough_ = NULL;
  vi_global_fourth_gear_distance_not_enough_ = NULL;
  vi_global_neutral_driving_ = NULL;
  vi_global_high_speed_not_enough_ = NULL;
  vi_global_rpm_overrange_ = NULL;
  vi_global_gear_speed_not_match_ = NULL;
  vi_global_exam_timeout_ = NULL;
  vi_global_turn_lamp_long_time_on_ = NULL;
  vi_global_road_error_ = NULL;
  vi_global_exam_over_pass_ = NULL;
  vi_global_exam_over_not_pass_ = NULL;
  vi_global_delay_speak_start_ = NULL;
  vi_global_delay_speak_stop_ = NULL;
  vi_global_delay_speak_none_ = NULL;
  vi_global_whole_exam_timeout_ = NULL;
  vi_global_start_driving_with_error_gear_ = NULL;
  vi_global_start_driving_not_release_handbrake_ = NULL;
  vi_global_jump_gear_ = NULL;
  vi_global_car_shake_ = NULL;
  vi_global_firingup_timeout_ = NULL;
  vi_global_notify_push_fingerprint_ = NULL;
  vi_global_fingerprint_pass_ = NULL;
  vi_global_global_ = NULL;
  vi_global_40100_ = NULL;
  vi_global_40200_ = NULL;
  vi_global_40300_ = NULL;
  vi_global_40400_ = NULL;
  vi_global_40500_ = NULL;
  vi_global_40600_ = NULL;
  vi_global_40601_ = NULL;
  vi_global_40700_ = NULL;
  vi_global_40800_ = NULL;
  vi_global_40900_ = NULL;
  vi_global_41000_ = NULL;
  vi_global_41001_ = NULL;
  vi_global_41100_ = NULL;
  vi_global_41200_ = NULL;
  vi_global_41300_ = NULL;
  vi_global_41400_ = NULL;
  vi_global_41500_ = NULL;
  vi_global_41600_ = NULL;
  vi_global_50001_ = NULL;
  vi_global_50002_ = NULL;
  vi_global_50003_ = NULL;
  vi_global_50004_ = NULL;
  vi_global_50005_ = NULL;
  vi_global_50006_ = NULL;
  vi_41600_not_flash_near_far_ = NULL;
  vi_41600_not_open_near_ = NULL;
  vi_41600_open_far_ = NULL;
  vi_41600_not_open_lamp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Judge0::~Judge0() {
  // @@protoc_insertion_point(destructor:OPMessage.Judge0)
  SharedDtor();
}

void Judge0::SharedDtor() {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (this != default_instance_) {
    delete max_time_;
    delete max_stop_speed_;
    delete max_speed_;
    delete max_off_course_distance_;
    delete max_near_lamp_off_time_;
    delete max_far_lamp_on_time_;
    delete auto_gear_;
    delete max_first_gear_distance_once_;
    delete max_second_gear_distance_once_;
    delete max_first_gear_distance_global_;
    delete max_second_gear_distance_global_;
    delete min_third_gear_distance_global_;
    delete global_reach_speed_;
    delete min_global_reach_speed_distance_;
    delete max_rpm_;
    delete max_neutral_distance_once_;
    delete gear_speed_match_0_;
    delete gear_speed_match_1_;
    delete gear_speed_match_2_;
    delete gear_speed_match_3_;
    delete gear_speed_match_4_;
    delete gear_speed_match_5_;
    delete max_turn_lamp_on_time_;
    delete max_neutral_time_once_;
    delete gear_speed_match_time_;
    delete foot_brake_beep_;
    delete deduct_voice_speak_mode_;
    delete car_shake_rpm_threshold_;
    delete car_shake_time_threshold_;
    delete repeat_voice_time_delay_;
    delete min_fourth_gear_distance_global_;
    delete vi_global_app_start_;
    delete vi_global_not_wear_seat_belts_;
    delete vi_global_not_close_door_;
    delete vi_global_falmeout_;
    delete vi_global_overspeed_;
    delete vi_global_first_gear_distance_overrange_once_;
    delete vi_global_second_gear_distance_overrange_once_;
    delete vi_global_first_gear_distance_overrange_global_;
    delete vi_global_second_gear_distance_overrange_global_;
    delete vi_global_third_gear_distance_not_enough_;
    delete vi_global_fourth_gear_distance_not_enough_;
    delete vi_global_neutral_driving_;
    delete vi_global_high_speed_not_enough_;
    delete vi_global_rpm_overrange_;
    delete vi_global_gear_speed_not_match_;
    delete vi_global_exam_timeout_;
    delete vi_global_turn_lamp_long_time_on_;
    delete vi_global_road_error_;
    delete vi_global_exam_over_pass_;
    delete vi_global_exam_over_not_pass_;
    delete vi_global_delay_speak_start_;
    delete vi_global_delay_speak_stop_;
    delete vi_global_delay_speak_none_;
    delete vi_global_whole_exam_timeout_;
    delete vi_global_start_driving_with_error_gear_;
    delete vi_global_start_driving_not_release_handbrake_;
    delete vi_global_jump_gear_;
    delete vi_global_car_shake_;
    delete vi_global_firingup_timeout_;
    delete vi_global_notify_push_fingerprint_;
    delete vi_global_fingerprint_pass_;
    delete vi_global_global_;
    delete vi_global_40100_;
    delete vi_global_40200_;
    delete vi_global_40300_;
    delete vi_global_40400_;
    delete vi_global_40500_;
    delete vi_global_40600_;
    delete vi_global_40601_;
    delete vi_global_40700_;
    delete vi_global_40800_;
    delete vi_global_40900_;
    delete vi_global_41000_;
    delete vi_global_41001_;
    delete vi_global_41100_;
    delete vi_global_41200_;
    delete vi_global_41300_;
    delete vi_global_41400_;
    delete vi_global_41500_;
    delete vi_global_41600_;
    delete vi_global_50001_;
    delete vi_global_50002_;
    delete vi_global_50003_;
    delete vi_global_50004_;
    delete vi_global_50005_;
    delete vi_global_50006_;
    delete vi_41600_not_flash_near_far_;
    delete vi_41600_not_open_near_;
    delete vi_41600_open_far_;
    delete vi_41600_not_open_lamp_;
  }
}

void Judge0::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Judge0::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Judge0_descriptor_;
}

const Judge0& Judge0::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageKm3Config_2eproto();
  return *default_instance_;
}

Judge0* Judge0::default_instance_ = NULL;

Judge0* Judge0::New() const {
  return new Judge0;
}

void Judge0::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    itemcode_ = 0;
    if (has_itemname()) {
      if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        itemname_->clear();
      }
    }
    if (has_max_time()) {
      if (max_time_ != NULL) max_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_max_stop_speed()) {
      if (max_stop_speed_ != NULL) max_stop_speed_->::OPMessage::judgeItem::Clear();
    }
    if (has_max_speed()) {
      if (max_speed_ != NULL) max_speed_->::OPMessage::judgeItem::Clear();
    }
    if (has_max_off_course_distance()) {
      if (max_off_course_distance_ != NULL) max_off_course_distance_->::OPMessage::judgeItem::Clear();
    }
    if (has_max_near_lamp_off_time()) {
      if (max_near_lamp_off_time_ != NULL) max_near_lamp_off_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_max_far_lamp_on_time()) {
      if (max_far_lamp_on_time_ != NULL) max_far_lamp_on_time_->::OPMessage::judgeItem::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_auto_gear()) {
      if (auto_gear_ != NULL) auto_gear_->::OPMessage::judgeItem::Clear();
    }
    if (has_max_first_gear_distance_once()) {
      if (max_first_gear_distance_once_ != NULL) max_first_gear_distance_once_->::OPMessage::judgeItem::Clear();
    }
    if (has_max_second_gear_distance_once()) {
      if (max_second_gear_distance_once_ != NULL) max_second_gear_distance_once_->::OPMessage::judgeItem::Clear();
    }
    if (has_max_first_gear_distance_global()) {
      if (max_first_gear_distance_global_ != NULL) max_first_gear_distance_global_->::OPMessage::judgeItem::Clear();
    }
    if (has_max_second_gear_distance_global()) {
      if (max_second_gear_distance_global_ != NULL) max_second_gear_distance_global_->::OPMessage::judgeItem::Clear();
    }
    if (has_min_third_gear_distance_global()) {
      if (min_third_gear_distance_global_ != NULL) min_third_gear_distance_global_->::OPMessage::judgeItem::Clear();
    }
    if (has_global_reach_speed()) {
      if (global_reach_speed_ != NULL) global_reach_speed_->::OPMessage::judgeItem::Clear();
    }
    if (has_min_global_reach_speed_distance()) {
      if (min_global_reach_speed_distance_ != NULL) min_global_reach_speed_distance_->::OPMessage::judgeItem::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    if (has_max_rpm()) {
      if (max_rpm_ != NULL) max_rpm_->::OPMessage::judgeItem::Clear();
    }
    if (has_max_neutral_distance_once()) {
      if (max_neutral_distance_once_ != NULL) max_neutral_distance_once_->::OPMessage::judgeItem::Clear();
    }
    if (has_gear_speed_match_0()) {
      if (gear_speed_match_0_ != NULL) gear_speed_match_0_->::OPMessage::judgeItem::Clear();
    }
    if (has_gear_speed_match_1()) {
      if (gear_speed_match_1_ != NULL) gear_speed_match_1_->::OPMessage::judgeItem::Clear();
    }
    if (has_gear_speed_match_2()) {
      if (gear_speed_match_2_ != NULL) gear_speed_match_2_->::OPMessage::judgeItem::Clear();
    }
    if (has_gear_speed_match_3()) {
      if (gear_speed_match_3_ != NULL) gear_speed_match_3_->::OPMessage::judgeItem::Clear();
    }
    if (has_gear_speed_match_4()) {
      if (gear_speed_match_4_ != NULL) gear_speed_match_4_->::OPMessage::judgeItem::Clear();
    }
    if (has_gear_speed_match_5()) {
      if (gear_speed_match_5_ != NULL) gear_speed_match_5_->::OPMessage::judgeItem::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    if (has_max_turn_lamp_on_time()) {
      if (max_turn_lamp_on_time_ != NULL) max_turn_lamp_on_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_max_neutral_time_once()) {
      if (max_neutral_time_once_ != NULL) max_neutral_time_once_->::OPMessage::judgeItem::Clear();
    }
    if (has_gear_speed_match_time()) {
      if (gear_speed_match_time_ != NULL) gear_speed_match_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_foot_brake_beep()) {
      if (foot_brake_beep_ != NULL) foot_brake_beep_->::OPMessage::judgeItem::Clear();
    }
    if (has_deduct_voice_speak_mode()) {
      if (deduct_voice_speak_mode_ != NULL) deduct_voice_speak_mode_->::OPMessage::judgeItem::Clear();
    }
    if (has_car_shake_rpm_threshold()) {
      if (car_shake_rpm_threshold_ != NULL) car_shake_rpm_threshold_->::OPMessage::judgeItem::Clear();
    }
    if (has_car_shake_time_threshold()) {
      if (car_shake_time_threshold_ != NULL) car_shake_time_threshold_->::OPMessage::judgeItem::Clear();
    }
    if (has_repeat_voice_time_delay()) {
      if (repeat_voice_time_delay_ != NULL) repeat_voice_time_delay_->::OPMessage::judgeItem::Clear();
    }
  }
  if (_has_bits_[32 / 32] & 255) {
    if (has_min_fourth_gear_distance_global()) {
      if (min_fourth_gear_distance_global_ != NULL) min_fourth_gear_distance_global_->::OPMessage::judgeItem::Clear();
    }
    if (has_vi_global_app_start()) {
      if (vi_global_app_start_ != NULL) vi_global_app_start_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_global_not_wear_seat_belts()) {
      if (vi_global_not_wear_seat_belts_ != NULL) vi_global_not_wear_seat_belts_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_global_not_close_door()) {
      if (vi_global_not_close_door_ != NULL) vi_global_not_close_door_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_global_falmeout()) {
      if (vi_global_falmeout_ != NULL) vi_global_falmeout_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_global_overspeed()) {
      if (vi_global_overspeed_ != NULL) vi_global_overspeed_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_global_first_gear_distance_overrange_once()) {
      if (vi_global_first_gear_distance_overrange_once_ != NULL) vi_global_first_gear_distance_overrange_once_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_global_second_gear_distance_overrange_once()) {
      if (vi_global_second_gear_distance_overrange_once_ != NULL) vi_global_second_gear_distance_overrange_once_->::OPMessage::voiceItem::Clear();
    }
  }
  if (_has_bits_[40 / 32] & 65280) {
    if (has_vi_global_first_gear_distance_overrange_global()) {
      if (vi_global_first_gear_distance_overrange_global_ != NULL) vi_global_first_gear_distance_overrange_global_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_global_second_gear_distance_overrange_global()) {
      if (vi_global_second_gear_distance_overrange_global_ != NULL) vi_global_second_gear_distance_overrange_global_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_global_third_gear_distance_not_enough()) {
      if (vi_global_third_gear_distance_not_enough_ != NULL) vi_global_third_gear_distance_not_enough_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_global_fourth_gear_distance_not_enough()) {
      if (vi_global_fourth_gear_distance_not_enough_ != NULL) vi_global_fourth_gear_distance_not_enough_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_global_neutral_driving()) {
      if (vi_global_neutral_driving_ != NULL) vi_global_neutral_driving_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_global_high_speed_not_enough()) {
      if (vi_global_high_speed_not_enough_ != NULL) vi_global_high_speed_not_enough_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_global_rpm_overrange()) {
      if (vi_global_rpm_overrange_ != NULL) vi_global_rpm_overrange_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_global_gear_speed_not_match()) {
      if (vi_global_gear_speed_not_match_ != NULL) vi_global_gear_speed_not_match_->::OPMessage::voiceItem::Clear();
    }
  }
  if (_has_bits_[48 / 32] & 16711680) {
    if (has_vi_global_exam_timeout()) {
      if (vi_global_exam_timeout_ != NULL) vi_global_exam_timeout_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_global_turn_lamp_long_time_on()) {
      if (vi_global_turn_lamp_long_time_on_ != NULL) vi_global_turn_lamp_long_time_on_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_global_road_error()) {
      if (vi_global_road_error_ != NULL) vi_global_road_error_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_global_exam_over_pass()) {
      if (vi_global_exam_over_pass_ != NULL) vi_global_exam_over_pass_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_global_exam_over_not_pass()) {
      if (vi_global_exam_over_not_pass_ != NULL) vi_global_exam_over_not_pass_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_global_delay_speak_start()) {
      if (vi_global_delay_speak_start_ != NULL) vi_global_delay_speak_start_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_global_delay_speak_stop()) {
      if (vi_global_delay_speak_stop_ != NULL) vi_global_delay_speak_stop_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_global_delay_speak_none()) {
      if (vi_global_delay_speak_none_ != NULL) vi_global_delay_speak_none_->::OPMessage::voiceItem::Clear();
    }
  }
  if (_has_bits_[56 / 32] & 4278190080) {
    if (has_vi_global_whole_exam_timeout()) {
      if (vi_global_whole_exam_timeout_ != NULL) vi_global_whole_exam_timeout_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_global_start_driving_with_error_gear()) {
      if (vi_global_start_driving_with_error_gear_ != NULL) vi_global_start_driving_with_error_gear_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_global_start_driving_not_release_handbrake()) {
      if (vi_global_start_driving_not_release_handbrake_ != NULL) vi_global_start_driving_not_release_handbrake_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_global_jump_gear()) {
      if (vi_global_jump_gear_ != NULL) vi_global_jump_gear_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_global_car_shake()) {
      if (vi_global_car_shake_ != NULL) vi_global_car_shake_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_global_firingup_timeout()) {
      if (vi_global_firingup_timeout_ != NULL) vi_global_firingup_timeout_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_global_notify_push_fingerprint()) {
      if (vi_global_notify_push_fingerprint_ != NULL) vi_global_notify_push_fingerprint_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_global_fingerprint_pass()) {
      if (vi_global_fingerprint_pass_ != NULL) vi_global_fingerprint_pass_->::OPMessage::voiceItem::Clear();
    }
  }
  if (_has_bits_[64 / 32] & 255) {
    if (has_vi_global_global()) {
      if (vi_global_global_ != NULL) vi_global_global_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_global_40100()) {
      if (vi_global_40100_ != NULL) vi_global_40100_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_global_40200()) {
      if (vi_global_40200_ != NULL) vi_global_40200_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_global_40300()) {
      if (vi_global_40300_ != NULL) vi_global_40300_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_global_40400()) {
      if (vi_global_40400_ != NULL) vi_global_40400_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_global_40500()) {
      if (vi_global_40500_ != NULL) vi_global_40500_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_global_40600()) {
      if (vi_global_40600_ != NULL) vi_global_40600_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_global_40601()) {
      if (vi_global_40601_ != NULL) vi_global_40601_->::OPMessage::voiceItem::Clear();
    }
  }
  if (_has_bits_[72 / 32] & 65280) {
    if (has_vi_global_40700()) {
      if (vi_global_40700_ != NULL) vi_global_40700_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_global_40800()) {
      if (vi_global_40800_ != NULL) vi_global_40800_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_global_40900()) {
      if (vi_global_40900_ != NULL) vi_global_40900_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_global_41000()) {
      if (vi_global_41000_ != NULL) vi_global_41000_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_global_41001()) {
      if (vi_global_41001_ != NULL) vi_global_41001_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_global_41100()) {
      if (vi_global_41100_ != NULL) vi_global_41100_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_global_41200()) {
      if (vi_global_41200_ != NULL) vi_global_41200_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_global_41300()) {
      if (vi_global_41300_ != NULL) vi_global_41300_->::OPMessage::voiceItem::Clear();
    }
  }
  if (_has_bits_[80 / 32] & 16711680) {
    if (has_vi_global_41400()) {
      if (vi_global_41400_ != NULL) vi_global_41400_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_global_41500()) {
      if (vi_global_41500_ != NULL) vi_global_41500_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_global_41600()) {
      if (vi_global_41600_ != NULL) vi_global_41600_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_global_50001()) {
      if (vi_global_50001_ != NULL) vi_global_50001_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_global_50002()) {
      if (vi_global_50002_ != NULL) vi_global_50002_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_global_50003()) {
      if (vi_global_50003_ != NULL) vi_global_50003_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_global_50004()) {
      if (vi_global_50004_ != NULL) vi_global_50004_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_global_50005()) {
      if (vi_global_50005_ != NULL) vi_global_50005_->::OPMessage::voiceItem::Clear();
    }
  }
  if (_has_bits_[88 / 32] & 520093696) {
    if (has_vi_global_50006()) {
      if (vi_global_50006_ != NULL) vi_global_50006_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_41600_not_flash_near_far()) {
      if (vi_41600_not_flash_near_far_ != NULL) vi_41600_not_flash_near_far_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_41600_not_open_near()) {
      if (vi_41600_not_open_near_ != NULL) vi_41600_not_open_near_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_41600_open_far()) {
      if (vi_41600_open_far_ != NULL) vi_41600_open_far_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_41600_not_open_lamp()) {
      if (vi_41600_not_open_lamp_ != NULL) vi_41600_not_open_lamp_->::OPMessage::voiceItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Judge0::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OPMessage.Judge0)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemcode_)));
          set_has_itemcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_itemName;
        break;
      }

      // optional string itemName = 2;
      case 2: {
        if (tag == 18) {
         parse_itemName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itemname().data(), this->itemname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "itemname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_max_time;
        break;
      }

      // optional .OPMessage.judgeItem max_time = 3;
      case 3: {
        if (tag == 26) {
         parse_max_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_max_stop_speed;
        break;
      }

      // optional .OPMessage.judgeItem max_stop_speed = 4;
      case 4: {
        if (tag == 34) {
         parse_max_stop_speed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_stop_speed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_max_speed;
        break;
      }

      // optional .OPMessage.judgeItem max_speed = 5;
      case 5: {
        if (tag == 42) {
         parse_max_speed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_speed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_max_off_course_distance;
        break;
      }

      // optional .OPMessage.judgeItem max_off_course_distance = 6;
      case 6: {
        if (tag == 50) {
         parse_max_off_course_distance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_off_course_distance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_max_near_lamp_off_time;
        break;
      }

      // optional .OPMessage.judgeItem max_near_lamp_off_time = 7;
      case 7: {
        if (tag == 58) {
         parse_max_near_lamp_off_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_near_lamp_off_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_max_far_lamp_on_time;
        break;
      }

      // optional .OPMessage.judgeItem max_far_lamp_on_time = 8;
      case 8: {
        if (tag == 66) {
         parse_max_far_lamp_on_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_far_lamp_on_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_auto_gear;
        break;
      }

      // optional .OPMessage.judgeItem auto_gear = 9;
      case 9: {
        if (tag == 74) {
         parse_auto_gear:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_auto_gear()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_max_first_gear_distance_once;
        break;
      }

      // optional .OPMessage.judgeItem max_first_gear_distance_once = 10;
      case 10: {
        if (tag == 82) {
         parse_max_first_gear_distance_once:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_first_gear_distance_once()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_max_second_gear_distance_once;
        break;
      }

      // optional .OPMessage.judgeItem max_second_gear_distance_once = 11;
      case 11: {
        if (tag == 90) {
         parse_max_second_gear_distance_once:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_second_gear_distance_once()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_max_first_gear_distance_global;
        break;
      }

      // optional .OPMessage.judgeItem max_first_gear_distance_global = 12;
      case 12: {
        if (tag == 98) {
         parse_max_first_gear_distance_global:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_first_gear_distance_global()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_max_second_gear_distance_global;
        break;
      }

      // optional .OPMessage.judgeItem max_second_gear_distance_global = 13;
      case 13: {
        if (tag == 106) {
         parse_max_second_gear_distance_global:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_second_gear_distance_global()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_min_third_gear_distance_global;
        break;
      }

      // optional .OPMessage.judgeItem min_third_gear_distance_global = 14;
      case 14: {
        if (tag == 114) {
         parse_min_third_gear_distance_global:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_third_gear_distance_global()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_global_reach_speed;
        break;
      }

      // optional .OPMessage.judgeItem global_reach_speed = 15;
      case 15: {
        if (tag == 122) {
         parse_global_reach_speed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_global_reach_speed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_min_global_reach_speed_distance;
        break;
      }

      // optional .OPMessage.judgeItem min_global_reach_speed_distance = 16;
      case 16: {
        if (tag == 130) {
         parse_min_global_reach_speed_distance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_global_reach_speed_distance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_max_rpm;
        break;
      }

      // optional .OPMessage.judgeItem max_rpm = 17;
      case 17: {
        if (tag == 138) {
         parse_max_rpm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_rpm()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_max_neutral_distance_once;
        break;
      }

      // optional .OPMessage.judgeItem max_neutral_distance_once = 18;
      case 18: {
        if (tag == 146) {
         parse_max_neutral_distance_once:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_neutral_distance_once()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_gear_speed_match_0;
        break;
      }

      // optional .OPMessage.judgeItem gear_speed_match_0 = 19;
      case 19: {
        if (tag == 154) {
         parse_gear_speed_match_0:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gear_speed_match_0()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_gear_speed_match_1;
        break;
      }

      // optional .OPMessage.judgeItem gear_speed_match_1 = 20;
      case 20: {
        if (tag == 162) {
         parse_gear_speed_match_1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gear_speed_match_1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_gear_speed_match_2;
        break;
      }

      // optional .OPMessage.judgeItem gear_speed_match_2 = 21;
      case 21: {
        if (tag == 170) {
         parse_gear_speed_match_2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gear_speed_match_2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_gear_speed_match_3;
        break;
      }

      // optional .OPMessage.judgeItem gear_speed_match_3 = 22;
      case 22: {
        if (tag == 178) {
         parse_gear_speed_match_3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gear_speed_match_3()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_gear_speed_match_4;
        break;
      }

      // optional .OPMessage.judgeItem gear_speed_match_4 = 23;
      case 23: {
        if (tag == 186) {
         parse_gear_speed_match_4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gear_speed_match_4()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_gear_speed_match_5;
        break;
      }

      // optional .OPMessage.judgeItem gear_speed_match_5 = 24;
      case 24: {
        if (tag == 194) {
         parse_gear_speed_match_5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gear_speed_match_5()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_max_turn_lamp_on_time;
        break;
      }

      // optional .OPMessage.judgeItem max_turn_lamp_on_time = 25;
      case 25: {
        if (tag == 202) {
         parse_max_turn_lamp_on_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_turn_lamp_on_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_max_neutral_time_once;
        break;
      }

      // optional .OPMessage.judgeItem max_neutral_time_once = 26;
      case 26: {
        if (tag == 210) {
         parse_max_neutral_time_once:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_neutral_time_once()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_gear_speed_match_time;
        break;
      }

      // optional .OPMessage.judgeItem gear_speed_match_time = 27;
      case 27: {
        if (tag == 218) {
         parse_gear_speed_match_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gear_speed_match_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_foot_brake_beep;
        break;
      }

      // optional .OPMessage.judgeItem foot_brake_beep = 28;
      case 28: {
        if (tag == 226) {
         parse_foot_brake_beep:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_foot_brake_beep()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_deduct_voice_speak_mode;
        break;
      }

      // optional .OPMessage.judgeItem deduct_voice_speak_mode = 29;
      case 29: {
        if (tag == 234) {
         parse_deduct_voice_speak_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deduct_voice_speak_mode()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_car_shake_rpm_threshold;
        break;
      }

      // optional .OPMessage.judgeItem car_shake_rpm_threshold = 30;
      case 30: {
        if (tag == 242) {
         parse_car_shake_rpm_threshold:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_car_shake_rpm_threshold()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_car_shake_time_threshold;
        break;
      }

      // optional .OPMessage.judgeItem car_shake_time_threshold = 31;
      case 31: {
        if (tag == 250) {
         parse_car_shake_time_threshold:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_car_shake_time_threshold()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_repeat_voice_time_delay;
        break;
      }

      // optional .OPMessage.judgeItem repeat_voice_time_delay = 32;
      case 32: {
        if (tag == 258) {
         parse_repeat_voice_time_delay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_repeat_voice_time_delay()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(266)) goto parse_min_fourth_gear_distance_global;
        break;
      }

      // optional .OPMessage.judgeItem min_fourth_gear_distance_global = 33;
      case 33: {
        if (tag == 266) {
         parse_min_fourth_gear_distance_global:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_fourth_gear_distance_global()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(274)) goto parse_vi_global_app_start;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_app_start = 34;
      case 34: {
        if (tag == 274) {
         parse_vi_global_app_start:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_app_start()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(282)) goto parse_vi_global_not_wear_seat_belts;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_not_wear_seat_belts = 35;
      case 35: {
        if (tag == 282) {
         parse_vi_global_not_wear_seat_belts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_not_wear_seat_belts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(290)) goto parse_vi_global_not_close_door;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_not_close_door = 36;
      case 36: {
        if (tag == 290) {
         parse_vi_global_not_close_door:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_not_close_door()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(298)) goto parse_vi_global_falmeout;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_falmeout = 37;
      case 37: {
        if (tag == 298) {
         parse_vi_global_falmeout:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_falmeout()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(306)) goto parse_vi_global_overspeed;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_overspeed = 38;
      case 38: {
        if (tag == 306) {
         parse_vi_global_overspeed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_overspeed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(314)) goto parse_vi_global_first_gear_distance_overrange_once;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_first_gear_distance_overrange_once = 39;
      case 39: {
        if (tag == 314) {
         parse_vi_global_first_gear_distance_overrange_once:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_first_gear_distance_overrange_once()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(322)) goto parse_vi_global_second_gear_distance_overrange_once;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_second_gear_distance_overrange_once = 40;
      case 40: {
        if (tag == 322) {
         parse_vi_global_second_gear_distance_overrange_once:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_second_gear_distance_overrange_once()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(330)) goto parse_vi_global_first_gear_distance_overrange_global;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_first_gear_distance_overrange_global = 41;
      case 41: {
        if (tag == 330) {
         parse_vi_global_first_gear_distance_overrange_global:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_first_gear_distance_overrange_global()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(338)) goto parse_vi_global_second_gear_distance_overrange_global;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_second_gear_distance_overrange_global = 42;
      case 42: {
        if (tag == 338) {
         parse_vi_global_second_gear_distance_overrange_global:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_second_gear_distance_overrange_global()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(346)) goto parse_vi_global_third_gear_distance_not_enough;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_third_gear_distance_not_enough = 43;
      case 43: {
        if (tag == 346) {
         parse_vi_global_third_gear_distance_not_enough:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_third_gear_distance_not_enough()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(354)) goto parse_vi_global_fourth_gear_distance_not_enough;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_fourth_gear_distance_not_enough = 44;
      case 44: {
        if (tag == 354) {
         parse_vi_global_fourth_gear_distance_not_enough:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_fourth_gear_distance_not_enough()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(362)) goto parse_vi_global_neutral_driving;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_neutral_driving = 45;
      case 45: {
        if (tag == 362) {
         parse_vi_global_neutral_driving:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_neutral_driving()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(370)) goto parse_vi_global_high_speed_not_enough;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_high_speed_not_enough = 46;
      case 46: {
        if (tag == 370) {
         parse_vi_global_high_speed_not_enough:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_high_speed_not_enough()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(378)) goto parse_vi_global_rpm_overrange;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_rpm_overrange = 47;
      case 47: {
        if (tag == 378) {
         parse_vi_global_rpm_overrange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_rpm_overrange()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(386)) goto parse_vi_global_gear_speed_not_match;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_gear_speed_not_match = 48;
      case 48: {
        if (tag == 386) {
         parse_vi_global_gear_speed_not_match:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_gear_speed_not_match()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(394)) goto parse_vi_global_exam_timeout;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_exam_timeout = 49;
      case 49: {
        if (tag == 394) {
         parse_vi_global_exam_timeout:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_exam_timeout()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(402)) goto parse_vi_global_turn_lamp_long_time_on;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_turn_lamp_long_time_on = 50;
      case 50: {
        if (tag == 402) {
         parse_vi_global_turn_lamp_long_time_on:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_turn_lamp_long_time_on()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(410)) goto parse_vi_global_road_error;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_road_error = 51;
      case 51: {
        if (tag == 410) {
         parse_vi_global_road_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_road_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(418)) goto parse_vi_global_exam_over_pass;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_exam_over_pass = 52;
      case 52: {
        if (tag == 418) {
         parse_vi_global_exam_over_pass:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_exam_over_pass()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(426)) goto parse_vi_global_exam_over_not_pass;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_exam_over_not_pass = 53;
      case 53: {
        if (tag == 426) {
         parse_vi_global_exam_over_not_pass:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_exam_over_not_pass()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(434)) goto parse_vi_global_delay_speak_start;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_delay_speak_start = 54;
      case 54: {
        if (tag == 434) {
         parse_vi_global_delay_speak_start:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_delay_speak_start()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(442)) goto parse_vi_global_delay_speak_stop;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_delay_speak_stop = 55;
      case 55: {
        if (tag == 442) {
         parse_vi_global_delay_speak_stop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_delay_speak_stop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(450)) goto parse_vi_global_delay_speak_none;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_delay_speak_none = 56;
      case 56: {
        if (tag == 450) {
         parse_vi_global_delay_speak_none:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_delay_speak_none()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(458)) goto parse_vi_global_whole_exam_timeout;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_whole_exam_timeout = 57;
      case 57: {
        if (tag == 458) {
         parse_vi_global_whole_exam_timeout:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_whole_exam_timeout()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(466)) goto parse_vi_global_start_driving_with_error_gear;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_start_driving_with_error_gear = 58;
      case 58: {
        if (tag == 466) {
         parse_vi_global_start_driving_with_error_gear:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_start_driving_with_error_gear()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(474)) goto parse_vi_global_start_driving_not_release_handbrake;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_start_driving_not_release_handbrake = 59;
      case 59: {
        if (tag == 474) {
         parse_vi_global_start_driving_not_release_handbrake:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_start_driving_not_release_handbrake()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(482)) goto parse_vi_global_jump_gear;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_jump_gear = 60;
      case 60: {
        if (tag == 482) {
         parse_vi_global_jump_gear:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_jump_gear()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(490)) goto parse_vi_global_car_shake;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_car_shake = 61;
      case 61: {
        if (tag == 490) {
         parse_vi_global_car_shake:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_car_shake()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(498)) goto parse_vi_global_firingup_timeout;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_firingup_timeout = 62;
      case 62: {
        if (tag == 498) {
         parse_vi_global_firingup_timeout:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_firingup_timeout()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(506)) goto parse_vi_global_notify_push_fingerprint;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_notify_push_fingerprint = 63;
      case 63: {
        if (tag == 506) {
         parse_vi_global_notify_push_fingerprint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_notify_push_fingerprint()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(514)) goto parse_vi_global_fingerprint_pass;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_fingerprint_pass = 64;
      case 64: {
        if (tag == 514) {
         parse_vi_global_fingerprint_pass:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_fingerprint_pass()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(522)) goto parse_vi_global_global;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_global = 65;
      case 65: {
        if (tag == 522) {
         parse_vi_global_global:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_global()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(530)) goto parse_vi_global_40100;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_40100 = 66;
      case 66: {
        if (tag == 530) {
         parse_vi_global_40100:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_40100()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(538)) goto parse_vi_global_40200;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_40200 = 67;
      case 67: {
        if (tag == 538) {
         parse_vi_global_40200:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_40200()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(546)) goto parse_vi_global_40300;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_40300 = 68;
      case 68: {
        if (tag == 546) {
         parse_vi_global_40300:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_40300()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(554)) goto parse_vi_global_40400;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_40400 = 69;
      case 69: {
        if (tag == 554) {
         parse_vi_global_40400:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_40400()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(562)) goto parse_vi_global_40500;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_40500 = 70;
      case 70: {
        if (tag == 562) {
         parse_vi_global_40500:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_40500()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(570)) goto parse_vi_global_40600;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_40600 = 71;
      case 71: {
        if (tag == 570) {
         parse_vi_global_40600:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_40600()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(578)) goto parse_vi_global_40601;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_40601 = 72;
      case 72: {
        if (tag == 578) {
         parse_vi_global_40601:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_40601()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(586)) goto parse_vi_global_40700;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_40700 = 73;
      case 73: {
        if (tag == 586) {
         parse_vi_global_40700:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_40700()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(594)) goto parse_vi_global_40800;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_40800 = 74;
      case 74: {
        if (tag == 594) {
         parse_vi_global_40800:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_40800()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(602)) goto parse_vi_global_40900;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_40900 = 75;
      case 75: {
        if (tag == 602) {
         parse_vi_global_40900:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_40900()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(610)) goto parse_vi_global_41000;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_41000 = 76;
      case 76: {
        if (tag == 610) {
         parse_vi_global_41000:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_41000()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(618)) goto parse_vi_global_41001;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_41001 = 77;
      case 77: {
        if (tag == 618) {
         parse_vi_global_41001:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_41001()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(626)) goto parse_vi_global_41100;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_41100 = 78;
      case 78: {
        if (tag == 626) {
         parse_vi_global_41100:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_41100()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(634)) goto parse_vi_global_41200;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_41200 = 79;
      case 79: {
        if (tag == 634) {
         parse_vi_global_41200:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_41200()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(642)) goto parse_vi_global_41300;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_41300 = 80;
      case 80: {
        if (tag == 642) {
         parse_vi_global_41300:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_41300()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(650)) goto parse_vi_global_41400;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_41400 = 81;
      case 81: {
        if (tag == 650) {
         parse_vi_global_41400:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_41400()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(658)) goto parse_vi_global_41500;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_41500 = 82;
      case 82: {
        if (tag == 658) {
         parse_vi_global_41500:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_41500()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(666)) goto parse_vi_global_41600;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_41600 = 83;
      case 83: {
        if (tag == 666) {
         parse_vi_global_41600:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_41600()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(674)) goto parse_vi_global_50001;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_50001 = 84;
      case 84: {
        if (tag == 674) {
         parse_vi_global_50001:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_50001()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(682)) goto parse_vi_global_50002;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_50002 = 85;
      case 85: {
        if (tag == 682) {
         parse_vi_global_50002:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_50002()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(690)) goto parse_vi_global_50003;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_50003 = 86;
      case 86: {
        if (tag == 690) {
         parse_vi_global_50003:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_50003()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(698)) goto parse_vi_global_50004;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_50004 = 87;
      case 87: {
        if (tag == 698) {
         parse_vi_global_50004:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_50004()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(706)) goto parse_vi_global_50005;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_50005 = 88;
      case 88: {
        if (tag == 706) {
         parse_vi_global_50005:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_50005()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(714)) goto parse_vi_global_50006;
        break;
      }

      // optional .OPMessage.voiceItem vi_global_50006 = 89;
      case 89: {
        if (tag == 714) {
         parse_vi_global_50006:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_global_50006()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(722)) goto parse_vi_41600_not_flash_near_far;
        break;
      }

      // optional .OPMessage.voiceItem vi_41600_not_flash_near_far = 90;
      case 90: {
        if (tag == 722) {
         parse_vi_41600_not_flash_near_far:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_41600_not_flash_near_far()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(730)) goto parse_vi_41600_not_open_near;
        break;
      }

      // optional .OPMessage.voiceItem vi_41600_not_open_near = 91;
      case 91: {
        if (tag == 730) {
         parse_vi_41600_not_open_near:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_41600_not_open_near()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(738)) goto parse_vi_41600_open_far;
        break;
      }

      // optional .OPMessage.voiceItem vi_41600_open_far = 92;
      case 92: {
        if (tag == 738) {
         parse_vi_41600_open_far:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_41600_open_far()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(746)) goto parse_vi_41600_not_open_lamp;
        break;
      }

      // optional .OPMessage.voiceItem vi_41600_not_open_lamp = 93;
      case 93: {
        if (tag == 746) {
         parse_vi_41600_not_open_lamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_41600_not_open_lamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OPMessage.Judge0)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OPMessage.Judge0)
  return false;
#undef DO_
}

void Judge0::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OPMessage.Judge0)
  // optional int32 itemCode = 1;
  if (has_itemcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemcode(), output);
  }

  // optional string itemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->itemname(), output);
  }

  // optional .OPMessage.judgeItem max_time = 3;
  if (has_max_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->max_time(), output);
  }

  // optional .OPMessage.judgeItem max_stop_speed = 4;
  if (has_max_stop_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->max_stop_speed(), output);
  }

  // optional .OPMessage.judgeItem max_speed = 5;
  if (has_max_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->max_speed(), output);
  }

  // optional .OPMessage.judgeItem max_off_course_distance = 6;
  if (has_max_off_course_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->max_off_course_distance(), output);
  }

  // optional .OPMessage.judgeItem max_near_lamp_off_time = 7;
  if (has_max_near_lamp_off_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->max_near_lamp_off_time(), output);
  }

  // optional .OPMessage.judgeItem max_far_lamp_on_time = 8;
  if (has_max_far_lamp_on_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->max_far_lamp_on_time(), output);
  }

  // optional .OPMessage.judgeItem auto_gear = 9;
  if (has_auto_gear()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->auto_gear(), output);
  }

  // optional .OPMessage.judgeItem max_first_gear_distance_once = 10;
  if (has_max_first_gear_distance_once()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->max_first_gear_distance_once(), output);
  }

  // optional .OPMessage.judgeItem max_second_gear_distance_once = 11;
  if (has_max_second_gear_distance_once()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->max_second_gear_distance_once(), output);
  }

  // optional .OPMessage.judgeItem max_first_gear_distance_global = 12;
  if (has_max_first_gear_distance_global()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->max_first_gear_distance_global(), output);
  }

  // optional .OPMessage.judgeItem max_second_gear_distance_global = 13;
  if (has_max_second_gear_distance_global()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->max_second_gear_distance_global(), output);
  }

  // optional .OPMessage.judgeItem min_third_gear_distance_global = 14;
  if (has_min_third_gear_distance_global()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->min_third_gear_distance_global(), output);
  }

  // optional .OPMessage.judgeItem global_reach_speed = 15;
  if (has_global_reach_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->global_reach_speed(), output);
  }

  // optional .OPMessage.judgeItem min_global_reach_speed_distance = 16;
  if (has_min_global_reach_speed_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->min_global_reach_speed_distance(), output);
  }

  // optional .OPMessage.judgeItem max_rpm = 17;
  if (has_max_rpm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->max_rpm(), output);
  }

  // optional .OPMessage.judgeItem max_neutral_distance_once = 18;
  if (has_max_neutral_distance_once()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->max_neutral_distance_once(), output);
  }

  // optional .OPMessage.judgeItem gear_speed_match_0 = 19;
  if (has_gear_speed_match_0()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->gear_speed_match_0(), output);
  }

  // optional .OPMessage.judgeItem gear_speed_match_1 = 20;
  if (has_gear_speed_match_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->gear_speed_match_1(), output);
  }

  // optional .OPMessage.judgeItem gear_speed_match_2 = 21;
  if (has_gear_speed_match_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->gear_speed_match_2(), output);
  }

  // optional .OPMessage.judgeItem gear_speed_match_3 = 22;
  if (has_gear_speed_match_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->gear_speed_match_3(), output);
  }

  // optional .OPMessage.judgeItem gear_speed_match_4 = 23;
  if (has_gear_speed_match_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->gear_speed_match_4(), output);
  }

  // optional .OPMessage.judgeItem gear_speed_match_5 = 24;
  if (has_gear_speed_match_5()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->gear_speed_match_5(), output);
  }

  // optional .OPMessage.judgeItem max_turn_lamp_on_time = 25;
  if (has_max_turn_lamp_on_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->max_turn_lamp_on_time(), output);
  }

  // optional .OPMessage.judgeItem max_neutral_time_once = 26;
  if (has_max_neutral_time_once()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->max_neutral_time_once(), output);
  }

  // optional .OPMessage.judgeItem gear_speed_match_time = 27;
  if (has_gear_speed_match_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->gear_speed_match_time(), output);
  }

  // optional .OPMessage.judgeItem foot_brake_beep = 28;
  if (has_foot_brake_beep()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->foot_brake_beep(), output);
  }

  // optional .OPMessage.judgeItem deduct_voice_speak_mode = 29;
  if (has_deduct_voice_speak_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->deduct_voice_speak_mode(), output);
  }

  // optional .OPMessage.judgeItem car_shake_rpm_threshold = 30;
  if (has_car_shake_rpm_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->car_shake_rpm_threshold(), output);
  }

  // optional .OPMessage.judgeItem car_shake_time_threshold = 31;
  if (has_car_shake_time_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->car_shake_time_threshold(), output);
  }

  // optional .OPMessage.judgeItem repeat_voice_time_delay = 32;
  if (has_repeat_voice_time_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->repeat_voice_time_delay(), output);
  }

  // optional .OPMessage.judgeItem min_fourth_gear_distance_global = 33;
  if (has_min_fourth_gear_distance_global()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->min_fourth_gear_distance_global(), output);
  }

  // optional .OPMessage.voiceItem vi_global_app_start = 34;
  if (has_vi_global_app_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->vi_global_app_start(), output);
  }

  // optional .OPMessage.voiceItem vi_global_not_wear_seat_belts = 35;
  if (has_vi_global_not_wear_seat_belts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->vi_global_not_wear_seat_belts(), output);
  }

  // optional .OPMessage.voiceItem vi_global_not_close_door = 36;
  if (has_vi_global_not_close_door()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->vi_global_not_close_door(), output);
  }

  // optional .OPMessage.voiceItem vi_global_falmeout = 37;
  if (has_vi_global_falmeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, this->vi_global_falmeout(), output);
  }

  // optional .OPMessage.voiceItem vi_global_overspeed = 38;
  if (has_vi_global_overspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, this->vi_global_overspeed(), output);
  }

  // optional .OPMessage.voiceItem vi_global_first_gear_distance_overrange_once = 39;
  if (has_vi_global_first_gear_distance_overrange_once()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, this->vi_global_first_gear_distance_overrange_once(), output);
  }

  // optional .OPMessage.voiceItem vi_global_second_gear_distance_overrange_once = 40;
  if (has_vi_global_second_gear_distance_overrange_once()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->vi_global_second_gear_distance_overrange_once(), output);
  }

  // optional .OPMessage.voiceItem vi_global_first_gear_distance_overrange_global = 41;
  if (has_vi_global_first_gear_distance_overrange_global()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, this->vi_global_first_gear_distance_overrange_global(), output);
  }

  // optional .OPMessage.voiceItem vi_global_second_gear_distance_overrange_global = 42;
  if (has_vi_global_second_gear_distance_overrange_global()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, this->vi_global_second_gear_distance_overrange_global(), output);
  }

  // optional .OPMessage.voiceItem vi_global_third_gear_distance_not_enough = 43;
  if (has_vi_global_third_gear_distance_not_enough()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43, this->vi_global_third_gear_distance_not_enough(), output);
  }

  // optional .OPMessage.voiceItem vi_global_fourth_gear_distance_not_enough = 44;
  if (has_vi_global_fourth_gear_distance_not_enough()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      44, this->vi_global_fourth_gear_distance_not_enough(), output);
  }

  // optional .OPMessage.voiceItem vi_global_neutral_driving = 45;
  if (has_vi_global_neutral_driving()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      45, this->vi_global_neutral_driving(), output);
  }

  // optional .OPMessage.voiceItem vi_global_high_speed_not_enough = 46;
  if (has_vi_global_high_speed_not_enough()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      46, this->vi_global_high_speed_not_enough(), output);
  }

  // optional .OPMessage.voiceItem vi_global_rpm_overrange = 47;
  if (has_vi_global_rpm_overrange()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      47, this->vi_global_rpm_overrange(), output);
  }

  // optional .OPMessage.voiceItem vi_global_gear_speed_not_match = 48;
  if (has_vi_global_gear_speed_not_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      48, this->vi_global_gear_speed_not_match(), output);
  }

  // optional .OPMessage.voiceItem vi_global_exam_timeout = 49;
  if (has_vi_global_exam_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      49, this->vi_global_exam_timeout(), output);
  }

  // optional .OPMessage.voiceItem vi_global_turn_lamp_long_time_on = 50;
  if (has_vi_global_turn_lamp_long_time_on()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->vi_global_turn_lamp_long_time_on(), output);
  }

  // optional .OPMessage.voiceItem vi_global_road_error = 51;
  if (has_vi_global_road_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, this->vi_global_road_error(), output);
  }

  // optional .OPMessage.voiceItem vi_global_exam_over_pass = 52;
  if (has_vi_global_exam_over_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      52, this->vi_global_exam_over_pass(), output);
  }

  // optional .OPMessage.voiceItem vi_global_exam_over_not_pass = 53;
  if (has_vi_global_exam_over_not_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      53, this->vi_global_exam_over_not_pass(), output);
  }

  // optional .OPMessage.voiceItem vi_global_delay_speak_start = 54;
  if (has_vi_global_delay_speak_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      54, this->vi_global_delay_speak_start(), output);
  }

  // optional .OPMessage.voiceItem vi_global_delay_speak_stop = 55;
  if (has_vi_global_delay_speak_stop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      55, this->vi_global_delay_speak_stop(), output);
  }

  // optional .OPMessage.voiceItem vi_global_delay_speak_none = 56;
  if (has_vi_global_delay_speak_none()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      56, this->vi_global_delay_speak_none(), output);
  }

  // optional .OPMessage.voiceItem vi_global_whole_exam_timeout = 57;
  if (has_vi_global_whole_exam_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      57, this->vi_global_whole_exam_timeout(), output);
  }

  // optional .OPMessage.voiceItem vi_global_start_driving_with_error_gear = 58;
  if (has_vi_global_start_driving_with_error_gear()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      58, this->vi_global_start_driving_with_error_gear(), output);
  }

  // optional .OPMessage.voiceItem vi_global_start_driving_not_release_handbrake = 59;
  if (has_vi_global_start_driving_not_release_handbrake()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      59, this->vi_global_start_driving_not_release_handbrake(), output);
  }

  // optional .OPMessage.voiceItem vi_global_jump_gear = 60;
  if (has_vi_global_jump_gear()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      60, this->vi_global_jump_gear(), output);
  }

  // optional .OPMessage.voiceItem vi_global_car_shake = 61;
  if (has_vi_global_car_shake()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      61, this->vi_global_car_shake(), output);
  }

  // optional .OPMessage.voiceItem vi_global_firingup_timeout = 62;
  if (has_vi_global_firingup_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      62, this->vi_global_firingup_timeout(), output);
  }

  // optional .OPMessage.voiceItem vi_global_notify_push_fingerprint = 63;
  if (has_vi_global_notify_push_fingerprint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      63, this->vi_global_notify_push_fingerprint(), output);
  }

  // optional .OPMessage.voiceItem vi_global_fingerprint_pass = 64;
  if (has_vi_global_fingerprint_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      64, this->vi_global_fingerprint_pass(), output);
  }

  // optional .OPMessage.voiceItem vi_global_global = 65;
  if (has_vi_global_global()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      65, this->vi_global_global(), output);
  }

  // optional .OPMessage.voiceItem vi_global_40100 = 66;
  if (has_vi_global_40100()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      66, this->vi_global_40100(), output);
  }

  // optional .OPMessage.voiceItem vi_global_40200 = 67;
  if (has_vi_global_40200()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      67, this->vi_global_40200(), output);
  }

  // optional .OPMessage.voiceItem vi_global_40300 = 68;
  if (has_vi_global_40300()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      68, this->vi_global_40300(), output);
  }

  // optional .OPMessage.voiceItem vi_global_40400 = 69;
  if (has_vi_global_40400()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      69, this->vi_global_40400(), output);
  }

  // optional .OPMessage.voiceItem vi_global_40500 = 70;
  if (has_vi_global_40500()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      70, this->vi_global_40500(), output);
  }

  // optional .OPMessage.voiceItem vi_global_40600 = 71;
  if (has_vi_global_40600()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      71, this->vi_global_40600(), output);
  }

  // optional .OPMessage.voiceItem vi_global_40601 = 72;
  if (has_vi_global_40601()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      72, this->vi_global_40601(), output);
  }

  // optional .OPMessage.voiceItem vi_global_40700 = 73;
  if (has_vi_global_40700()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      73, this->vi_global_40700(), output);
  }

  // optional .OPMessage.voiceItem vi_global_40800 = 74;
  if (has_vi_global_40800()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      74, this->vi_global_40800(), output);
  }

  // optional .OPMessage.voiceItem vi_global_40900 = 75;
  if (has_vi_global_40900()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      75, this->vi_global_40900(), output);
  }

  // optional .OPMessage.voiceItem vi_global_41000 = 76;
  if (has_vi_global_41000()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      76, this->vi_global_41000(), output);
  }

  // optional .OPMessage.voiceItem vi_global_41001 = 77;
  if (has_vi_global_41001()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      77, this->vi_global_41001(), output);
  }

  // optional .OPMessage.voiceItem vi_global_41100 = 78;
  if (has_vi_global_41100()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      78, this->vi_global_41100(), output);
  }

  // optional .OPMessage.voiceItem vi_global_41200 = 79;
  if (has_vi_global_41200()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      79, this->vi_global_41200(), output);
  }

  // optional .OPMessage.voiceItem vi_global_41300 = 80;
  if (has_vi_global_41300()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      80, this->vi_global_41300(), output);
  }

  // optional .OPMessage.voiceItem vi_global_41400 = 81;
  if (has_vi_global_41400()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      81, this->vi_global_41400(), output);
  }

  // optional .OPMessage.voiceItem vi_global_41500 = 82;
  if (has_vi_global_41500()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      82, this->vi_global_41500(), output);
  }

  // optional .OPMessage.voiceItem vi_global_41600 = 83;
  if (has_vi_global_41600()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      83, this->vi_global_41600(), output);
  }

  // optional .OPMessage.voiceItem vi_global_50001 = 84;
  if (has_vi_global_50001()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      84, this->vi_global_50001(), output);
  }

  // optional .OPMessage.voiceItem vi_global_50002 = 85;
  if (has_vi_global_50002()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      85, this->vi_global_50002(), output);
  }

  // optional .OPMessage.voiceItem vi_global_50003 = 86;
  if (has_vi_global_50003()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      86, this->vi_global_50003(), output);
  }

  // optional .OPMessage.voiceItem vi_global_50004 = 87;
  if (has_vi_global_50004()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      87, this->vi_global_50004(), output);
  }

  // optional .OPMessage.voiceItem vi_global_50005 = 88;
  if (has_vi_global_50005()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      88, this->vi_global_50005(), output);
  }

  // optional .OPMessage.voiceItem vi_global_50006 = 89;
  if (has_vi_global_50006()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      89, this->vi_global_50006(), output);
  }

  // optional .OPMessage.voiceItem vi_41600_not_flash_near_far = 90;
  if (has_vi_41600_not_flash_near_far()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      90, this->vi_41600_not_flash_near_far(), output);
  }

  // optional .OPMessage.voiceItem vi_41600_not_open_near = 91;
  if (has_vi_41600_not_open_near()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      91, this->vi_41600_not_open_near(), output);
  }

  // optional .OPMessage.voiceItem vi_41600_open_far = 92;
  if (has_vi_41600_open_far()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      92, this->vi_41600_open_far(), output);
  }

  // optional .OPMessage.voiceItem vi_41600_not_open_lamp = 93;
  if (has_vi_41600_not_open_lamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      93, this->vi_41600_not_open_lamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OPMessage.Judge0)
}

::google::protobuf::uint8* Judge0::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OPMessage.Judge0)
  // optional int32 itemCode = 1;
  if (has_itemcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemcode(), target);
  }

  // optional string itemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->itemname(), target);
  }

  // optional .OPMessage.judgeItem max_time = 3;
  if (has_max_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->max_time(), target);
  }

  // optional .OPMessage.judgeItem max_stop_speed = 4;
  if (has_max_stop_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->max_stop_speed(), target);
  }

  // optional .OPMessage.judgeItem max_speed = 5;
  if (has_max_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->max_speed(), target);
  }

  // optional .OPMessage.judgeItem max_off_course_distance = 6;
  if (has_max_off_course_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->max_off_course_distance(), target);
  }

  // optional .OPMessage.judgeItem max_near_lamp_off_time = 7;
  if (has_max_near_lamp_off_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->max_near_lamp_off_time(), target);
  }

  // optional .OPMessage.judgeItem max_far_lamp_on_time = 8;
  if (has_max_far_lamp_on_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->max_far_lamp_on_time(), target);
  }

  // optional .OPMessage.judgeItem auto_gear = 9;
  if (has_auto_gear()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->auto_gear(), target);
  }

  // optional .OPMessage.judgeItem max_first_gear_distance_once = 10;
  if (has_max_first_gear_distance_once()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->max_first_gear_distance_once(), target);
  }

  // optional .OPMessage.judgeItem max_second_gear_distance_once = 11;
  if (has_max_second_gear_distance_once()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->max_second_gear_distance_once(), target);
  }

  // optional .OPMessage.judgeItem max_first_gear_distance_global = 12;
  if (has_max_first_gear_distance_global()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->max_first_gear_distance_global(), target);
  }

  // optional .OPMessage.judgeItem max_second_gear_distance_global = 13;
  if (has_max_second_gear_distance_global()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->max_second_gear_distance_global(), target);
  }

  // optional .OPMessage.judgeItem min_third_gear_distance_global = 14;
  if (has_min_third_gear_distance_global()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->min_third_gear_distance_global(), target);
  }

  // optional .OPMessage.judgeItem global_reach_speed = 15;
  if (has_global_reach_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->global_reach_speed(), target);
  }

  // optional .OPMessage.judgeItem min_global_reach_speed_distance = 16;
  if (has_min_global_reach_speed_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->min_global_reach_speed_distance(), target);
  }

  // optional .OPMessage.judgeItem max_rpm = 17;
  if (has_max_rpm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->max_rpm(), target);
  }

  // optional .OPMessage.judgeItem max_neutral_distance_once = 18;
  if (has_max_neutral_distance_once()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->max_neutral_distance_once(), target);
  }

  // optional .OPMessage.judgeItem gear_speed_match_0 = 19;
  if (has_gear_speed_match_0()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->gear_speed_match_0(), target);
  }

  // optional .OPMessage.judgeItem gear_speed_match_1 = 20;
  if (has_gear_speed_match_1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->gear_speed_match_1(), target);
  }

  // optional .OPMessage.judgeItem gear_speed_match_2 = 21;
  if (has_gear_speed_match_2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->gear_speed_match_2(), target);
  }

  // optional .OPMessage.judgeItem gear_speed_match_3 = 22;
  if (has_gear_speed_match_3()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->gear_speed_match_3(), target);
  }

  // optional .OPMessage.judgeItem gear_speed_match_4 = 23;
  if (has_gear_speed_match_4()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->gear_speed_match_4(), target);
  }

  // optional .OPMessage.judgeItem gear_speed_match_5 = 24;
  if (has_gear_speed_match_5()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->gear_speed_match_5(), target);
  }

  // optional .OPMessage.judgeItem max_turn_lamp_on_time = 25;
  if (has_max_turn_lamp_on_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->max_turn_lamp_on_time(), target);
  }

  // optional .OPMessage.judgeItem max_neutral_time_once = 26;
  if (has_max_neutral_time_once()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->max_neutral_time_once(), target);
  }

  // optional .OPMessage.judgeItem gear_speed_match_time = 27;
  if (has_gear_speed_match_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->gear_speed_match_time(), target);
  }

  // optional .OPMessage.judgeItem foot_brake_beep = 28;
  if (has_foot_brake_beep()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->foot_brake_beep(), target);
  }

  // optional .OPMessage.judgeItem deduct_voice_speak_mode = 29;
  if (has_deduct_voice_speak_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->deduct_voice_speak_mode(), target);
  }

  // optional .OPMessage.judgeItem car_shake_rpm_threshold = 30;
  if (has_car_shake_rpm_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->car_shake_rpm_threshold(), target);
  }

  // optional .OPMessage.judgeItem car_shake_time_threshold = 31;
  if (has_car_shake_time_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->car_shake_time_threshold(), target);
  }

  // optional .OPMessage.judgeItem repeat_voice_time_delay = 32;
  if (has_repeat_voice_time_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->repeat_voice_time_delay(), target);
  }

  // optional .OPMessage.judgeItem min_fourth_gear_distance_global = 33;
  if (has_min_fourth_gear_distance_global()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->min_fourth_gear_distance_global(), target);
  }

  // optional .OPMessage.voiceItem vi_global_app_start = 34;
  if (has_vi_global_app_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->vi_global_app_start(), target);
  }

  // optional .OPMessage.voiceItem vi_global_not_wear_seat_belts = 35;
  if (has_vi_global_not_wear_seat_belts()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->vi_global_not_wear_seat_belts(), target);
  }

  // optional .OPMessage.voiceItem vi_global_not_close_door = 36;
  if (has_vi_global_not_close_door()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, this->vi_global_not_close_door(), target);
  }

  // optional .OPMessage.voiceItem vi_global_falmeout = 37;
  if (has_vi_global_falmeout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        37, this->vi_global_falmeout(), target);
  }

  // optional .OPMessage.voiceItem vi_global_overspeed = 38;
  if (has_vi_global_overspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        38, this->vi_global_overspeed(), target);
  }

  // optional .OPMessage.voiceItem vi_global_first_gear_distance_overrange_once = 39;
  if (has_vi_global_first_gear_distance_overrange_once()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        39, this->vi_global_first_gear_distance_overrange_once(), target);
  }

  // optional .OPMessage.voiceItem vi_global_second_gear_distance_overrange_once = 40;
  if (has_vi_global_second_gear_distance_overrange_once()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->vi_global_second_gear_distance_overrange_once(), target);
  }

  // optional .OPMessage.voiceItem vi_global_first_gear_distance_overrange_global = 41;
  if (has_vi_global_first_gear_distance_overrange_global()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        41, this->vi_global_first_gear_distance_overrange_global(), target);
  }

  // optional .OPMessage.voiceItem vi_global_second_gear_distance_overrange_global = 42;
  if (has_vi_global_second_gear_distance_overrange_global()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        42, this->vi_global_second_gear_distance_overrange_global(), target);
  }

  // optional .OPMessage.voiceItem vi_global_third_gear_distance_not_enough = 43;
  if (has_vi_global_third_gear_distance_not_enough()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        43, this->vi_global_third_gear_distance_not_enough(), target);
  }

  // optional .OPMessage.voiceItem vi_global_fourth_gear_distance_not_enough = 44;
  if (has_vi_global_fourth_gear_distance_not_enough()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        44, this->vi_global_fourth_gear_distance_not_enough(), target);
  }

  // optional .OPMessage.voiceItem vi_global_neutral_driving = 45;
  if (has_vi_global_neutral_driving()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        45, this->vi_global_neutral_driving(), target);
  }

  // optional .OPMessage.voiceItem vi_global_high_speed_not_enough = 46;
  if (has_vi_global_high_speed_not_enough()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        46, this->vi_global_high_speed_not_enough(), target);
  }

  // optional .OPMessage.voiceItem vi_global_rpm_overrange = 47;
  if (has_vi_global_rpm_overrange()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        47, this->vi_global_rpm_overrange(), target);
  }

  // optional .OPMessage.voiceItem vi_global_gear_speed_not_match = 48;
  if (has_vi_global_gear_speed_not_match()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        48, this->vi_global_gear_speed_not_match(), target);
  }

  // optional .OPMessage.voiceItem vi_global_exam_timeout = 49;
  if (has_vi_global_exam_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        49, this->vi_global_exam_timeout(), target);
  }

  // optional .OPMessage.voiceItem vi_global_turn_lamp_long_time_on = 50;
  if (has_vi_global_turn_lamp_long_time_on()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->vi_global_turn_lamp_long_time_on(), target);
  }

  // optional .OPMessage.voiceItem vi_global_road_error = 51;
  if (has_vi_global_road_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        51, this->vi_global_road_error(), target);
  }

  // optional .OPMessage.voiceItem vi_global_exam_over_pass = 52;
  if (has_vi_global_exam_over_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        52, this->vi_global_exam_over_pass(), target);
  }

  // optional .OPMessage.voiceItem vi_global_exam_over_not_pass = 53;
  if (has_vi_global_exam_over_not_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        53, this->vi_global_exam_over_not_pass(), target);
  }

  // optional .OPMessage.voiceItem vi_global_delay_speak_start = 54;
  if (has_vi_global_delay_speak_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        54, this->vi_global_delay_speak_start(), target);
  }

  // optional .OPMessage.voiceItem vi_global_delay_speak_stop = 55;
  if (has_vi_global_delay_speak_stop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        55, this->vi_global_delay_speak_stop(), target);
  }

  // optional .OPMessage.voiceItem vi_global_delay_speak_none = 56;
  if (has_vi_global_delay_speak_none()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        56, this->vi_global_delay_speak_none(), target);
  }

  // optional .OPMessage.voiceItem vi_global_whole_exam_timeout = 57;
  if (has_vi_global_whole_exam_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        57, this->vi_global_whole_exam_timeout(), target);
  }

  // optional .OPMessage.voiceItem vi_global_start_driving_with_error_gear = 58;
  if (has_vi_global_start_driving_with_error_gear()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        58, this->vi_global_start_driving_with_error_gear(), target);
  }

  // optional .OPMessage.voiceItem vi_global_start_driving_not_release_handbrake = 59;
  if (has_vi_global_start_driving_not_release_handbrake()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        59, this->vi_global_start_driving_not_release_handbrake(), target);
  }

  // optional .OPMessage.voiceItem vi_global_jump_gear = 60;
  if (has_vi_global_jump_gear()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        60, this->vi_global_jump_gear(), target);
  }

  // optional .OPMessage.voiceItem vi_global_car_shake = 61;
  if (has_vi_global_car_shake()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        61, this->vi_global_car_shake(), target);
  }

  // optional .OPMessage.voiceItem vi_global_firingup_timeout = 62;
  if (has_vi_global_firingup_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        62, this->vi_global_firingup_timeout(), target);
  }

  // optional .OPMessage.voiceItem vi_global_notify_push_fingerprint = 63;
  if (has_vi_global_notify_push_fingerprint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        63, this->vi_global_notify_push_fingerprint(), target);
  }

  // optional .OPMessage.voiceItem vi_global_fingerprint_pass = 64;
  if (has_vi_global_fingerprint_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        64, this->vi_global_fingerprint_pass(), target);
  }

  // optional .OPMessage.voiceItem vi_global_global = 65;
  if (has_vi_global_global()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        65, this->vi_global_global(), target);
  }

  // optional .OPMessage.voiceItem vi_global_40100 = 66;
  if (has_vi_global_40100()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        66, this->vi_global_40100(), target);
  }

  // optional .OPMessage.voiceItem vi_global_40200 = 67;
  if (has_vi_global_40200()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        67, this->vi_global_40200(), target);
  }

  // optional .OPMessage.voiceItem vi_global_40300 = 68;
  if (has_vi_global_40300()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        68, this->vi_global_40300(), target);
  }

  // optional .OPMessage.voiceItem vi_global_40400 = 69;
  if (has_vi_global_40400()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        69, this->vi_global_40400(), target);
  }

  // optional .OPMessage.voiceItem vi_global_40500 = 70;
  if (has_vi_global_40500()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        70, this->vi_global_40500(), target);
  }

  // optional .OPMessage.voiceItem vi_global_40600 = 71;
  if (has_vi_global_40600()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        71, this->vi_global_40600(), target);
  }

  // optional .OPMessage.voiceItem vi_global_40601 = 72;
  if (has_vi_global_40601()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        72, this->vi_global_40601(), target);
  }

  // optional .OPMessage.voiceItem vi_global_40700 = 73;
  if (has_vi_global_40700()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        73, this->vi_global_40700(), target);
  }

  // optional .OPMessage.voiceItem vi_global_40800 = 74;
  if (has_vi_global_40800()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        74, this->vi_global_40800(), target);
  }

  // optional .OPMessage.voiceItem vi_global_40900 = 75;
  if (has_vi_global_40900()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        75, this->vi_global_40900(), target);
  }

  // optional .OPMessage.voiceItem vi_global_41000 = 76;
  if (has_vi_global_41000()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        76, this->vi_global_41000(), target);
  }

  // optional .OPMessage.voiceItem vi_global_41001 = 77;
  if (has_vi_global_41001()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        77, this->vi_global_41001(), target);
  }

  // optional .OPMessage.voiceItem vi_global_41100 = 78;
  if (has_vi_global_41100()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        78, this->vi_global_41100(), target);
  }

  // optional .OPMessage.voiceItem vi_global_41200 = 79;
  if (has_vi_global_41200()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        79, this->vi_global_41200(), target);
  }

  // optional .OPMessage.voiceItem vi_global_41300 = 80;
  if (has_vi_global_41300()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        80, this->vi_global_41300(), target);
  }

  // optional .OPMessage.voiceItem vi_global_41400 = 81;
  if (has_vi_global_41400()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        81, this->vi_global_41400(), target);
  }

  // optional .OPMessage.voiceItem vi_global_41500 = 82;
  if (has_vi_global_41500()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        82, this->vi_global_41500(), target);
  }

  // optional .OPMessage.voiceItem vi_global_41600 = 83;
  if (has_vi_global_41600()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        83, this->vi_global_41600(), target);
  }

  // optional .OPMessage.voiceItem vi_global_50001 = 84;
  if (has_vi_global_50001()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        84, this->vi_global_50001(), target);
  }

  // optional .OPMessage.voiceItem vi_global_50002 = 85;
  if (has_vi_global_50002()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        85, this->vi_global_50002(), target);
  }

  // optional .OPMessage.voiceItem vi_global_50003 = 86;
  if (has_vi_global_50003()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        86, this->vi_global_50003(), target);
  }

  // optional .OPMessage.voiceItem vi_global_50004 = 87;
  if (has_vi_global_50004()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        87, this->vi_global_50004(), target);
  }

  // optional .OPMessage.voiceItem vi_global_50005 = 88;
  if (has_vi_global_50005()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        88, this->vi_global_50005(), target);
  }

  // optional .OPMessage.voiceItem vi_global_50006 = 89;
  if (has_vi_global_50006()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        89, this->vi_global_50006(), target);
  }

  // optional .OPMessage.voiceItem vi_41600_not_flash_near_far = 90;
  if (has_vi_41600_not_flash_near_far()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        90, this->vi_41600_not_flash_near_far(), target);
  }

  // optional .OPMessage.voiceItem vi_41600_not_open_near = 91;
  if (has_vi_41600_not_open_near()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        91, this->vi_41600_not_open_near(), target);
  }

  // optional .OPMessage.voiceItem vi_41600_open_far = 92;
  if (has_vi_41600_open_far()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        92, this->vi_41600_open_far(), target);
  }

  // optional .OPMessage.voiceItem vi_41600_not_open_lamp = 93;
  if (has_vi_41600_not_open_lamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        93, this->vi_41600_not_open_lamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OPMessage.Judge0)
  return target;
}

int Judge0::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemCode = 1;
    if (has_itemcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemcode());
    }

    // optional string itemName = 2;
    if (has_itemname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemname());
    }

    // optional .OPMessage.judgeItem max_time = 3;
    if (has_max_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_time());
    }

    // optional .OPMessage.judgeItem max_stop_speed = 4;
    if (has_max_stop_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_stop_speed());
    }

    // optional .OPMessage.judgeItem max_speed = 5;
    if (has_max_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_speed());
    }

    // optional .OPMessage.judgeItem max_off_course_distance = 6;
    if (has_max_off_course_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_off_course_distance());
    }

    // optional .OPMessage.judgeItem max_near_lamp_off_time = 7;
    if (has_max_near_lamp_off_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_near_lamp_off_time());
    }

    // optional .OPMessage.judgeItem max_far_lamp_on_time = 8;
    if (has_max_far_lamp_on_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_far_lamp_on_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .OPMessage.judgeItem auto_gear = 9;
    if (has_auto_gear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->auto_gear());
    }

    // optional .OPMessage.judgeItem max_first_gear_distance_once = 10;
    if (has_max_first_gear_distance_once()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_first_gear_distance_once());
    }

    // optional .OPMessage.judgeItem max_second_gear_distance_once = 11;
    if (has_max_second_gear_distance_once()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_second_gear_distance_once());
    }

    // optional .OPMessage.judgeItem max_first_gear_distance_global = 12;
    if (has_max_first_gear_distance_global()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_first_gear_distance_global());
    }

    // optional .OPMessage.judgeItem max_second_gear_distance_global = 13;
    if (has_max_second_gear_distance_global()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_second_gear_distance_global());
    }

    // optional .OPMessage.judgeItem min_third_gear_distance_global = 14;
    if (has_min_third_gear_distance_global()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->min_third_gear_distance_global());
    }

    // optional .OPMessage.judgeItem global_reach_speed = 15;
    if (has_global_reach_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->global_reach_speed());
    }

    // optional .OPMessage.judgeItem min_global_reach_speed_distance = 16;
    if (has_min_global_reach_speed_distance()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->min_global_reach_speed_distance());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .OPMessage.judgeItem max_rpm = 17;
    if (has_max_rpm()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_rpm());
    }

    // optional .OPMessage.judgeItem max_neutral_distance_once = 18;
    if (has_max_neutral_distance_once()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_neutral_distance_once());
    }

    // optional .OPMessage.judgeItem gear_speed_match_0 = 19;
    if (has_gear_speed_match_0()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gear_speed_match_0());
    }

    // optional .OPMessage.judgeItem gear_speed_match_1 = 20;
    if (has_gear_speed_match_1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gear_speed_match_1());
    }

    // optional .OPMessage.judgeItem gear_speed_match_2 = 21;
    if (has_gear_speed_match_2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gear_speed_match_2());
    }

    // optional .OPMessage.judgeItem gear_speed_match_3 = 22;
    if (has_gear_speed_match_3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gear_speed_match_3());
    }

    // optional .OPMessage.judgeItem gear_speed_match_4 = 23;
    if (has_gear_speed_match_4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gear_speed_match_4());
    }

    // optional .OPMessage.judgeItem gear_speed_match_5 = 24;
    if (has_gear_speed_match_5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gear_speed_match_5());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .OPMessage.judgeItem max_turn_lamp_on_time = 25;
    if (has_max_turn_lamp_on_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_turn_lamp_on_time());
    }

    // optional .OPMessage.judgeItem max_neutral_time_once = 26;
    if (has_max_neutral_time_once()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_neutral_time_once());
    }

    // optional .OPMessage.judgeItem gear_speed_match_time = 27;
    if (has_gear_speed_match_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gear_speed_match_time());
    }

    // optional .OPMessage.judgeItem foot_brake_beep = 28;
    if (has_foot_brake_beep()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->foot_brake_beep());
    }

    // optional .OPMessage.judgeItem deduct_voice_speak_mode = 29;
    if (has_deduct_voice_speak_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deduct_voice_speak_mode());
    }

    // optional .OPMessage.judgeItem car_shake_rpm_threshold = 30;
    if (has_car_shake_rpm_threshold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->car_shake_rpm_threshold());
    }

    // optional .OPMessage.judgeItem car_shake_time_threshold = 31;
    if (has_car_shake_time_threshold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->car_shake_time_threshold());
    }

    // optional .OPMessage.judgeItem repeat_voice_time_delay = 32;
    if (has_repeat_voice_time_delay()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->repeat_voice_time_delay());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional .OPMessage.judgeItem min_fourth_gear_distance_global = 33;
    if (has_min_fourth_gear_distance_global()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->min_fourth_gear_distance_global());
    }

    // optional .OPMessage.voiceItem vi_global_app_start = 34;
    if (has_vi_global_app_start()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_app_start());
    }

    // optional .OPMessage.voiceItem vi_global_not_wear_seat_belts = 35;
    if (has_vi_global_not_wear_seat_belts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_not_wear_seat_belts());
    }

    // optional .OPMessage.voiceItem vi_global_not_close_door = 36;
    if (has_vi_global_not_close_door()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_not_close_door());
    }

    // optional .OPMessage.voiceItem vi_global_falmeout = 37;
    if (has_vi_global_falmeout()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_falmeout());
    }

    // optional .OPMessage.voiceItem vi_global_overspeed = 38;
    if (has_vi_global_overspeed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_overspeed());
    }

    // optional .OPMessage.voiceItem vi_global_first_gear_distance_overrange_once = 39;
    if (has_vi_global_first_gear_distance_overrange_once()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_first_gear_distance_overrange_once());
    }

    // optional .OPMessage.voiceItem vi_global_second_gear_distance_overrange_once = 40;
    if (has_vi_global_second_gear_distance_overrange_once()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_second_gear_distance_overrange_once());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional .OPMessage.voiceItem vi_global_first_gear_distance_overrange_global = 41;
    if (has_vi_global_first_gear_distance_overrange_global()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_first_gear_distance_overrange_global());
    }

    // optional .OPMessage.voiceItem vi_global_second_gear_distance_overrange_global = 42;
    if (has_vi_global_second_gear_distance_overrange_global()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_second_gear_distance_overrange_global());
    }

    // optional .OPMessage.voiceItem vi_global_third_gear_distance_not_enough = 43;
    if (has_vi_global_third_gear_distance_not_enough()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_third_gear_distance_not_enough());
    }

    // optional .OPMessage.voiceItem vi_global_fourth_gear_distance_not_enough = 44;
    if (has_vi_global_fourth_gear_distance_not_enough()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_fourth_gear_distance_not_enough());
    }

    // optional .OPMessage.voiceItem vi_global_neutral_driving = 45;
    if (has_vi_global_neutral_driving()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_neutral_driving());
    }

    // optional .OPMessage.voiceItem vi_global_high_speed_not_enough = 46;
    if (has_vi_global_high_speed_not_enough()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_high_speed_not_enough());
    }

    // optional .OPMessage.voiceItem vi_global_rpm_overrange = 47;
    if (has_vi_global_rpm_overrange()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_rpm_overrange());
    }

    // optional .OPMessage.voiceItem vi_global_gear_speed_not_match = 48;
    if (has_vi_global_gear_speed_not_match()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_gear_speed_not_match());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional .OPMessage.voiceItem vi_global_exam_timeout = 49;
    if (has_vi_global_exam_timeout()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_exam_timeout());
    }

    // optional .OPMessage.voiceItem vi_global_turn_lamp_long_time_on = 50;
    if (has_vi_global_turn_lamp_long_time_on()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_turn_lamp_long_time_on());
    }

    // optional .OPMessage.voiceItem vi_global_road_error = 51;
    if (has_vi_global_road_error()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_road_error());
    }

    // optional .OPMessage.voiceItem vi_global_exam_over_pass = 52;
    if (has_vi_global_exam_over_pass()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_exam_over_pass());
    }

    // optional .OPMessage.voiceItem vi_global_exam_over_not_pass = 53;
    if (has_vi_global_exam_over_not_pass()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_exam_over_not_pass());
    }

    // optional .OPMessage.voiceItem vi_global_delay_speak_start = 54;
    if (has_vi_global_delay_speak_start()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_delay_speak_start());
    }

    // optional .OPMessage.voiceItem vi_global_delay_speak_stop = 55;
    if (has_vi_global_delay_speak_stop()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_delay_speak_stop());
    }

    // optional .OPMessage.voiceItem vi_global_delay_speak_none = 56;
    if (has_vi_global_delay_speak_none()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_delay_speak_none());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional .OPMessage.voiceItem vi_global_whole_exam_timeout = 57;
    if (has_vi_global_whole_exam_timeout()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_whole_exam_timeout());
    }

    // optional .OPMessage.voiceItem vi_global_start_driving_with_error_gear = 58;
    if (has_vi_global_start_driving_with_error_gear()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_start_driving_with_error_gear());
    }

    // optional .OPMessage.voiceItem vi_global_start_driving_not_release_handbrake = 59;
    if (has_vi_global_start_driving_not_release_handbrake()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_start_driving_not_release_handbrake());
    }

    // optional .OPMessage.voiceItem vi_global_jump_gear = 60;
    if (has_vi_global_jump_gear()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_jump_gear());
    }

    // optional .OPMessage.voiceItem vi_global_car_shake = 61;
    if (has_vi_global_car_shake()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_car_shake());
    }

    // optional .OPMessage.voiceItem vi_global_firingup_timeout = 62;
    if (has_vi_global_firingup_timeout()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_firingup_timeout());
    }

    // optional .OPMessage.voiceItem vi_global_notify_push_fingerprint = 63;
    if (has_vi_global_notify_push_fingerprint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_notify_push_fingerprint());
    }

    // optional .OPMessage.voiceItem vi_global_fingerprint_pass = 64;
    if (has_vi_global_fingerprint_pass()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_fingerprint_pass());
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional .OPMessage.voiceItem vi_global_global = 65;
    if (has_vi_global_global()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_global());
    }

    // optional .OPMessage.voiceItem vi_global_40100 = 66;
    if (has_vi_global_40100()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_40100());
    }

    // optional .OPMessage.voiceItem vi_global_40200 = 67;
    if (has_vi_global_40200()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_40200());
    }

    // optional .OPMessage.voiceItem vi_global_40300 = 68;
    if (has_vi_global_40300()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_40300());
    }

    // optional .OPMessage.voiceItem vi_global_40400 = 69;
    if (has_vi_global_40400()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_40400());
    }

    // optional .OPMessage.voiceItem vi_global_40500 = 70;
    if (has_vi_global_40500()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_40500());
    }

    // optional .OPMessage.voiceItem vi_global_40600 = 71;
    if (has_vi_global_40600()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_40600());
    }

    // optional .OPMessage.voiceItem vi_global_40601 = 72;
    if (has_vi_global_40601()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_40601());
    }

  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    // optional .OPMessage.voiceItem vi_global_40700 = 73;
    if (has_vi_global_40700()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_40700());
    }

    // optional .OPMessage.voiceItem vi_global_40800 = 74;
    if (has_vi_global_40800()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_40800());
    }

    // optional .OPMessage.voiceItem vi_global_40900 = 75;
    if (has_vi_global_40900()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_40900());
    }

    // optional .OPMessage.voiceItem vi_global_41000 = 76;
    if (has_vi_global_41000()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_41000());
    }

    // optional .OPMessage.voiceItem vi_global_41001 = 77;
    if (has_vi_global_41001()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_41001());
    }

    // optional .OPMessage.voiceItem vi_global_41100 = 78;
    if (has_vi_global_41100()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_41100());
    }

    // optional .OPMessage.voiceItem vi_global_41200 = 79;
    if (has_vi_global_41200()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_41200());
    }

    // optional .OPMessage.voiceItem vi_global_41300 = 80;
    if (has_vi_global_41300()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_41300());
    }

  }
  if (_has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    // optional .OPMessage.voiceItem vi_global_41400 = 81;
    if (has_vi_global_41400()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_41400());
    }

    // optional .OPMessage.voiceItem vi_global_41500 = 82;
    if (has_vi_global_41500()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_41500());
    }

    // optional .OPMessage.voiceItem vi_global_41600 = 83;
    if (has_vi_global_41600()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_41600());
    }

    // optional .OPMessage.voiceItem vi_global_50001 = 84;
    if (has_vi_global_50001()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_50001());
    }

    // optional .OPMessage.voiceItem vi_global_50002 = 85;
    if (has_vi_global_50002()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_50002());
    }

    // optional .OPMessage.voiceItem vi_global_50003 = 86;
    if (has_vi_global_50003()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_50003());
    }

    // optional .OPMessage.voiceItem vi_global_50004 = 87;
    if (has_vi_global_50004()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_50004());
    }

    // optional .OPMessage.voiceItem vi_global_50005 = 88;
    if (has_vi_global_50005()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_50005());
    }

  }
  if (_has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    // optional .OPMessage.voiceItem vi_global_50006 = 89;
    if (has_vi_global_50006()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_global_50006());
    }

    // optional .OPMessage.voiceItem vi_41600_not_flash_near_far = 90;
    if (has_vi_41600_not_flash_near_far()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_41600_not_flash_near_far());
    }

    // optional .OPMessage.voiceItem vi_41600_not_open_near = 91;
    if (has_vi_41600_not_open_near()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_41600_not_open_near());
    }

    // optional .OPMessage.voiceItem vi_41600_open_far = 92;
    if (has_vi_41600_open_far()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_41600_open_far());
    }

    // optional .OPMessage.voiceItem vi_41600_not_open_lamp = 93;
    if (has_vi_41600_not_open_lamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_41600_not_open_lamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Judge0::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Judge0* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Judge0*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Judge0::MergeFrom(const Judge0& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemcode()) {
      set_itemcode(from.itemcode());
    }
    if (from.has_itemname()) {
      set_itemname(from.itemname());
    }
    if (from.has_max_time()) {
      mutable_max_time()->::OPMessage::judgeItem::MergeFrom(from.max_time());
    }
    if (from.has_max_stop_speed()) {
      mutable_max_stop_speed()->::OPMessage::judgeItem::MergeFrom(from.max_stop_speed());
    }
    if (from.has_max_speed()) {
      mutable_max_speed()->::OPMessage::judgeItem::MergeFrom(from.max_speed());
    }
    if (from.has_max_off_course_distance()) {
      mutable_max_off_course_distance()->::OPMessage::judgeItem::MergeFrom(from.max_off_course_distance());
    }
    if (from.has_max_near_lamp_off_time()) {
      mutable_max_near_lamp_off_time()->::OPMessage::judgeItem::MergeFrom(from.max_near_lamp_off_time());
    }
    if (from.has_max_far_lamp_on_time()) {
      mutable_max_far_lamp_on_time()->::OPMessage::judgeItem::MergeFrom(from.max_far_lamp_on_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_auto_gear()) {
      mutable_auto_gear()->::OPMessage::judgeItem::MergeFrom(from.auto_gear());
    }
    if (from.has_max_first_gear_distance_once()) {
      mutable_max_first_gear_distance_once()->::OPMessage::judgeItem::MergeFrom(from.max_first_gear_distance_once());
    }
    if (from.has_max_second_gear_distance_once()) {
      mutable_max_second_gear_distance_once()->::OPMessage::judgeItem::MergeFrom(from.max_second_gear_distance_once());
    }
    if (from.has_max_first_gear_distance_global()) {
      mutable_max_first_gear_distance_global()->::OPMessage::judgeItem::MergeFrom(from.max_first_gear_distance_global());
    }
    if (from.has_max_second_gear_distance_global()) {
      mutable_max_second_gear_distance_global()->::OPMessage::judgeItem::MergeFrom(from.max_second_gear_distance_global());
    }
    if (from.has_min_third_gear_distance_global()) {
      mutable_min_third_gear_distance_global()->::OPMessage::judgeItem::MergeFrom(from.min_third_gear_distance_global());
    }
    if (from.has_global_reach_speed()) {
      mutable_global_reach_speed()->::OPMessage::judgeItem::MergeFrom(from.global_reach_speed());
    }
    if (from.has_min_global_reach_speed_distance()) {
      mutable_min_global_reach_speed_distance()->::OPMessage::judgeItem::MergeFrom(from.min_global_reach_speed_distance());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_max_rpm()) {
      mutable_max_rpm()->::OPMessage::judgeItem::MergeFrom(from.max_rpm());
    }
    if (from.has_max_neutral_distance_once()) {
      mutable_max_neutral_distance_once()->::OPMessage::judgeItem::MergeFrom(from.max_neutral_distance_once());
    }
    if (from.has_gear_speed_match_0()) {
      mutable_gear_speed_match_0()->::OPMessage::judgeItem::MergeFrom(from.gear_speed_match_0());
    }
    if (from.has_gear_speed_match_1()) {
      mutable_gear_speed_match_1()->::OPMessage::judgeItem::MergeFrom(from.gear_speed_match_1());
    }
    if (from.has_gear_speed_match_2()) {
      mutable_gear_speed_match_2()->::OPMessage::judgeItem::MergeFrom(from.gear_speed_match_2());
    }
    if (from.has_gear_speed_match_3()) {
      mutable_gear_speed_match_3()->::OPMessage::judgeItem::MergeFrom(from.gear_speed_match_3());
    }
    if (from.has_gear_speed_match_4()) {
      mutable_gear_speed_match_4()->::OPMessage::judgeItem::MergeFrom(from.gear_speed_match_4());
    }
    if (from.has_gear_speed_match_5()) {
      mutable_gear_speed_match_5()->::OPMessage::judgeItem::MergeFrom(from.gear_speed_match_5());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_max_turn_lamp_on_time()) {
      mutable_max_turn_lamp_on_time()->::OPMessage::judgeItem::MergeFrom(from.max_turn_lamp_on_time());
    }
    if (from.has_max_neutral_time_once()) {
      mutable_max_neutral_time_once()->::OPMessage::judgeItem::MergeFrom(from.max_neutral_time_once());
    }
    if (from.has_gear_speed_match_time()) {
      mutable_gear_speed_match_time()->::OPMessage::judgeItem::MergeFrom(from.gear_speed_match_time());
    }
    if (from.has_foot_brake_beep()) {
      mutable_foot_brake_beep()->::OPMessage::judgeItem::MergeFrom(from.foot_brake_beep());
    }
    if (from.has_deduct_voice_speak_mode()) {
      mutable_deduct_voice_speak_mode()->::OPMessage::judgeItem::MergeFrom(from.deduct_voice_speak_mode());
    }
    if (from.has_car_shake_rpm_threshold()) {
      mutable_car_shake_rpm_threshold()->::OPMessage::judgeItem::MergeFrom(from.car_shake_rpm_threshold());
    }
    if (from.has_car_shake_time_threshold()) {
      mutable_car_shake_time_threshold()->::OPMessage::judgeItem::MergeFrom(from.car_shake_time_threshold());
    }
    if (from.has_repeat_voice_time_delay()) {
      mutable_repeat_voice_time_delay()->::OPMessage::judgeItem::MergeFrom(from.repeat_voice_time_delay());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_min_fourth_gear_distance_global()) {
      mutable_min_fourth_gear_distance_global()->::OPMessage::judgeItem::MergeFrom(from.min_fourth_gear_distance_global());
    }
    if (from.has_vi_global_app_start()) {
      mutable_vi_global_app_start()->::OPMessage::voiceItem::MergeFrom(from.vi_global_app_start());
    }
    if (from.has_vi_global_not_wear_seat_belts()) {
      mutable_vi_global_not_wear_seat_belts()->::OPMessage::voiceItem::MergeFrom(from.vi_global_not_wear_seat_belts());
    }
    if (from.has_vi_global_not_close_door()) {
      mutable_vi_global_not_close_door()->::OPMessage::voiceItem::MergeFrom(from.vi_global_not_close_door());
    }
    if (from.has_vi_global_falmeout()) {
      mutable_vi_global_falmeout()->::OPMessage::voiceItem::MergeFrom(from.vi_global_falmeout());
    }
    if (from.has_vi_global_overspeed()) {
      mutable_vi_global_overspeed()->::OPMessage::voiceItem::MergeFrom(from.vi_global_overspeed());
    }
    if (from.has_vi_global_first_gear_distance_overrange_once()) {
      mutable_vi_global_first_gear_distance_overrange_once()->::OPMessage::voiceItem::MergeFrom(from.vi_global_first_gear_distance_overrange_once());
    }
    if (from.has_vi_global_second_gear_distance_overrange_once()) {
      mutable_vi_global_second_gear_distance_overrange_once()->::OPMessage::voiceItem::MergeFrom(from.vi_global_second_gear_distance_overrange_once());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_vi_global_first_gear_distance_overrange_global()) {
      mutable_vi_global_first_gear_distance_overrange_global()->::OPMessage::voiceItem::MergeFrom(from.vi_global_first_gear_distance_overrange_global());
    }
    if (from.has_vi_global_second_gear_distance_overrange_global()) {
      mutable_vi_global_second_gear_distance_overrange_global()->::OPMessage::voiceItem::MergeFrom(from.vi_global_second_gear_distance_overrange_global());
    }
    if (from.has_vi_global_third_gear_distance_not_enough()) {
      mutable_vi_global_third_gear_distance_not_enough()->::OPMessage::voiceItem::MergeFrom(from.vi_global_third_gear_distance_not_enough());
    }
    if (from.has_vi_global_fourth_gear_distance_not_enough()) {
      mutable_vi_global_fourth_gear_distance_not_enough()->::OPMessage::voiceItem::MergeFrom(from.vi_global_fourth_gear_distance_not_enough());
    }
    if (from.has_vi_global_neutral_driving()) {
      mutable_vi_global_neutral_driving()->::OPMessage::voiceItem::MergeFrom(from.vi_global_neutral_driving());
    }
    if (from.has_vi_global_high_speed_not_enough()) {
      mutable_vi_global_high_speed_not_enough()->::OPMessage::voiceItem::MergeFrom(from.vi_global_high_speed_not_enough());
    }
    if (from.has_vi_global_rpm_overrange()) {
      mutable_vi_global_rpm_overrange()->::OPMessage::voiceItem::MergeFrom(from.vi_global_rpm_overrange());
    }
    if (from.has_vi_global_gear_speed_not_match()) {
      mutable_vi_global_gear_speed_not_match()->::OPMessage::voiceItem::MergeFrom(from.vi_global_gear_speed_not_match());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_vi_global_exam_timeout()) {
      mutable_vi_global_exam_timeout()->::OPMessage::voiceItem::MergeFrom(from.vi_global_exam_timeout());
    }
    if (from.has_vi_global_turn_lamp_long_time_on()) {
      mutable_vi_global_turn_lamp_long_time_on()->::OPMessage::voiceItem::MergeFrom(from.vi_global_turn_lamp_long_time_on());
    }
    if (from.has_vi_global_road_error()) {
      mutable_vi_global_road_error()->::OPMessage::voiceItem::MergeFrom(from.vi_global_road_error());
    }
    if (from.has_vi_global_exam_over_pass()) {
      mutable_vi_global_exam_over_pass()->::OPMessage::voiceItem::MergeFrom(from.vi_global_exam_over_pass());
    }
    if (from.has_vi_global_exam_over_not_pass()) {
      mutable_vi_global_exam_over_not_pass()->::OPMessage::voiceItem::MergeFrom(from.vi_global_exam_over_not_pass());
    }
    if (from.has_vi_global_delay_speak_start()) {
      mutable_vi_global_delay_speak_start()->::OPMessage::voiceItem::MergeFrom(from.vi_global_delay_speak_start());
    }
    if (from.has_vi_global_delay_speak_stop()) {
      mutable_vi_global_delay_speak_stop()->::OPMessage::voiceItem::MergeFrom(from.vi_global_delay_speak_stop());
    }
    if (from.has_vi_global_delay_speak_none()) {
      mutable_vi_global_delay_speak_none()->::OPMessage::voiceItem::MergeFrom(from.vi_global_delay_speak_none());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_vi_global_whole_exam_timeout()) {
      mutable_vi_global_whole_exam_timeout()->::OPMessage::voiceItem::MergeFrom(from.vi_global_whole_exam_timeout());
    }
    if (from.has_vi_global_start_driving_with_error_gear()) {
      mutable_vi_global_start_driving_with_error_gear()->::OPMessage::voiceItem::MergeFrom(from.vi_global_start_driving_with_error_gear());
    }
    if (from.has_vi_global_start_driving_not_release_handbrake()) {
      mutable_vi_global_start_driving_not_release_handbrake()->::OPMessage::voiceItem::MergeFrom(from.vi_global_start_driving_not_release_handbrake());
    }
    if (from.has_vi_global_jump_gear()) {
      mutable_vi_global_jump_gear()->::OPMessage::voiceItem::MergeFrom(from.vi_global_jump_gear());
    }
    if (from.has_vi_global_car_shake()) {
      mutable_vi_global_car_shake()->::OPMessage::voiceItem::MergeFrom(from.vi_global_car_shake());
    }
    if (from.has_vi_global_firingup_timeout()) {
      mutable_vi_global_firingup_timeout()->::OPMessage::voiceItem::MergeFrom(from.vi_global_firingup_timeout());
    }
    if (from.has_vi_global_notify_push_fingerprint()) {
      mutable_vi_global_notify_push_fingerprint()->::OPMessage::voiceItem::MergeFrom(from.vi_global_notify_push_fingerprint());
    }
    if (from.has_vi_global_fingerprint_pass()) {
      mutable_vi_global_fingerprint_pass()->::OPMessage::voiceItem::MergeFrom(from.vi_global_fingerprint_pass());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_vi_global_global()) {
      mutable_vi_global_global()->::OPMessage::voiceItem::MergeFrom(from.vi_global_global());
    }
    if (from.has_vi_global_40100()) {
      mutable_vi_global_40100()->::OPMessage::voiceItem::MergeFrom(from.vi_global_40100());
    }
    if (from.has_vi_global_40200()) {
      mutable_vi_global_40200()->::OPMessage::voiceItem::MergeFrom(from.vi_global_40200());
    }
    if (from.has_vi_global_40300()) {
      mutable_vi_global_40300()->::OPMessage::voiceItem::MergeFrom(from.vi_global_40300());
    }
    if (from.has_vi_global_40400()) {
      mutable_vi_global_40400()->::OPMessage::voiceItem::MergeFrom(from.vi_global_40400());
    }
    if (from.has_vi_global_40500()) {
      mutable_vi_global_40500()->::OPMessage::voiceItem::MergeFrom(from.vi_global_40500());
    }
    if (from.has_vi_global_40600()) {
      mutable_vi_global_40600()->::OPMessage::voiceItem::MergeFrom(from.vi_global_40600());
    }
    if (from.has_vi_global_40601()) {
      mutable_vi_global_40601()->::OPMessage::voiceItem::MergeFrom(from.vi_global_40601());
    }
  }
  if (from._has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (from.has_vi_global_40700()) {
      mutable_vi_global_40700()->::OPMessage::voiceItem::MergeFrom(from.vi_global_40700());
    }
    if (from.has_vi_global_40800()) {
      mutable_vi_global_40800()->::OPMessage::voiceItem::MergeFrom(from.vi_global_40800());
    }
    if (from.has_vi_global_40900()) {
      mutable_vi_global_40900()->::OPMessage::voiceItem::MergeFrom(from.vi_global_40900());
    }
    if (from.has_vi_global_41000()) {
      mutable_vi_global_41000()->::OPMessage::voiceItem::MergeFrom(from.vi_global_41000());
    }
    if (from.has_vi_global_41001()) {
      mutable_vi_global_41001()->::OPMessage::voiceItem::MergeFrom(from.vi_global_41001());
    }
    if (from.has_vi_global_41100()) {
      mutable_vi_global_41100()->::OPMessage::voiceItem::MergeFrom(from.vi_global_41100());
    }
    if (from.has_vi_global_41200()) {
      mutable_vi_global_41200()->::OPMessage::voiceItem::MergeFrom(from.vi_global_41200());
    }
    if (from.has_vi_global_41300()) {
      mutable_vi_global_41300()->::OPMessage::voiceItem::MergeFrom(from.vi_global_41300());
    }
  }
  if (from._has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    if (from.has_vi_global_41400()) {
      mutable_vi_global_41400()->::OPMessage::voiceItem::MergeFrom(from.vi_global_41400());
    }
    if (from.has_vi_global_41500()) {
      mutable_vi_global_41500()->::OPMessage::voiceItem::MergeFrom(from.vi_global_41500());
    }
    if (from.has_vi_global_41600()) {
      mutable_vi_global_41600()->::OPMessage::voiceItem::MergeFrom(from.vi_global_41600());
    }
    if (from.has_vi_global_50001()) {
      mutable_vi_global_50001()->::OPMessage::voiceItem::MergeFrom(from.vi_global_50001());
    }
    if (from.has_vi_global_50002()) {
      mutable_vi_global_50002()->::OPMessage::voiceItem::MergeFrom(from.vi_global_50002());
    }
    if (from.has_vi_global_50003()) {
      mutable_vi_global_50003()->::OPMessage::voiceItem::MergeFrom(from.vi_global_50003());
    }
    if (from.has_vi_global_50004()) {
      mutable_vi_global_50004()->::OPMessage::voiceItem::MergeFrom(from.vi_global_50004());
    }
    if (from.has_vi_global_50005()) {
      mutable_vi_global_50005()->::OPMessage::voiceItem::MergeFrom(from.vi_global_50005());
    }
  }
  if (from._has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    if (from.has_vi_global_50006()) {
      mutable_vi_global_50006()->::OPMessage::voiceItem::MergeFrom(from.vi_global_50006());
    }
    if (from.has_vi_41600_not_flash_near_far()) {
      mutable_vi_41600_not_flash_near_far()->::OPMessage::voiceItem::MergeFrom(from.vi_41600_not_flash_near_far());
    }
    if (from.has_vi_41600_not_open_near()) {
      mutable_vi_41600_not_open_near()->::OPMessage::voiceItem::MergeFrom(from.vi_41600_not_open_near());
    }
    if (from.has_vi_41600_open_far()) {
      mutable_vi_41600_open_far()->::OPMessage::voiceItem::MergeFrom(from.vi_41600_open_far());
    }
    if (from.has_vi_41600_not_open_lamp()) {
      mutable_vi_41600_not_open_lamp()->::OPMessage::voiceItem::MergeFrom(from.vi_41600_not_open_lamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Judge0::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Judge0::CopyFrom(const Judge0& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Judge0::IsInitialized() const {

  return true;
}

void Judge0::Swap(Judge0* other) {
  if (other != this) {
    std::swap(itemcode_, other->itemcode_);
    std::swap(itemname_, other->itemname_);
    std::swap(max_time_, other->max_time_);
    std::swap(max_stop_speed_, other->max_stop_speed_);
    std::swap(max_speed_, other->max_speed_);
    std::swap(max_off_course_distance_, other->max_off_course_distance_);
    std::swap(max_near_lamp_off_time_, other->max_near_lamp_off_time_);
    std::swap(max_far_lamp_on_time_, other->max_far_lamp_on_time_);
    std::swap(auto_gear_, other->auto_gear_);
    std::swap(max_first_gear_distance_once_, other->max_first_gear_distance_once_);
    std::swap(max_second_gear_distance_once_, other->max_second_gear_distance_once_);
    std::swap(max_first_gear_distance_global_, other->max_first_gear_distance_global_);
    std::swap(max_second_gear_distance_global_, other->max_second_gear_distance_global_);
    std::swap(min_third_gear_distance_global_, other->min_third_gear_distance_global_);
    std::swap(global_reach_speed_, other->global_reach_speed_);
    std::swap(min_global_reach_speed_distance_, other->min_global_reach_speed_distance_);
    std::swap(max_rpm_, other->max_rpm_);
    std::swap(max_neutral_distance_once_, other->max_neutral_distance_once_);
    std::swap(gear_speed_match_0_, other->gear_speed_match_0_);
    std::swap(gear_speed_match_1_, other->gear_speed_match_1_);
    std::swap(gear_speed_match_2_, other->gear_speed_match_2_);
    std::swap(gear_speed_match_3_, other->gear_speed_match_3_);
    std::swap(gear_speed_match_4_, other->gear_speed_match_4_);
    std::swap(gear_speed_match_5_, other->gear_speed_match_5_);
    std::swap(max_turn_lamp_on_time_, other->max_turn_lamp_on_time_);
    std::swap(max_neutral_time_once_, other->max_neutral_time_once_);
    std::swap(gear_speed_match_time_, other->gear_speed_match_time_);
    std::swap(foot_brake_beep_, other->foot_brake_beep_);
    std::swap(deduct_voice_speak_mode_, other->deduct_voice_speak_mode_);
    std::swap(car_shake_rpm_threshold_, other->car_shake_rpm_threshold_);
    std::swap(car_shake_time_threshold_, other->car_shake_time_threshold_);
    std::swap(repeat_voice_time_delay_, other->repeat_voice_time_delay_);
    std::swap(min_fourth_gear_distance_global_, other->min_fourth_gear_distance_global_);
    std::swap(vi_global_app_start_, other->vi_global_app_start_);
    std::swap(vi_global_not_wear_seat_belts_, other->vi_global_not_wear_seat_belts_);
    std::swap(vi_global_not_close_door_, other->vi_global_not_close_door_);
    std::swap(vi_global_falmeout_, other->vi_global_falmeout_);
    std::swap(vi_global_overspeed_, other->vi_global_overspeed_);
    std::swap(vi_global_first_gear_distance_overrange_once_, other->vi_global_first_gear_distance_overrange_once_);
    std::swap(vi_global_second_gear_distance_overrange_once_, other->vi_global_second_gear_distance_overrange_once_);
    std::swap(vi_global_first_gear_distance_overrange_global_, other->vi_global_first_gear_distance_overrange_global_);
    std::swap(vi_global_second_gear_distance_overrange_global_, other->vi_global_second_gear_distance_overrange_global_);
    std::swap(vi_global_third_gear_distance_not_enough_, other->vi_global_third_gear_distance_not_enough_);
    std::swap(vi_global_fourth_gear_distance_not_enough_, other->vi_global_fourth_gear_distance_not_enough_);
    std::swap(vi_global_neutral_driving_, other->vi_global_neutral_driving_);
    std::swap(vi_global_high_speed_not_enough_, other->vi_global_high_speed_not_enough_);
    std::swap(vi_global_rpm_overrange_, other->vi_global_rpm_overrange_);
    std::swap(vi_global_gear_speed_not_match_, other->vi_global_gear_speed_not_match_);
    std::swap(vi_global_exam_timeout_, other->vi_global_exam_timeout_);
    std::swap(vi_global_turn_lamp_long_time_on_, other->vi_global_turn_lamp_long_time_on_);
    std::swap(vi_global_road_error_, other->vi_global_road_error_);
    std::swap(vi_global_exam_over_pass_, other->vi_global_exam_over_pass_);
    std::swap(vi_global_exam_over_not_pass_, other->vi_global_exam_over_not_pass_);
    std::swap(vi_global_delay_speak_start_, other->vi_global_delay_speak_start_);
    std::swap(vi_global_delay_speak_stop_, other->vi_global_delay_speak_stop_);
    std::swap(vi_global_delay_speak_none_, other->vi_global_delay_speak_none_);
    std::swap(vi_global_whole_exam_timeout_, other->vi_global_whole_exam_timeout_);
    std::swap(vi_global_start_driving_with_error_gear_, other->vi_global_start_driving_with_error_gear_);
    std::swap(vi_global_start_driving_not_release_handbrake_, other->vi_global_start_driving_not_release_handbrake_);
    std::swap(vi_global_jump_gear_, other->vi_global_jump_gear_);
    std::swap(vi_global_car_shake_, other->vi_global_car_shake_);
    std::swap(vi_global_firingup_timeout_, other->vi_global_firingup_timeout_);
    std::swap(vi_global_notify_push_fingerprint_, other->vi_global_notify_push_fingerprint_);
    std::swap(vi_global_fingerprint_pass_, other->vi_global_fingerprint_pass_);
    std::swap(vi_global_global_, other->vi_global_global_);
    std::swap(vi_global_40100_, other->vi_global_40100_);
    std::swap(vi_global_40200_, other->vi_global_40200_);
    std::swap(vi_global_40300_, other->vi_global_40300_);
    std::swap(vi_global_40400_, other->vi_global_40400_);
    std::swap(vi_global_40500_, other->vi_global_40500_);
    std::swap(vi_global_40600_, other->vi_global_40600_);
    std::swap(vi_global_40601_, other->vi_global_40601_);
    std::swap(vi_global_40700_, other->vi_global_40700_);
    std::swap(vi_global_40800_, other->vi_global_40800_);
    std::swap(vi_global_40900_, other->vi_global_40900_);
    std::swap(vi_global_41000_, other->vi_global_41000_);
    std::swap(vi_global_41001_, other->vi_global_41001_);
    std::swap(vi_global_41100_, other->vi_global_41100_);
    std::swap(vi_global_41200_, other->vi_global_41200_);
    std::swap(vi_global_41300_, other->vi_global_41300_);
    std::swap(vi_global_41400_, other->vi_global_41400_);
    std::swap(vi_global_41500_, other->vi_global_41500_);
    std::swap(vi_global_41600_, other->vi_global_41600_);
    std::swap(vi_global_50001_, other->vi_global_50001_);
    std::swap(vi_global_50002_, other->vi_global_50002_);
    std::swap(vi_global_50003_, other->vi_global_50003_);
    std::swap(vi_global_50004_, other->vi_global_50004_);
    std::swap(vi_global_50005_, other->vi_global_50005_);
    std::swap(vi_global_50006_, other->vi_global_50006_);
    std::swap(vi_41600_not_flash_near_far_, other->vi_41600_not_flash_near_far_);
    std::swap(vi_41600_not_open_near_, other->vi_41600_not_open_near_);
    std::swap(vi_41600_open_far_, other->vi_41600_open_far_);
    std::swap(vi_41600_not_open_lamp_, other->vi_41600_not_open_lamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Judge0::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Judge0_descriptor_;
  metadata.reflection = Judge0_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Judge40100::kItemCodeFieldNumber;
const int Judge40100::kItemNameFieldNumber;
const int Judge40100::kMaxTimeFieldNumber;
const int Judge40100::kNeedSpeakTouchSurroundSensorVoiceFieldNumber;
const int Judge40100::kCheckSurroundSensorCountFieldNumber;
const int Judge40100::kNeedCloseDoorBeforeRoundCarFieldNumber;
const int Judge40100::kFinishExamTypeFieldNumber;
const int Judge40100::kVi40100StartExamFieldNumber;
const int Judge40100::kVi40100EndExamFieldNumber;
const int Judge40100::kVi40100StopCarBeforeFieldNumber;
const int Judge40100::kVi40100OperationFlagVoiceBeforeFieldNumber;
const int Judge40100::kVi40100OperationFlagVoiceOverFieldNumber;
const int Judge40100::kVi40100OperationFlagNotifyFlameoutFieldNumber;
const int Judge40100::kVi40100OperationFlagNotifyHandbrakeFieldNumber;
const int Judge40100::kVi40100RoundCarLfFieldNumber;
const int Judge40100::kVi40100RoundCarRfFieldNumber;
const int Judge40100::kVi40100RoundCarLbFieldNumber;
const int Judge40100::kVi40100RoundCarRbFieldNumber;
const int Judge40100::kVi40100OperationFlagNotifyCloseDoorFieldNumber;
const int Judge40100::kVi40100RoundCarNotCloseDoorFieldNumber;
const int Judge40100::kVi40100RoundCarOrderErrorFieldNumber;
const int Judge40100::kVi40100RunninBeforFinishTestFieldNumber;
const int Judge40100::kVi40100NotCloseDoorFieldNumber;
const int Judge40100::kVi40100NotRoundCarFieldNumber;
#endif  // !_MSC_VER

Judge40100::Judge40100()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OPMessage.Judge40100)
}

void Judge40100::InitAsDefaultInstance() {
  max_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  need_speak_touch_surround_sensor_voice_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  check_surround_sensor_count_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  need_close_door_before_round_car_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  finish_exam_type_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  vi_40100_start_exam_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40100_end_exam_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40100_stop_car_before_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40100_operation_flag_voice_before_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40100_operation_flag_voice_over_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40100_operation_flag_notify_flameout_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40100_operation_flag_notify_handbrake_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40100_round_car_lf_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40100_round_car_rf_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40100_round_car_lb_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40100_round_car_rb_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40100_operation_flag_notify_close_door_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40100_round_car_not_close_door_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40100_round_car_order_error_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40100_runnin_befor_finish_test_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40100_not_close_door_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40100_not_round_car_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
}

Judge40100::Judge40100(const Judge40100& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OPMessage.Judge40100)
}

void Judge40100::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  itemcode_ = 0;
  itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_time_ = NULL;
  need_speak_touch_surround_sensor_voice_ = NULL;
  check_surround_sensor_count_ = NULL;
  need_close_door_before_round_car_ = NULL;
  finish_exam_type_ = NULL;
  vi_40100_start_exam_ = NULL;
  vi_40100_end_exam_ = NULL;
  vi_40100_stop_car_before_ = NULL;
  vi_40100_operation_flag_voice_before_ = NULL;
  vi_40100_operation_flag_voice_over_ = NULL;
  vi_40100_operation_flag_notify_flameout_ = NULL;
  vi_40100_operation_flag_notify_handbrake_ = NULL;
  vi_40100_round_car_lf_ = NULL;
  vi_40100_round_car_rf_ = NULL;
  vi_40100_round_car_lb_ = NULL;
  vi_40100_round_car_rb_ = NULL;
  vi_40100_operation_flag_notify_close_door_ = NULL;
  vi_40100_round_car_not_close_door_ = NULL;
  vi_40100_round_car_order_error_ = NULL;
  vi_40100_runnin_befor_finish_test_ = NULL;
  vi_40100_not_close_door_ = NULL;
  vi_40100_not_round_car_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Judge40100::~Judge40100() {
  // @@protoc_insertion_point(destructor:OPMessage.Judge40100)
  SharedDtor();
}

void Judge40100::SharedDtor() {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (this != default_instance_) {
    delete max_time_;
    delete need_speak_touch_surround_sensor_voice_;
    delete check_surround_sensor_count_;
    delete need_close_door_before_round_car_;
    delete finish_exam_type_;
    delete vi_40100_start_exam_;
    delete vi_40100_end_exam_;
    delete vi_40100_stop_car_before_;
    delete vi_40100_operation_flag_voice_before_;
    delete vi_40100_operation_flag_voice_over_;
    delete vi_40100_operation_flag_notify_flameout_;
    delete vi_40100_operation_flag_notify_handbrake_;
    delete vi_40100_round_car_lf_;
    delete vi_40100_round_car_rf_;
    delete vi_40100_round_car_lb_;
    delete vi_40100_round_car_rb_;
    delete vi_40100_operation_flag_notify_close_door_;
    delete vi_40100_round_car_not_close_door_;
    delete vi_40100_round_car_order_error_;
    delete vi_40100_runnin_befor_finish_test_;
    delete vi_40100_not_close_door_;
    delete vi_40100_not_round_car_;
  }
}

void Judge40100::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Judge40100::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Judge40100_descriptor_;
}

const Judge40100& Judge40100::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageKm3Config_2eproto();
  return *default_instance_;
}

Judge40100* Judge40100::default_instance_ = NULL;

Judge40100* Judge40100::New() const {
  return new Judge40100;
}

void Judge40100::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    itemcode_ = 0;
    if (has_itemname()) {
      if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        itemname_->clear();
      }
    }
    if (has_max_time()) {
      if (max_time_ != NULL) max_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_need_speak_touch_surround_sensor_voice()) {
      if (need_speak_touch_surround_sensor_voice_ != NULL) need_speak_touch_surround_sensor_voice_->::OPMessage::judgeItem::Clear();
    }
    if (has_check_surround_sensor_count()) {
      if (check_surround_sensor_count_ != NULL) check_surround_sensor_count_->::OPMessage::judgeItem::Clear();
    }
    if (has_need_close_door_before_round_car()) {
      if (need_close_door_before_round_car_ != NULL) need_close_door_before_round_car_->::OPMessage::judgeItem::Clear();
    }
    if (has_finish_exam_type()) {
      if (finish_exam_type_ != NULL) finish_exam_type_->::OPMessage::judgeItem::Clear();
    }
    if (has_vi_40100_start_exam()) {
      if (vi_40100_start_exam_ != NULL) vi_40100_start_exam_->::OPMessage::voiceItem::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_vi_40100_end_exam()) {
      if (vi_40100_end_exam_ != NULL) vi_40100_end_exam_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40100_stop_car_before()) {
      if (vi_40100_stop_car_before_ != NULL) vi_40100_stop_car_before_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40100_operation_flag_voice_before()) {
      if (vi_40100_operation_flag_voice_before_ != NULL) vi_40100_operation_flag_voice_before_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40100_operation_flag_voice_over()) {
      if (vi_40100_operation_flag_voice_over_ != NULL) vi_40100_operation_flag_voice_over_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40100_operation_flag_notify_flameout()) {
      if (vi_40100_operation_flag_notify_flameout_ != NULL) vi_40100_operation_flag_notify_flameout_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40100_operation_flag_notify_handbrake()) {
      if (vi_40100_operation_flag_notify_handbrake_ != NULL) vi_40100_operation_flag_notify_handbrake_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40100_round_car_lf()) {
      if (vi_40100_round_car_lf_ != NULL) vi_40100_round_car_lf_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40100_round_car_rf()) {
      if (vi_40100_round_car_rf_ != NULL) vi_40100_round_car_rf_->::OPMessage::voiceItem::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    if (has_vi_40100_round_car_lb()) {
      if (vi_40100_round_car_lb_ != NULL) vi_40100_round_car_lb_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40100_round_car_rb()) {
      if (vi_40100_round_car_rb_ != NULL) vi_40100_round_car_rb_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40100_operation_flag_notify_close_door()) {
      if (vi_40100_operation_flag_notify_close_door_ != NULL) vi_40100_operation_flag_notify_close_door_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40100_round_car_not_close_door()) {
      if (vi_40100_round_car_not_close_door_ != NULL) vi_40100_round_car_not_close_door_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40100_round_car_order_error()) {
      if (vi_40100_round_car_order_error_ != NULL) vi_40100_round_car_order_error_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40100_runnin_befor_finish_test()) {
      if (vi_40100_runnin_befor_finish_test_ != NULL) vi_40100_runnin_befor_finish_test_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40100_not_close_door()) {
      if (vi_40100_not_close_door_ != NULL) vi_40100_not_close_door_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40100_not_round_car()) {
      if (vi_40100_not_round_car_ != NULL) vi_40100_not_round_car_->::OPMessage::voiceItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Judge40100::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OPMessage.Judge40100)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemcode_)));
          set_has_itemcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_itemName;
        break;
      }

      // optional string itemName = 2;
      case 2: {
        if (tag == 18) {
         parse_itemName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itemname().data(), this->itemname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "itemname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_max_time;
        break;
      }

      // optional .OPMessage.judgeItem max_time = 3;
      case 3: {
        if (tag == 26) {
         parse_max_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_need_speak_touch_surround_sensor_voice;
        break;
      }

      // optional .OPMessage.judgeItem need_speak_touch_surround_sensor_voice = 4;
      case 4: {
        if (tag == 34) {
         parse_need_speak_touch_surround_sensor_voice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_need_speak_touch_surround_sensor_voice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_check_surround_sensor_count;
        break;
      }

      // optional .OPMessage.judgeItem check_surround_sensor_count = 5;
      case 5: {
        if (tag == 42) {
         parse_check_surround_sensor_count:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_check_surround_sensor_count()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_need_close_door_before_round_car;
        break;
      }

      // optional .OPMessage.judgeItem need_close_door_before_round_car = 6;
      case 6: {
        if (tag == 50) {
         parse_need_close_door_before_round_car:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_need_close_door_before_round_car()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_finish_exam_type;
        break;
      }

      // optional .OPMessage.judgeItem finish_exam_type = 7;
      case 7: {
        if (tag == 58) {
         parse_finish_exam_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_finish_exam_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_vi_40100_start_exam;
        break;
      }

      // optional .OPMessage.voiceItem vi_40100_start_exam = 8;
      case 8: {
        if (tag == 66) {
         parse_vi_40100_start_exam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40100_start_exam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_vi_40100_end_exam;
        break;
      }

      // optional .OPMessage.voiceItem vi_40100_end_exam = 9;
      case 9: {
        if (tag == 74) {
         parse_vi_40100_end_exam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40100_end_exam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_vi_40100_stop_car_before;
        break;
      }

      // optional .OPMessage.voiceItem vi_40100_stop_car_before = 10;
      case 10: {
        if (tag == 82) {
         parse_vi_40100_stop_car_before:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40100_stop_car_before()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_vi_40100_operation_flag_voice_before;
        break;
      }

      // optional .OPMessage.voiceItem vi_40100_operation_flag_voice_before = 11;
      case 11: {
        if (tag == 90) {
         parse_vi_40100_operation_flag_voice_before:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40100_operation_flag_voice_before()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_vi_40100_operation_flag_voice_over;
        break;
      }

      // optional .OPMessage.voiceItem vi_40100_operation_flag_voice_over = 12;
      case 12: {
        if (tag == 98) {
         parse_vi_40100_operation_flag_voice_over:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40100_operation_flag_voice_over()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_vi_40100_operation_flag_notify_flameout;
        break;
      }

      // optional .OPMessage.voiceItem vi_40100_operation_flag_notify_flameout = 13;
      case 13: {
        if (tag == 106) {
         parse_vi_40100_operation_flag_notify_flameout:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40100_operation_flag_notify_flameout()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_vi_40100_operation_flag_notify_handbrake;
        break;
      }

      // optional .OPMessage.voiceItem vi_40100_operation_flag_notify_handbrake = 14;
      case 14: {
        if (tag == 114) {
         parse_vi_40100_operation_flag_notify_handbrake:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40100_operation_flag_notify_handbrake()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_vi_40100_round_car_lf;
        break;
      }

      // optional .OPMessage.voiceItem vi_40100_round_car_lf = 15;
      case 15: {
        if (tag == 122) {
         parse_vi_40100_round_car_lf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40100_round_car_lf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_vi_40100_round_car_rf;
        break;
      }

      // optional .OPMessage.voiceItem vi_40100_round_car_rf = 16;
      case 16: {
        if (tag == 130) {
         parse_vi_40100_round_car_rf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40100_round_car_rf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_vi_40100_round_car_lb;
        break;
      }

      // optional .OPMessage.voiceItem vi_40100_round_car_lb = 17;
      case 17: {
        if (tag == 138) {
         parse_vi_40100_round_car_lb:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40100_round_car_lb()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_vi_40100_round_car_rb;
        break;
      }

      // optional .OPMessage.voiceItem vi_40100_round_car_rb = 18;
      case 18: {
        if (tag == 146) {
         parse_vi_40100_round_car_rb:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40100_round_car_rb()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_vi_40100_operation_flag_notify_close_door;
        break;
      }

      // optional .OPMessage.voiceItem vi_40100_operation_flag_notify_close_door = 19;
      case 19: {
        if (tag == 154) {
         parse_vi_40100_operation_flag_notify_close_door:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40100_operation_flag_notify_close_door()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_vi_40100_round_car_not_close_door;
        break;
      }

      // optional .OPMessage.voiceItem vi_40100_round_car_not_close_door = 20;
      case 20: {
        if (tag == 162) {
         parse_vi_40100_round_car_not_close_door:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40100_round_car_not_close_door()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_vi_40100_round_car_order_error;
        break;
      }

      // optional .OPMessage.voiceItem vi_40100_round_car_order_error = 21;
      case 21: {
        if (tag == 170) {
         parse_vi_40100_round_car_order_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40100_round_car_order_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_vi_40100_runnin_befor_finish_test;
        break;
      }

      // optional .OPMessage.voiceItem vi_40100_runnin_befor_finish_test = 22;
      case 22: {
        if (tag == 178) {
         parse_vi_40100_runnin_befor_finish_test:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40100_runnin_befor_finish_test()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_vi_40100_not_close_door;
        break;
      }

      // optional .OPMessage.voiceItem vi_40100_not_close_door = 23;
      case 23: {
        if (tag == 186) {
         parse_vi_40100_not_close_door:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40100_not_close_door()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_vi_40100_not_round_car;
        break;
      }

      // optional .OPMessage.voiceItem vi_40100_not_round_car = 24;
      case 24: {
        if (tag == 194) {
         parse_vi_40100_not_round_car:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40100_not_round_car()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OPMessage.Judge40100)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OPMessage.Judge40100)
  return false;
#undef DO_
}

void Judge40100::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OPMessage.Judge40100)
  // optional int32 itemCode = 1;
  if (has_itemcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemcode(), output);
  }

  // optional string itemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->itemname(), output);
  }

  // optional .OPMessage.judgeItem max_time = 3;
  if (has_max_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->max_time(), output);
  }

  // optional .OPMessage.judgeItem need_speak_touch_surround_sensor_voice = 4;
  if (has_need_speak_touch_surround_sensor_voice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->need_speak_touch_surround_sensor_voice(), output);
  }

  // optional .OPMessage.judgeItem check_surround_sensor_count = 5;
  if (has_check_surround_sensor_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->check_surround_sensor_count(), output);
  }

  // optional .OPMessage.judgeItem need_close_door_before_round_car = 6;
  if (has_need_close_door_before_round_car()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->need_close_door_before_round_car(), output);
  }

  // optional .OPMessage.judgeItem finish_exam_type = 7;
  if (has_finish_exam_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->finish_exam_type(), output);
  }

  // optional .OPMessage.voiceItem vi_40100_start_exam = 8;
  if (has_vi_40100_start_exam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->vi_40100_start_exam(), output);
  }

  // optional .OPMessage.voiceItem vi_40100_end_exam = 9;
  if (has_vi_40100_end_exam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->vi_40100_end_exam(), output);
  }

  // optional .OPMessage.voiceItem vi_40100_stop_car_before = 10;
  if (has_vi_40100_stop_car_before()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->vi_40100_stop_car_before(), output);
  }

  // optional .OPMessage.voiceItem vi_40100_operation_flag_voice_before = 11;
  if (has_vi_40100_operation_flag_voice_before()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->vi_40100_operation_flag_voice_before(), output);
  }

  // optional .OPMessage.voiceItem vi_40100_operation_flag_voice_over = 12;
  if (has_vi_40100_operation_flag_voice_over()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->vi_40100_operation_flag_voice_over(), output);
  }

  // optional .OPMessage.voiceItem vi_40100_operation_flag_notify_flameout = 13;
  if (has_vi_40100_operation_flag_notify_flameout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->vi_40100_operation_flag_notify_flameout(), output);
  }

  // optional .OPMessage.voiceItem vi_40100_operation_flag_notify_handbrake = 14;
  if (has_vi_40100_operation_flag_notify_handbrake()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->vi_40100_operation_flag_notify_handbrake(), output);
  }

  // optional .OPMessage.voiceItem vi_40100_round_car_lf = 15;
  if (has_vi_40100_round_car_lf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->vi_40100_round_car_lf(), output);
  }

  // optional .OPMessage.voiceItem vi_40100_round_car_rf = 16;
  if (has_vi_40100_round_car_rf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->vi_40100_round_car_rf(), output);
  }

  // optional .OPMessage.voiceItem vi_40100_round_car_lb = 17;
  if (has_vi_40100_round_car_lb()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->vi_40100_round_car_lb(), output);
  }

  // optional .OPMessage.voiceItem vi_40100_round_car_rb = 18;
  if (has_vi_40100_round_car_rb()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->vi_40100_round_car_rb(), output);
  }

  // optional .OPMessage.voiceItem vi_40100_operation_flag_notify_close_door = 19;
  if (has_vi_40100_operation_flag_notify_close_door()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->vi_40100_operation_flag_notify_close_door(), output);
  }

  // optional .OPMessage.voiceItem vi_40100_round_car_not_close_door = 20;
  if (has_vi_40100_round_car_not_close_door()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->vi_40100_round_car_not_close_door(), output);
  }

  // optional .OPMessage.voiceItem vi_40100_round_car_order_error = 21;
  if (has_vi_40100_round_car_order_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->vi_40100_round_car_order_error(), output);
  }

  // optional .OPMessage.voiceItem vi_40100_runnin_befor_finish_test = 22;
  if (has_vi_40100_runnin_befor_finish_test()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->vi_40100_runnin_befor_finish_test(), output);
  }

  // optional .OPMessage.voiceItem vi_40100_not_close_door = 23;
  if (has_vi_40100_not_close_door()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->vi_40100_not_close_door(), output);
  }

  // optional .OPMessage.voiceItem vi_40100_not_round_car = 24;
  if (has_vi_40100_not_round_car()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->vi_40100_not_round_car(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OPMessage.Judge40100)
}

::google::protobuf::uint8* Judge40100::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OPMessage.Judge40100)
  // optional int32 itemCode = 1;
  if (has_itemcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemcode(), target);
  }

  // optional string itemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->itemname(), target);
  }

  // optional .OPMessage.judgeItem max_time = 3;
  if (has_max_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->max_time(), target);
  }

  // optional .OPMessage.judgeItem need_speak_touch_surround_sensor_voice = 4;
  if (has_need_speak_touch_surround_sensor_voice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->need_speak_touch_surround_sensor_voice(), target);
  }

  // optional .OPMessage.judgeItem check_surround_sensor_count = 5;
  if (has_check_surround_sensor_count()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->check_surround_sensor_count(), target);
  }

  // optional .OPMessage.judgeItem need_close_door_before_round_car = 6;
  if (has_need_close_door_before_round_car()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->need_close_door_before_round_car(), target);
  }

  // optional .OPMessage.judgeItem finish_exam_type = 7;
  if (has_finish_exam_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->finish_exam_type(), target);
  }

  // optional .OPMessage.voiceItem vi_40100_start_exam = 8;
  if (has_vi_40100_start_exam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->vi_40100_start_exam(), target);
  }

  // optional .OPMessage.voiceItem vi_40100_end_exam = 9;
  if (has_vi_40100_end_exam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->vi_40100_end_exam(), target);
  }

  // optional .OPMessage.voiceItem vi_40100_stop_car_before = 10;
  if (has_vi_40100_stop_car_before()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->vi_40100_stop_car_before(), target);
  }

  // optional .OPMessage.voiceItem vi_40100_operation_flag_voice_before = 11;
  if (has_vi_40100_operation_flag_voice_before()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->vi_40100_operation_flag_voice_before(), target);
  }

  // optional .OPMessage.voiceItem vi_40100_operation_flag_voice_over = 12;
  if (has_vi_40100_operation_flag_voice_over()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->vi_40100_operation_flag_voice_over(), target);
  }

  // optional .OPMessage.voiceItem vi_40100_operation_flag_notify_flameout = 13;
  if (has_vi_40100_operation_flag_notify_flameout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->vi_40100_operation_flag_notify_flameout(), target);
  }

  // optional .OPMessage.voiceItem vi_40100_operation_flag_notify_handbrake = 14;
  if (has_vi_40100_operation_flag_notify_handbrake()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->vi_40100_operation_flag_notify_handbrake(), target);
  }

  // optional .OPMessage.voiceItem vi_40100_round_car_lf = 15;
  if (has_vi_40100_round_car_lf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->vi_40100_round_car_lf(), target);
  }

  // optional .OPMessage.voiceItem vi_40100_round_car_rf = 16;
  if (has_vi_40100_round_car_rf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->vi_40100_round_car_rf(), target);
  }

  // optional .OPMessage.voiceItem vi_40100_round_car_lb = 17;
  if (has_vi_40100_round_car_lb()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->vi_40100_round_car_lb(), target);
  }

  // optional .OPMessage.voiceItem vi_40100_round_car_rb = 18;
  if (has_vi_40100_round_car_rb()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->vi_40100_round_car_rb(), target);
  }

  // optional .OPMessage.voiceItem vi_40100_operation_flag_notify_close_door = 19;
  if (has_vi_40100_operation_flag_notify_close_door()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->vi_40100_operation_flag_notify_close_door(), target);
  }

  // optional .OPMessage.voiceItem vi_40100_round_car_not_close_door = 20;
  if (has_vi_40100_round_car_not_close_door()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->vi_40100_round_car_not_close_door(), target);
  }

  // optional .OPMessage.voiceItem vi_40100_round_car_order_error = 21;
  if (has_vi_40100_round_car_order_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->vi_40100_round_car_order_error(), target);
  }

  // optional .OPMessage.voiceItem vi_40100_runnin_befor_finish_test = 22;
  if (has_vi_40100_runnin_befor_finish_test()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->vi_40100_runnin_befor_finish_test(), target);
  }

  // optional .OPMessage.voiceItem vi_40100_not_close_door = 23;
  if (has_vi_40100_not_close_door()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->vi_40100_not_close_door(), target);
  }

  // optional .OPMessage.voiceItem vi_40100_not_round_car = 24;
  if (has_vi_40100_not_round_car()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->vi_40100_not_round_car(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OPMessage.Judge40100)
  return target;
}

int Judge40100::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemCode = 1;
    if (has_itemcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemcode());
    }

    // optional string itemName = 2;
    if (has_itemname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemname());
    }

    // optional .OPMessage.judgeItem max_time = 3;
    if (has_max_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_time());
    }

    // optional .OPMessage.judgeItem need_speak_touch_surround_sensor_voice = 4;
    if (has_need_speak_touch_surround_sensor_voice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->need_speak_touch_surround_sensor_voice());
    }

    // optional .OPMessage.judgeItem check_surround_sensor_count = 5;
    if (has_check_surround_sensor_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->check_surround_sensor_count());
    }

    // optional .OPMessage.judgeItem need_close_door_before_round_car = 6;
    if (has_need_close_door_before_round_car()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->need_close_door_before_round_car());
    }

    // optional .OPMessage.judgeItem finish_exam_type = 7;
    if (has_finish_exam_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->finish_exam_type());
    }

    // optional .OPMessage.voiceItem vi_40100_start_exam = 8;
    if (has_vi_40100_start_exam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40100_start_exam());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .OPMessage.voiceItem vi_40100_end_exam = 9;
    if (has_vi_40100_end_exam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40100_end_exam());
    }

    // optional .OPMessage.voiceItem vi_40100_stop_car_before = 10;
    if (has_vi_40100_stop_car_before()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40100_stop_car_before());
    }

    // optional .OPMessage.voiceItem vi_40100_operation_flag_voice_before = 11;
    if (has_vi_40100_operation_flag_voice_before()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40100_operation_flag_voice_before());
    }

    // optional .OPMessage.voiceItem vi_40100_operation_flag_voice_over = 12;
    if (has_vi_40100_operation_flag_voice_over()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40100_operation_flag_voice_over());
    }

    // optional .OPMessage.voiceItem vi_40100_operation_flag_notify_flameout = 13;
    if (has_vi_40100_operation_flag_notify_flameout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40100_operation_flag_notify_flameout());
    }

    // optional .OPMessage.voiceItem vi_40100_operation_flag_notify_handbrake = 14;
    if (has_vi_40100_operation_flag_notify_handbrake()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40100_operation_flag_notify_handbrake());
    }

    // optional .OPMessage.voiceItem vi_40100_round_car_lf = 15;
    if (has_vi_40100_round_car_lf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40100_round_car_lf());
    }

    // optional .OPMessage.voiceItem vi_40100_round_car_rf = 16;
    if (has_vi_40100_round_car_rf()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40100_round_car_rf());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .OPMessage.voiceItem vi_40100_round_car_lb = 17;
    if (has_vi_40100_round_car_lb()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40100_round_car_lb());
    }

    // optional .OPMessage.voiceItem vi_40100_round_car_rb = 18;
    if (has_vi_40100_round_car_rb()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40100_round_car_rb());
    }

    // optional .OPMessage.voiceItem vi_40100_operation_flag_notify_close_door = 19;
    if (has_vi_40100_operation_flag_notify_close_door()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40100_operation_flag_notify_close_door());
    }

    // optional .OPMessage.voiceItem vi_40100_round_car_not_close_door = 20;
    if (has_vi_40100_round_car_not_close_door()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40100_round_car_not_close_door());
    }

    // optional .OPMessage.voiceItem vi_40100_round_car_order_error = 21;
    if (has_vi_40100_round_car_order_error()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40100_round_car_order_error());
    }

    // optional .OPMessage.voiceItem vi_40100_runnin_befor_finish_test = 22;
    if (has_vi_40100_runnin_befor_finish_test()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40100_runnin_befor_finish_test());
    }

    // optional .OPMessage.voiceItem vi_40100_not_close_door = 23;
    if (has_vi_40100_not_close_door()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40100_not_close_door());
    }

    // optional .OPMessage.voiceItem vi_40100_not_round_car = 24;
    if (has_vi_40100_not_round_car()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40100_not_round_car());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Judge40100::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Judge40100* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Judge40100*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Judge40100::MergeFrom(const Judge40100& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemcode()) {
      set_itemcode(from.itemcode());
    }
    if (from.has_itemname()) {
      set_itemname(from.itemname());
    }
    if (from.has_max_time()) {
      mutable_max_time()->::OPMessage::judgeItem::MergeFrom(from.max_time());
    }
    if (from.has_need_speak_touch_surround_sensor_voice()) {
      mutable_need_speak_touch_surround_sensor_voice()->::OPMessage::judgeItem::MergeFrom(from.need_speak_touch_surround_sensor_voice());
    }
    if (from.has_check_surround_sensor_count()) {
      mutable_check_surround_sensor_count()->::OPMessage::judgeItem::MergeFrom(from.check_surround_sensor_count());
    }
    if (from.has_need_close_door_before_round_car()) {
      mutable_need_close_door_before_round_car()->::OPMessage::judgeItem::MergeFrom(from.need_close_door_before_round_car());
    }
    if (from.has_finish_exam_type()) {
      mutable_finish_exam_type()->::OPMessage::judgeItem::MergeFrom(from.finish_exam_type());
    }
    if (from.has_vi_40100_start_exam()) {
      mutable_vi_40100_start_exam()->::OPMessage::voiceItem::MergeFrom(from.vi_40100_start_exam());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vi_40100_end_exam()) {
      mutable_vi_40100_end_exam()->::OPMessage::voiceItem::MergeFrom(from.vi_40100_end_exam());
    }
    if (from.has_vi_40100_stop_car_before()) {
      mutable_vi_40100_stop_car_before()->::OPMessage::voiceItem::MergeFrom(from.vi_40100_stop_car_before());
    }
    if (from.has_vi_40100_operation_flag_voice_before()) {
      mutable_vi_40100_operation_flag_voice_before()->::OPMessage::voiceItem::MergeFrom(from.vi_40100_operation_flag_voice_before());
    }
    if (from.has_vi_40100_operation_flag_voice_over()) {
      mutable_vi_40100_operation_flag_voice_over()->::OPMessage::voiceItem::MergeFrom(from.vi_40100_operation_flag_voice_over());
    }
    if (from.has_vi_40100_operation_flag_notify_flameout()) {
      mutable_vi_40100_operation_flag_notify_flameout()->::OPMessage::voiceItem::MergeFrom(from.vi_40100_operation_flag_notify_flameout());
    }
    if (from.has_vi_40100_operation_flag_notify_handbrake()) {
      mutable_vi_40100_operation_flag_notify_handbrake()->::OPMessage::voiceItem::MergeFrom(from.vi_40100_operation_flag_notify_handbrake());
    }
    if (from.has_vi_40100_round_car_lf()) {
      mutable_vi_40100_round_car_lf()->::OPMessage::voiceItem::MergeFrom(from.vi_40100_round_car_lf());
    }
    if (from.has_vi_40100_round_car_rf()) {
      mutable_vi_40100_round_car_rf()->::OPMessage::voiceItem::MergeFrom(from.vi_40100_round_car_rf());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_vi_40100_round_car_lb()) {
      mutable_vi_40100_round_car_lb()->::OPMessage::voiceItem::MergeFrom(from.vi_40100_round_car_lb());
    }
    if (from.has_vi_40100_round_car_rb()) {
      mutable_vi_40100_round_car_rb()->::OPMessage::voiceItem::MergeFrom(from.vi_40100_round_car_rb());
    }
    if (from.has_vi_40100_operation_flag_notify_close_door()) {
      mutable_vi_40100_operation_flag_notify_close_door()->::OPMessage::voiceItem::MergeFrom(from.vi_40100_operation_flag_notify_close_door());
    }
    if (from.has_vi_40100_round_car_not_close_door()) {
      mutable_vi_40100_round_car_not_close_door()->::OPMessage::voiceItem::MergeFrom(from.vi_40100_round_car_not_close_door());
    }
    if (from.has_vi_40100_round_car_order_error()) {
      mutable_vi_40100_round_car_order_error()->::OPMessage::voiceItem::MergeFrom(from.vi_40100_round_car_order_error());
    }
    if (from.has_vi_40100_runnin_befor_finish_test()) {
      mutable_vi_40100_runnin_befor_finish_test()->::OPMessage::voiceItem::MergeFrom(from.vi_40100_runnin_befor_finish_test());
    }
    if (from.has_vi_40100_not_close_door()) {
      mutable_vi_40100_not_close_door()->::OPMessage::voiceItem::MergeFrom(from.vi_40100_not_close_door());
    }
    if (from.has_vi_40100_not_round_car()) {
      mutable_vi_40100_not_round_car()->::OPMessage::voiceItem::MergeFrom(from.vi_40100_not_round_car());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Judge40100::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Judge40100::CopyFrom(const Judge40100& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Judge40100::IsInitialized() const {

  return true;
}

void Judge40100::Swap(Judge40100* other) {
  if (other != this) {
    std::swap(itemcode_, other->itemcode_);
    std::swap(itemname_, other->itemname_);
    std::swap(max_time_, other->max_time_);
    std::swap(need_speak_touch_surround_sensor_voice_, other->need_speak_touch_surround_sensor_voice_);
    std::swap(check_surround_sensor_count_, other->check_surround_sensor_count_);
    std::swap(need_close_door_before_round_car_, other->need_close_door_before_round_car_);
    std::swap(finish_exam_type_, other->finish_exam_type_);
    std::swap(vi_40100_start_exam_, other->vi_40100_start_exam_);
    std::swap(vi_40100_end_exam_, other->vi_40100_end_exam_);
    std::swap(vi_40100_stop_car_before_, other->vi_40100_stop_car_before_);
    std::swap(vi_40100_operation_flag_voice_before_, other->vi_40100_operation_flag_voice_before_);
    std::swap(vi_40100_operation_flag_voice_over_, other->vi_40100_operation_flag_voice_over_);
    std::swap(vi_40100_operation_flag_notify_flameout_, other->vi_40100_operation_flag_notify_flameout_);
    std::swap(vi_40100_operation_flag_notify_handbrake_, other->vi_40100_operation_flag_notify_handbrake_);
    std::swap(vi_40100_round_car_lf_, other->vi_40100_round_car_lf_);
    std::swap(vi_40100_round_car_rf_, other->vi_40100_round_car_rf_);
    std::swap(vi_40100_round_car_lb_, other->vi_40100_round_car_lb_);
    std::swap(vi_40100_round_car_rb_, other->vi_40100_round_car_rb_);
    std::swap(vi_40100_operation_flag_notify_close_door_, other->vi_40100_operation_flag_notify_close_door_);
    std::swap(vi_40100_round_car_not_close_door_, other->vi_40100_round_car_not_close_door_);
    std::swap(vi_40100_round_car_order_error_, other->vi_40100_round_car_order_error_);
    std::swap(vi_40100_runnin_befor_finish_test_, other->vi_40100_runnin_befor_finish_test_);
    std::swap(vi_40100_not_close_door_, other->vi_40100_not_close_door_);
    std::swap(vi_40100_not_round_car_, other->vi_40100_not_round_car_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Judge40100::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Judge40100_descriptor_;
  metadata.reflection = Judge40100_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Judge41600::kItemCodeFieldNumber;
const int Judge41600::kItemNameFieldNumber;
const int Judge41600::kMinNearLampFlashCountFieldNumber;
const int Judge41600::kMinFarLampFlashCountFieldNumber;
#endif  // !_MSC_VER

Judge41600::Judge41600()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OPMessage.Judge41600)
}

void Judge41600::InitAsDefaultInstance() {
  min_near_lamp_flash_count_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  min_far_lamp_flash_count_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
}

Judge41600::Judge41600(const Judge41600& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OPMessage.Judge41600)
}

void Judge41600::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  itemcode_ = 0;
  itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  min_near_lamp_flash_count_ = NULL;
  min_far_lamp_flash_count_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Judge41600::~Judge41600() {
  // @@protoc_insertion_point(destructor:OPMessage.Judge41600)
  SharedDtor();
}

void Judge41600::SharedDtor() {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (this != default_instance_) {
    delete min_near_lamp_flash_count_;
    delete min_far_lamp_flash_count_;
  }
}

void Judge41600::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Judge41600::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Judge41600_descriptor_;
}

const Judge41600& Judge41600::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageKm3Config_2eproto();
  return *default_instance_;
}

Judge41600* Judge41600::default_instance_ = NULL;

Judge41600* Judge41600::New() const {
  return new Judge41600;
}

void Judge41600::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    itemcode_ = 0;
    if (has_itemname()) {
      if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        itemname_->clear();
      }
    }
    if (has_min_near_lamp_flash_count()) {
      if (min_near_lamp_flash_count_ != NULL) min_near_lamp_flash_count_->::OPMessage::judgeItem::Clear();
    }
    if (has_min_far_lamp_flash_count()) {
      if (min_far_lamp_flash_count_ != NULL) min_far_lamp_flash_count_->::OPMessage::judgeItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Judge41600::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OPMessage.Judge41600)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemcode_)));
          set_has_itemcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_itemName;
        break;
      }

      // optional string itemName = 2;
      case 2: {
        if (tag == 18) {
         parse_itemName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itemname().data(), this->itemname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "itemname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_min_near_lamp_flash_count;
        break;
      }

      // optional .OPMessage.judgeItem min_near_lamp_flash_count = 3;
      case 3: {
        if (tag == 26) {
         parse_min_near_lamp_flash_count:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_near_lamp_flash_count()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_min_far_lamp_flash_count;
        break;
      }

      // optional .OPMessage.judgeItem min_far_lamp_flash_count = 4;
      case 4: {
        if (tag == 34) {
         parse_min_far_lamp_flash_count:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_far_lamp_flash_count()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OPMessage.Judge41600)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OPMessage.Judge41600)
  return false;
#undef DO_
}

void Judge41600::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OPMessage.Judge41600)
  // optional int32 itemCode = 1;
  if (has_itemcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemcode(), output);
  }

  // optional string itemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->itemname(), output);
  }

  // optional .OPMessage.judgeItem min_near_lamp_flash_count = 3;
  if (has_min_near_lamp_flash_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->min_near_lamp_flash_count(), output);
  }

  // optional .OPMessage.judgeItem min_far_lamp_flash_count = 4;
  if (has_min_far_lamp_flash_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->min_far_lamp_flash_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OPMessage.Judge41600)
}

::google::protobuf::uint8* Judge41600::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OPMessage.Judge41600)
  // optional int32 itemCode = 1;
  if (has_itemcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemcode(), target);
  }

  // optional string itemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->itemname(), target);
  }

  // optional .OPMessage.judgeItem min_near_lamp_flash_count = 3;
  if (has_min_near_lamp_flash_count()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->min_near_lamp_flash_count(), target);
  }

  // optional .OPMessage.judgeItem min_far_lamp_flash_count = 4;
  if (has_min_far_lamp_flash_count()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->min_far_lamp_flash_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OPMessage.Judge41600)
  return target;
}

int Judge41600::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemCode = 1;
    if (has_itemcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemcode());
    }

    // optional string itemName = 2;
    if (has_itemname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemname());
    }

    // optional .OPMessage.judgeItem min_near_lamp_flash_count = 3;
    if (has_min_near_lamp_flash_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->min_near_lamp_flash_count());
    }

    // optional .OPMessage.judgeItem min_far_lamp_flash_count = 4;
    if (has_min_far_lamp_flash_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->min_far_lamp_flash_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Judge41600::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Judge41600* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Judge41600*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Judge41600::MergeFrom(const Judge41600& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemcode()) {
      set_itemcode(from.itemcode());
    }
    if (from.has_itemname()) {
      set_itemname(from.itemname());
    }
    if (from.has_min_near_lamp_flash_count()) {
      mutable_min_near_lamp_flash_count()->::OPMessage::judgeItem::MergeFrom(from.min_near_lamp_flash_count());
    }
    if (from.has_min_far_lamp_flash_count()) {
      mutable_min_far_lamp_flash_count()->::OPMessage::judgeItem::MergeFrom(from.min_far_lamp_flash_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Judge41600::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Judge41600::CopyFrom(const Judge41600& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Judge41600::IsInitialized() const {

  return true;
}

void Judge41600::Swap(Judge41600* other) {
  if (other != this) {
    std::swap(itemcode_, other->itemcode_);
    std::swap(itemname_, other->itemname_);
    std::swap(min_near_lamp_flash_count_, other->min_near_lamp_flash_count_);
    std::swap(min_far_lamp_flash_count_, other->min_far_lamp_flash_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Judge41600::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Judge41600_descriptor_;
  metadata.reflection = Judge41600_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Judge40200::kItemCodeFieldNumber;
const int Judge40200::kItemNameFieldNumber;
const int Judge40200::kMaxTimeFieldNumber;
const int Judge40200::kMaxTriggerDistanceFieldNumber;
const int Judge40200::kMinHornTimeFieldNumber;
const int Judge40200::kMinTurnSignalTimeFieldNumber;
const int Judge40200::kVi40200StartExamFieldNumber;
const int Judge40200::kVi40200EndExamFieldNumber;
const int Judge40200::kVi40200TurnLampUseErrorFieldNumber;
const int Judge40200::kVi40200TurnLampNotUseFieldNumber;
const int Judge40200::kVi40200HornNotUseFieldNumber;
#endif  // !_MSC_VER

Judge40200::Judge40200()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OPMessage.Judge40200)
}

void Judge40200::InitAsDefaultInstance() {
  max_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  max_trigger_distance_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  min_horn_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  min_turn_signal_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  vi_40200_start_exam_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40200_end_exam_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40200_turn_lamp_use_error_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40200_turn_lamp_not_use_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40200_horn_not_use_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
}

Judge40200::Judge40200(const Judge40200& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OPMessage.Judge40200)
}

void Judge40200::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  itemcode_ = 0;
  itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_time_ = NULL;
  max_trigger_distance_ = NULL;
  min_horn_time_ = NULL;
  min_turn_signal_time_ = NULL;
  vi_40200_start_exam_ = NULL;
  vi_40200_end_exam_ = NULL;
  vi_40200_turn_lamp_use_error_ = NULL;
  vi_40200_turn_lamp_not_use_ = NULL;
  vi_40200_horn_not_use_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Judge40200::~Judge40200() {
  // @@protoc_insertion_point(destructor:OPMessage.Judge40200)
  SharedDtor();
}

void Judge40200::SharedDtor() {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (this != default_instance_) {
    delete max_time_;
    delete max_trigger_distance_;
    delete min_horn_time_;
    delete min_turn_signal_time_;
    delete vi_40200_start_exam_;
    delete vi_40200_end_exam_;
    delete vi_40200_turn_lamp_use_error_;
    delete vi_40200_turn_lamp_not_use_;
    delete vi_40200_horn_not_use_;
  }
}

void Judge40200::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Judge40200::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Judge40200_descriptor_;
}

const Judge40200& Judge40200::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageKm3Config_2eproto();
  return *default_instance_;
}

Judge40200* Judge40200::default_instance_ = NULL;

Judge40200* Judge40200::New() const {
  return new Judge40200;
}

void Judge40200::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    itemcode_ = 0;
    if (has_itemname()) {
      if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        itemname_->clear();
      }
    }
    if (has_max_time()) {
      if (max_time_ != NULL) max_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_max_trigger_distance()) {
      if (max_trigger_distance_ != NULL) max_trigger_distance_->::OPMessage::judgeItem::Clear();
    }
    if (has_min_horn_time()) {
      if (min_horn_time_ != NULL) min_horn_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_min_turn_signal_time()) {
      if (min_turn_signal_time_ != NULL) min_turn_signal_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_vi_40200_start_exam()) {
      if (vi_40200_start_exam_ != NULL) vi_40200_start_exam_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40200_end_exam()) {
      if (vi_40200_end_exam_ != NULL) vi_40200_end_exam_->::OPMessage::voiceItem::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    if (has_vi_40200_turn_lamp_use_error()) {
      if (vi_40200_turn_lamp_use_error_ != NULL) vi_40200_turn_lamp_use_error_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40200_turn_lamp_not_use()) {
      if (vi_40200_turn_lamp_not_use_ != NULL) vi_40200_turn_lamp_not_use_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40200_horn_not_use()) {
      if (vi_40200_horn_not_use_ != NULL) vi_40200_horn_not_use_->::OPMessage::voiceItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Judge40200::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OPMessage.Judge40200)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemcode_)));
          set_has_itemcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_itemName;
        break;
      }

      // optional string itemName = 2;
      case 2: {
        if (tag == 18) {
         parse_itemName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itemname().data(), this->itemname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "itemname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_max_time;
        break;
      }

      // optional .OPMessage.judgeItem max_time = 3;
      case 3: {
        if (tag == 26) {
         parse_max_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_max_trigger_distance;
        break;
      }

      // optional .OPMessage.judgeItem max_trigger_distance = 4;
      case 4: {
        if (tag == 34) {
         parse_max_trigger_distance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_trigger_distance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_min_horn_time;
        break;
      }

      // optional .OPMessage.judgeItem min_horn_time = 5;
      case 5: {
        if (tag == 42) {
         parse_min_horn_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_horn_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_min_turn_signal_time;
        break;
      }

      // optional .OPMessage.judgeItem min_turn_signal_time = 6;
      case 6: {
        if (tag == 50) {
         parse_min_turn_signal_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_turn_signal_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_vi_40200_start_exam;
        break;
      }

      // optional .OPMessage.voiceItem vi_40200_start_exam = 7;
      case 7: {
        if (tag == 58) {
         parse_vi_40200_start_exam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40200_start_exam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_vi_40200_end_exam;
        break;
      }

      // optional .OPMessage.voiceItem vi_40200_end_exam = 8;
      case 8: {
        if (tag == 66) {
         parse_vi_40200_end_exam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40200_end_exam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_vi_40200_turn_lamp_use_error;
        break;
      }

      // optional .OPMessage.voiceItem vi_40200_turn_lamp_use_error = 9;
      case 9: {
        if (tag == 74) {
         parse_vi_40200_turn_lamp_use_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40200_turn_lamp_use_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_vi_40200_turn_lamp_not_use;
        break;
      }

      // optional .OPMessage.voiceItem vi_40200_turn_lamp_not_use = 10;
      case 10: {
        if (tag == 82) {
         parse_vi_40200_turn_lamp_not_use:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40200_turn_lamp_not_use()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_vi_40200_horn_not_use;
        break;
      }

      // optional .OPMessage.voiceItem vi_40200_horn_not_use = 11;
      case 11: {
        if (tag == 90) {
         parse_vi_40200_horn_not_use:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40200_horn_not_use()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OPMessage.Judge40200)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OPMessage.Judge40200)
  return false;
#undef DO_
}

void Judge40200::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OPMessage.Judge40200)
  // optional int32 itemCode = 1;
  if (has_itemcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemcode(), output);
  }

  // optional string itemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->itemname(), output);
  }

  // optional .OPMessage.judgeItem max_time = 3;
  if (has_max_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->max_time(), output);
  }

  // optional .OPMessage.judgeItem max_trigger_distance = 4;
  if (has_max_trigger_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->max_trigger_distance(), output);
  }

  // optional .OPMessage.judgeItem min_horn_time = 5;
  if (has_min_horn_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->min_horn_time(), output);
  }

  // optional .OPMessage.judgeItem min_turn_signal_time = 6;
  if (has_min_turn_signal_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->min_turn_signal_time(), output);
  }

  // optional .OPMessage.voiceItem vi_40200_start_exam = 7;
  if (has_vi_40200_start_exam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->vi_40200_start_exam(), output);
  }

  // optional .OPMessage.voiceItem vi_40200_end_exam = 8;
  if (has_vi_40200_end_exam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->vi_40200_end_exam(), output);
  }

  // optional .OPMessage.voiceItem vi_40200_turn_lamp_use_error = 9;
  if (has_vi_40200_turn_lamp_use_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->vi_40200_turn_lamp_use_error(), output);
  }

  // optional .OPMessage.voiceItem vi_40200_turn_lamp_not_use = 10;
  if (has_vi_40200_turn_lamp_not_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->vi_40200_turn_lamp_not_use(), output);
  }

  // optional .OPMessage.voiceItem vi_40200_horn_not_use = 11;
  if (has_vi_40200_horn_not_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->vi_40200_horn_not_use(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OPMessage.Judge40200)
}

::google::protobuf::uint8* Judge40200::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OPMessage.Judge40200)
  // optional int32 itemCode = 1;
  if (has_itemcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemcode(), target);
  }

  // optional string itemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->itemname(), target);
  }

  // optional .OPMessage.judgeItem max_time = 3;
  if (has_max_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->max_time(), target);
  }

  // optional .OPMessage.judgeItem max_trigger_distance = 4;
  if (has_max_trigger_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->max_trigger_distance(), target);
  }

  // optional .OPMessage.judgeItem min_horn_time = 5;
  if (has_min_horn_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->min_horn_time(), target);
  }

  // optional .OPMessage.judgeItem min_turn_signal_time = 6;
  if (has_min_turn_signal_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->min_turn_signal_time(), target);
  }

  // optional .OPMessage.voiceItem vi_40200_start_exam = 7;
  if (has_vi_40200_start_exam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->vi_40200_start_exam(), target);
  }

  // optional .OPMessage.voiceItem vi_40200_end_exam = 8;
  if (has_vi_40200_end_exam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->vi_40200_end_exam(), target);
  }

  // optional .OPMessage.voiceItem vi_40200_turn_lamp_use_error = 9;
  if (has_vi_40200_turn_lamp_use_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->vi_40200_turn_lamp_use_error(), target);
  }

  // optional .OPMessage.voiceItem vi_40200_turn_lamp_not_use = 10;
  if (has_vi_40200_turn_lamp_not_use()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->vi_40200_turn_lamp_not_use(), target);
  }

  // optional .OPMessage.voiceItem vi_40200_horn_not_use = 11;
  if (has_vi_40200_horn_not_use()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->vi_40200_horn_not_use(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OPMessage.Judge40200)
  return target;
}

int Judge40200::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemCode = 1;
    if (has_itemcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemcode());
    }

    // optional string itemName = 2;
    if (has_itemname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemname());
    }

    // optional .OPMessage.judgeItem max_time = 3;
    if (has_max_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_time());
    }

    // optional .OPMessage.judgeItem max_trigger_distance = 4;
    if (has_max_trigger_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_trigger_distance());
    }

    // optional .OPMessage.judgeItem min_horn_time = 5;
    if (has_min_horn_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->min_horn_time());
    }

    // optional .OPMessage.judgeItem min_turn_signal_time = 6;
    if (has_min_turn_signal_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->min_turn_signal_time());
    }

    // optional .OPMessage.voiceItem vi_40200_start_exam = 7;
    if (has_vi_40200_start_exam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40200_start_exam());
    }

    // optional .OPMessage.voiceItem vi_40200_end_exam = 8;
    if (has_vi_40200_end_exam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40200_end_exam());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .OPMessage.voiceItem vi_40200_turn_lamp_use_error = 9;
    if (has_vi_40200_turn_lamp_use_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40200_turn_lamp_use_error());
    }

    // optional .OPMessage.voiceItem vi_40200_turn_lamp_not_use = 10;
    if (has_vi_40200_turn_lamp_not_use()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40200_turn_lamp_not_use());
    }

    // optional .OPMessage.voiceItem vi_40200_horn_not_use = 11;
    if (has_vi_40200_horn_not_use()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40200_horn_not_use());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Judge40200::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Judge40200* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Judge40200*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Judge40200::MergeFrom(const Judge40200& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemcode()) {
      set_itemcode(from.itemcode());
    }
    if (from.has_itemname()) {
      set_itemname(from.itemname());
    }
    if (from.has_max_time()) {
      mutable_max_time()->::OPMessage::judgeItem::MergeFrom(from.max_time());
    }
    if (from.has_max_trigger_distance()) {
      mutable_max_trigger_distance()->::OPMessage::judgeItem::MergeFrom(from.max_trigger_distance());
    }
    if (from.has_min_horn_time()) {
      mutable_min_horn_time()->::OPMessage::judgeItem::MergeFrom(from.min_horn_time());
    }
    if (from.has_min_turn_signal_time()) {
      mutable_min_turn_signal_time()->::OPMessage::judgeItem::MergeFrom(from.min_turn_signal_time());
    }
    if (from.has_vi_40200_start_exam()) {
      mutable_vi_40200_start_exam()->::OPMessage::voiceItem::MergeFrom(from.vi_40200_start_exam());
    }
    if (from.has_vi_40200_end_exam()) {
      mutable_vi_40200_end_exam()->::OPMessage::voiceItem::MergeFrom(from.vi_40200_end_exam());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vi_40200_turn_lamp_use_error()) {
      mutable_vi_40200_turn_lamp_use_error()->::OPMessage::voiceItem::MergeFrom(from.vi_40200_turn_lamp_use_error());
    }
    if (from.has_vi_40200_turn_lamp_not_use()) {
      mutable_vi_40200_turn_lamp_not_use()->::OPMessage::voiceItem::MergeFrom(from.vi_40200_turn_lamp_not_use());
    }
    if (from.has_vi_40200_horn_not_use()) {
      mutable_vi_40200_horn_not_use()->::OPMessage::voiceItem::MergeFrom(from.vi_40200_horn_not_use());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Judge40200::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Judge40200::CopyFrom(const Judge40200& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Judge40200::IsInitialized() const {

  return true;
}

void Judge40200::Swap(Judge40200* other) {
  if (other != this) {
    std::swap(itemcode_, other->itemcode_);
    std::swap(itemname_, other->itemname_);
    std::swap(max_time_, other->max_time_);
    std::swap(max_trigger_distance_, other->max_trigger_distance_);
    std::swap(min_horn_time_, other->min_horn_time_);
    std::swap(min_turn_signal_time_, other->min_turn_signal_time_);
    std::swap(vi_40200_start_exam_, other->vi_40200_start_exam_);
    std::swap(vi_40200_end_exam_, other->vi_40200_end_exam_);
    std::swap(vi_40200_turn_lamp_use_error_, other->vi_40200_turn_lamp_use_error_);
    std::swap(vi_40200_turn_lamp_not_use_, other->vi_40200_turn_lamp_not_use_);
    std::swap(vi_40200_horn_not_use_, other->vi_40200_horn_not_use_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Judge40200::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Judge40200_descriptor_;
  metadata.reflection = Judge40200_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Judge40400::kItemCodeFieldNumber;
const int Judge40400::kItemNameFieldNumber;
const int Judge40400::kMaxTimeFieldNumber;
const int Judge40400::kMaxTriggerDistanceFieldNumber;
const int Judge40400::kMaxGearFinishTimeFieldNumber;
const int Judge40400::kGearActions0FieldNumber;
const int Judge40400::kGearActions1FieldNumber;
const int Judge40400::kGearActions2FieldNumber;
const int Judge40400::kGearActions3FieldNumber;
const int Judge40400::kGearActions4FieldNumber;
const int Judge40400::kNotifyAfterClutchDownFieldNumber;
const int Judge40400::kCheckAfterClutchUpFieldNumber;
const int Judge40400::kVi40400StartExamFieldNumber;
const int Judge40400::kVi40400EndExamFieldNumber;
const int Judge40400::kVi40400Upto2FieldNumber;
const int Judge40400::kVi40400Upto3FieldNumber;
const int Judge40400::kVi40400Upto4FieldNumber;
const int Judge40400::kVi40400Upto5FieldNumber;
const int Judge40400::kVi40400Downto1FieldNumber;
const int Judge40400::kVi40400Downto2FieldNumber;
const int Judge40400::kVi40400Downto3FieldNumber;
const int Judge40400::kVi40400Downto4FieldNumber;
const int Judge40400::kVi40400GearErrorFieldNumber;
const int Judge40400::kVi40400NotFinishOperationFieldNumber;
const int Judge40400::kVi40400EnterGearErrorFieldNumber;
#endif  // !_MSC_VER

Judge40400::Judge40400()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OPMessage.Judge40400)
}

void Judge40400::InitAsDefaultInstance() {
  max_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  max_trigger_distance_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  max_gear_finish_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  gear_actions_0_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  gear_actions_1_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  gear_actions_2_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  gear_actions_3_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  gear_actions_4_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  notify_after_clutch_down_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  check_after_clutch_up_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  vi_40400_start_exam_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40400_end_exam_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40400_upto_2_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40400_upto_3_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40400_upto_4_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40400_upto_5_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40400_downto_1_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40400_downto_2_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40400_downto_3_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40400_downto_4_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40400_gear_error_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40400_not_finish_operation_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40400_enter_gear_error_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
}

Judge40400::Judge40400(const Judge40400& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OPMessage.Judge40400)
}

void Judge40400::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  itemcode_ = 0;
  itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_time_ = NULL;
  max_trigger_distance_ = NULL;
  max_gear_finish_time_ = NULL;
  gear_actions_0_ = NULL;
  gear_actions_1_ = NULL;
  gear_actions_2_ = NULL;
  gear_actions_3_ = NULL;
  gear_actions_4_ = NULL;
  notify_after_clutch_down_ = NULL;
  check_after_clutch_up_ = NULL;
  vi_40400_start_exam_ = NULL;
  vi_40400_end_exam_ = NULL;
  vi_40400_upto_2_ = NULL;
  vi_40400_upto_3_ = NULL;
  vi_40400_upto_4_ = NULL;
  vi_40400_upto_5_ = NULL;
  vi_40400_downto_1_ = NULL;
  vi_40400_downto_2_ = NULL;
  vi_40400_downto_3_ = NULL;
  vi_40400_downto_4_ = NULL;
  vi_40400_gear_error_ = NULL;
  vi_40400_not_finish_operation_ = NULL;
  vi_40400_enter_gear_error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Judge40400::~Judge40400() {
  // @@protoc_insertion_point(destructor:OPMessage.Judge40400)
  SharedDtor();
}

void Judge40400::SharedDtor() {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (this != default_instance_) {
    delete max_time_;
    delete max_trigger_distance_;
    delete max_gear_finish_time_;
    delete gear_actions_0_;
    delete gear_actions_1_;
    delete gear_actions_2_;
    delete gear_actions_3_;
    delete gear_actions_4_;
    delete notify_after_clutch_down_;
    delete check_after_clutch_up_;
    delete vi_40400_start_exam_;
    delete vi_40400_end_exam_;
    delete vi_40400_upto_2_;
    delete vi_40400_upto_3_;
    delete vi_40400_upto_4_;
    delete vi_40400_upto_5_;
    delete vi_40400_downto_1_;
    delete vi_40400_downto_2_;
    delete vi_40400_downto_3_;
    delete vi_40400_downto_4_;
    delete vi_40400_gear_error_;
    delete vi_40400_not_finish_operation_;
    delete vi_40400_enter_gear_error_;
  }
}

void Judge40400::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Judge40400::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Judge40400_descriptor_;
}

const Judge40400& Judge40400::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageKm3Config_2eproto();
  return *default_instance_;
}

Judge40400* Judge40400::default_instance_ = NULL;

Judge40400* Judge40400::New() const {
  return new Judge40400;
}

void Judge40400::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    itemcode_ = 0;
    if (has_itemname()) {
      if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        itemname_->clear();
      }
    }
    if (has_max_time()) {
      if (max_time_ != NULL) max_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_max_trigger_distance()) {
      if (max_trigger_distance_ != NULL) max_trigger_distance_->::OPMessage::judgeItem::Clear();
    }
    if (has_max_gear_finish_time()) {
      if (max_gear_finish_time_ != NULL) max_gear_finish_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_gear_actions_0()) {
      if (gear_actions_0_ != NULL) gear_actions_0_->::OPMessage::judgeItem::Clear();
    }
    if (has_gear_actions_1()) {
      if (gear_actions_1_ != NULL) gear_actions_1_->::OPMessage::judgeItem::Clear();
    }
    if (has_gear_actions_2()) {
      if (gear_actions_2_ != NULL) gear_actions_2_->::OPMessage::judgeItem::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_gear_actions_3()) {
      if (gear_actions_3_ != NULL) gear_actions_3_->::OPMessage::judgeItem::Clear();
    }
    if (has_gear_actions_4()) {
      if (gear_actions_4_ != NULL) gear_actions_4_->::OPMessage::judgeItem::Clear();
    }
    if (has_notify_after_clutch_down()) {
      if (notify_after_clutch_down_ != NULL) notify_after_clutch_down_->::OPMessage::judgeItem::Clear();
    }
    if (has_check_after_clutch_up()) {
      if (check_after_clutch_up_ != NULL) check_after_clutch_up_->::OPMessage::judgeItem::Clear();
    }
    if (has_vi_40400_start_exam()) {
      if (vi_40400_start_exam_ != NULL) vi_40400_start_exam_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40400_end_exam()) {
      if (vi_40400_end_exam_ != NULL) vi_40400_end_exam_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40400_upto_2()) {
      if (vi_40400_upto_2_ != NULL) vi_40400_upto_2_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40400_upto_3()) {
      if (vi_40400_upto_3_ != NULL) vi_40400_upto_3_->::OPMessage::voiceItem::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    if (has_vi_40400_upto_4()) {
      if (vi_40400_upto_4_ != NULL) vi_40400_upto_4_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40400_upto_5()) {
      if (vi_40400_upto_5_ != NULL) vi_40400_upto_5_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40400_downto_1()) {
      if (vi_40400_downto_1_ != NULL) vi_40400_downto_1_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40400_downto_2()) {
      if (vi_40400_downto_2_ != NULL) vi_40400_downto_2_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40400_downto_3()) {
      if (vi_40400_downto_3_ != NULL) vi_40400_downto_3_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40400_downto_4()) {
      if (vi_40400_downto_4_ != NULL) vi_40400_downto_4_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40400_gear_error()) {
      if (vi_40400_gear_error_ != NULL) vi_40400_gear_error_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40400_not_finish_operation()) {
      if (vi_40400_not_finish_operation_ != NULL) vi_40400_not_finish_operation_->::OPMessage::voiceItem::Clear();
    }
  }
  if (has_vi_40400_enter_gear_error()) {
    if (vi_40400_enter_gear_error_ != NULL) vi_40400_enter_gear_error_->::OPMessage::voiceItem::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Judge40400::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OPMessage.Judge40400)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemcode_)));
          set_has_itemcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_itemName;
        break;
      }

      // optional string itemName = 2;
      case 2: {
        if (tag == 18) {
         parse_itemName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itemname().data(), this->itemname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "itemname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_max_time;
        break;
      }

      // optional .OPMessage.judgeItem max_time = 3;
      case 3: {
        if (tag == 26) {
         parse_max_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_max_trigger_distance;
        break;
      }

      // optional .OPMessage.judgeItem max_trigger_distance = 4;
      case 4: {
        if (tag == 34) {
         parse_max_trigger_distance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_trigger_distance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_max_gear_finish_time;
        break;
      }

      // optional .OPMessage.judgeItem max_gear_finish_time = 5;
      case 5: {
        if (tag == 42) {
         parse_max_gear_finish_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_gear_finish_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_gear_actions_0;
        break;
      }

      // optional .OPMessage.judgeItem gear_actions_0 = 6;
      case 6: {
        if (tag == 50) {
         parse_gear_actions_0:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gear_actions_0()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_gear_actions_1;
        break;
      }

      // optional .OPMessage.judgeItem gear_actions_1 = 7;
      case 7: {
        if (tag == 58) {
         parse_gear_actions_1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gear_actions_1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_gear_actions_2;
        break;
      }

      // optional .OPMessage.judgeItem gear_actions_2 = 8;
      case 8: {
        if (tag == 66) {
         parse_gear_actions_2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gear_actions_2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_gear_actions_3;
        break;
      }

      // optional .OPMessage.judgeItem gear_actions_3 = 9;
      case 9: {
        if (tag == 74) {
         parse_gear_actions_3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gear_actions_3()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_gear_actions_4;
        break;
      }

      // optional .OPMessage.judgeItem gear_actions_4 = 10;
      case 10: {
        if (tag == 82) {
         parse_gear_actions_4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gear_actions_4()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_notify_after_clutch_down;
        break;
      }

      // optional .OPMessage.judgeItem notify_after_clutch_down = 11;
      case 11: {
        if (tag == 90) {
         parse_notify_after_clutch_down:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_notify_after_clutch_down()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_check_after_clutch_up;
        break;
      }

      // optional .OPMessage.judgeItem check_after_clutch_up = 12;
      case 12: {
        if (tag == 98) {
         parse_check_after_clutch_up:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_check_after_clutch_up()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_vi_40400_start_exam;
        break;
      }

      // optional .OPMessage.voiceItem vi_40400_start_exam = 13;
      case 13: {
        if (tag == 106) {
         parse_vi_40400_start_exam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40400_start_exam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_vi_40400_end_exam;
        break;
      }

      // optional .OPMessage.voiceItem vi_40400_end_exam = 14;
      case 14: {
        if (tag == 114) {
         parse_vi_40400_end_exam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40400_end_exam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_vi_40400_upto_2;
        break;
      }

      // optional .OPMessage.voiceItem vi_40400_upto_2 = 15;
      case 15: {
        if (tag == 122) {
         parse_vi_40400_upto_2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40400_upto_2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_vi_40400_upto_3;
        break;
      }

      // optional .OPMessage.voiceItem vi_40400_upto_3 = 16;
      case 16: {
        if (tag == 130) {
         parse_vi_40400_upto_3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40400_upto_3()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_vi_40400_upto_4;
        break;
      }

      // optional .OPMessage.voiceItem vi_40400_upto_4 = 17;
      case 17: {
        if (tag == 138) {
         parse_vi_40400_upto_4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40400_upto_4()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_vi_40400_upto_5;
        break;
      }

      // optional .OPMessage.voiceItem vi_40400_upto_5 = 18;
      case 18: {
        if (tag == 146) {
         parse_vi_40400_upto_5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40400_upto_5()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_vi_40400_downto_1;
        break;
      }

      // optional .OPMessage.voiceItem vi_40400_downto_1 = 19;
      case 19: {
        if (tag == 154) {
         parse_vi_40400_downto_1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40400_downto_1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_vi_40400_downto_2;
        break;
      }

      // optional .OPMessage.voiceItem vi_40400_downto_2 = 20;
      case 20: {
        if (tag == 162) {
         parse_vi_40400_downto_2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40400_downto_2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_vi_40400_downto_3;
        break;
      }

      // optional .OPMessage.voiceItem vi_40400_downto_3 = 21;
      case 21: {
        if (tag == 170) {
         parse_vi_40400_downto_3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40400_downto_3()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_vi_40400_downto_4;
        break;
      }

      // optional .OPMessage.voiceItem vi_40400_downto_4 = 22;
      case 22: {
        if (tag == 178) {
         parse_vi_40400_downto_4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40400_downto_4()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_vi_40400_gear_error;
        break;
      }

      // optional .OPMessage.voiceItem vi_40400_gear_error = 23;
      case 23: {
        if (tag == 186) {
         parse_vi_40400_gear_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40400_gear_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_vi_40400_not_finish_operation;
        break;
      }

      // optional .OPMessage.voiceItem vi_40400_not_finish_operation = 24;
      case 24: {
        if (tag == 194) {
         parse_vi_40400_not_finish_operation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40400_not_finish_operation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_vi_40400_enter_gear_error;
        break;
      }

      // optional .OPMessage.voiceItem vi_40400_enter_gear_error = 25;
      case 25: {
        if (tag == 202) {
         parse_vi_40400_enter_gear_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40400_enter_gear_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OPMessage.Judge40400)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OPMessage.Judge40400)
  return false;
#undef DO_
}

void Judge40400::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OPMessage.Judge40400)
  // optional int32 itemCode = 1;
  if (has_itemcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemcode(), output);
  }

  // optional string itemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->itemname(), output);
  }

  // optional .OPMessage.judgeItem max_time = 3;
  if (has_max_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->max_time(), output);
  }

  // optional .OPMessage.judgeItem max_trigger_distance = 4;
  if (has_max_trigger_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->max_trigger_distance(), output);
  }

  // optional .OPMessage.judgeItem max_gear_finish_time = 5;
  if (has_max_gear_finish_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->max_gear_finish_time(), output);
  }

  // optional .OPMessage.judgeItem gear_actions_0 = 6;
  if (has_gear_actions_0()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->gear_actions_0(), output);
  }

  // optional .OPMessage.judgeItem gear_actions_1 = 7;
  if (has_gear_actions_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->gear_actions_1(), output);
  }

  // optional .OPMessage.judgeItem gear_actions_2 = 8;
  if (has_gear_actions_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->gear_actions_2(), output);
  }

  // optional .OPMessage.judgeItem gear_actions_3 = 9;
  if (has_gear_actions_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->gear_actions_3(), output);
  }

  // optional .OPMessage.judgeItem gear_actions_4 = 10;
  if (has_gear_actions_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->gear_actions_4(), output);
  }

  // optional .OPMessage.judgeItem notify_after_clutch_down = 11;
  if (has_notify_after_clutch_down()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->notify_after_clutch_down(), output);
  }

  // optional .OPMessage.judgeItem check_after_clutch_up = 12;
  if (has_check_after_clutch_up()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->check_after_clutch_up(), output);
  }

  // optional .OPMessage.voiceItem vi_40400_start_exam = 13;
  if (has_vi_40400_start_exam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->vi_40400_start_exam(), output);
  }

  // optional .OPMessage.voiceItem vi_40400_end_exam = 14;
  if (has_vi_40400_end_exam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->vi_40400_end_exam(), output);
  }

  // optional .OPMessage.voiceItem vi_40400_upto_2 = 15;
  if (has_vi_40400_upto_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->vi_40400_upto_2(), output);
  }

  // optional .OPMessage.voiceItem vi_40400_upto_3 = 16;
  if (has_vi_40400_upto_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->vi_40400_upto_3(), output);
  }

  // optional .OPMessage.voiceItem vi_40400_upto_4 = 17;
  if (has_vi_40400_upto_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->vi_40400_upto_4(), output);
  }

  // optional .OPMessage.voiceItem vi_40400_upto_5 = 18;
  if (has_vi_40400_upto_5()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->vi_40400_upto_5(), output);
  }

  // optional .OPMessage.voiceItem vi_40400_downto_1 = 19;
  if (has_vi_40400_downto_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->vi_40400_downto_1(), output);
  }

  // optional .OPMessage.voiceItem vi_40400_downto_2 = 20;
  if (has_vi_40400_downto_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->vi_40400_downto_2(), output);
  }

  // optional .OPMessage.voiceItem vi_40400_downto_3 = 21;
  if (has_vi_40400_downto_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->vi_40400_downto_3(), output);
  }

  // optional .OPMessage.voiceItem vi_40400_downto_4 = 22;
  if (has_vi_40400_downto_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->vi_40400_downto_4(), output);
  }

  // optional .OPMessage.voiceItem vi_40400_gear_error = 23;
  if (has_vi_40400_gear_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->vi_40400_gear_error(), output);
  }

  // optional .OPMessage.voiceItem vi_40400_not_finish_operation = 24;
  if (has_vi_40400_not_finish_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->vi_40400_not_finish_operation(), output);
  }

  // optional .OPMessage.voiceItem vi_40400_enter_gear_error = 25;
  if (has_vi_40400_enter_gear_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->vi_40400_enter_gear_error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OPMessage.Judge40400)
}

::google::protobuf::uint8* Judge40400::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OPMessage.Judge40400)
  // optional int32 itemCode = 1;
  if (has_itemcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemcode(), target);
  }

  // optional string itemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->itemname(), target);
  }

  // optional .OPMessage.judgeItem max_time = 3;
  if (has_max_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->max_time(), target);
  }

  // optional .OPMessage.judgeItem max_trigger_distance = 4;
  if (has_max_trigger_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->max_trigger_distance(), target);
  }

  // optional .OPMessage.judgeItem max_gear_finish_time = 5;
  if (has_max_gear_finish_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->max_gear_finish_time(), target);
  }

  // optional .OPMessage.judgeItem gear_actions_0 = 6;
  if (has_gear_actions_0()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->gear_actions_0(), target);
  }

  // optional .OPMessage.judgeItem gear_actions_1 = 7;
  if (has_gear_actions_1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->gear_actions_1(), target);
  }

  // optional .OPMessage.judgeItem gear_actions_2 = 8;
  if (has_gear_actions_2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->gear_actions_2(), target);
  }

  // optional .OPMessage.judgeItem gear_actions_3 = 9;
  if (has_gear_actions_3()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->gear_actions_3(), target);
  }

  // optional .OPMessage.judgeItem gear_actions_4 = 10;
  if (has_gear_actions_4()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->gear_actions_4(), target);
  }

  // optional .OPMessage.judgeItem notify_after_clutch_down = 11;
  if (has_notify_after_clutch_down()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->notify_after_clutch_down(), target);
  }

  // optional .OPMessage.judgeItem check_after_clutch_up = 12;
  if (has_check_after_clutch_up()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->check_after_clutch_up(), target);
  }

  // optional .OPMessage.voiceItem vi_40400_start_exam = 13;
  if (has_vi_40400_start_exam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->vi_40400_start_exam(), target);
  }

  // optional .OPMessage.voiceItem vi_40400_end_exam = 14;
  if (has_vi_40400_end_exam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->vi_40400_end_exam(), target);
  }

  // optional .OPMessage.voiceItem vi_40400_upto_2 = 15;
  if (has_vi_40400_upto_2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->vi_40400_upto_2(), target);
  }

  // optional .OPMessage.voiceItem vi_40400_upto_3 = 16;
  if (has_vi_40400_upto_3()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->vi_40400_upto_3(), target);
  }

  // optional .OPMessage.voiceItem vi_40400_upto_4 = 17;
  if (has_vi_40400_upto_4()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->vi_40400_upto_4(), target);
  }

  // optional .OPMessage.voiceItem vi_40400_upto_5 = 18;
  if (has_vi_40400_upto_5()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->vi_40400_upto_5(), target);
  }

  // optional .OPMessage.voiceItem vi_40400_downto_1 = 19;
  if (has_vi_40400_downto_1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->vi_40400_downto_1(), target);
  }

  // optional .OPMessage.voiceItem vi_40400_downto_2 = 20;
  if (has_vi_40400_downto_2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->vi_40400_downto_2(), target);
  }

  // optional .OPMessage.voiceItem vi_40400_downto_3 = 21;
  if (has_vi_40400_downto_3()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->vi_40400_downto_3(), target);
  }

  // optional .OPMessage.voiceItem vi_40400_downto_4 = 22;
  if (has_vi_40400_downto_4()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->vi_40400_downto_4(), target);
  }

  // optional .OPMessage.voiceItem vi_40400_gear_error = 23;
  if (has_vi_40400_gear_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->vi_40400_gear_error(), target);
  }

  // optional .OPMessage.voiceItem vi_40400_not_finish_operation = 24;
  if (has_vi_40400_not_finish_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->vi_40400_not_finish_operation(), target);
  }

  // optional .OPMessage.voiceItem vi_40400_enter_gear_error = 25;
  if (has_vi_40400_enter_gear_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->vi_40400_enter_gear_error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OPMessage.Judge40400)
  return target;
}

int Judge40400::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemCode = 1;
    if (has_itemcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemcode());
    }

    // optional string itemName = 2;
    if (has_itemname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemname());
    }

    // optional .OPMessage.judgeItem max_time = 3;
    if (has_max_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_time());
    }

    // optional .OPMessage.judgeItem max_trigger_distance = 4;
    if (has_max_trigger_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_trigger_distance());
    }

    // optional .OPMessage.judgeItem max_gear_finish_time = 5;
    if (has_max_gear_finish_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_gear_finish_time());
    }

    // optional .OPMessage.judgeItem gear_actions_0 = 6;
    if (has_gear_actions_0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gear_actions_0());
    }

    // optional .OPMessage.judgeItem gear_actions_1 = 7;
    if (has_gear_actions_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gear_actions_1());
    }

    // optional .OPMessage.judgeItem gear_actions_2 = 8;
    if (has_gear_actions_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gear_actions_2());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .OPMessage.judgeItem gear_actions_3 = 9;
    if (has_gear_actions_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gear_actions_3());
    }

    // optional .OPMessage.judgeItem gear_actions_4 = 10;
    if (has_gear_actions_4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gear_actions_4());
    }

    // optional .OPMessage.judgeItem notify_after_clutch_down = 11;
    if (has_notify_after_clutch_down()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->notify_after_clutch_down());
    }

    // optional .OPMessage.judgeItem check_after_clutch_up = 12;
    if (has_check_after_clutch_up()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->check_after_clutch_up());
    }

    // optional .OPMessage.voiceItem vi_40400_start_exam = 13;
    if (has_vi_40400_start_exam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40400_start_exam());
    }

    // optional .OPMessage.voiceItem vi_40400_end_exam = 14;
    if (has_vi_40400_end_exam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40400_end_exam());
    }

    // optional .OPMessage.voiceItem vi_40400_upto_2 = 15;
    if (has_vi_40400_upto_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40400_upto_2());
    }

    // optional .OPMessage.voiceItem vi_40400_upto_3 = 16;
    if (has_vi_40400_upto_3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40400_upto_3());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .OPMessage.voiceItem vi_40400_upto_4 = 17;
    if (has_vi_40400_upto_4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40400_upto_4());
    }

    // optional .OPMessage.voiceItem vi_40400_upto_5 = 18;
    if (has_vi_40400_upto_5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40400_upto_5());
    }

    // optional .OPMessage.voiceItem vi_40400_downto_1 = 19;
    if (has_vi_40400_downto_1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40400_downto_1());
    }

    // optional .OPMessage.voiceItem vi_40400_downto_2 = 20;
    if (has_vi_40400_downto_2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40400_downto_2());
    }

    // optional .OPMessage.voiceItem vi_40400_downto_3 = 21;
    if (has_vi_40400_downto_3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40400_downto_3());
    }

    // optional .OPMessage.voiceItem vi_40400_downto_4 = 22;
    if (has_vi_40400_downto_4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40400_downto_4());
    }

    // optional .OPMessage.voiceItem vi_40400_gear_error = 23;
    if (has_vi_40400_gear_error()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40400_gear_error());
    }

    // optional .OPMessage.voiceItem vi_40400_not_finish_operation = 24;
    if (has_vi_40400_not_finish_operation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40400_not_finish_operation());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .OPMessage.voiceItem vi_40400_enter_gear_error = 25;
    if (has_vi_40400_enter_gear_error()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40400_enter_gear_error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Judge40400::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Judge40400* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Judge40400*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Judge40400::MergeFrom(const Judge40400& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemcode()) {
      set_itemcode(from.itemcode());
    }
    if (from.has_itemname()) {
      set_itemname(from.itemname());
    }
    if (from.has_max_time()) {
      mutable_max_time()->::OPMessage::judgeItem::MergeFrom(from.max_time());
    }
    if (from.has_max_trigger_distance()) {
      mutable_max_trigger_distance()->::OPMessage::judgeItem::MergeFrom(from.max_trigger_distance());
    }
    if (from.has_max_gear_finish_time()) {
      mutable_max_gear_finish_time()->::OPMessage::judgeItem::MergeFrom(from.max_gear_finish_time());
    }
    if (from.has_gear_actions_0()) {
      mutable_gear_actions_0()->::OPMessage::judgeItem::MergeFrom(from.gear_actions_0());
    }
    if (from.has_gear_actions_1()) {
      mutable_gear_actions_1()->::OPMessage::judgeItem::MergeFrom(from.gear_actions_1());
    }
    if (from.has_gear_actions_2()) {
      mutable_gear_actions_2()->::OPMessage::judgeItem::MergeFrom(from.gear_actions_2());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_gear_actions_3()) {
      mutable_gear_actions_3()->::OPMessage::judgeItem::MergeFrom(from.gear_actions_3());
    }
    if (from.has_gear_actions_4()) {
      mutable_gear_actions_4()->::OPMessage::judgeItem::MergeFrom(from.gear_actions_4());
    }
    if (from.has_notify_after_clutch_down()) {
      mutable_notify_after_clutch_down()->::OPMessage::judgeItem::MergeFrom(from.notify_after_clutch_down());
    }
    if (from.has_check_after_clutch_up()) {
      mutable_check_after_clutch_up()->::OPMessage::judgeItem::MergeFrom(from.check_after_clutch_up());
    }
    if (from.has_vi_40400_start_exam()) {
      mutable_vi_40400_start_exam()->::OPMessage::voiceItem::MergeFrom(from.vi_40400_start_exam());
    }
    if (from.has_vi_40400_end_exam()) {
      mutable_vi_40400_end_exam()->::OPMessage::voiceItem::MergeFrom(from.vi_40400_end_exam());
    }
    if (from.has_vi_40400_upto_2()) {
      mutable_vi_40400_upto_2()->::OPMessage::voiceItem::MergeFrom(from.vi_40400_upto_2());
    }
    if (from.has_vi_40400_upto_3()) {
      mutable_vi_40400_upto_3()->::OPMessage::voiceItem::MergeFrom(from.vi_40400_upto_3());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_vi_40400_upto_4()) {
      mutable_vi_40400_upto_4()->::OPMessage::voiceItem::MergeFrom(from.vi_40400_upto_4());
    }
    if (from.has_vi_40400_upto_5()) {
      mutable_vi_40400_upto_5()->::OPMessage::voiceItem::MergeFrom(from.vi_40400_upto_5());
    }
    if (from.has_vi_40400_downto_1()) {
      mutable_vi_40400_downto_1()->::OPMessage::voiceItem::MergeFrom(from.vi_40400_downto_1());
    }
    if (from.has_vi_40400_downto_2()) {
      mutable_vi_40400_downto_2()->::OPMessage::voiceItem::MergeFrom(from.vi_40400_downto_2());
    }
    if (from.has_vi_40400_downto_3()) {
      mutable_vi_40400_downto_3()->::OPMessage::voiceItem::MergeFrom(from.vi_40400_downto_3());
    }
    if (from.has_vi_40400_downto_4()) {
      mutable_vi_40400_downto_4()->::OPMessage::voiceItem::MergeFrom(from.vi_40400_downto_4());
    }
    if (from.has_vi_40400_gear_error()) {
      mutable_vi_40400_gear_error()->::OPMessage::voiceItem::MergeFrom(from.vi_40400_gear_error());
    }
    if (from.has_vi_40400_not_finish_operation()) {
      mutable_vi_40400_not_finish_operation()->::OPMessage::voiceItem::MergeFrom(from.vi_40400_not_finish_operation());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_vi_40400_enter_gear_error()) {
      mutable_vi_40400_enter_gear_error()->::OPMessage::voiceItem::MergeFrom(from.vi_40400_enter_gear_error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Judge40400::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Judge40400::CopyFrom(const Judge40400& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Judge40400::IsInitialized() const {

  return true;
}

void Judge40400::Swap(Judge40400* other) {
  if (other != this) {
    std::swap(itemcode_, other->itemcode_);
    std::swap(itemname_, other->itemname_);
    std::swap(max_time_, other->max_time_);
    std::swap(max_trigger_distance_, other->max_trigger_distance_);
    std::swap(max_gear_finish_time_, other->max_gear_finish_time_);
    std::swap(gear_actions_0_, other->gear_actions_0_);
    std::swap(gear_actions_1_, other->gear_actions_1_);
    std::swap(gear_actions_2_, other->gear_actions_2_);
    std::swap(gear_actions_3_, other->gear_actions_3_);
    std::swap(gear_actions_4_, other->gear_actions_4_);
    std::swap(notify_after_clutch_down_, other->notify_after_clutch_down_);
    std::swap(check_after_clutch_up_, other->check_after_clutch_up_);
    std::swap(vi_40400_start_exam_, other->vi_40400_start_exam_);
    std::swap(vi_40400_end_exam_, other->vi_40400_end_exam_);
    std::swap(vi_40400_upto_2_, other->vi_40400_upto_2_);
    std::swap(vi_40400_upto_3_, other->vi_40400_upto_3_);
    std::swap(vi_40400_upto_4_, other->vi_40400_upto_4_);
    std::swap(vi_40400_upto_5_, other->vi_40400_upto_5_);
    std::swap(vi_40400_downto_1_, other->vi_40400_downto_1_);
    std::swap(vi_40400_downto_2_, other->vi_40400_downto_2_);
    std::swap(vi_40400_downto_3_, other->vi_40400_downto_3_);
    std::swap(vi_40400_downto_4_, other->vi_40400_downto_4_);
    std::swap(vi_40400_gear_error_, other->vi_40400_gear_error_);
    std::swap(vi_40400_not_finish_operation_, other->vi_40400_not_finish_operation_);
    std::swap(vi_40400_enter_gear_error_, other->vi_40400_enter_gear_error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Judge40400::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Judge40400_descriptor_;
  metadata.reflection = Judge40400_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Judge41000::kItemCodeFieldNumber;
const int Judge41000::kItemNameFieldNumber;
const int Judge41000::kMaxTimeFieldNumber;
const int Judge41000::kMaxTriggerDistanceFieldNumber;
const int Judge41000::kMaxSpeedFieldNumber;
const int Judge41000::kMinHornTimeFieldNumber;
const int Judge41000::kMinTurnSignalTimeFieldNumber;
const int Judge41000::kJudgeModeFieldNumber;
const int Judge41000::kNeedNearFarLampFlashFieldNumber;
const int Judge41000::kVi41000StartExamFieldNumber;
const int Judge41000::kVi41000EndExamFieldNumber;
const int Judge41000::kVi41000HornNotUseFieldNumber;
const int Judge41000::kVi41000NotSlowdownFieldNumber;
#endif  // !_MSC_VER

Judge41000::Judge41000()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OPMessage.Judge41000)
}

void Judge41000::InitAsDefaultInstance() {
  max_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  max_trigger_distance_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  max_speed_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  min_horn_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  min_turn_signal_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  judge_mode_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  need_near_far_lamp_flash_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  vi_41000_start_exam_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_41000_end_exam_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_41000_horn_not_use_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_41000_not_slowdown_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
}

Judge41000::Judge41000(const Judge41000& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OPMessage.Judge41000)
}

void Judge41000::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  itemcode_ = 0;
  itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_time_ = NULL;
  max_trigger_distance_ = NULL;
  max_speed_ = NULL;
  min_horn_time_ = NULL;
  min_turn_signal_time_ = NULL;
  judge_mode_ = NULL;
  need_near_far_lamp_flash_ = NULL;
  vi_41000_start_exam_ = NULL;
  vi_41000_end_exam_ = NULL;
  vi_41000_horn_not_use_ = NULL;
  vi_41000_not_slowdown_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Judge41000::~Judge41000() {
  // @@protoc_insertion_point(destructor:OPMessage.Judge41000)
  SharedDtor();
}

void Judge41000::SharedDtor() {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (this != default_instance_) {
    delete max_time_;
    delete max_trigger_distance_;
    delete max_speed_;
    delete min_horn_time_;
    delete min_turn_signal_time_;
    delete judge_mode_;
    delete need_near_far_lamp_flash_;
    delete vi_41000_start_exam_;
    delete vi_41000_end_exam_;
    delete vi_41000_horn_not_use_;
    delete vi_41000_not_slowdown_;
  }
}

void Judge41000::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Judge41000::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Judge41000_descriptor_;
}

const Judge41000& Judge41000::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageKm3Config_2eproto();
  return *default_instance_;
}

Judge41000* Judge41000::default_instance_ = NULL;

Judge41000* Judge41000::New() const {
  return new Judge41000;
}

void Judge41000::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    itemcode_ = 0;
    if (has_itemname()) {
      if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        itemname_->clear();
      }
    }
    if (has_max_time()) {
      if (max_time_ != NULL) max_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_max_trigger_distance()) {
      if (max_trigger_distance_ != NULL) max_trigger_distance_->::OPMessage::judgeItem::Clear();
    }
    if (has_max_speed()) {
      if (max_speed_ != NULL) max_speed_->::OPMessage::judgeItem::Clear();
    }
    if (has_min_horn_time()) {
      if (min_horn_time_ != NULL) min_horn_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_min_turn_signal_time()) {
      if (min_turn_signal_time_ != NULL) min_turn_signal_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_judge_mode()) {
      if (judge_mode_ != NULL) judge_mode_->::OPMessage::judgeItem::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    if (has_need_near_far_lamp_flash()) {
      if (need_near_far_lamp_flash_ != NULL) need_near_far_lamp_flash_->::OPMessage::judgeItem::Clear();
    }
    if (has_vi_41000_start_exam()) {
      if (vi_41000_start_exam_ != NULL) vi_41000_start_exam_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_41000_end_exam()) {
      if (vi_41000_end_exam_ != NULL) vi_41000_end_exam_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_41000_horn_not_use()) {
      if (vi_41000_horn_not_use_ != NULL) vi_41000_horn_not_use_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_41000_not_slowdown()) {
      if (vi_41000_not_slowdown_ != NULL) vi_41000_not_slowdown_->::OPMessage::voiceItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Judge41000::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OPMessage.Judge41000)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemcode_)));
          set_has_itemcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_itemName;
        break;
      }

      // optional string itemName = 2;
      case 2: {
        if (tag == 18) {
         parse_itemName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itemname().data(), this->itemname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "itemname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_max_time;
        break;
      }

      // optional .OPMessage.judgeItem max_time = 3;
      case 3: {
        if (tag == 26) {
         parse_max_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_max_trigger_distance;
        break;
      }

      // optional .OPMessage.judgeItem max_trigger_distance = 4;
      case 4: {
        if (tag == 34) {
         parse_max_trigger_distance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_trigger_distance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_max_speed;
        break;
      }

      // optional .OPMessage.judgeItem max_speed = 5;
      case 5: {
        if (tag == 42) {
         parse_max_speed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_speed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_min_horn_time;
        break;
      }

      // optional .OPMessage.judgeItem min_horn_time = 6;
      case 6: {
        if (tag == 50) {
         parse_min_horn_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_horn_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_min_turn_signal_time;
        break;
      }

      // optional .OPMessage.judgeItem min_turn_signal_time = 7;
      case 7: {
        if (tag == 58) {
         parse_min_turn_signal_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_turn_signal_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_judge_mode;
        break;
      }

      // optional .OPMessage.judgeItem judge_mode = 8;
      case 8: {
        if (tag == 66) {
         parse_judge_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_judge_mode()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_need_near_far_lamp_flash;
        break;
      }

      // optional .OPMessage.judgeItem need_near_far_lamp_flash = 9;
      case 9: {
        if (tag == 74) {
         parse_need_near_far_lamp_flash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_need_near_far_lamp_flash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_vi_41000_start_exam;
        break;
      }

      // optional .OPMessage.voiceItem vi_41000_start_exam = 10;
      case 10: {
        if (tag == 82) {
         parse_vi_41000_start_exam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_41000_start_exam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_vi_41000_end_exam;
        break;
      }

      // optional .OPMessage.voiceItem vi_41000_end_exam = 11;
      case 11: {
        if (tag == 90) {
         parse_vi_41000_end_exam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_41000_end_exam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_vi_41000_horn_not_use;
        break;
      }

      // optional .OPMessage.voiceItem vi_41000_horn_not_use = 12;
      case 12: {
        if (tag == 98) {
         parse_vi_41000_horn_not_use:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_41000_horn_not_use()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_vi_41000_not_slowdown;
        break;
      }

      // optional .OPMessage.voiceItem vi_41000_not_slowdown = 13;
      case 13: {
        if (tag == 106) {
         parse_vi_41000_not_slowdown:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_41000_not_slowdown()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OPMessage.Judge41000)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OPMessage.Judge41000)
  return false;
#undef DO_
}

void Judge41000::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OPMessage.Judge41000)
  // optional int32 itemCode = 1;
  if (has_itemcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemcode(), output);
  }

  // optional string itemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->itemname(), output);
  }

  // optional .OPMessage.judgeItem max_time = 3;
  if (has_max_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->max_time(), output);
  }

  // optional .OPMessage.judgeItem max_trigger_distance = 4;
  if (has_max_trigger_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->max_trigger_distance(), output);
  }

  // optional .OPMessage.judgeItem max_speed = 5;
  if (has_max_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->max_speed(), output);
  }

  // optional .OPMessage.judgeItem min_horn_time = 6;
  if (has_min_horn_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->min_horn_time(), output);
  }

  // optional .OPMessage.judgeItem min_turn_signal_time = 7;
  if (has_min_turn_signal_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->min_turn_signal_time(), output);
  }

  // optional .OPMessage.judgeItem judge_mode = 8;
  if (has_judge_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->judge_mode(), output);
  }

  // optional .OPMessage.judgeItem need_near_far_lamp_flash = 9;
  if (has_need_near_far_lamp_flash()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->need_near_far_lamp_flash(), output);
  }

  // optional .OPMessage.voiceItem vi_41000_start_exam = 10;
  if (has_vi_41000_start_exam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->vi_41000_start_exam(), output);
  }

  // optional .OPMessage.voiceItem vi_41000_end_exam = 11;
  if (has_vi_41000_end_exam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->vi_41000_end_exam(), output);
  }

  // optional .OPMessage.voiceItem vi_41000_horn_not_use = 12;
  if (has_vi_41000_horn_not_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->vi_41000_horn_not_use(), output);
  }

  // optional .OPMessage.voiceItem vi_41000_not_slowdown = 13;
  if (has_vi_41000_not_slowdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->vi_41000_not_slowdown(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OPMessage.Judge41000)
}

::google::protobuf::uint8* Judge41000::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OPMessage.Judge41000)
  // optional int32 itemCode = 1;
  if (has_itemcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemcode(), target);
  }

  // optional string itemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->itemname(), target);
  }

  // optional .OPMessage.judgeItem max_time = 3;
  if (has_max_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->max_time(), target);
  }

  // optional .OPMessage.judgeItem max_trigger_distance = 4;
  if (has_max_trigger_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->max_trigger_distance(), target);
  }

  // optional .OPMessage.judgeItem max_speed = 5;
  if (has_max_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->max_speed(), target);
  }

  // optional .OPMessage.judgeItem min_horn_time = 6;
  if (has_min_horn_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->min_horn_time(), target);
  }

  // optional .OPMessage.judgeItem min_turn_signal_time = 7;
  if (has_min_turn_signal_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->min_turn_signal_time(), target);
  }

  // optional .OPMessage.judgeItem judge_mode = 8;
  if (has_judge_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->judge_mode(), target);
  }

  // optional .OPMessage.judgeItem need_near_far_lamp_flash = 9;
  if (has_need_near_far_lamp_flash()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->need_near_far_lamp_flash(), target);
  }

  // optional .OPMessage.voiceItem vi_41000_start_exam = 10;
  if (has_vi_41000_start_exam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->vi_41000_start_exam(), target);
  }

  // optional .OPMessage.voiceItem vi_41000_end_exam = 11;
  if (has_vi_41000_end_exam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->vi_41000_end_exam(), target);
  }

  // optional .OPMessage.voiceItem vi_41000_horn_not_use = 12;
  if (has_vi_41000_horn_not_use()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->vi_41000_horn_not_use(), target);
  }

  // optional .OPMessage.voiceItem vi_41000_not_slowdown = 13;
  if (has_vi_41000_not_slowdown()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->vi_41000_not_slowdown(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OPMessage.Judge41000)
  return target;
}

int Judge41000::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemCode = 1;
    if (has_itemcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemcode());
    }

    // optional string itemName = 2;
    if (has_itemname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemname());
    }

    // optional .OPMessage.judgeItem max_time = 3;
    if (has_max_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_time());
    }

    // optional .OPMessage.judgeItem max_trigger_distance = 4;
    if (has_max_trigger_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_trigger_distance());
    }

    // optional .OPMessage.judgeItem max_speed = 5;
    if (has_max_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_speed());
    }

    // optional .OPMessage.judgeItem min_horn_time = 6;
    if (has_min_horn_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->min_horn_time());
    }

    // optional .OPMessage.judgeItem min_turn_signal_time = 7;
    if (has_min_turn_signal_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->min_turn_signal_time());
    }

    // optional .OPMessage.judgeItem judge_mode = 8;
    if (has_judge_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->judge_mode());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .OPMessage.judgeItem need_near_far_lamp_flash = 9;
    if (has_need_near_far_lamp_flash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->need_near_far_lamp_flash());
    }

    // optional .OPMessage.voiceItem vi_41000_start_exam = 10;
    if (has_vi_41000_start_exam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_41000_start_exam());
    }

    // optional .OPMessage.voiceItem vi_41000_end_exam = 11;
    if (has_vi_41000_end_exam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_41000_end_exam());
    }

    // optional .OPMessage.voiceItem vi_41000_horn_not_use = 12;
    if (has_vi_41000_horn_not_use()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_41000_horn_not_use());
    }

    // optional .OPMessage.voiceItem vi_41000_not_slowdown = 13;
    if (has_vi_41000_not_slowdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_41000_not_slowdown());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Judge41000::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Judge41000* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Judge41000*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Judge41000::MergeFrom(const Judge41000& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemcode()) {
      set_itemcode(from.itemcode());
    }
    if (from.has_itemname()) {
      set_itemname(from.itemname());
    }
    if (from.has_max_time()) {
      mutable_max_time()->::OPMessage::judgeItem::MergeFrom(from.max_time());
    }
    if (from.has_max_trigger_distance()) {
      mutable_max_trigger_distance()->::OPMessage::judgeItem::MergeFrom(from.max_trigger_distance());
    }
    if (from.has_max_speed()) {
      mutable_max_speed()->::OPMessage::judgeItem::MergeFrom(from.max_speed());
    }
    if (from.has_min_horn_time()) {
      mutable_min_horn_time()->::OPMessage::judgeItem::MergeFrom(from.min_horn_time());
    }
    if (from.has_min_turn_signal_time()) {
      mutable_min_turn_signal_time()->::OPMessage::judgeItem::MergeFrom(from.min_turn_signal_time());
    }
    if (from.has_judge_mode()) {
      mutable_judge_mode()->::OPMessage::judgeItem::MergeFrom(from.judge_mode());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_need_near_far_lamp_flash()) {
      mutable_need_near_far_lamp_flash()->::OPMessage::judgeItem::MergeFrom(from.need_near_far_lamp_flash());
    }
    if (from.has_vi_41000_start_exam()) {
      mutable_vi_41000_start_exam()->::OPMessage::voiceItem::MergeFrom(from.vi_41000_start_exam());
    }
    if (from.has_vi_41000_end_exam()) {
      mutable_vi_41000_end_exam()->::OPMessage::voiceItem::MergeFrom(from.vi_41000_end_exam());
    }
    if (from.has_vi_41000_horn_not_use()) {
      mutable_vi_41000_horn_not_use()->::OPMessage::voiceItem::MergeFrom(from.vi_41000_horn_not_use());
    }
    if (from.has_vi_41000_not_slowdown()) {
      mutable_vi_41000_not_slowdown()->::OPMessage::voiceItem::MergeFrom(from.vi_41000_not_slowdown());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Judge41000::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Judge41000::CopyFrom(const Judge41000& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Judge41000::IsInitialized() const {

  return true;
}

void Judge41000::Swap(Judge41000* other) {
  if (other != this) {
    std::swap(itemcode_, other->itemcode_);
    std::swap(itemname_, other->itemname_);
    std::swap(max_time_, other->max_time_);
    std::swap(max_trigger_distance_, other->max_trigger_distance_);
    std::swap(max_speed_, other->max_speed_);
    std::swap(min_horn_time_, other->min_horn_time_);
    std::swap(min_turn_signal_time_, other->min_turn_signal_time_);
    std::swap(judge_mode_, other->judge_mode_);
    std::swap(need_near_far_lamp_flash_, other->need_near_far_lamp_flash_);
    std::swap(vi_41000_start_exam_, other->vi_41000_start_exam_);
    std::swap(vi_41000_end_exam_, other->vi_41000_end_exam_);
    std::swap(vi_41000_horn_not_use_, other->vi_41000_horn_not_use_);
    std::swap(vi_41000_not_slowdown_, other->vi_41000_not_slowdown_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Judge41000::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Judge41000_descriptor_;
  metadata.reflection = Judge41000_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Judge41001::kItemCodeFieldNumber;
const int Judge41001::kItemNameFieldNumber;
const int Judge41001::kMaxTimeFieldNumber;
const int Judge41001::kMaxTriggerDistanceFieldNumber;
const int Judge41001::kNeedNearFarLampFlashFieldNumber;
const int Judge41001::kVi41001StartExamFieldNumber;
const int Judge41001::kVi41001EndExamFieldNumber;
const int Judge41001::kVi41001NotFinishOperationFieldNumber;
const int Judge41001::kVi41001StartDriveFieldNumber;
#endif  // !_MSC_VER

Judge41001::Judge41001()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OPMessage.Judge41001)
}

void Judge41001::InitAsDefaultInstance() {
  max_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  max_trigger_distance_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  need_near_far_lamp_flash_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  vi_41001_start_exam_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_41001_end_exam_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_41001_not_finish_operation_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_41001_start_drive_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
}

Judge41001::Judge41001(const Judge41001& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OPMessage.Judge41001)
}

void Judge41001::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  itemcode_ = 0;
  itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_time_ = NULL;
  max_trigger_distance_ = NULL;
  need_near_far_lamp_flash_ = NULL;
  vi_41001_start_exam_ = NULL;
  vi_41001_end_exam_ = NULL;
  vi_41001_not_finish_operation_ = NULL;
  vi_41001_start_drive_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Judge41001::~Judge41001() {
  // @@protoc_insertion_point(destructor:OPMessage.Judge41001)
  SharedDtor();
}

void Judge41001::SharedDtor() {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (this != default_instance_) {
    delete max_time_;
    delete max_trigger_distance_;
    delete need_near_far_lamp_flash_;
    delete vi_41001_start_exam_;
    delete vi_41001_end_exam_;
    delete vi_41001_not_finish_operation_;
    delete vi_41001_start_drive_;
  }
}

void Judge41001::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Judge41001::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Judge41001_descriptor_;
}

const Judge41001& Judge41001::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageKm3Config_2eproto();
  return *default_instance_;
}

Judge41001* Judge41001::default_instance_ = NULL;

Judge41001* Judge41001::New() const {
  return new Judge41001;
}

void Judge41001::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    itemcode_ = 0;
    if (has_itemname()) {
      if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        itemname_->clear();
      }
    }
    if (has_max_time()) {
      if (max_time_ != NULL) max_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_max_trigger_distance()) {
      if (max_trigger_distance_ != NULL) max_trigger_distance_->::OPMessage::judgeItem::Clear();
    }
    if (has_need_near_far_lamp_flash()) {
      if (need_near_far_lamp_flash_ != NULL) need_near_far_lamp_flash_->::OPMessage::judgeItem::Clear();
    }
    if (has_vi_41001_start_exam()) {
      if (vi_41001_start_exam_ != NULL) vi_41001_start_exam_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_41001_end_exam()) {
      if (vi_41001_end_exam_ != NULL) vi_41001_end_exam_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_41001_not_finish_operation()) {
      if (vi_41001_not_finish_operation_ != NULL) vi_41001_not_finish_operation_->::OPMessage::voiceItem::Clear();
    }
  }
  if (has_vi_41001_start_drive()) {
    if (vi_41001_start_drive_ != NULL) vi_41001_start_drive_->::OPMessage::voiceItem::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Judge41001::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OPMessage.Judge41001)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemcode_)));
          set_has_itemcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_itemName;
        break;
      }

      // optional string itemName = 2;
      case 2: {
        if (tag == 18) {
         parse_itemName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itemname().data(), this->itemname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "itemname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_max_time;
        break;
      }

      // optional .OPMessage.judgeItem max_time = 3;
      case 3: {
        if (tag == 26) {
         parse_max_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_max_trigger_distance;
        break;
      }

      // optional .OPMessage.judgeItem max_trigger_distance = 4;
      case 4: {
        if (tag == 34) {
         parse_max_trigger_distance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_trigger_distance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_need_near_far_lamp_flash;
        break;
      }

      // optional .OPMessage.judgeItem need_near_far_lamp_flash = 5;
      case 5: {
        if (tag == 42) {
         parse_need_near_far_lamp_flash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_need_near_far_lamp_flash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_vi_41001_start_exam;
        break;
      }

      // optional .OPMessage.voiceItem vi_41001_start_exam = 6;
      case 6: {
        if (tag == 50) {
         parse_vi_41001_start_exam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_41001_start_exam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_vi_41001_end_exam;
        break;
      }

      // optional .OPMessage.voiceItem vi_41001_end_exam = 7;
      case 7: {
        if (tag == 58) {
         parse_vi_41001_end_exam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_41001_end_exam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_vi_41001_not_finish_operation;
        break;
      }

      // optional .OPMessage.voiceItem vi_41001_not_finish_operation = 8;
      case 8: {
        if (tag == 66) {
         parse_vi_41001_not_finish_operation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_41001_not_finish_operation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_vi_41001_start_drive;
        break;
      }

      // optional .OPMessage.voiceItem vi_41001_start_drive = 9;
      case 9: {
        if (tag == 74) {
         parse_vi_41001_start_drive:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_41001_start_drive()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OPMessage.Judge41001)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OPMessage.Judge41001)
  return false;
#undef DO_
}

void Judge41001::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OPMessage.Judge41001)
  // optional int32 itemCode = 1;
  if (has_itemcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemcode(), output);
  }

  // optional string itemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->itemname(), output);
  }

  // optional .OPMessage.judgeItem max_time = 3;
  if (has_max_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->max_time(), output);
  }

  // optional .OPMessage.judgeItem max_trigger_distance = 4;
  if (has_max_trigger_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->max_trigger_distance(), output);
  }

  // optional .OPMessage.judgeItem need_near_far_lamp_flash = 5;
  if (has_need_near_far_lamp_flash()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->need_near_far_lamp_flash(), output);
  }

  // optional .OPMessage.voiceItem vi_41001_start_exam = 6;
  if (has_vi_41001_start_exam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->vi_41001_start_exam(), output);
  }

  // optional .OPMessage.voiceItem vi_41001_end_exam = 7;
  if (has_vi_41001_end_exam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->vi_41001_end_exam(), output);
  }

  // optional .OPMessage.voiceItem vi_41001_not_finish_operation = 8;
  if (has_vi_41001_not_finish_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->vi_41001_not_finish_operation(), output);
  }

  // optional .OPMessage.voiceItem vi_41001_start_drive = 9;
  if (has_vi_41001_start_drive()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->vi_41001_start_drive(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OPMessage.Judge41001)
}

::google::protobuf::uint8* Judge41001::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OPMessage.Judge41001)
  // optional int32 itemCode = 1;
  if (has_itemcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemcode(), target);
  }

  // optional string itemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->itemname(), target);
  }

  // optional .OPMessage.judgeItem max_time = 3;
  if (has_max_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->max_time(), target);
  }

  // optional .OPMessage.judgeItem max_trigger_distance = 4;
  if (has_max_trigger_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->max_trigger_distance(), target);
  }

  // optional .OPMessage.judgeItem need_near_far_lamp_flash = 5;
  if (has_need_near_far_lamp_flash()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->need_near_far_lamp_flash(), target);
  }

  // optional .OPMessage.voiceItem vi_41001_start_exam = 6;
  if (has_vi_41001_start_exam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->vi_41001_start_exam(), target);
  }

  // optional .OPMessage.voiceItem vi_41001_end_exam = 7;
  if (has_vi_41001_end_exam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->vi_41001_end_exam(), target);
  }

  // optional .OPMessage.voiceItem vi_41001_not_finish_operation = 8;
  if (has_vi_41001_not_finish_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->vi_41001_not_finish_operation(), target);
  }

  // optional .OPMessage.voiceItem vi_41001_start_drive = 9;
  if (has_vi_41001_start_drive()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->vi_41001_start_drive(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OPMessage.Judge41001)
  return target;
}

int Judge41001::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemCode = 1;
    if (has_itemcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemcode());
    }

    // optional string itemName = 2;
    if (has_itemname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemname());
    }

    // optional .OPMessage.judgeItem max_time = 3;
    if (has_max_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_time());
    }

    // optional .OPMessage.judgeItem max_trigger_distance = 4;
    if (has_max_trigger_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_trigger_distance());
    }

    // optional .OPMessage.judgeItem need_near_far_lamp_flash = 5;
    if (has_need_near_far_lamp_flash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->need_near_far_lamp_flash());
    }

    // optional .OPMessage.voiceItem vi_41001_start_exam = 6;
    if (has_vi_41001_start_exam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_41001_start_exam());
    }

    // optional .OPMessage.voiceItem vi_41001_end_exam = 7;
    if (has_vi_41001_end_exam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_41001_end_exam());
    }

    // optional .OPMessage.voiceItem vi_41001_not_finish_operation = 8;
    if (has_vi_41001_not_finish_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_41001_not_finish_operation());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .OPMessage.voiceItem vi_41001_start_drive = 9;
    if (has_vi_41001_start_drive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_41001_start_drive());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Judge41001::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Judge41001* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Judge41001*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Judge41001::MergeFrom(const Judge41001& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemcode()) {
      set_itemcode(from.itemcode());
    }
    if (from.has_itemname()) {
      set_itemname(from.itemname());
    }
    if (from.has_max_time()) {
      mutable_max_time()->::OPMessage::judgeItem::MergeFrom(from.max_time());
    }
    if (from.has_max_trigger_distance()) {
      mutable_max_trigger_distance()->::OPMessage::judgeItem::MergeFrom(from.max_trigger_distance());
    }
    if (from.has_need_near_far_lamp_flash()) {
      mutable_need_near_far_lamp_flash()->::OPMessage::judgeItem::MergeFrom(from.need_near_far_lamp_flash());
    }
    if (from.has_vi_41001_start_exam()) {
      mutable_vi_41001_start_exam()->::OPMessage::voiceItem::MergeFrom(from.vi_41001_start_exam());
    }
    if (from.has_vi_41001_end_exam()) {
      mutable_vi_41001_end_exam()->::OPMessage::voiceItem::MergeFrom(from.vi_41001_end_exam());
    }
    if (from.has_vi_41001_not_finish_operation()) {
      mutable_vi_41001_not_finish_operation()->::OPMessage::voiceItem::MergeFrom(from.vi_41001_not_finish_operation());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vi_41001_start_drive()) {
      mutable_vi_41001_start_drive()->::OPMessage::voiceItem::MergeFrom(from.vi_41001_start_drive());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Judge41001::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Judge41001::CopyFrom(const Judge41001& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Judge41001::IsInitialized() const {

  return true;
}

void Judge41001::Swap(Judge41001* other) {
  if (other != this) {
    std::swap(itemcode_, other->itemcode_);
    std::swap(itemname_, other->itemname_);
    std::swap(max_time_, other->max_time_);
    std::swap(max_trigger_distance_, other->max_trigger_distance_);
    std::swap(need_near_far_lamp_flash_, other->need_near_far_lamp_flash_);
    std::swap(vi_41001_start_exam_, other->vi_41001_start_exam_);
    std::swap(vi_41001_end_exam_, other->vi_41001_end_exam_);
    std::swap(vi_41001_not_finish_operation_, other->vi_41001_not_finish_operation_);
    std::swap(vi_41001_start_drive_, other->vi_41001_start_drive_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Judge41001::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Judge41001_descriptor_;
  metadata.reflection = Judge41001_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Judge41200::kItemCodeFieldNumber;
const int Judge41200::kItemNameFieldNumber;
const int Judge41200::kMaxTimeFieldNumber;
const int Judge41200::kMaxTriggerDistanceFieldNumber;
const int Judge41200::kMaxSpeedFieldNumber;
const int Judge41200::kMinHornTimeFieldNumber;
const int Judge41200::kJudgeModeFieldNumber;
const int Judge41200::kNeedNearFarLampFlashFieldNumber;
const int Judge41200::kVi41200StartExamFieldNumber;
const int Judge41200::kVi41200EndExamFieldNumber;
const int Judge41200::kVi41200HornNotUseFieldNumber;
const int Judge41200::kVi41200NotSlowdownFieldNumber;
#endif  // !_MSC_VER

Judge41200::Judge41200()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OPMessage.Judge41200)
}

void Judge41200::InitAsDefaultInstance() {
  max_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  max_trigger_distance_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  max_speed_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  min_horn_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  judge_mode_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  need_near_far_lamp_flash_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  vi_41200_start_exam_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_41200_end_exam_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_41200_horn_not_use_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_41200_not_slowdown_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
}

Judge41200::Judge41200(const Judge41200& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OPMessage.Judge41200)
}

void Judge41200::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  itemcode_ = 0;
  itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_time_ = NULL;
  max_trigger_distance_ = NULL;
  max_speed_ = NULL;
  min_horn_time_ = NULL;
  judge_mode_ = NULL;
  need_near_far_lamp_flash_ = NULL;
  vi_41200_start_exam_ = NULL;
  vi_41200_end_exam_ = NULL;
  vi_41200_horn_not_use_ = NULL;
  vi_41200_not_slowdown_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Judge41200::~Judge41200() {
  // @@protoc_insertion_point(destructor:OPMessage.Judge41200)
  SharedDtor();
}

void Judge41200::SharedDtor() {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (this != default_instance_) {
    delete max_time_;
    delete max_trigger_distance_;
    delete max_speed_;
    delete min_horn_time_;
    delete judge_mode_;
    delete need_near_far_lamp_flash_;
    delete vi_41200_start_exam_;
    delete vi_41200_end_exam_;
    delete vi_41200_horn_not_use_;
    delete vi_41200_not_slowdown_;
  }
}

void Judge41200::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Judge41200::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Judge41200_descriptor_;
}

const Judge41200& Judge41200::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageKm3Config_2eproto();
  return *default_instance_;
}

Judge41200* Judge41200::default_instance_ = NULL;

Judge41200* Judge41200::New() const {
  return new Judge41200;
}

void Judge41200::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    itemcode_ = 0;
    if (has_itemname()) {
      if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        itemname_->clear();
      }
    }
    if (has_max_time()) {
      if (max_time_ != NULL) max_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_max_trigger_distance()) {
      if (max_trigger_distance_ != NULL) max_trigger_distance_->::OPMessage::judgeItem::Clear();
    }
    if (has_max_speed()) {
      if (max_speed_ != NULL) max_speed_->::OPMessage::judgeItem::Clear();
    }
    if (has_min_horn_time()) {
      if (min_horn_time_ != NULL) min_horn_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_judge_mode()) {
      if (judge_mode_ != NULL) judge_mode_->::OPMessage::judgeItem::Clear();
    }
    if (has_need_near_far_lamp_flash()) {
      if (need_near_far_lamp_flash_ != NULL) need_near_far_lamp_flash_->::OPMessage::judgeItem::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 3840) {
    if (has_vi_41200_start_exam()) {
      if (vi_41200_start_exam_ != NULL) vi_41200_start_exam_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_41200_end_exam()) {
      if (vi_41200_end_exam_ != NULL) vi_41200_end_exam_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_41200_horn_not_use()) {
      if (vi_41200_horn_not_use_ != NULL) vi_41200_horn_not_use_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_41200_not_slowdown()) {
      if (vi_41200_not_slowdown_ != NULL) vi_41200_not_slowdown_->::OPMessage::voiceItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Judge41200::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OPMessage.Judge41200)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemcode_)));
          set_has_itemcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_itemName;
        break;
      }

      // optional string itemName = 2;
      case 2: {
        if (tag == 18) {
         parse_itemName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itemname().data(), this->itemname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "itemname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_max_time;
        break;
      }

      // optional .OPMessage.judgeItem max_time = 3;
      case 3: {
        if (tag == 26) {
         parse_max_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_max_trigger_distance;
        break;
      }

      // optional .OPMessage.judgeItem max_trigger_distance = 4;
      case 4: {
        if (tag == 34) {
         parse_max_trigger_distance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_trigger_distance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_max_speed;
        break;
      }

      // optional .OPMessage.judgeItem max_speed = 5;
      case 5: {
        if (tag == 42) {
         parse_max_speed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_speed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_min_horn_time;
        break;
      }

      // optional .OPMessage.judgeItem min_horn_time = 6;
      case 6: {
        if (tag == 50) {
         parse_min_horn_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_horn_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_judge_mode;
        break;
      }

      // optional .OPMessage.judgeItem judge_mode = 7;
      case 7: {
        if (tag == 58) {
         parse_judge_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_judge_mode()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_need_near_far_lamp_flash;
        break;
      }

      // optional .OPMessage.judgeItem need_near_far_lamp_flash = 8;
      case 8: {
        if (tag == 66) {
         parse_need_near_far_lamp_flash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_need_near_far_lamp_flash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_vi_41200_start_exam;
        break;
      }

      // optional .OPMessage.voiceItem vi_41200_start_exam = 9;
      case 9: {
        if (tag == 74) {
         parse_vi_41200_start_exam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_41200_start_exam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_vi_41200_end_exam;
        break;
      }

      // optional .OPMessage.voiceItem vi_41200_end_exam = 10;
      case 10: {
        if (tag == 82) {
         parse_vi_41200_end_exam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_41200_end_exam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_vi_41200_horn_not_use;
        break;
      }

      // optional .OPMessage.voiceItem vi_41200_horn_not_use = 11;
      case 11: {
        if (tag == 90) {
         parse_vi_41200_horn_not_use:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_41200_horn_not_use()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_vi_41200_not_slowdown;
        break;
      }

      // optional .OPMessage.voiceItem vi_41200_not_slowdown = 12;
      case 12: {
        if (tag == 98) {
         parse_vi_41200_not_slowdown:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_41200_not_slowdown()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OPMessage.Judge41200)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OPMessage.Judge41200)
  return false;
#undef DO_
}

void Judge41200::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OPMessage.Judge41200)
  // optional int32 itemCode = 1;
  if (has_itemcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemcode(), output);
  }

  // optional string itemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->itemname(), output);
  }

  // optional .OPMessage.judgeItem max_time = 3;
  if (has_max_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->max_time(), output);
  }

  // optional .OPMessage.judgeItem max_trigger_distance = 4;
  if (has_max_trigger_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->max_trigger_distance(), output);
  }

  // optional .OPMessage.judgeItem max_speed = 5;
  if (has_max_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->max_speed(), output);
  }

  // optional .OPMessage.judgeItem min_horn_time = 6;
  if (has_min_horn_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->min_horn_time(), output);
  }

  // optional .OPMessage.judgeItem judge_mode = 7;
  if (has_judge_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->judge_mode(), output);
  }

  // optional .OPMessage.judgeItem need_near_far_lamp_flash = 8;
  if (has_need_near_far_lamp_flash()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->need_near_far_lamp_flash(), output);
  }

  // optional .OPMessage.voiceItem vi_41200_start_exam = 9;
  if (has_vi_41200_start_exam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->vi_41200_start_exam(), output);
  }

  // optional .OPMessage.voiceItem vi_41200_end_exam = 10;
  if (has_vi_41200_end_exam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->vi_41200_end_exam(), output);
  }

  // optional .OPMessage.voiceItem vi_41200_horn_not_use = 11;
  if (has_vi_41200_horn_not_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->vi_41200_horn_not_use(), output);
  }

  // optional .OPMessage.voiceItem vi_41200_not_slowdown = 12;
  if (has_vi_41200_not_slowdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->vi_41200_not_slowdown(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OPMessage.Judge41200)
}

::google::protobuf::uint8* Judge41200::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OPMessage.Judge41200)
  // optional int32 itemCode = 1;
  if (has_itemcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemcode(), target);
  }

  // optional string itemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->itemname(), target);
  }

  // optional .OPMessage.judgeItem max_time = 3;
  if (has_max_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->max_time(), target);
  }

  // optional .OPMessage.judgeItem max_trigger_distance = 4;
  if (has_max_trigger_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->max_trigger_distance(), target);
  }

  // optional .OPMessage.judgeItem max_speed = 5;
  if (has_max_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->max_speed(), target);
  }

  // optional .OPMessage.judgeItem min_horn_time = 6;
  if (has_min_horn_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->min_horn_time(), target);
  }

  // optional .OPMessage.judgeItem judge_mode = 7;
  if (has_judge_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->judge_mode(), target);
  }

  // optional .OPMessage.judgeItem need_near_far_lamp_flash = 8;
  if (has_need_near_far_lamp_flash()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->need_near_far_lamp_flash(), target);
  }

  // optional .OPMessage.voiceItem vi_41200_start_exam = 9;
  if (has_vi_41200_start_exam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->vi_41200_start_exam(), target);
  }

  // optional .OPMessage.voiceItem vi_41200_end_exam = 10;
  if (has_vi_41200_end_exam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->vi_41200_end_exam(), target);
  }

  // optional .OPMessage.voiceItem vi_41200_horn_not_use = 11;
  if (has_vi_41200_horn_not_use()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->vi_41200_horn_not_use(), target);
  }

  // optional .OPMessage.voiceItem vi_41200_not_slowdown = 12;
  if (has_vi_41200_not_slowdown()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->vi_41200_not_slowdown(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OPMessage.Judge41200)
  return target;
}

int Judge41200::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemCode = 1;
    if (has_itemcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemcode());
    }

    // optional string itemName = 2;
    if (has_itemname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemname());
    }

    // optional .OPMessage.judgeItem max_time = 3;
    if (has_max_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_time());
    }

    // optional .OPMessage.judgeItem max_trigger_distance = 4;
    if (has_max_trigger_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_trigger_distance());
    }

    // optional .OPMessage.judgeItem max_speed = 5;
    if (has_max_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_speed());
    }

    // optional .OPMessage.judgeItem min_horn_time = 6;
    if (has_min_horn_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->min_horn_time());
    }

    // optional .OPMessage.judgeItem judge_mode = 7;
    if (has_judge_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->judge_mode());
    }

    // optional .OPMessage.judgeItem need_near_far_lamp_flash = 8;
    if (has_need_near_far_lamp_flash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->need_near_far_lamp_flash());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .OPMessage.voiceItem vi_41200_start_exam = 9;
    if (has_vi_41200_start_exam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_41200_start_exam());
    }

    // optional .OPMessage.voiceItem vi_41200_end_exam = 10;
    if (has_vi_41200_end_exam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_41200_end_exam());
    }

    // optional .OPMessage.voiceItem vi_41200_horn_not_use = 11;
    if (has_vi_41200_horn_not_use()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_41200_horn_not_use());
    }

    // optional .OPMessage.voiceItem vi_41200_not_slowdown = 12;
    if (has_vi_41200_not_slowdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_41200_not_slowdown());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Judge41200::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Judge41200* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Judge41200*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Judge41200::MergeFrom(const Judge41200& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemcode()) {
      set_itemcode(from.itemcode());
    }
    if (from.has_itemname()) {
      set_itemname(from.itemname());
    }
    if (from.has_max_time()) {
      mutable_max_time()->::OPMessage::judgeItem::MergeFrom(from.max_time());
    }
    if (from.has_max_trigger_distance()) {
      mutable_max_trigger_distance()->::OPMessage::judgeItem::MergeFrom(from.max_trigger_distance());
    }
    if (from.has_max_speed()) {
      mutable_max_speed()->::OPMessage::judgeItem::MergeFrom(from.max_speed());
    }
    if (from.has_min_horn_time()) {
      mutable_min_horn_time()->::OPMessage::judgeItem::MergeFrom(from.min_horn_time());
    }
    if (from.has_judge_mode()) {
      mutable_judge_mode()->::OPMessage::judgeItem::MergeFrom(from.judge_mode());
    }
    if (from.has_need_near_far_lamp_flash()) {
      mutable_need_near_far_lamp_flash()->::OPMessage::judgeItem::MergeFrom(from.need_near_far_lamp_flash());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vi_41200_start_exam()) {
      mutable_vi_41200_start_exam()->::OPMessage::voiceItem::MergeFrom(from.vi_41200_start_exam());
    }
    if (from.has_vi_41200_end_exam()) {
      mutable_vi_41200_end_exam()->::OPMessage::voiceItem::MergeFrom(from.vi_41200_end_exam());
    }
    if (from.has_vi_41200_horn_not_use()) {
      mutable_vi_41200_horn_not_use()->::OPMessage::voiceItem::MergeFrom(from.vi_41200_horn_not_use());
    }
    if (from.has_vi_41200_not_slowdown()) {
      mutable_vi_41200_not_slowdown()->::OPMessage::voiceItem::MergeFrom(from.vi_41200_not_slowdown());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Judge41200::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Judge41200::CopyFrom(const Judge41200& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Judge41200::IsInitialized() const {

  return true;
}

void Judge41200::Swap(Judge41200* other) {
  if (other != this) {
    std::swap(itemcode_, other->itemcode_);
    std::swap(itemname_, other->itemname_);
    std::swap(max_time_, other->max_time_);
    std::swap(max_trigger_distance_, other->max_trigger_distance_);
    std::swap(max_speed_, other->max_speed_);
    std::swap(min_horn_time_, other->min_horn_time_);
    std::swap(judge_mode_, other->judge_mode_);
    std::swap(need_near_far_lamp_flash_, other->need_near_far_lamp_flash_);
    std::swap(vi_41200_start_exam_, other->vi_41200_start_exam_);
    std::swap(vi_41200_end_exam_, other->vi_41200_end_exam_);
    std::swap(vi_41200_horn_not_use_, other->vi_41200_horn_not_use_);
    std::swap(vi_41200_not_slowdown_, other->vi_41200_not_slowdown_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Judge41200::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Judge41200_descriptor_;
  metadata.reflection = Judge41200_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Judge41100::kItemCodeFieldNumber;
const int Judge41100::kItemNameFieldNumber;
const int Judge41100::kMaxTimeFieldNumber;
const int Judge41100::kMaxTriggerDistanceFieldNumber;
const int Judge41100::kMaxSpeedFieldNumber;
const int Judge41100::kMinHornTimeFieldNumber;
const int Judge41100::kJudgeModeFieldNumber;
const int Judge41100::kNeedNearFarLampFlashFieldNumber;
const int Judge41100::kVi41100StartExamFieldNumber;
const int Judge41100::kVi41100EndExamFieldNumber;
const int Judge41100::kVi41100HornNotUseFieldNumber;
const int Judge41100::kVi41100NotSlowdownFieldNumber;
#endif  // !_MSC_VER

Judge41100::Judge41100()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OPMessage.Judge41100)
}

void Judge41100::InitAsDefaultInstance() {
  max_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  max_trigger_distance_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  max_speed_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  min_horn_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  judge_mode_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  need_near_far_lamp_flash_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  vi_41100_start_exam_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_41100_end_exam_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_41100_horn_not_use_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_41100_not_slowdown_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
}

Judge41100::Judge41100(const Judge41100& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OPMessage.Judge41100)
}

void Judge41100::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  itemcode_ = 0;
  itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_time_ = NULL;
  max_trigger_distance_ = NULL;
  max_speed_ = NULL;
  min_horn_time_ = NULL;
  judge_mode_ = NULL;
  need_near_far_lamp_flash_ = NULL;
  vi_41100_start_exam_ = NULL;
  vi_41100_end_exam_ = NULL;
  vi_41100_horn_not_use_ = NULL;
  vi_41100_not_slowdown_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Judge41100::~Judge41100() {
  // @@protoc_insertion_point(destructor:OPMessage.Judge41100)
  SharedDtor();
}

void Judge41100::SharedDtor() {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (this != default_instance_) {
    delete max_time_;
    delete max_trigger_distance_;
    delete max_speed_;
    delete min_horn_time_;
    delete judge_mode_;
    delete need_near_far_lamp_flash_;
    delete vi_41100_start_exam_;
    delete vi_41100_end_exam_;
    delete vi_41100_horn_not_use_;
    delete vi_41100_not_slowdown_;
  }
}

void Judge41100::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Judge41100::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Judge41100_descriptor_;
}

const Judge41100& Judge41100::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageKm3Config_2eproto();
  return *default_instance_;
}

Judge41100* Judge41100::default_instance_ = NULL;

Judge41100* Judge41100::New() const {
  return new Judge41100;
}

void Judge41100::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    itemcode_ = 0;
    if (has_itemname()) {
      if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        itemname_->clear();
      }
    }
    if (has_max_time()) {
      if (max_time_ != NULL) max_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_max_trigger_distance()) {
      if (max_trigger_distance_ != NULL) max_trigger_distance_->::OPMessage::judgeItem::Clear();
    }
    if (has_max_speed()) {
      if (max_speed_ != NULL) max_speed_->::OPMessage::judgeItem::Clear();
    }
    if (has_min_horn_time()) {
      if (min_horn_time_ != NULL) min_horn_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_judge_mode()) {
      if (judge_mode_ != NULL) judge_mode_->::OPMessage::judgeItem::Clear();
    }
    if (has_need_near_far_lamp_flash()) {
      if (need_near_far_lamp_flash_ != NULL) need_near_far_lamp_flash_->::OPMessage::judgeItem::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 3840) {
    if (has_vi_41100_start_exam()) {
      if (vi_41100_start_exam_ != NULL) vi_41100_start_exam_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_41100_end_exam()) {
      if (vi_41100_end_exam_ != NULL) vi_41100_end_exam_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_41100_horn_not_use()) {
      if (vi_41100_horn_not_use_ != NULL) vi_41100_horn_not_use_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_41100_not_slowdown()) {
      if (vi_41100_not_slowdown_ != NULL) vi_41100_not_slowdown_->::OPMessage::voiceItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Judge41100::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OPMessage.Judge41100)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemcode_)));
          set_has_itemcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_itemName;
        break;
      }

      // optional string itemName = 2;
      case 2: {
        if (tag == 18) {
         parse_itemName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itemname().data(), this->itemname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "itemname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_max_time;
        break;
      }

      // optional .OPMessage.judgeItem max_time = 3;
      case 3: {
        if (tag == 26) {
         parse_max_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_max_trigger_distance;
        break;
      }

      // optional .OPMessage.judgeItem max_trigger_distance = 4;
      case 4: {
        if (tag == 34) {
         parse_max_trigger_distance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_trigger_distance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_max_speed;
        break;
      }

      // optional .OPMessage.judgeItem max_speed = 5;
      case 5: {
        if (tag == 42) {
         parse_max_speed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_speed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_min_horn_time;
        break;
      }

      // optional .OPMessage.judgeItem min_horn_time = 6;
      case 6: {
        if (tag == 50) {
         parse_min_horn_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_horn_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_judge_mode;
        break;
      }

      // optional .OPMessage.judgeItem judge_mode = 7;
      case 7: {
        if (tag == 58) {
         parse_judge_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_judge_mode()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_need_near_far_lamp_flash;
        break;
      }

      // optional .OPMessage.judgeItem need_near_far_lamp_flash = 8;
      case 8: {
        if (tag == 66) {
         parse_need_near_far_lamp_flash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_need_near_far_lamp_flash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_vi_41100_start_exam;
        break;
      }

      // optional .OPMessage.voiceItem vi_41100_start_exam = 9;
      case 9: {
        if (tag == 74) {
         parse_vi_41100_start_exam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_41100_start_exam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_vi_41100_end_exam;
        break;
      }

      // optional .OPMessage.voiceItem vi_41100_end_exam = 10;
      case 10: {
        if (tag == 82) {
         parse_vi_41100_end_exam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_41100_end_exam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_vi_41100_horn_not_use;
        break;
      }

      // optional .OPMessage.voiceItem vi_41100_horn_not_use = 11;
      case 11: {
        if (tag == 90) {
         parse_vi_41100_horn_not_use:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_41100_horn_not_use()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_vi_41100_not_slowdown;
        break;
      }

      // optional .OPMessage.voiceItem vi_41100_not_slowdown = 12;
      case 12: {
        if (tag == 98) {
         parse_vi_41100_not_slowdown:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_41100_not_slowdown()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OPMessage.Judge41100)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OPMessage.Judge41100)
  return false;
#undef DO_
}

void Judge41100::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OPMessage.Judge41100)
  // optional int32 itemCode = 1;
  if (has_itemcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemcode(), output);
  }

  // optional string itemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->itemname(), output);
  }

  // optional .OPMessage.judgeItem max_time = 3;
  if (has_max_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->max_time(), output);
  }

  // optional .OPMessage.judgeItem max_trigger_distance = 4;
  if (has_max_trigger_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->max_trigger_distance(), output);
  }

  // optional .OPMessage.judgeItem max_speed = 5;
  if (has_max_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->max_speed(), output);
  }

  // optional .OPMessage.judgeItem min_horn_time = 6;
  if (has_min_horn_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->min_horn_time(), output);
  }

  // optional .OPMessage.judgeItem judge_mode = 7;
  if (has_judge_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->judge_mode(), output);
  }

  // optional .OPMessage.judgeItem need_near_far_lamp_flash = 8;
  if (has_need_near_far_lamp_flash()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->need_near_far_lamp_flash(), output);
  }

  // optional .OPMessage.voiceItem vi_41100_start_exam = 9;
  if (has_vi_41100_start_exam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->vi_41100_start_exam(), output);
  }

  // optional .OPMessage.voiceItem vi_41100_end_exam = 10;
  if (has_vi_41100_end_exam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->vi_41100_end_exam(), output);
  }

  // optional .OPMessage.voiceItem vi_41100_horn_not_use = 11;
  if (has_vi_41100_horn_not_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->vi_41100_horn_not_use(), output);
  }

  // optional .OPMessage.voiceItem vi_41100_not_slowdown = 12;
  if (has_vi_41100_not_slowdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->vi_41100_not_slowdown(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OPMessage.Judge41100)
}

::google::protobuf::uint8* Judge41100::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OPMessage.Judge41100)
  // optional int32 itemCode = 1;
  if (has_itemcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemcode(), target);
  }

  // optional string itemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->itemname(), target);
  }

  // optional .OPMessage.judgeItem max_time = 3;
  if (has_max_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->max_time(), target);
  }

  // optional .OPMessage.judgeItem max_trigger_distance = 4;
  if (has_max_trigger_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->max_trigger_distance(), target);
  }

  // optional .OPMessage.judgeItem max_speed = 5;
  if (has_max_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->max_speed(), target);
  }

  // optional .OPMessage.judgeItem min_horn_time = 6;
  if (has_min_horn_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->min_horn_time(), target);
  }

  // optional .OPMessage.judgeItem judge_mode = 7;
  if (has_judge_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->judge_mode(), target);
  }

  // optional .OPMessage.judgeItem need_near_far_lamp_flash = 8;
  if (has_need_near_far_lamp_flash()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->need_near_far_lamp_flash(), target);
  }

  // optional .OPMessage.voiceItem vi_41100_start_exam = 9;
  if (has_vi_41100_start_exam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->vi_41100_start_exam(), target);
  }

  // optional .OPMessage.voiceItem vi_41100_end_exam = 10;
  if (has_vi_41100_end_exam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->vi_41100_end_exam(), target);
  }

  // optional .OPMessage.voiceItem vi_41100_horn_not_use = 11;
  if (has_vi_41100_horn_not_use()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->vi_41100_horn_not_use(), target);
  }

  // optional .OPMessage.voiceItem vi_41100_not_slowdown = 12;
  if (has_vi_41100_not_slowdown()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->vi_41100_not_slowdown(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OPMessage.Judge41100)
  return target;
}

int Judge41100::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemCode = 1;
    if (has_itemcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemcode());
    }

    // optional string itemName = 2;
    if (has_itemname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemname());
    }

    // optional .OPMessage.judgeItem max_time = 3;
    if (has_max_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_time());
    }

    // optional .OPMessage.judgeItem max_trigger_distance = 4;
    if (has_max_trigger_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_trigger_distance());
    }

    // optional .OPMessage.judgeItem max_speed = 5;
    if (has_max_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_speed());
    }

    // optional .OPMessage.judgeItem min_horn_time = 6;
    if (has_min_horn_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->min_horn_time());
    }

    // optional .OPMessage.judgeItem judge_mode = 7;
    if (has_judge_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->judge_mode());
    }

    // optional .OPMessage.judgeItem need_near_far_lamp_flash = 8;
    if (has_need_near_far_lamp_flash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->need_near_far_lamp_flash());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .OPMessage.voiceItem vi_41100_start_exam = 9;
    if (has_vi_41100_start_exam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_41100_start_exam());
    }

    // optional .OPMessage.voiceItem vi_41100_end_exam = 10;
    if (has_vi_41100_end_exam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_41100_end_exam());
    }

    // optional .OPMessage.voiceItem vi_41100_horn_not_use = 11;
    if (has_vi_41100_horn_not_use()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_41100_horn_not_use());
    }

    // optional .OPMessage.voiceItem vi_41100_not_slowdown = 12;
    if (has_vi_41100_not_slowdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_41100_not_slowdown());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Judge41100::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Judge41100* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Judge41100*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Judge41100::MergeFrom(const Judge41100& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemcode()) {
      set_itemcode(from.itemcode());
    }
    if (from.has_itemname()) {
      set_itemname(from.itemname());
    }
    if (from.has_max_time()) {
      mutable_max_time()->::OPMessage::judgeItem::MergeFrom(from.max_time());
    }
    if (from.has_max_trigger_distance()) {
      mutable_max_trigger_distance()->::OPMessage::judgeItem::MergeFrom(from.max_trigger_distance());
    }
    if (from.has_max_speed()) {
      mutable_max_speed()->::OPMessage::judgeItem::MergeFrom(from.max_speed());
    }
    if (from.has_min_horn_time()) {
      mutable_min_horn_time()->::OPMessage::judgeItem::MergeFrom(from.min_horn_time());
    }
    if (from.has_judge_mode()) {
      mutable_judge_mode()->::OPMessage::judgeItem::MergeFrom(from.judge_mode());
    }
    if (from.has_need_near_far_lamp_flash()) {
      mutable_need_near_far_lamp_flash()->::OPMessage::judgeItem::MergeFrom(from.need_near_far_lamp_flash());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vi_41100_start_exam()) {
      mutable_vi_41100_start_exam()->::OPMessage::voiceItem::MergeFrom(from.vi_41100_start_exam());
    }
    if (from.has_vi_41100_end_exam()) {
      mutable_vi_41100_end_exam()->::OPMessage::voiceItem::MergeFrom(from.vi_41100_end_exam());
    }
    if (from.has_vi_41100_horn_not_use()) {
      mutable_vi_41100_horn_not_use()->::OPMessage::voiceItem::MergeFrom(from.vi_41100_horn_not_use());
    }
    if (from.has_vi_41100_not_slowdown()) {
      mutable_vi_41100_not_slowdown()->::OPMessage::voiceItem::MergeFrom(from.vi_41100_not_slowdown());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Judge41100::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Judge41100::CopyFrom(const Judge41100& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Judge41100::IsInitialized() const {

  return true;
}

void Judge41100::Swap(Judge41100* other) {
  if (other != this) {
    std::swap(itemcode_, other->itemcode_);
    std::swap(itemname_, other->itemname_);
    std::swap(max_time_, other->max_time_);
    std::swap(max_trigger_distance_, other->max_trigger_distance_);
    std::swap(max_speed_, other->max_speed_);
    std::swap(min_horn_time_, other->min_horn_time_);
    std::swap(judge_mode_, other->judge_mode_);
    std::swap(need_near_far_lamp_flash_, other->need_near_far_lamp_flash_);
    std::swap(vi_41100_start_exam_, other->vi_41100_start_exam_);
    std::swap(vi_41100_end_exam_, other->vi_41100_end_exam_);
    std::swap(vi_41100_horn_not_use_, other->vi_41100_horn_not_use_);
    std::swap(vi_41100_not_slowdown_, other->vi_41100_not_slowdown_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Judge41100::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Judge41100_descriptor_;
  metadata.reflection = Judge41100_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Judge40700::kItemCodeFieldNumber;
const int Judge40700::kItemNameFieldNumber;
const int Judge40700::kMaxTimeFieldNumber;
const int Judge40700::kMaxTriggerDistanceFieldNumber;
const int Judge40700::kMaxSpeedFieldNumber;
const int Judge40700::kMinHornTimeFieldNumber;
const int Judge40700::kMinTurnSignalTimeFieldNumber;
const int Judge40700::kJudgeModeFieldNumber;
const int Judge40700::kNeedNearFarLampFlashFieldNumber;
const int Judge40700::kVi40700StartExamFieldNumber;
const int Judge40700::kVi40700EndExamFieldNumber;
const int Judge40700::kVi40700HornNotUseFieldNumber;
const int Judge40700::kVi40700NotSlowdownFieldNumber;
#endif  // !_MSC_VER

Judge40700::Judge40700()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OPMessage.Judge40700)
}

void Judge40700::InitAsDefaultInstance() {
  max_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  max_trigger_distance_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  max_speed_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  min_horn_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  min_turn_signal_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  judge_mode_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  need_near_far_lamp_flash_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  vi_40700_start_exam_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40700_end_exam_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40700_horn_not_use_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40700_not_slowdown_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
}

Judge40700::Judge40700(const Judge40700& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OPMessage.Judge40700)
}

void Judge40700::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  itemcode_ = 0;
  itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_time_ = NULL;
  max_trigger_distance_ = NULL;
  max_speed_ = NULL;
  min_horn_time_ = NULL;
  min_turn_signal_time_ = NULL;
  judge_mode_ = NULL;
  need_near_far_lamp_flash_ = NULL;
  vi_40700_start_exam_ = NULL;
  vi_40700_end_exam_ = NULL;
  vi_40700_horn_not_use_ = NULL;
  vi_40700_not_slowdown_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Judge40700::~Judge40700() {
  // @@protoc_insertion_point(destructor:OPMessage.Judge40700)
  SharedDtor();
}

void Judge40700::SharedDtor() {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (this != default_instance_) {
    delete max_time_;
    delete max_trigger_distance_;
    delete max_speed_;
    delete min_horn_time_;
    delete min_turn_signal_time_;
    delete judge_mode_;
    delete need_near_far_lamp_flash_;
    delete vi_40700_start_exam_;
    delete vi_40700_end_exam_;
    delete vi_40700_horn_not_use_;
    delete vi_40700_not_slowdown_;
  }
}

void Judge40700::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Judge40700::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Judge40700_descriptor_;
}

const Judge40700& Judge40700::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageKm3Config_2eproto();
  return *default_instance_;
}

Judge40700* Judge40700::default_instance_ = NULL;

Judge40700* Judge40700::New() const {
  return new Judge40700;
}

void Judge40700::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    itemcode_ = 0;
    if (has_itemname()) {
      if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        itemname_->clear();
      }
    }
    if (has_max_time()) {
      if (max_time_ != NULL) max_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_max_trigger_distance()) {
      if (max_trigger_distance_ != NULL) max_trigger_distance_->::OPMessage::judgeItem::Clear();
    }
    if (has_max_speed()) {
      if (max_speed_ != NULL) max_speed_->::OPMessage::judgeItem::Clear();
    }
    if (has_min_horn_time()) {
      if (min_horn_time_ != NULL) min_horn_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_min_turn_signal_time()) {
      if (min_turn_signal_time_ != NULL) min_turn_signal_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_judge_mode()) {
      if (judge_mode_ != NULL) judge_mode_->::OPMessage::judgeItem::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    if (has_need_near_far_lamp_flash()) {
      if (need_near_far_lamp_flash_ != NULL) need_near_far_lamp_flash_->::OPMessage::judgeItem::Clear();
    }
    if (has_vi_40700_start_exam()) {
      if (vi_40700_start_exam_ != NULL) vi_40700_start_exam_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40700_end_exam()) {
      if (vi_40700_end_exam_ != NULL) vi_40700_end_exam_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40700_horn_not_use()) {
      if (vi_40700_horn_not_use_ != NULL) vi_40700_horn_not_use_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40700_not_slowdown()) {
      if (vi_40700_not_slowdown_ != NULL) vi_40700_not_slowdown_->::OPMessage::voiceItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Judge40700::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OPMessage.Judge40700)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemcode_)));
          set_has_itemcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_itemName;
        break;
      }

      // optional string itemName = 2;
      case 2: {
        if (tag == 18) {
         parse_itemName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itemname().data(), this->itemname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "itemname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_max_time;
        break;
      }

      // optional .OPMessage.judgeItem max_time = 3;
      case 3: {
        if (tag == 26) {
         parse_max_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_max_trigger_distance;
        break;
      }

      // optional .OPMessage.judgeItem max_trigger_distance = 4;
      case 4: {
        if (tag == 34) {
         parse_max_trigger_distance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_trigger_distance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_max_speed;
        break;
      }

      // optional .OPMessage.judgeItem max_speed = 5;
      case 5: {
        if (tag == 42) {
         parse_max_speed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_speed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_min_horn_time;
        break;
      }

      // optional .OPMessage.judgeItem min_horn_time = 6;
      case 6: {
        if (tag == 50) {
         parse_min_horn_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_horn_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_min_turn_signal_time;
        break;
      }

      // optional .OPMessage.judgeItem min_turn_signal_time = 7;
      case 7: {
        if (tag == 58) {
         parse_min_turn_signal_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_turn_signal_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_judge_mode;
        break;
      }

      // optional .OPMessage.judgeItem judge_mode = 8;
      case 8: {
        if (tag == 66) {
         parse_judge_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_judge_mode()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_need_near_far_lamp_flash;
        break;
      }

      // optional .OPMessage.judgeItem need_near_far_lamp_flash = 9;
      case 9: {
        if (tag == 74) {
         parse_need_near_far_lamp_flash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_need_near_far_lamp_flash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_vi_40700_start_exam;
        break;
      }

      // optional .OPMessage.voiceItem vi_40700_start_exam = 10;
      case 10: {
        if (tag == 82) {
         parse_vi_40700_start_exam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40700_start_exam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_vi_40700_end_exam;
        break;
      }

      // optional .OPMessage.voiceItem vi_40700_end_exam = 11;
      case 11: {
        if (tag == 90) {
         parse_vi_40700_end_exam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40700_end_exam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_vi_40700_horn_not_use;
        break;
      }

      // optional .OPMessage.voiceItem vi_40700_horn_not_use = 12;
      case 12: {
        if (tag == 98) {
         parse_vi_40700_horn_not_use:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40700_horn_not_use()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_vi_40700_not_slowdown;
        break;
      }

      // optional .OPMessage.voiceItem vi_40700_not_slowdown = 13;
      case 13: {
        if (tag == 106) {
         parse_vi_40700_not_slowdown:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40700_not_slowdown()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OPMessage.Judge40700)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OPMessage.Judge40700)
  return false;
#undef DO_
}

void Judge40700::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OPMessage.Judge40700)
  // optional int32 itemCode = 1;
  if (has_itemcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemcode(), output);
  }

  // optional string itemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->itemname(), output);
  }

  // optional .OPMessage.judgeItem max_time = 3;
  if (has_max_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->max_time(), output);
  }

  // optional .OPMessage.judgeItem max_trigger_distance = 4;
  if (has_max_trigger_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->max_trigger_distance(), output);
  }

  // optional .OPMessage.judgeItem max_speed = 5;
  if (has_max_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->max_speed(), output);
  }

  // optional .OPMessage.judgeItem min_horn_time = 6;
  if (has_min_horn_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->min_horn_time(), output);
  }

  // optional .OPMessage.judgeItem min_turn_signal_time = 7;
  if (has_min_turn_signal_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->min_turn_signal_time(), output);
  }

  // optional .OPMessage.judgeItem judge_mode = 8;
  if (has_judge_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->judge_mode(), output);
  }

  // optional .OPMessage.judgeItem need_near_far_lamp_flash = 9;
  if (has_need_near_far_lamp_flash()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->need_near_far_lamp_flash(), output);
  }

  // optional .OPMessage.voiceItem vi_40700_start_exam = 10;
  if (has_vi_40700_start_exam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->vi_40700_start_exam(), output);
  }

  // optional .OPMessage.voiceItem vi_40700_end_exam = 11;
  if (has_vi_40700_end_exam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->vi_40700_end_exam(), output);
  }

  // optional .OPMessage.voiceItem vi_40700_horn_not_use = 12;
  if (has_vi_40700_horn_not_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->vi_40700_horn_not_use(), output);
  }

  // optional .OPMessage.voiceItem vi_40700_not_slowdown = 13;
  if (has_vi_40700_not_slowdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->vi_40700_not_slowdown(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OPMessage.Judge40700)
}

::google::protobuf::uint8* Judge40700::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OPMessage.Judge40700)
  // optional int32 itemCode = 1;
  if (has_itemcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemcode(), target);
  }

  // optional string itemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->itemname(), target);
  }

  // optional .OPMessage.judgeItem max_time = 3;
  if (has_max_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->max_time(), target);
  }

  // optional .OPMessage.judgeItem max_trigger_distance = 4;
  if (has_max_trigger_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->max_trigger_distance(), target);
  }

  // optional .OPMessage.judgeItem max_speed = 5;
  if (has_max_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->max_speed(), target);
  }

  // optional .OPMessage.judgeItem min_horn_time = 6;
  if (has_min_horn_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->min_horn_time(), target);
  }

  // optional .OPMessage.judgeItem min_turn_signal_time = 7;
  if (has_min_turn_signal_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->min_turn_signal_time(), target);
  }

  // optional .OPMessage.judgeItem judge_mode = 8;
  if (has_judge_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->judge_mode(), target);
  }

  // optional .OPMessage.judgeItem need_near_far_lamp_flash = 9;
  if (has_need_near_far_lamp_flash()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->need_near_far_lamp_flash(), target);
  }

  // optional .OPMessage.voiceItem vi_40700_start_exam = 10;
  if (has_vi_40700_start_exam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->vi_40700_start_exam(), target);
  }

  // optional .OPMessage.voiceItem vi_40700_end_exam = 11;
  if (has_vi_40700_end_exam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->vi_40700_end_exam(), target);
  }

  // optional .OPMessage.voiceItem vi_40700_horn_not_use = 12;
  if (has_vi_40700_horn_not_use()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->vi_40700_horn_not_use(), target);
  }

  // optional .OPMessage.voiceItem vi_40700_not_slowdown = 13;
  if (has_vi_40700_not_slowdown()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->vi_40700_not_slowdown(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OPMessage.Judge40700)
  return target;
}

int Judge40700::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemCode = 1;
    if (has_itemcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemcode());
    }

    // optional string itemName = 2;
    if (has_itemname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemname());
    }

    // optional .OPMessage.judgeItem max_time = 3;
    if (has_max_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_time());
    }

    // optional .OPMessage.judgeItem max_trigger_distance = 4;
    if (has_max_trigger_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_trigger_distance());
    }

    // optional .OPMessage.judgeItem max_speed = 5;
    if (has_max_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_speed());
    }

    // optional .OPMessage.judgeItem min_horn_time = 6;
    if (has_min_horn_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->min_horn_time());
    }

    // optional .OPMessage.judgeItem min_turn_signal_time = 7;
    if (has_min_turn_signal_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->min_turn_signal_time());
    }

    // optional .OPMessage.judgeItem judge_mode = 8;
    if (has_judge_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->judge_mode());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .OPMessage.judgeItem need_near_far_lamp_flash = 9;
    if (has_need_near_far_lamp_flash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->need_near_far_lamp_flash());
    }

    // optional .OPMessage.voiceItem vi_40700_start_exam = 10;
    if (has_vi_40700_start_exam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40700_start_exam());
    }

    // optional .OPMessage.voiceItem vi_40700_end_exam = 11;
    if (has_vi_40700_end_exam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40700_end_exam());
    }

    // optional .OPMessage.voiceItem vi_40700_horn_not_use = 12;
    if (has_vi_40700_horn_not_use()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40700_horn_not_use());
    }

    // optional .OPMessage.voiceItem vi_40700_not_slowdown = 13;
    if (has_vi_40700_not_slowdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40700_not_slowdown());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Judge40700::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Judge40700* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Judge40700*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Judge40700::MergeFrom(const Judge40700& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemcode()) {
      set_itemcode(from.itemcode());
    }
    if (from.has_itemname()) {
      set_itemname(from.itemname());
    }
    if (from.has_max_time()) {
      mutable_max_time()->::OPMessage::judgeItem::MergeFrom(from.max_time());
    }
    if (from.has_max_trigger_distance()) {
      mutable_max_trigger_distance()->::OPMessage::judgeItem::MergeFrom(from.max_trigger_distance());
    }
    if (from.has_max_speed()) {
      mutable_max_speed()->::OPMessage::judgeItem::MergeFrom(from.max_speed());
    }
    if (from.has_min_horn_time()) {
      mutable_min_horn_time()->::OPMessage::judgeItem::MergeFrom(from.min_horn_time());
    }
    if (from.has_min_turn_signal_time()) {
      mutable_min_turn_signal_time()->::OPMessage::judgeItem::MergeFrom(from.min_turn_signal_time());
    }
    if (from.has_judge_mode()) {
      mutable_judge_mode()->::OPMessage::judgeItem::MergeFrom(from.judge_mode());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_need_near_far_lamp_flash()) {
      mutable_need_near_far_lamp_flash()->::OPMessage::judgeItem::MergeFrom(from.need_near_far_lamp_flash());
    }
    if (from.has_vi_40700_start_exam()) {
      mutable_vi_40700_start_exam()->::OPMessage::voiceItem::MergeFrom(from.vi_40700_start_exam());
    }
    if (from.has_vi_40700_end_exam()) {
      mutable_vi_40700_end_exam()->::OPMessage::voiceItem::MergeFrom(from.vi_40700_end_exam());
    }
    if (from.has_vi_40700_horn_not_use()) {
      mutable_vi_40700_horn_not_use()->::OPMessage::voiceItem::MergeFrom(from.vi_40700_horn_not_use());
    }
    if (from.has_vi_40700_not_slowdown()) {
      mutable_vi_40700_not_slowdown()->::OPMessage::voiceItem::MergeFrom(from.vi_40700_not_slowdown());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Judge40700::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Judge40700::CopyFrom(const Judge40700& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Judge40700::IsInitialized() const {

  return true;
}

void Judge40700::Swap(Judge40700* other) {
  if (other != this) {
    std::swap(itemcode_, other->itemcode_);
    std::swap(itemname_, other->itemname_);
    std::swap(max_time_, other->max_time_);
    std::swap(max_trigger_distance_, other->max_trigger_distance_);
    std::swap(max_speed_, other->max_speed_);
    std::swap(min_horn_time_, other->min_horn_time_);
    std::swap(min_turn_signal_time_, other->min_turn_signal_time_);
    std::swap(judge_mode_, other->judge_mode_);
    std::swap(need_near_far_lamp_flash_, other->need_near_far_lamp_flash_);
    std::swap(vi_40700_start_exam_, other->vi_40700_start_exam_);
    std::swap(vi_40700_end_exam_, other->vi_40700_end_exam_);
    std::swap(vi_40700_horn_not_use_, other->vi_40700_horn_not_use_);
    std::swap(vi_40700_not_slowdown_, other->vi_40700_not_slowdown_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Judge40700::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Judge40700_descriptor_;
  metadata.reflection = Judge40700_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Judge41500::kItemCodeFieldNumber;
const int Judge41500::kItemNameFieldNumber;
const int Judge41500::kMaxTimeFieldNumber;
const int Judge41500::kMaxTriggerDistanceFieldNumber;
const int Judge41500::kMinTurnSignalTimeFieldNumber;
const int Judge41500::kMaxSpeedFieldNumber;
const int Judge41500::kJudgeModeFieldNumber;
const int Judge41500::kVi41500StartExamFieldNumber;
const int Judge41500::kVi41500EndExamFieldNumber;
const int Judge41500::kVi41500NotSlowdownFieldNumber;
const int Judge41500::kVi41500TurnLampUseErrorFieldNumber;
const int Judge41500::kVi41500TurnLampNotUseFieldNumber;
#endif  // !_MSC_VER

Judge41500::Judge41500()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OPMessage.Judge41500)
}

void Judge41500::InitAsDefaultInstance() {
  max_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  max_trigger_distance_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  min_turn_signal_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  max_speed_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  judge_mode_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  vi_41500_start_exam_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_41500_end_exam_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_41500_not_slowdown_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_41500_turn_lamp_use_error_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_41500_turn_lamp_not_use_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
}

Judge41500::Judge41500(const Judge41500& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OPMessage.Judge41500)
}

void Judge41500::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  itemcode_ = 0;
  itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_time_ = NULL;
  max_trigger_distance_ = NULL;
  min_turn_signal_time_ = NULL;
  max_speed_ = NULL;
  judge_mode_ = NULL;
  vi_41500_start_exam_ = NULL;
  vi_41500_end_exam_ = NULL;
  vi_41500_not_slowdown_ = NULL;
  vi_41500_turn_lamp_use_error_ = NULL;
  vi_41500_turn_lamp_not_use_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Judge41500::~Judge41500() {
  // @@protoc_insertion_point(destructor:OPMessage.Judge41500)
  SharedDtor();
}

void Judge41500::SharedDtor() {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (this != default_instance_) {
    delete max_time_;
    delete max_trigger_distance_;
    delete min_turn_signal_time_;
    delete max_speed_;
    delete judge_mode_;
    delete vi_41500_start_exam_;
    delete vi_41500_end_exam_;
    delete vi_41500_not_slowdown_;
    delete vi_41500_turn_lamp_use_error_;
    delete vi_41500_turn_lamp_not_use_;
  }
}

void Judge41500::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Judge41500::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Judge41500_descriptor_;
}

const Judge41500& Judge41500::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageKm3Config_2eproto();
  return *default_instance_;
}

Judge41500* Judge41500::default_instance_ = NULL;

Judge41500* Judge41500::New() const {
  return new Judge41500;
}

void Judge41500::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    itemcode_ = 0;
    if (has_itemname()) {
      if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        itemname_->clear();
      }
    }
    if (has_max_time()) {
      if (max_time_ != NULL) max_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_max_trigger_distance()) {
      if (max_trigger_distance_ != NULL) max_trigger_distance_->::OPMessage::judgeItem::Clear();
    }
    if (has_min_turn_signal_time()) {
      if (min_turn_signal_time_ != NULL) min_turn_signal_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_max_speed()) {
      if (max_speed_ != NULL) max_speed_->::OPMessage::judgeItem::Clear();
    }
    if (has_judge_mode()) {
      if (judge_mode_ != NULL) judge_mode_->::OPMessage::judgeItem::Clear();
    }
    if (has_vi_41500_start_exam()) {
      if (vi_41500_start_exam_ != NULL) vi_41500_start_exam_->::OPMessage::voiceItem::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 3840) {
    if (has_vi_41500_end_exam()) {
      if (vi_41500_end_exam_ != NULL) vi_41500_end_exam_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_41500_not_slowdown()) {
      if (vi_41500_not_slowdown_ != NULL) vi_41500_not_slowdown_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_41500_turn_lamp_use_error()) {
      if (vi_41500_turn_lamp_use_error_ != NULL) vi_41500_turn_lamp_use_error_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_41500_turn_lamp_not_use()) {
      if (vi_41500_turn_lamp_not_use_ != NULL) vi_41500_turn_lamp_not_use_->::OPMessage::voiceItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Judge41500::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OPMessage.Judge41500)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemcode_)));
          set_has_itemcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_itemName;
        break;
      }

      // optional string itemName = 2;
      case 2: {
        if (tag == 18) {
         parse_itemName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itemname().data(), this->itemname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "itemname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_max_time;
        break;
      }

      // optional .OPMessage.judgeItem max_time = 3;
      case 3: {
        if (tag == 26) {
         parse_max_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_max_trigger_distance;
        break;
      }

      // optional .OPMessage.judgeItem max_trigger_distance = 4;
      case 4: {
        if (tag == 34) {
         parse_max_trigger_distance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_trigger_distance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_min_turn_signal_time;
        break;
      }

      // optional .OPMessage.judgeItem min_turn_signal_time = 5;
      case 5: {
        if (tag == 42) {
         parse_min_turn_signal_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_turn_signal_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_max_speed;
        break;
      }

      // optional .OPMessage.judgeItem max_speed = 6;
      case 6: {
        if (tag == 50) {
         parse_max_speed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_speed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_judge_mode;
        break;
      }

      // optional .OPMessage.judgeItem judge_mode = 7;
      case 7: {
        if (tag == 58) {
         parse_judge_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_judge_mode()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_vi_41500_start_exam;
        break;
      }

      // optional .OPMessage.voiceItem vi_41500_start_exam = 8;
      case 8: {
        if (tag == 66) {
         parse_vi_41500_start_exam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_41500_start_exam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_vi_41500_end_exam;
        break;
      }

      // optional .OPMessage.voiceItem vi_41500_end_exam = 9;
      case 9: {
        if (tag == 74) {
         parse_vi_41500_end_exam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_41500_end_exam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_vi_41500_not_slowdown;
        break;
      }

      // optional .OPMessage.voiceItem vi_41500_not_slowdown = 10;
      case 10: {
        if (tag == 82) {
         parse_vi_41500_not_slowdown:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_41500_not_slowdown()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_vi_41500_turn_lamp_use_error;
        break;
      }

      // optional .OPMessage.voiceItem vi_41500_turn_lamp_use_error = 11;
      case 11: {
        if (tag == 90) {
         parse_vi_41500_turn_lamp_use_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_41500_turn_lamp_use_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_vi_41500_turn_lamp_not_use;
        break;
      }

      // optional .OPMessage.voiceItem vi_41500_turn_lamp_not_use = 12;
      case 12: {
        if (tag == 98) {
         parse_vi_41500_turn_lamp_not_use:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_41500_turn_lamp_not_use()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OPMessage.Judge41500)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OPMessage.Judge41500)
  return false;
#undef DO_
}

void Judge41500::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OPMessage.Judge41500)
  // optional int32 itemCode = 1;
  if (has_itemcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemcode(), output);
  }

  // optional string itemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->itemname(), output);
  }

  // optional .OPMessage.judgeItem max_time = 3;
  if (has_max_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->max_time(), output);
  }

  // optional .OPMessage.judgeItem max_trigger_distance = 4;
  if (has_max_trigger_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->max_trigger_distance(), output);
  }

  // optional .OPMessage.judgeItem min_turn_signal_time = 5;
  if (has_min_turn_signal_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->min_turn_signal_time(), output);
  }

  // optional .OPMessage.judgeItem max_speed = 6;
  if (has_max_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->max_speed(), output);
  }

  // optional .OPMessage.judgeItem judge_mode = 7;
  if (has_judge_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->judge_mode(), output);
  }

  // optional .OPMessage.voiceItem vi_41500_start_exam = 8;
  if (has_vi_41500_start_exam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->vi_41500_start_exam(), output);
  }

  // optional .OPMessage.voiceItem vi_41500_end_exam = 9;
  if (has_vi_41500_end_exam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->vi_41500_end_exam(), output);
  }

  // optional .OPMessage.voiceItem vi_41500_not_slowdown = 10;
  if (has_vi_41500_not_slowdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->vi_41500_not_slowdown(), output);
  }

  // optional .OPMessage.voiceItem vi_41500_turn_lamp_use_error = 11;
  if (has_vi_41500_turn_lamp_use_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->vi_41500_turn_lamp_use_error(), output);
  }

  // optional .OPMessage.voiceItem vi_41500_turn_lamp_not_use = 12;
  if (has_vi_41500_turn_lamp_not_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->vi_41500_turn_lamp_not_use(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OPMessage.Judge41500)
}

::google::protobuf::uint8* Judge41500::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OPMessage.Judge41500)
  // optional int32 itemCode = 1;
  if (has_itemcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemcode(), target);
  }

  // optional string itemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->itemname(), target);
  }

  // optional .OPMessage.judgeItem max_time = 3;
  if (has_max_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->max_time(), target);
  }

  // optional .OPMessage.judgeItem max_trigger_distance = 4;
  if (has_max_trigger_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->max_trigger_distance(), target);
  }

  // optional .OPMessage.judgeItem min_turn_signal_time = 5;
  if (has_min_turn_signal_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->min_turn_signal_time(), target);
  }

  // optional .OPMessage.judgeItem max_speed = 6;
  if (has_max_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->max_speed(), target);
  }

  // optional .OPMessage.judgeItem judge_mode = 7;
  if (has_judge_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->judge_mode(), target);
  }

  // optional .OPMessage.voiceItem vi_41500_start_exam = 8;
  if (has_vi_41500_start_exam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->vi_41500_start_exam(), target);
  }

  // optional .OPMessage.voiceItem vi_41500_end_exam = 9;
  if (has_vi_41500_end_exam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->vi_41500_end_exam(), target);
  }

  // optional .OPMessage.voiceItem vi_41500_not_slowdown = 10;
  if (has_vi_41500_not_slowdown()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->vi_41500_not_slowdown(), target);
  }

  // optional .OPMessage.voiceItem vi_41500_turn_lamp_use_error = 11;
  if (has_vi_41500_turn_lamp_use_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->vi_41500_turn_lamp_use_error(), target);
  }

  // optional .OPMessage.voiceItem vi_41500_turn_lamp_not_use = 12;
  if (has_vi_41500_turn_lamp_not_use()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->vi_41500_turn_lamp_not_use(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OPMessage.Judge41500)
  return target;
}

int Judge41500::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemCode = 1;
    if (has_itemcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemcode());
    }

    // optional string itemName = 2;
    if (has_itemname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemname());
    }

    // optional .OPMessage.judgeItem max_time = 3;
    if (has_max_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_time());
    }

    // optional .OPMessage.judgeItem max_trigger_distance = 4;
    if (has_max_trigger_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_trigger_distance());
    }

    // optional .OPMessage.judgeItem min_turn_signal_time = 5;
    if (has_min_turn_signal_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->min_turn_signal_time());
    }

    // optional .OPMessage.judgeItem max_speed = 6;
    if (has_max_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_speed());
    }

    // optional .OPMessage.judgeItem judge_mode = 7;
    if (has_judge_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->judge_mode());
    }

    // optional .OPMessage.voiceItem vi_41500_start_exam = 8;
    if (has_vi_41500_start_exam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_41500_start_exam());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .OPMessage.voiceItem vi_41500_end_exam = 9;
    if (has_vi_41500_end_exam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_41500_end_exam());
    }

    // optional .OPMessage.voiceItem vi_41500_not_slowdown = 10;
    if (has_vi_41500_not_slowdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_41500_not_slowdown());
    }

    // optional .OPMessage.voiceItem vi_41500_turn_lamp_use_error = 11;
    if (has_vi_41500_turn_lamp_use_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_41500_turn_lamp_use_error());
    }

    // optional .OPMessage.voiceItem vi_41500_turn_lamp_not_use = 12;
    if (has_vi_41500_turn_lamp_not_use()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_41500_turn_lamp_not_use());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Judge41500::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Judge41500* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Judge41500*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Judge41500::MergeFrom(const Judge41500& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemcode()) {
      set_itemcode(from.itemcode());
    }
    if (from.has_itemname()) {
      set_itemname(from.itemname());
    }
    if (from.has_max_time()) {
      mutable_max_time()->::OPMessage::judgeItem::MergeFrom(from.max_time());
    }
    if (from.has_max_trigger_distance()) {
      mutable_max_trigger_distance()->::OPMessage::judgeItem::MergeFrom(from.max_trigger_distance());
    }
    if (from.has_min_turn_signal_time()) {
      mutable_min_turn_signal_time()->::OPMessage::judgeItem::MergeFrom(from.min_turn_signal_time());
    }
    if (from.has_max_speed()) {
      mutable_max_speed()->::OPMessage::judgeItem::MergeFrom(from.max_speed());
    }
    if (from.has_judge_mode()) {
      mutable_judge_mode()->::OPMessage::judgeItem::MergeFrom(from.judge_mode());
    }
    if (from.has_vi_41500_start_exam()) {
      mutable_vi_41500_start_exam()->::OPMessage::voiceItem::MergeFrom(from.vi_41500_start_exam());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vi_41500_end_exam()) {
      mutable_vi_41500_end_exam()->::OPMessage::voiceItem::MergeFrom(from.vi_41500_end_exam());
    }
    if (from.has_vi_41500_not_slowdown()) {
      mutable_vi_41500_not_slowdown()->::OPMessage::voiceItem::MergeFrom(from.vi_41500_not_slowdown());
    }
    if (from.has_vi_41500_turn_lamp_use_error()) {
      mutable_vi_41500_turn_lamp_use_error()->::OPMessage::voiceItem::MergeFrom(from.vi_41500_turn_lamp_use_error());
    }
    if (from.has_vi_41500_turn_lamp_not_use()) {
      mutable_vi_41500_turn_lamp_not_use()->::OPMessage::voiceItem::MergeFrom(from.vi_41500_turn_lamp_not_use());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Judge41500::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Judge41500::CopyFrom(const Judge41500& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Judge41500::IsInitialized() const {

  return true;
}

void Judge41500::Swap(Judge41500* other) {
  if (other != this) {
    std::swap(itemcode_, other->itemcode_);
    std::swap(itemname_, other->itemname_);
    std::swap(max_time_, other->max_time_);
    std::swap(max_trigger_distance_, other->max_trigger_distance_);
    std::swap(min_turn_signal_time_, other->min_turn_signal_time_);
    std::swap(max_speed_, other->max_speed_);
    std::swap(judge_mode_, other->judge_mode_);
    std::swap(vi_41500_start_exam_, other->vi_41500_start_exam_);
    std::swap(vi_41500_end_exam_, other->vi_41500_end_exam_);
    std::swap(vi_41500_not_slowdown_, other->vi_41500_not_slowdown_);
    std::swap(vi_41500_turn_lamp_use_error_, other->vi_41500_turn_lamp_use_error_);
    std::swap(vi_41500_turn_lamp_not_use_, other->vi_41500_turn_lamp_not_use_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Judge41500::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Judge41500_descriptor_;
  metadata.reflection = Judge41500_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Judge40800::kItemCodeFieldNumber;
const int Judge40800::kItemNameFieldNumber;
const int Judge40800::kMaxTimeFieldNumber;
const int Judge40800::kMaxTriggerDistanceFieldNumber;
const int Judge40800::kMaxSpeedFieldNumber;
const int Judge40800::kMinHornTimeFieldNumber;
const int Judge40800::kMinTurnSignalTimeFieldNumber;
const int Judge40800::kJudgeModeFieldNumber;
const int Judge40800::kNeedNearFarLampFlashFieldNumber;
const int Judge40800::kVi40800StartExamFieldNumber;
const int Judge40800::kVi40800EndExamFieldNumber;
const int Judge40800::kVi40800HornNotUseFieldNumber;
const int Judge40800::kVi40800TurnLampUseErrorFieldNumber;
const int Judge40800::kVi40800TurnLampNotUseFieldNumber;
const int Judge40800::kVi40800NotSlowdownFieldNumber;
#endif  // !_MSC_VER

Judge40800::Judge40800()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OPMessage.Judge40800)
}

void Judge40800::InitAsDefaultInstance() {
  max_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  max_trigger_distance_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  max_speed_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  min_horn_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  min_turn_signal_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  judge_mode_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  need_near_far_lamp_flash_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  vi_40800_start_exam_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40800_end_exam_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40800_horn_not_use_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40800_turn_lamp_use_error_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40800_turn_lamp_not_use_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40800_not_slowdown_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
}

Judge40800::Judge40800(const Judge40800& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OPMessage.Judge40800)
}

void Judge40800::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  itemcode_ = 0;
  itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_time_ = NULL;
  max_trigger_distance_ = NULL;
  max_speed_ = NULL;
  min_horn_time_ = NULL;
  min_turn_signal_time_ = NULL;
  judge_mode_ = NULL;
  need_near_far_lamp_flash_ = NULL;
  vi_40800_start_exam_ = NULL;
  vi_40800_end_exam_ = NULL;
  vi_40800_horn_not_use_ = NULL;
  vi_40800_turn_lamp_use_error_ = NULL;
  vi_40800_turn_lamp_not_use_ = NULL;
  vi_40800_not_slowdown_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Judge40800::~Judge40800() {
  // @@protoc_insertion_point(destructor:OPMessage.Judge40800)
  SharedDtor();
}

void Judge40800::SharedDtor() {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (this != default_instance_) {
    delete max_time_;
    delete max_trigger_distance_;
    delete max_speed_;
    delete min_horn_time_;
    delete min_turn_signal_time_;
    delete judge_mode_;
    delete need_near_far_lamp_flash_;
    delete vi_40800_start_exam_;
    delete vi_40800_end_exam_;
    delete vi_40800_horn_not_use_;
    delete vi_40800_turn_lamp_use_error_;
    delete vi_40800_turn_lamp_not_use_;
    delete vi_40800_not_slowdown_;
  }
}

void Judge40800::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Judge40800::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Judge40800_descriptor_;
}

const Judge40800& Judge40800::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageKm3Config_2eproto();
  return *default_instance_;
}

Judge40800* Judge40800::default_instance_ = NULL;

Judge40800* Judge40800::New() const {
  return new Judge40800;
}

void Judge40800::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    itemcode_ = 0;
    if (has_itemname()) {
      if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        itemname_->clear();
      }
    }
    if (has_max_time()) {
      if (max_time_ != NULL) max_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_max_trigger_distance()) {
      if (max_trigger_distance_ != NULL) max_trigger_distance_->::OPMessage::judgeItem::Clear();
    }
    if (has_max_speed()) {
      if (max_speed_ != NULL) max_speed_->::OPMessage::judgeItem::Clear();
    }
    if (has_min_horn_time()) {
      if (min_horn_time_ != NULL) min_horn_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_min_turn_signal_time()) {
      if (min_turn_signal_time_ != NULL) min_turn_signal_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_judge_mode()) {
      if (judge_mode_ != NULL) judge_mode_->::OPMessage::judgeItem::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    if (has_need_near_far_lamp_flash()) {
      if (need_near_far_lamp_flash_ != NULL) need_near_far_lamp_flash_->::OPMessage::judgeItem::Clear();
    }
    if (has_vi_40800_start_exam()) {
      if (vi_40800_start_exam_ != NULL) vi_40800_start_exam_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40800_end_exam()) {
      if (vi_40800_end_exam_ != NULL) vi_40800_end_exam_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40800_horn_not_use()) {
      if (vi_40800_horn_not_use_ != NULL) vi_40800_horn_not_use_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40800_turn_lamp_use_error()) {
      if (vi_40800_turn_lamp_use_error_ != NULL) vi_40800_turn_lamp_use_error_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40800_turn_lamp_not_use()) {
      if (vi_40800_turn_lamp_not_use_ != NULL) vi_40800_turn_lamp_not_use_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40800_not_slowdown()) {
      if (vi_40800_not_slowdown_ != NULL) vi_40800_not_slowdown_->::OPMessage::voiceItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Judge40800::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OPMessage.Judge40800)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemcode_)));
          set_has_itemcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_itemName;
        break;
      }

      // optional string itemName = 2;
      case 2: {
        if (tag == 18) {
         parse_itemName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itemname().data(), this->itemname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "itemname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_max_time;
        break;
      }

      // optional .OPMessage.judgeItem max_time = 3;
      case 3: {
        if (tag == 26) {
         parse_max_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_max_trigger_distance;
        break;
      }

      // optional .OPMessage.judgeItem max_trigger_distance = 4;
      case 4: {
        if (tag == 34) {
         parse_max_trigger_distance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_trigger_distance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_max_speed;
        break;
      }

      // optional .OPMessage.judgeItem max_speed = 5;
      case 5: {
        if (tag == 42) {
         parse_max_speed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_speed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_min_horn_time;
        break;
      }

      // optional .OPMessage.judgeItem min_horn_time = 6;
      case 6: {
        if (tag == 50) {
         parse_min_horn_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_horn_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_min_turn_signal_time;
        break;
      }

      // optional .OPMessage.judgeItem min_turn_signal_time = 7;
      case 7: {
        if (tag == 58) {
         parse_min_turn_signal_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_turn_signal_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_judge_mode;
        break;
      }

      // optional .OPMessage.judgeItem judge_mode = 8;
      case 8: {
        if (tag == 66) {
         parse_judge_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_judge_mode()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_need_near_far_lamp_flash;
        break;
      }

      // optional .OPMessage.judgeItem need_near_far_lamp_flash = 9;
      case 9: {
        if (tag == 74) {
         parse_need_near_far_lamp_flash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_need_near_far_lamp_flash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_vi_40800_start_exam;
        break;
      }

      // optional .OPMessage.voiceItem vi_40800_start_exam = 10;
      case 10: {
        if (tag == 82) {
         parse_vi_40800_start_exam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40800_start_exam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_vi_40800_end_exam;
        break;
      }

      // optional .OPMessage.voiceItem vi_40800_end_exam = 11;
      case 11: {
        if (tag == 90) {
         parse_vi_40800_end_exam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40800_end_exam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_vi_40800_horn_not_use;
        break;
      }

      // optional .OPMessage.voiceItem vi_40800_horn_not_use = 12;
      case 12: {
        if (tag == 98) {
         parse_vi_40800_horn_not_use:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40800_horn_not_use()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_vi_40800_turn_lamp_use_error;
        break;
      }

      // optional .OPMessage.voiceItem vi_40800_turn_lamp_use_error = 13;
      case 13: {
        if (tag == 106) {
         parse_vi_40800_turn_lamp_use_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40800_turn_lamp_use_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_vi_40800_turn_lamp_not_use;
        break;
      }

      // optional .OPMessage.voiceItem vi_40800_turn_lamp_not_use = 14;
      case 14: {
        if (tag == 114) {
         parse_vi_40800_turn_lamp_not_use:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40800_turn_lamp_not_use()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_vi_40800_not_slowdown;
        break;
      }

      // optional .OPMessage.voiceItem vi_40800_not_slowdown = 15;
      case 15: {
        if (tag == 122) {
         parse_vi_40800_not_slowdown:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40800_not_slowdown()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OPMessage.Judge40800)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OPMessage.Judge40800)
  return false;
#undef DO_
}

void Judge40800::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OPMessage.Judge40800)
  // optional int32 itemCode = 1;
  if (has_itemcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemcode(), output);
  }

  // optional string itemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->itemname(), output);
  }

  // optional .OPMessage.judgeItem max_time = 3;
  if (has_max_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->max_time(), output);
  }

  // optional .OPMessage.judgeItem max_trigger_distance = 4;
  if (has_max_trigger_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->max_trigger_distance(), output);
  }

  // optional .OPMessage.judgeItem max_speed = 5;
  if (has_max_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->max_speed(), output);
  }

  // optional .OPMessage.judgeItem min_horn_time = 6;
  if (has_min_horn_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->min_horn_time(), output);
  }

  // optional .OPMessage.judgeItem min_turn_signal_time = 7;
  if (has_min_turn_signal_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->min_turn_signal_time(), output);
  }

  // optional .OPMessage.judgeItem judge_mode = 8;
  if (has_judge_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->judge_mode(), output);
  }

  // optional .OPMessage.judgeItem need_near_far_lamp_flash = 9;
  if (has_need_near_far_lamp_flash()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->need_near_far_lamp_flash(), output);
  }

  // optional .OPMessage.voiceItem vi_40800_start_exam = 10;
  if (has_vi_40800_start_exam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->vi_40800_start_exam(), output);
  }

  // optional .OPMessage.voiceItem vi_40800_end_exam = 11;
  if (has_vi_40800_end_exam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->vi_40800_end_exam(), output);
  }

  // optional .OPMessage.voiceItem vi_40800_horn_not_use = 12;
  if (has_vi_40800_horn_not_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->vi_40800_horn_not_use(), output);
  }

  // optional .OPMessage.voiceItem vi_40800_turn_lamp_use_error = 13;
  if (has_vi_40800_turn_lamp_use_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->vi_40800_turn_lamp_use_error(), output);
  }

  // optional .OPMessage.voiceItem vi_40800_turn_lamp_not_use = 14;
  if (has_vi_40800_turn_lamp_not_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->vi_40800_turn_lamp_not_use(), output);
  }

  // optional .OPMessage.voiceItem vi_40800_not_slowdown = 15;
  if (has_vi_40800_not_slowdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->vi_40800_not_slowdown(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OPMessage.Judge40800)
}

::google::protobuf::uint8* Judge40800::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OPMessage.Judge40800)
  // optional int32 itemCode = 1;
  if (has_itemcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemcode(), target);
  }

  // optional string itemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->itemname(), target);
  }

  // optional .OPMessage.judgeItem max_time = 3;
  if (has_max_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->max_time(), target);
  }

  // optional .OPMessage.judgeItem max_trigger_distance = 4;
  if (has_max_trigger_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->max_trigger_distance(), target);
  }

  // optional .OPMessage.judgeItem max_speed = 5;
  if (has_max_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->max_speed(), target);
  }

  // optional .OPMessage.judgeItem min_horn_time = 6;
  if (has_min_horn_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->min_horn_time(), target);
  }

  // optional .OPMessage.judgeItem min_turn_signal_time = 7;
  if (has_min_turn_signal_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->min_turn_signal_time(), target);
  }

  // optional .OPMessage.judgeItem judge_mode = 8;
  if (has_judge_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->judge_mode(), target);
  }

  // optional .OPMessage.judgeItem need_near_far_lamp_flash = 9;
  if (has_need_near_far_lamp_flash()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->need_near_far_lamp_flash(), target);
  }

  // optional .OPMessage.voiceItem vi_40800_start_exam = 10;
  if (has_vi_40800_start_exam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->vi_40800_start_exam(), target);
  }

  // optional .OPMessage.voiceItem vi_40800_end_exam = 11;
  if (has_vi_40800_end_exam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->vi_40800_end_exam(), target);
  }

  // optional .OPMessage.voiceItem vi_40800_horn_not_use = 12;
  if (has_vi_40800_horn_not_use()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->vi_40800_horn_not_use(), target);
  }

  // optional .OPMessage.voiceItem vi_40800_turn_lamp_use_error = 13;
  if (has_vi_40800_turn_lamp_use_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->vi_40800_turn_lamp_use_error(), target);
  }

  // optional .OPMessage.voiceItem vi_40800_turn_lamp_not_use = 14;
  if (has_vi_40800_turn_lamp_not_use()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->vi_40800_turn_lamp_not_use(), target);
  }

  // optional .OPMessage.voiceItem vi_40800_not_slowdown = 15;
  if (has_vi_40800_not_slowdown()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->vi_40800_not_slowdown(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OPMessage.Judge40800)
  return target;
}

int Judge40800::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemCode = 1;
    if (has_itemcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemcode());
    }

    // optional string itemName = 2;
    if (has_itemname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemname());
    }

    // optional .OPMessage.judgeItem max_time = 3;
    if (has_max_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_time());
    }

    // optional .OPMessage.judgeItem max_trigger_distance = 4;
    if (has_max_trigger_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_trigger_distance());
    }

    // optional .OPMessage.judgeItem max_speed = 5;
    if (has_max_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_speed());
    }

    // optional .OPMessage.judgeItem min_horn_time = 6;
    if (has_min_horn_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->min_horn_time());
    }

    // optional .OPMessage.judgeItem min_turn_signal_time = 7;
    if (has_min_turn_signal_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->min_turn_signal_time());
    }

    // optional .OPMessage.judgeItem judge_mode = 8;
    if (has_judge_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->judge_mode());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .OPMessage.judgeItem need_near_far_lamp_flash = 9;
    if (has_need_near_far_lamp_flash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->need_near_far_lamp_flash());
    }

    // optional .OPMessage.voiceItem vi_40800_start_exam = 10;
    if (has_vi_40800_start_exam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40800_start_exam());
    }

    // optional .OPMessage.voiceItem vi_40800_end_exam = 11;
    if (has_vi_40800_end_exam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40800_end_exam());
    }

    // optional .OPMessage.voiceItem vi_40800_horn_not_use = 12;
    if (has_vi_40800_horn_not_use()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40800_horn_not_use());
    }

    // optional .OPMessage.voiceItem vi_40800_turn_lamp_use_error = 13;
    if (has_vi_40800_turn_lamp_use_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40800_turn_lamp_use_error());
    }

    // optional .OPMessage.voiceItem vi_40800_turn_lamp_not_use = 14;
    if (has_vi_40800_turn_lamp_not_use()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40800_turn_lamp_not_use());
    }

    // optional .OPMessage.voiceItem vi_40800_not_slowdown = 15;
    if (has_vi_40800_not_slowdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40800_not_slowdown());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Judge40800::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Judge40800* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Judge40800*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Judge40800::MergeFrom(const Judge40800& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemcode()) {
      set_itemcode(from.itemcode());
    }
    if (from.has_itemname()) {
      set_itemname(from.itemname());
    }
    if (from.has_max_time()) {
      mutable_max_time()->::OPMessage::judgeItem::MergeFrom(from.max_time());
    }
    if (from.has_max_trigger_distance()) {
      mutable_max_trigger_distance()->::OPMessage::judgeItem::MergeFrom(from.max_trigger_distance());
    }
    if (from.has_max_speed()) {
      mutable_max_speed()->::OPMessage::judgeItem::MergeFrom(from.max_speed());
    }
    if (from.has_min_horn_time()) {
      mutable_min_horn_time()->::OPMessage::judgeItem::MergeFrom(from.min_horn_time());
    }
    if (from.has_min_turn_signal_time()) {
      mutable_min_turn_signal_time()->::OPMessage::judgeItem::MergeFrom(from.min_turn_signal_time());
    }
    if (from.has_judge_mode()) {
      mutable_judge_mode()->::OPMessage::judgeItem::MergeFrom(from.judge_mode());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_need_near_far_lamp_flash()) {
      mutable_need_near_far_lamp_flash()->::OPMessage::judgeItem::MergeFrom(from.need_near_far_lamp_flash());
    }
    if (from.has_vi_40800_start_exam()) {
      mutable_vi_40800_start_exam()->::OPMessage::voiceItem::MergeFrom(from.vi_40800_start_exam());
    }
    if (from.has_vi_40800_end_exam()) {
      mutable_vi_40800_end_exam()->::OPMessage::voiceItem::MergeFrom(from.vi_40800_end_exam());
    }
    if (from.has_vi_40800_horn_not_use()) {
      mutable_vi_40800_horn_not_use()->::OPMessage::voiceItem::MergeFrom(from.vi_40800_horn_not_use());
    }
    if (from.has_vi_40800_turn_lamp_use_error()) {
      mutable_vi_40800_turn_lamp_use_error()->::OPMessage::voiceItem::MergeFrom(from.vi_40800_turn_lamp_use_error());
    }
    if (from.has_vi_40800_turn_lamp_not_use()) {
      mutable_vi_40800_turn_lamp_not_use()->::OPMessage::voiceItem::MergeFrom(from.vi_40800_turn_lamp_not_use());
    }
    if (from.has_vi_40800_not_slowdown()) {
      mutable_vi_40800_not_slowdown()->::OPMessage::voiceItem::MergeFrom(from.vi_40800_not_slowdown());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Judge40800::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Judge40800::CopyFrom(const Judge40800& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Judge40800::IsInitialized() const {

  return true;
}

void Judge40800::Swap(Judge40800* other) {
  if (other != this) {
    std::swap(itemcode_, other->itemcode_);
    std::swap(itemname_, other->itemname_);
    std::swap(max_time_, other->max_time_);
    std::swap(max_trigger_distance_, other->max_trigger_distance_);
    std::swap(max_speed_, other->max_speed_);
    std::swap(min_horn_time_, other->min_horn_time_);
    std::swap(min_turn_signal_time_, other->min_turn_signal_time_);
    std::swap(judge_mode_, other->judge_mode_);
    std::swap(need_near_far_lamp_flash_, other->need_near_far_lamp_flash_);
    std::swap(vi_40800_start_exam_, other->vi_40800_start_exam_);
    std::swap(vi_40800_end_exam_, other->vi_40800_end_exam_);
    std::swap(vi_40800_horn_not_use_, other->vi_40800_horn_not_use_);
    std::swap(vi_40800_turn_lamp_use_error_, other->vi_40800_turn_lamp_use_error_);
    std::swap(vi_40800_turn_lamp_not_use_, other->vi_40800_turn_lamp_not_use_);
    std::swap(vi_40800_not_slowdown_, other->vi_40800_not_slowdown_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Judge40800::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Judge40800_descriptor_;
  metadata.reflection = Judge40800_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Judge40900::kItemCodeFieldNumber;
const int Judge40900::kItemNameFieldNumber;
const int Judge40900::kMaxTimeFieldNumber;
const int Judge40900::kMaxTriggerDistanceFieldNumber;
const int Judge40900::kMaxSpeedFieldNumber;
const int Judge40900::kMinHornTimeFieldNumber;
const int Judge40900::kMinTurnSignalTimeFieldNumber;
const int Judge40900::kJudgeModeFieldNumber;
const int Judge40900::kNeedNearFarLampFlashFieldNumber;
const int Judge40900::kVi40900StartExamFieldNumber;
const int Judge40900::kVi40900EndExamFieldNumber;
const int Judge40900::kVi40900HornNotUseFieldNumber;
const int Judge40900::kVi40900TurnLampUseErrorFieldNumber;
const int Judge40900::kVi40900TurnLampNotUseFieldNumber;
const int Judge40900::kVi40900NotSlowdownFieldNumber;
#endif  // !_MSC_VER

Judge40900::Judge40900()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OPMessage.Judge40900)
}

void Judge40900::InitAsDefaultInstance() {
  max_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  max_trigger_distance_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  max_speed_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  min_horn_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  min_turn_signal_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  judge_mode_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  need_near_far_lamp_flash_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  vi_40900_start_exam_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40900_end_exam_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40900_horn_not_use_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40900_turn_lamp_use_error_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40900_turn_lamp_not_use_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40900_not_slowdown_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
}

Judge40900::Judge40900(const Judge40900& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OPMessage.Judge40900)
}

void Judge40900::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  itemcode_ = 0;
  itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_time_ = NULL;
  max_trigger_distance_ = NULL;
  max_speed_ = NULL;
  min_horn_time_ = NULL;
  min_turn_signal_time_ = NULL;
  judge_mode_ = NULL;
  need_near_far_lamp_flash_ = NULL;
  vi_40900_start_exam_ = NULL;
  vi_40900_end_exam_ = NULL;
  vi_40900_horn_not_use_ = NULL;
  vi_40900_turn_lamp_use_error_ = NULL;
  vi_40900_turn_lamp_not_use_ = NULL;
  vi_40900_not_slowdown_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Judge40900::~Judge40900() {
  // @@protoc_insertion_point(destructor:OPMessage.Judge40900)
  SharedDtor();
}

void Judge40900::SharedDtor() {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (this != default_instance_) {
    delete max_time_;
    delete max_trigger_distance_;
    delete max_speed_;
    delete min_horn_time_;
    delete min_turn_signal_time_;
    delete judge_mode_;
    delete need_near_far_lamp_flash_;
    delete vi_40900_start_exam_;
    delete vi_40900_end_exam_;
    delete vi_40900_horn_not_use_;
    delete vi_40900_turn_lamp_use_error_;
    delete vi_40900_turn_lamp_not_use_;
    delete vi_40900_not_slowdown_;
  }
}

void Judge40900::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Judge40900::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Judge40900_descriptor_;
}

const Judge40900& Judge40900::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageKm3Config_2eproto();
  return *default_instance_;
}

Judge40900* Judge40900::default_instance_ = NULL;

Judge40900* Judge40900::New() const {
  return new Judge40900;
}

void Judge40900::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    itemcode_ = 0;
    if (has_itemname()) {
      if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        itemname_->clear();
      }
    }
    if (has_max_time()) {
      if (max_time_ != NULL) max_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_max_trigger_distance()) {
      if (max_trigger_distance_ != NULL) max_trigger_distance_->::OPMessage::judgeItem::Clear();
    }
    if (has_max_speed()) {
      if (max_speed_ != NULL) max_speed_->::OPMessage::judgeItem::Clear();
    }
    if (has_min_horn_time()) {
      if (min_horn_time_ != NULL) min_horn_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_min_turn_signal_time()) {
      if (min_turn_signal_time_ != NULL) min_turn_signal_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_judge_mode()) {
      if (judge_mode_ != NULL) judge_mode_->::OPMessage::judgeItem::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    if (has_need_near_far_lamp_flash()) {
      if (need_near_far_lamp_flash_ != NULL) need_near_far_lamp_flash_->::OPMessage::judgeItem::Clear();
    }
    if (has_vi_40900_start_exam()) {
      if (vi_40900_start_exam_ != NULL) vi_40900_start_exam_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40900_end_exam()) {
      if (vi_40900_end_exam_ != NULL) vi_40900_end_exam_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40900_horn_not_use()) {
      if (vi_40900_horn_not_use_ != NULL) vi_40900_horn_not_use_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40900_turn_lamp_use_error()) {
      if (vi_40900_turn_lamp_use_error_ != NULL) vi_40900_turn_lamp_use_error_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40900_turn_lamp_not_use()) {
      if (vi_40900_turn_lamp_not_use_ != NULL) vi_40900_turn_lamp_not_use_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40900_not_slowdown()) {
      if (vi_40900_not_slowdown_ != NULL) vi_40900_not_slowdown_->::OPMessage::voiceItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Judge40900::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OPMessage.Judge40900)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemcode_)));
          set_has_itemcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_itemName;
        break;
      }

      // optional string itemName = 2;
      case 2: {
        if (tag == 18) {
         parse_itemName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itemname().data(), this->itemname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "itemname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_max_time;
        break;
      }

      // optional .OPMessage.judgeItem max_time = 3;
      case 3: {
        if (tag == 26) {
         parse_max_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_max_trigger_distance;
        break;
      }

      // optional .OPMessage.judgeItem max_trigger_distance = 4;
      case 4: {
        if (tag == 34) {
         parse_max_trigger_distance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_trigger_distance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_max_speed;
        break;
      }

      // optional .OPMessage.judgeItem max_speed = 5;
      case 5: {
        if (tag == 42) {
         parse_max_speed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_speed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_min_horn_time;
        break;
      }

      // optional .OPMessage.judgeItem min_horn_time = 6;
      case 6: {
        if (tag == 50) {
         parse_min_horn_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_horn_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_min_turn_signal_time;
        break;
      }

      // optional .OPMessage.judgeItem min_turn_signal_time = 7;
      case 7: {
        if (tag == 58) {
         parse_min_turn_signal_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_turn_signal_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_judge_mode;
        break;
      }

      // optional .OPMessage.judgeItem judge_mode = 8;
      case 8: {
        if (tag == 66) {
         parse_judge_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_judge_mode()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_need_near_far_lamp_flash;
        break;
      }

      // optional .OPMessage.judgeItem need_near_far_lamp_flash = 9;
      case 9: {
        if (tag == 74) {
         parse_need_near_far_lamp_flash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_need_near_far_lamp_flash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_vi_40900_start_exam;
        break;
      }

      // optional .OPMessage.voiceItem vi_40900_start_exam = 10;
      case 10: {
        if (tag == 82) {
         parse_vi_40900_start_exam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40900_start_exam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_vi_40900_end_exam;
        break;
      }

      // optional .OPMessage.voiceItem vi_40900_end_exam = 11;
      case 11: {
        if (tag == 90) {
         parse_vi_40900_end_exam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40900_end_exam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_vi_40900_horn_not_use;
        break;
      }

      // optional .OPMessage.voiceItem vi_40900_horn_not_use = 12;
      case 12: {
        if (tag == 98) {
         parse_vi_40900_horn_not_use:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40900_horn_not_use()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_vi_40900_turn_lamp_use_error;
        break;
      }

      // optional .OPMessage.voiceItem vi_40900_turn_lamp_use_error = 13;
      case 13: {
        if (tag == 106) {
         parse_vi_40900_turn_lamp_use_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40900_turn_lamp_use_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_vi_40900_turn_lamp_not_use;
        break;
      }

      // optional .OPMessage.voiceItem vi_40900_turn_lamp_not_use = 14;
      case 14: {
        if (tag == 114) {
         parse_vi_40900_turn_lamp_not_use:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40900_turn_lamp_not_use()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_vi_40900_not_slowdown;
        break;
      }

      // optional .OPMessage.voiceItem vi_40900_not_slowdown = 15;
      case 15: {
        if (tag == 122) {
         parse_vi_40900_not_slowdown:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40900_not_slowdown()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OPMessage.Judge40900)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OPMessage.Judge40900)
  return false;
#undef DO_
}

void Judge40900::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OPMessage.Judge40900)
  // optional int32 itemCode = 1;
  if (has_itemcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemcode(), output);
  }

  // optional string itemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->itemname(), output);
  }

  // optional .OPMessage.judgeItem max_time = 3;
  if (has_max_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->max_time(), output);
  }

  // optional .OPMessage.judgeItem max_trigger_distance = 4;
  if (has_max_trigger_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->max_trigger_distance(), output);
  }

  // optional .OPMessage.judgeItem max_speed = 5;
  if (has_max_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->max_speed(), output);
  }

  // optional .OPMessage.judgeItem min_horn_time = 6;
  if (has_min_horn_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->min_horn_time(), output);
  }

  // optional .OPMessage.judgeItem min_turn_signal_time = 7;
  if (has_min_turn_signal_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->min_turn_signal_time(), output);
  }

  // optional .OPMessage.judgeItem judge_mode = 8;
  if (has_judge_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->judge_mode(), output);
  }

  // optional .OPMessage.judgeItem need_near_far_lamp_flash = 9;
  if (has_need_near_far_lamp_flash()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->need_near_far_lamp_flash(), output);
  }

  // optional .OPMessage.voiceItem vi_40900_start_exam = 10;
  if (has_vi_40900_start_exam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->vi_40900_start_exam(), output);
  }

  // optional .OPMessage.voiceItem vi_40900_end_exam = 11;
  if (has_vi_40900_end_exam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->vi_40900_end_exam(), output);
  }

  // optional .OPMessage.voiceItem vi_40900_horn_not_use = 12;
  if (has_vi_40900_horn_not_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->vi_40900_horn_not_use(), output);
  }

  // optional .OPMessage.voiceItem vi_40900_turn_lamp_use_error = 13;
  if (has_vi_40900_turn_lamp_use_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->vi_40900_turn_lamp_use_error(), output);
  }

  // optional .OPMessage.voiceItem vi_40900_turn_lamp_not_use = 14;
  if (has_vi_40900_turn_lamp_not_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->vi_40900_turn_lamp_not_use(), output);
  }

  // optional .OPMessage.voiceItem vi_40900_not_slowdown = 15;
  if (has_vi_40900_not_slowdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->vi_40900_not_slowdown(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OPMessage.Judge40900)
}

::google::protobuf::uint8* Judge40900::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OPMessage.Judge40900)
  // optional int32 itemCode = 1;
  if (has_itemcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemcode(), target);
  }

  // optional string itemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->itemname(), target);
  }

  // optional .OPMessage.judgeItem max_time = 3;
  if (has_max_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->max_time(), target);
  }

  // optional .OPMessage.judgeItem max_trigger_distance = 4;
  if (has_max_trigger_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->max_trigger_distance(), target);
  }

  // optional .OPMessage.judgeItem max_speed = 5;
  if (has_max_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->max_speed(), target);
  }

  // optional .OPMessage.judgeItem min_horn_time = 6;
  if (has_min_horn_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->min_horn_time(), target);
  }

  // optional .OPMessage.judgeItem min_turn_signal_time = 7;
  if (has_min_turn_signal_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->min_turn_signal_time(), target);
  }

  // optional .OPMessage.judgeItem judge_mode = 8;
  if (has_judge_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->judge_mode(), target);
  }

  // optional .OPMessage.judgeItem need_near_far_lamp_flash = 9;
  if (has_need_near_far_lamp_flash()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->need_near_far_lamp_flash(), target);
  }

  // optional .OPMessage.voiceItem vi_40900_start_exam = 10;
  if (has_vi_40900_start_exam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->vi_40900_start_exam(), target);
  }

  // optional .OPMessage.voiceItem vi_40900_end_exam = 11;
  if (has_vi_40900_end_exam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->vi_40900_end_exam(), target);
  }

  // optional .OPMessage.voiceItem vi_40900_horn_not_use = 12;
  if (has_vi_40900_horn_not_use()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->vi_40900_horn_not_use(), target);
  }

  // optional .OPMessage.voiceItem vi_40900_turn_lamp_use_error = 13;
  if (has_vi_40900_turn_lamp_use_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->vi_40900_turn_lamp_use_error(), target);
  }

  // optional .OPMessage.voiceItem vi_40900_turn_lamp_not_use = 14;
  if (has_vi_40900_turn_lamp_not_use()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->vi_40900_turn_lamp_not_use(), target);
  }

  // optional .OPMessage.voiceItem vi_40900_not_slowdown = 15;
  if (has_vi_40900_not_slowdown()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->vi_40900_not_slowdown(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OPMessage.Judge40900)
  return target;
}

int Judge40900::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemCode = 1;
    if (has_itemcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemcode());
    }

    // optional string itemName = 2;
    if (has_itemname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemname());
    }

    // optional .OPMessage.judgeItem max_time = 3;
    if (has_max_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_time());
    }

    // optional .OPMessage.judgeItem max_trigger_distance = 4;
    if (has_max_trigger_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_trigger_distance());
    }

    // optional .OPMessage.judgeItem max_speed = 5;
    if (has_max_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_speed());
    }

    // optional .OPMessage.judgeItem min_horn_time = 6;
    if (has_min_horn_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->min_horn_time());
    }

    // optional .OPMessage.judgeItem min_turn_signal_time = 7;
    if (has_min_turn_signal_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->min_turn_signal_time());
    }

    // optional .OPMessage.judgeItem judge_mode = 8;
    if (has_judge_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->judge_mode());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .OPMessage.judgeItem need_near_far_lamp_flash = 9;
    if (has_need_near_far_lamp_flash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->need_near_far_lamp_flash());
    }

    // optional .OPMessage.voiceItem vi_40900_start_exam = 10;
    if (has_vi_40900_start_exam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40900_start_exam());
    }

    // optional .OPMessage.voiceItem vi_40900_end_exam = 11;
    if (has_vi_40900_end_exam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40900_end_exam());
    }

    // optional .OPMessage.voiceItem vi_40900_horn_not_use = 12;
    if (has_vi_40900_horn_not_use()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40900_horn_not_use());
    }

    // optional .OPMessage.voiceItem vi_40900_turn_lamp_use_error = 13;
    if (has_vi_40900_turn_lamp_use_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40900_turn_lamp_use_error());
    }

    // optional .OPMessage.voiceItem vi_40900_turn_lamp_not_use = 14;
    if (has_vi_40900_turn_lamp_not_use()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40900_turn_lamp_not_use());
    }

    // optional .OPMessage.voiceItem vi_40900_not_slowdown = 15;
    if (has_vi_40900_not_slowdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40900_not_slowdown());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Judge40900::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Judge40900* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Judge40900*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Judge40900::MergeFrom(const Judge40900& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemcode()) {
      set_itemcode(from.itemcode());
    }
    if (from.has_itemname()) {
      set_itemname(from.itemname());
    }
    if (from.has_max_time()) {
      mutable_max_time()->::OPMessage::judgeItem::MergeFrom(from.max_time());
    }
    if (from.has_max_trigger_distance()) {
      mutable_max_trigger_distance()->::OPMessage::judgeItem::MergeFrom(from.max_trigger_distance());
    }
    if (from.has_max_speed()) {
      mutable_max_speed()->::OPMessage::judgeItem::MergeFrom(from.max_speed());
    }
    if (from.has_min_horn_time()) {
      mutable_min_horn_time()->::OPMessage::judgeItem::MergeFrom(from.min_horn_time());
    }
    if (from.has_min_turn_signal_time()) {
      mutable_min_turn_signal_time()->::OPMessage::judgeItem::MergeFrom(from.min_turn_signal_time());
    }
    if (from.has_judge_mode()) {
      mutable_judge_mode()->::OPMessage::judgeItem::MergeFrom(from.judge_mode());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_need_near_far_lamp_flash()) {
      mutable_need_near_far_lamp_flash()->::OPMessage::judgeItem::MergeFrom(from.need_near_far_lamp_flash());
    }
    if (from.has_vi_40900_start_exam()) {
      mutable_vi_40900_start_exam()->::OPMessage::voiceItem::MergeFrom(from.vi_40900_start_exam());
    }
    if (from.has_vi_40900_end_exam()) {
      mutable_vi_40900_end_exam()->::OPMessage::voiceItem::MergeFrom(from.vi_40900_end_exam());
    }
    if (from.has_vi_40900_horn_not_use()) {
      mutable_vi_40900_horn_not_use()->::OPMessage::voiceItem::MergeFrom(from.vi_40900_horn_not_use());
    }
    if (from.has_vi_40900_turn_lamp_use_error()) {
      mutable_vi_40900_turn_lamp_use_error()->::OPMessage::voiceItem::MergeFrom(from.vi_40900_turn_lamp_use_error());
    }
    if (from.has_vi_40900_turn_lamp_not_use()) {
      mutable_vi_40900_turn_lamp_not_use()->::OPMessage::voiceItem::MergeFrom(from.vi_40900_turn_lamp_not_use());
    }
    if (from.has_vi_40900_not_slowdown()) {
      mutable_vi_40900_not_slowdown()->::OPMessage::voiceItem::MergeFrom(from.vi_40900_not_slowdown());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Judge40900::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Judge40900::CopyFrom(const Judge40900& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Judge40900::IsInitialized() const {

  return true;
}

void Judge40900::Swap(Judge40900* other) {
  if (other != this) {
    std::swap(itemcode_, other->itemcode_);
    std::swap(itemname_, other->itemname_);
    std::swap(max_time_, other->max_time_);
    std::swap(max_trigger_distance_, other->max_trigger_distance_);
    std::swap(max_speed_, other->max_speed_);
    std::swap(min_horn_time_, other->min_horn_time_);
    std::swap(min_turn_signal_time_, other->min_turn_signal_time_);
    std::swap(judge_mode_, other->judge_mode_);
    std::swap(need_near_far_lamp_flash_, other->need_near_far_lamp_flash_);
    std::swap(vi_40900_start_exam_, other->vi_40900_start_exam_);
    std::swap(vi_40900_end_exam_, other->vi_40900_end_exam_);
    std::swap(vi_40900_horn_not_use_, other->vi_40900_horn_not_use_);
    std::swap(vi_40900_turn_lamp_use_error_, other->vi_40900_turn_lamp_use_error_);
    std::swap(vi_40900_turn_lamp_not_use_, other->vi_40900_turn_lamp_not_use_);
    std::swap(vi_40900_not_slowdown_, other->vi_40900_not_slowdown_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Judge40900::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Judge40900_descriptor_;
  metadata.reflection = Judge40900_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Judge41400::kItemCodeFieldNumber;
const int Judge41400::kItemNameFieldNumber;
const int Judge41400::kMaxTimeFieldNumber;
const int Judge41400::kMaxTriggerDistanceFieldNumber;
const int Judge41400::kMinTurnSignalTimeFieldNumber;
const int Judge41400::kLaneWidthFieldNumber;
const int Judge41400::kCheckChangeLaneFieldNumber;
const int Judge41400::kStartChangeLaneTimeDelayFieldNumber;
const int Judge41400::kStartChangeLaneDistanceDelayFieldNumber;
const int Judge41400::kFinishChangeLaneTimeDelayFieldNumber;
const int Judge41400::kFinishChangeLaneDistanceDelayFieldNumber;
const int Judge41400::kNeedNearFarLampFlashFieldNumber;
const int Judge41400::kNeedReturnLaneFieldNumber;
const int Judge41400::kReturnLaneTimeDealyFieldNumber;
const int Judge41400::kVi41400StartExamFieldNumber;
const int Judge41400::kVi41400EndExamFieldNumber;
const int Judge41400::kVi41400DrivingInOneLaneFieldNumber;
const int Judge41400::kVi41400NotifyChangeLaneFieldNumber;
const int Judge41400::kVi41400NotifyReturnLaneFieldNumber;
const int Judge41400::kVi41400NotFinishFieldNumber;
const int Judge41400::kVi41400ChangeLaneErrorFieldNumber;
const int Judge41400::kVi41400ReturnLaneErrorFieldNumber;
const int Judge41400::kVi41400TurnLampUseErrorFieldNumber;
const int Judge41400::kVi41400NotKeepEnoughDistanceFieldNumber;
const int Judge41400::kVi41400TurnLampNotUseFieldNumber;
const int Judge41400::kVi41400NotReachMinSpeedFieldNumber;
#endif  // !_MSC_VER

Judge41400::Judge41400()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OPMessage.Judge41400)
}

void Judge41400::InitAsDefaultInstance() {
  max_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  max_trigger_distance_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  min_turn_signal_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  lane_width_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  check_change_lane_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  start_change_lane_time_delay_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  start_change_lane_distance_delay_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  finish_change_lane_time_delay_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  finish_change_lane_distance_delay_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  need_near_far_lamp_flash_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  need_return_lane_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  return_lane_time_dealy_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  vi_41400_start_exam_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_41400_end_exam_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_41400_driving_in_one_lane_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_41400_notify_change_lane_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_41400_notify_return_lane_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_41400_not_finish_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_41400_change_lane_error_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_41400_return_lane_error_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_41400_turn_lamp_use_error_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_41400_not_keep_enough_distance_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_41400_turn_lamp_not_use_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_41400_not_reach_min_speed_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
}

Judge41400::Judge41400(const Judge41400& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OPMessage.Judge41400)
}

void Judge41400::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  itemcode_ = 0;
  itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_time_ = NULL;
  max_trigger_distance_ = NULL;
  min_turn_signal_time_ = NULL;
  lane_width_ = NULL;
  check_change_lane_ = NULL;
  start_change_lane_time_delay_ = NULL;
  start_change_lane_distance_delay_ = NULL;
  finish_change_lane_time_delay_ = NULL;
  finish_change_lane_distance_delay_ = NULL;
  need_near_far_lamp_flash_ = NULL;
  need_return_lane_ = NULL;
  return_lane_time_dealy_ = NULL;
  vi_41400_start_exam_ = NULL;
  vi_41400_end_exam_ = NULL;
  vi_41400_driving_in_one_lane_ = NULL;
  vi_41400_notify_change_lane_ = NULL;
  vi_41400_notify_return_lane_ = NULL;
  vi_41400_not_finish_ = NULL;
  vi_41400_change_lane_error_ = NULL;
  vi_41400_return_lane_error_ = NULL;
  vi_41400_turn_lamp_use_error_ = NULL;
  vi_41400_not_keep_enough_distance_ = NULL;
  vi_41400_turn_lamp_not_use_ = NULL;
  vi_41400_not_reach_min_speed_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Judge41400::~Judge41400() {
  // @@protoc_insertion_point(destructor:OPMessage.Judge41400)
  SharedDtor();
}

void Judge41400::SharedDtor() {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (this != default_instance_) {
    delete max_time_;
    delete max_trigger_distance_;
    delete min_turn_signal_time_;
    delete lane_width_;
    delete check_change_lane_;
    delete start_change_lane_time_delay_;
    delete start_change_lane_distance_delay_;
    delete finish_change_lane_time_delay_;
    delete finish_change_lane_distance_delay_;
    delete need_near_far_lamp_flash_;
    delete need_return_lane_;
    delete return_lane_time_dealy_;
    delete vi_41400_start_exam_;
    delete vi_41400_end_exam_;
    delete vi_41400_driving_in_one_lane_;
    delete vi_41400_notify_change_lane_;
    delete vi_41400_notify_return_lane_;
    delete vi_41400_not_finish_;
    delete vi_41400_change_lane_error_;
    delete vi_41400_return_lane_error_;
    delete vi_41400_turn_lamp_use_error_;
    delete vi_41400_not_keep_enough_distance_;
    delete vi_41400_turn_lamp_not_use_;
    delete vi_41400_not_reach_min_speed_;
  }
}

void Judge41400::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Judge41400::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Judge41400_descriptor_;
}

const Judge41400& Judge41400::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageKm3Config_2eproto();
  return *default_instance_;
}

Judge41400* Judge41400::default_instance_ = NULL;

Judge41400* Judge41400::New() const {
  return new Judge41400;
}

void Judge41400::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    itemcode_ = 0;
    if (has_itemname()) {
      if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        itemname_->clear();
      }
    }
    if (has_max_time()) {
      if (max_time_ != NULL) max_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_max_trigger_distance()) {
      if (max_trigger_distance_ != NULL) max_trigger_distance_->::OPMessage::judgeItem::Clear();
    }
    if (has_min_turn_signal_time()) {
      if (min_turn_signal_time_ != NULL) min_turn_signal_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_lane_width()) {
      if (lane_width_ != NULL) lane_width_->::OPMessage::judgeItem::Clear();
    }
    if (has_check_change_lane()) {
      if (check_change_lane_ != NULL) check_change_lane_->::OPMessage::judgeItem::Clear();
    }
    if (has_start_change_lane_time_delay()) {
      if (start_change_lane_time_delay_ != NULL) start_change_lane_time_delay_->::OPMessage::judgeItem::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_start_change_lane_distance_delay()) {
      if (start_change_lane_distance_delay_ != NULL) start_change_lane_distance_delay_->::OPMessage::judgeItem::Clear();
    }
    if (has_finish_change_lane_time_delay()) {
      if (finish_change_lane_time_delay_ != NULL) finish_change_lane_time_delay_->::OPMessage::judgeItem::Clear();
    }
    if (has_finish_change_lane_distance_delay()) {
      if (finish_change_lane_distance_delay_ != NULL) finish_change_lane_distance_delay_->::OPMessage::judgeItem::Clear();
    }
    if (has_need_near_far_lamp_flash()) {
      if (need_near_far_lamp_flash_ != NULL) need_near_far_lamp_flash_->::OPMessage::judgeItem::Clear();
    }
    if (has_need_return_lane()) {
      if (need_return_lane_ != NULL) need_return_lane_->::OPMessage::judgeItem::Clear();
    }
    if (has_return_lane_time_dealy()) {
      if (return_lane_time_dealy_ != NULL) return_lane_time_dealy_->::OPMessage::judgeItem::Clear();
    }
    if (has_vi_41400_start_exam()) {
      if (vi_41400_start_exam_ != NULL) vi_41400_start_exam_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_41400_end_exam()) {
      if (vi_41400_end_exam_ != NULL) vi_41400_end_exam_->::OPMessage::voiceItem::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    if (has_vi_41400_driving_in_one_lane()) {
      if (vi_41400_driving_in_one_lane_ != NULL) vi_41400_driving_in_one_lane_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_41400_notify_change_lane()) {
      if (vi_41400_notify_change_lane_ != NULL) vi_41400_notify_change_lane_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_41400_notify_return_lane()) {
      if (vi_41400_notify_return_lane_ != NULL) vi_41400_notify_return_lane_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_41400_not_finish()) {
      if (vi_41400_not_finish_ != NULL) vi_41400_not_finish_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_41400_change_lane_error()) {
      if (vi_41400_change_lane_error_ != NULL) vi_41400_change_lane_error_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_41400_return_lane_error()) {
      if (vi_41400_return_lane_error_ != NULL) vi_41400_return_lane_error_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_41400_turn_lamp_use_error()) {
      if (vi_41400_turn_lamp_use_error_ != NULL) vi_41400_turn_lamp_use_error_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_41400_not_keep_enough_distance()) {
      if (vi_41400_not_keep_enough_distance_ != NULL) vi_41400_not_keep_enough_distance_->::OPMessage::voiceItem::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 50331648) {
    if (has_vi_41400_turn_lamp_not_use()) {
      if (vi_41400_turn_lamp_not_use_ != NULL) vi_41400_turn_lamp_not_use_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_41400_not_reach_min_speed()) {
      if (vi_41400_not_reach_min_speed_ != NULL) vi_41400_not_reach_min_speed_->::OPMessage::voiceItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Judge41400::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OPMessage.Judge41400)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemcode_)));
          set_has_itemcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_itemName;
        break;
      }

      // optional string itemName = 2;
      case 2: {
        if (tag == 18) {
         parse_itemName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itemname().data(), this->itemname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "itemname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_max_time;
        break;
      }

      // optional .OPMessage.judgeItem max_time = 3;
      case 3: {
        if (tag == 26) {
         parse_max_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_max_trigger_distance;
        break;
      }

      // optional .OPMessage.judgeItem max_trigger_distance = 4;
      case 4: {
        if (tag == 34) {
         parse_max_trigger_distance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_trigger_distance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_min_turn_signal_time;
        break;
      }

      // optional .OPMessage.judgeItem min_turn_signal_time = 5;
      case 5: {
        if (tag == 42) {
         parse_min_turn_signal_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_turn_signal_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_lane_width;
        break;
      }

      // optional .OPMessage.judgeItem lane_width = 6;
      case 6: {
        if (tag == 50) {
         parse_lane_width:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lane_width()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_check_change_lane;
        break;
      }

      // optional .OPMessage.judgeItem check_change_lane = 7;
      case 7: {
        if (tag == 58) {
         parse_check_change_lane:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_check_change_lane()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_start_change_lane_time_delay;
        break;
      }

      // optional .OPMessage.judgeItem start_change_lane_time_delay = 8;
      case 8: {
        if (tag == 66) {
         parse_start_change_lane_time_delay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_change_lane_time_delay()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_start_change_lane_distance_delay;
        break;
      }

      // optional .OPMessage.judgeItem start_change_lane_distance_delay = 9;
      case 9: {
        if (tag == 74) {
         parse_start_change_lane_distance_delay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_change_lane_distance_delay()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_finish_change_lane_time_delay;
        break;
      }

      // optional .OPMessage.judgeItem finish_change_lane_time_delay = 10;
      case 10: {
        if (tag == 82) {
         parse_finish_change_lane_time_delay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_finish_change_lane_time_delay()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_finish_change_lane_distance_delay;
        break;
      }

      // optional .OPMessage.judgeItem finish_change_lane_distance_delay = 11;
      case 11: {
        if (tag == 90) {
         parse_finish_change_lane_distance_delay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_finish_change_lane_distance_delay()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_need_near_far_lamp_flash;
        break;
      }

      // optional .OPMessage.judgeItem need_near_far_lamp_flash = 12;
      case 12: {
        if (tag == 98) {
         parse_need_near_far_lamp_flash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_need_near_far_lamp_flash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_need_return_lane;
        break;
      }

      // optional .OPMessage.judgeItem need_return_lane = 13;
      case 13: {
        if (tag == 106) {
         parse_need_return_lane:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_need_return_lane()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_return_lane_time_dealy;
        break;
      }

      // optional .OPMessage.judgeItem return_lane_time_dealy = 14;
      case 14: {
        if (tag == 114) {
         parse_return_lane_time_dealy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_return_lane_time_dealy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_vi_41400_start_exam;
        break;
      }

      // optional .OPMessage.voiceItem vi_41400_start_exam = 15;
      case 15: {
        if (tag == 122) {
         parse_vi_41400_start_exam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_41400_start_exam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_vi_41400_end_exam;
        break;
      }

      // optional .OPMessage.voiceItem vi_41400_end_exam = 16;
      case 16: {
        if (tag == 130) {
         parse_vi_41400_end_exam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_41400_end_exam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_vi_41400_driving_in_one_lane;
        break;
      }

      // optional .OPMessage.voiceItem vi_41400_driving_in_one_lane = 17;
      case 17: {
        if (tag == 138) {
         parse_vi_41400_driving_in_one_lane:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_41400_driving_in_one_lane()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_vi_41400_notify_change_lane;
        break;
      }

      // optional .OPMessage.voiceItem vi_41400_notify_change_lane = 18;
      case 18: {
        if (tag == 146) {
         parse_vi_41400_notify_change_lane:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_41400_notify_change_lane()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_vi_41400_notify_return_lane;
        break;
      }

      // optional .OPMessage.voiceItem vi_41400_notify_return_lane = 19;
      case 19: {
        if (tag == 154) {
         parse_vi_41400_notify_return_lane:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_41400_notify_return_lane()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_vi_41400_not_finish;
        break;
      }

      // optional .OPMessage.voiceItem vi_41400_not_finish = 20;
      case 20: {
        if (tag == 162) {
         parse_vi_41400_not_finish:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_41400_not_finish()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_vi_41400_change_lane_error;
        break;
      }

      // optional .OPMessage.voiceItem vi_41400_change_lane_error = 21;
      case 21: {
        if (tag == 170) {
         parse_vi_41400_change_lane_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_41400_change_lane_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_vi_41400_return_lane_error;
        break;
      }

      // optional .OPMessage.voiceItem vi_41400_return_lane_error = 22;
      case 22: {
        if (tag == 178) {
         parse_vi_41400_return_lane_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_41400_return_lane_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_vi_41400_turn_lamp_use_error;
        break;
      }

      // optional .OPMessage.voiceItem vi_41400_turn_lamp_use_error = 23;
      case 23: {
        if (tag == 186) {
         parse_vi_41400_turn_lamp_use_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_41400_turn_lamp_use_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_vi_41400_not_keep_enough_distance;
        break;
      }

      // optional .OPMessage.voiceItem vi_41400_not_keep_enough_distance = 24;
      case 24: {
        if (tag == 194) {
         parse_vi_41400_not_keep_enough_distance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_41400_not_keep_enough_distance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_vi_41400_turn_lamp_not_use;
        break;
      }

      // optional .OPMessage.voiceItem vi_41400_turn_lamp_not_use = 25;
      case 25: {
        if (tag == 202) {
         parse_vi_41400_turn_lamp_not_use:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_41400_turn_lamp_not_use()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_vi_41400_not_reach_min_speed;
        break;
      }

      // optional .OPMessage.voiceItem vi_41400_not_reach_min_speed = 26;
      case 26: {
        if (tag == 210) {
         parse_vi_41400_not_reach_min_speed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_41400_not_reach_min_speed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OPMessage.Judge41400)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OPMessage.Judge41400)
  return false;
#undef DO_
}

void Judge41400::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OPMessage.Judge41400)
  // optional int32 itemCode = 1;
  if (has_itemcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemcode(), output);
  }

  // optional string itemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->itemname(), output);
  }

  // optional .OPMessage.judgeItem max_time = 3;
  if (has_max_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->max_time(), output);
  }

  // optional .OPMessage.judgeItem max_trigger_distance = 4;
  if (has_max_trigger_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->max_trigger_distance(), output);
  }

  // optional .OPMessage.judgeItem min_turn_signal_time = 5;
  if (has_min_turn_signal_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->min_turn_signal_time(), output);
  }

  // optional .OPMessage.judgeItem lane_width = 6;
  if (has_lane_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->lane_width(), output);
  }

  // optional .OPMessage.judgeItem check_change_lane = 7;
  if (has_check_change_lane()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->check_change_lane(), output);
  }

  // optional .OPMessage.judgeItem start_change_lane_time_delay = 8;
  if (has_start_change_lane_time_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->start_change_lane_time_delay(), output);
  }

  // optional .OPMessage.judgeItem start_change_lane_distance_delay = 9;
  if (has_start_change_lane_distance_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->start_change_lane_distance_delay(), output);
  }

  // optional .OPMessage.judgeItem finish_change_lane_time_delay = 10;
  if (has_finish_change_lane_time_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->finish_change_lane_time_delay(), output);
  }

  // optional .OPMessage.judgeItem finish_change_lane_distance_delay = 11;
  if (has_finish_change_lane_distance_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->finish_change_lane_distance_delay(), output);
  }

  // optional .OPMessage.judgeItem need_near_far_lamp_flash = 12;
  if (has_need_near_far_lamp_flash()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->need_near_far_lamp_flash(), output);
  }

  // optional .OPMessage.judgeItem need_return_lane = 13;
  if (has_need_return_lane()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->need_return_lane(), output);
  }

  // optional .OPMessage.judgeItem return_lane_time_dealy = 14;
  if (has_return_lane_time_dealy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->return_lane_time_dealy(), output);
  }

  // optional .OPMessage.voiceItem vi_41400_start_exam = 15;
  if (has_vi_41400_start_exam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->vi_41400_start_exam(), output);
  }

  // optional .OPMessage.voiceItem vi_41400_end_exam = 16;
  if (has_vi_41400_end_exam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->vi_41400_end_exam(), output);
  }

  // optional .OPMessage.voiceItem vi_41400_driving_in_one_lane = 17;
  if (has_vi_41400_driving_in_one_lane()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->vi_41400_driving_in_one_lane(), output);
  }

  // optional .OPMessage.voiceItem vi_41400_notify_change_lane = 18;
  if (has_vi_41400_notify_change_lane()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->vi_41400_notify_change_lane(), output);
  }

  // optional .OPMessage.voiceItem vi_41400_notify_return_lane = 19;
  if (has_vi_41400_notify_return_lane()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->vi_41400_notify_return_lane(), output);
  }

  // optional .OPMessage.voiceItem vi_41400_not_finish = 20;
  if (has_vi_41400_not_finish()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->vi_41400_not_finish(), output);
  }

  // optional .OPMessage.voiceItem vi_41400_change_lane_error = 21;
  if (has_vi_41400_change_lane_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->vi_41400_change_lane_error(), output);
  }

  // optional .OPMessage.voiceItem vi_41400_return_lane_error = 22;
  if (has_vi_41400_return_lane_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->vi_41400_return_lane_error(), output);
  }

  // optional .OPMessage.voiceItem vi_41400_turn_lamp_use_error = 23;
  if (has_vi_41400_turn_lamp_use_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->vi_41400_turn_lamp_use_error(), output);
  }

  // optional .OPMessage.voiceItem vi_41400_not_keep_enough_distance = 24;
  if (has_vi_41400_not_keep_enough_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->vi_41400_not_keep_enough_distance(), output);
  }

  // optional .OPMessage.voiceItem vi_41400_turn_lamp_not_use = 25;
  if (has_vi_41400_turn_lamp_not_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->vi_41400_turn_lamp_not_use(), output);
  }

  // optional .OPMessage.voiceItem vi_41400_not_reach_min_speed = 26;
  if (has_vi_41400_not_reach_min_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->vi_41400_not_reach_min_speed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OPMessage.Judge41400)
}

::google::protobuf::uint8* Judge41400::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OPMessage.Judge41400)
  // optional int32 itemCode = 1;
  if (has_itemcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemcode(), target);
  }

  // optional string itemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->itemname(), target);
  }

  // optional .OPMessage.judgeItem max_time = 3;
  if (has_max_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->max_time(), target);
  }

  // optional .OPMessage.judgeItem max_trigger_distance = 4;
  if (has_max_trigger_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->max_trigger_distance(), target);
  }

  // optional .OPMessage.judgeItem min_turn_signal_time = 5;
  if (has_min_turn_signal_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->min_turn_signal_time(), target);
  }

  // optional .OPMessage.judgeItem lane_width = 6;
  if (has_lane_width()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->lane_width(), target);
  }

  // optional .OPMessage.judgeItem check_change_lane = 7;
  if (has_check_change_lane()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->check_change_lane(), target);
  }

  // optional .OPMessage.judgeItem start_change_lane_time_delay = 8;
  if (has_start_change_lane_time_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->start_change_lane_time_delay(), target);
  }

  // optional .OPMessage.judgeItem start_change_lane_distance_delay = 9;
  if (has_start_change_lane_distance_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->start_change_lane_distance_delay(), target);
  }

  // optional .OPMessage.judgeItem finish_change_lane_time_delay = 10;
  if (has_finish_change_lane_time_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->finish_change_lane_time_delay(), target);
  }

  // optional .OPMessage.judgeItem finish_change_lane_distance_delay = 11;
  if (has_finish_change_lane_distance_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->finish_change_lane_distance_delay(), target);
  }

  // optional .OPMessage.judgeItem need_near_far_lamp_flash = 12;
  if (has_need_near_far_lamp_flash()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->need_near_far_lamp_flash(), target);
  }

  // optional .OPMessage.judgeItem need_return_lane = 13;
  if (has_need_return_lane()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->need_return_lane(), target);
  }

  // optional .OPMessage.judgeItem return_lane_time_dealy = 14;
  if (has_return_lane_time_dealy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->return_lane_time_dealy(), target);
  }

  // optional .OPMessage.voiceItem vi_41400_start_exam = 15;
  if (has_vi_41400_start_exam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->vi_41400_start_exam(), target);
  }

  // optional .OPMessage.voiceItem vi_41400_end_exam = 16;
  if (has_vi_41400_end_exam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->vi_41400_end_exam(), target);
  }

  // optional .OPMessage.voiceItem vi_41400_driving_in_one_lane = 17;
  if (has_vi_41400_driving_in_one_lane()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->vi_41400_driving_in_one_lane(), target);
  }

  // optional .OPMessage.voiceItem vi_41400_notify_change_lane = 18;
  if (has_vi_41400_notify_change_lane()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->vi_41400_notify_change_lane(), target);
  }

  // optional .OPMessage.voiceItem vi_41400_notify_return_lane = 19;
  if (has_vi_41400_notify_return_lane()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->vi_41400_notify_return_lane(), target);
  }

  // optional .OPMessage.voiceItem vi_41400_not_finish = 20;
  if (has_vi_41400_not_finish()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->vi_41400_not_finish(), target);
  }

  // optional .OPMessage.voiceItem vi_41400_change_lane_error = 21;
  if (has_vi_41400_change_lane_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->vi_41400_change_lane_error(), target);
  }

  // optional .OPMessage.voiceItem vi_41400_return_lane_error = 22;
  if (has_vi_41400_return_lane_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->vi_41400_return_lane_error(), target);
  }

  // optional .OPMessage.voiceItem vi_41400_turn_lamp_use_error = 23;
  if (has_vi_41400_turn_lamp_use_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->vi_41400_turn_lamp_use_error(), target);
  }

  // optional .OPMessage.voiceItem vi_41400_not_keep_enough_distance = 24;
  if (has_vi_41400_not_keep_enough_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->vi_41400_not_keep_enough_distance(), target);
  }

  // optional .OPMessage.voiceItem vi_41400_turn_lamp_not_use = 25;
  if (has_vi_41400_turn_lamp_not_use()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->vi_41400_turn_lamp_not_use(), target);
  }

  // optional .OPMessage.voiceItem vi_41400_not_reach_min_speed = 26;
  if (has_vi_41400_not_reach_min_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->vi_41400_not_reach_min_speed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OPMessage.Judge41400)
  return target;
}

int Judge41400::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemCode = 1;
    if (has_itemcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemcode());
    }

    // optional string itemName = 2;
    if (has_itemname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemname());
    }

    // optional .OPMessage.judgeItem max_time = 3;
    if (has_max_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_time());
    }

    // optional .OPMessage.judgeItem max_trigger_distance = 4;
    if (has_max_trigger_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_trigger_distance());
    }

    // optional .OPMessage.judgeItem min_turn_signal_time = 5;
    if (has_min_turn_signal_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->min_turn_signal_time());
    }

    // optional .OPMessage.judgeItem lane_width = 6;
    if (has_lane_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lane_width());
    }

    // optional .OPMessage.judgeItem check_change_lane = 7;
    if (has_check_change_lane()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->check_change_lane());
    }

    // optional .OPMessage.judgeItem start_change_lane_time_delay = 8;
    if (has_start_change_lane_time_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_change_lane_time_delay());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .OPMessage.judgeItem start_change_lane_distance_delay = 9;
    if (has_start_change_lane_distance_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_change_lane_distance_delay());
    }

    // optional .OPMessage.judgeItem finish_change_lane_time_delay = 10;
    if (has_finish_change_lane_time_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->finish_change_lane_time_delay());
    }

    // optional .OPMessage.judgeItem finish_change_lane_distance_delay = 11;
    if (has_finish_change_lane_distance_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->finish_change_lane_distance_delay());
    }

    // optional .OPMessage.judgeItem need_near_far_lamp_flash = 12;
    if (has_need_near_far_lamp_flash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->need_near_far_lamp_flash());
    }

    // optional .OPMessage.judgeItem need_return_lane = 13;
    if (has_need_return_lane()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->need_return_lane());
    }

    // optional .OPMessage.judgeItem return_lane_time_dealy = 14;
    if (has_return_lane_time_dealy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->return_lane_time_dealy());
    }

    // optional .OPMessage.voiceItem vi_41400_start_exam = 15;
    if (has_vi_41400_start_exam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_41400_start_exam());
    }

    // optional .OPMessage.voiceItem vi_41400_end_exam = 16;
    if (has_vi_41400_end_exam()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_41400_end_exam());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .OPMessage.voiceItem vi_41400_driving_in_one_lane = 17;
    if (has_vi_41400_driving_in_one_lane()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_41400_driving_in_one_lane());
    }

    // optional .OPMessage.voiceItem vi_41400_notify_change_lane = 18;
    if (has_vi_41400_notify_change_lane()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_41400_notify_change_lane());
    }

    // optional .OPMessage.voiceItem vi_41400_notify_return_lane = 19;
    if (has_vi_41400_notify_return_lane()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_41400_notify_return_lane());
    }

    // optional .OPMessage.voiceItem vi_41400_not_finish = 20;
    if (has_vi_41400_not_finish()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_41400_not_finish());
    }

    // optional .OPMessage.voiceItem vi_41400_change_lane_error = 21;
    if (has_vi_41400_change_lane_error()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_41400_change_lane_error());
    }

    // optional .OPMessage.voiceItem vi_41400_return_lane_error = 22;
    if (has_vi_41400_return_lane_error()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_41400_return_lane_error());
    }

    // optional .OPMessage.voiceItem vi_41400_turn_lamp_use_error = 23;
    if (has_vi_41400_turn_lamp_use_error()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_41400_turn_lamp_use_error());
    }

    // optional .OPMessage.voiceItem vi_41400_not_keep_enough_distance = 24;
    if (has_vi_41400_not_keep_enough_distance()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_41400_not_keep_enough_distance());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .OPMessage.voiceItem vi_41400_turn_lamp_not_use = 25;
    if (has_vi_41400_turn_lamp_not_use()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_41400_turn_lamp_not_use());
    }

    // optional .OPMessage.voiceItem vi_41400_not_reach_min_speed = 26;
    if (has_vi_41400_not_reach_min_speed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_41400_not_reach_min_speed());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Judge41400::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Judge41400* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Judge41400*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Judge41400::MergeFrom(const Judge41400& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemcode()) {
      set_itemcode(from.itemcode());
    }
    if (from.has_itemname()) {
      set_itemname(from.itemname());
    }
    if (from.has_max_time()) {
      mutable_max_time()->::OPMessage::judgeItem::MergeFrom(from.max_time());
    }
    if (from.has_max_trigger_distance()) {
      mutable_max_trigger_distance()->::OPMessage::judgeItem::MergeFrom(from.max_trigger_distance());
    }
    if (from.has_min_turn_signal_time()) {
      mutable_min_turn_signal_time()->::OPMessage::judgeItem::MergeFrom(from.min_turn_signal_time());
    }
    if (from.has_lane_width()) {
      mutable_lane_width()->::OPMessage::judgeItem::MergeFrom(from.lane_width());
    }
    if (from.has_check_change_lane()) {
      mutable_check_change_lane()->::OPMessage::judgeItem::MergeFrom(from.check_change_lane());
    }
    if (from.has_start_change_lane_time_delay()) {
      mutable_start_change_lane_time_delay()->::OPMessage::judgeItem::MergeFrom(from.start_change_lane_time_delay());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_start_change_lane_distance_delay()) {
      mutable_start_change_lane_distance_delay()->::OPMessage::judgeItem::MergeFrom(from.start_change_lane_distance_delay());
    }
    if (from.has_finish_change_lane_time_delay()) {
      mutable_finish_change_lane_time_delay()->::OPMessage::judgeItem::MergeFrom(from.finish_change_lane_time_delay());
    }
    if (from.has_finish_change_lane_distance_delay()) {
      mutable_finish_change_lane_distance_delay()->::OPMessage::judgeItem::MergeFrom(from.finish_change_lane_distance_delay());
    }
    if (from.has_need_near_far_lamp_flash()) {
      mutable_need_near_far_lamp_flash()->::OPMessage::judgeItem::MergeFrom(from.need_near_far_lamp_flash());
    }
    if (from.has_need_return_lane()) {
      mutable_need_return_lane()->::OPMessage::judgeItem::MergeFrom(from.need_return_lane());
    }
    if (from.has_return_lane_time_dealy()) {
      mutable_return_lane_time_dealy()->::OPMessage::judgeItem::MergeFrom(from.return_lane_time_dealy());
    }
    if (from.has_vi_41400_start_exam()) {
      mutable_vi_41400_start_exam()->::OPMessage::voiceItem::MergeFrom(from.vi_41400_start_exam());
    }
    if (from.has_vi_41400_end_exam()) {
      mutable_vi_41400_end_exam()->::OPMessage::voiceItem::MergeFrom(from.vi_41400_end_exam());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_vi_41400_driving_in_one_lane()) {
      mutable_vi_41400_driving_in_one_lane()->::OPMessage::voiceItem::MergeFrom(from.vi_41400_driving_in_one_lane());
    }
    if (from.has_vi_41400_notify_change_lane()) {
      mutable_vi_41400_notify_change_lane()->::OPMessage::voiceItem::MergeFrom(from.vi_41400_notify_change_lane());
    }
    if (from.has_vi_41400_notify_return_lane()) {
      mutable_vi_41400_notify_return_lane()->::OPMessage::voiceItem::MergeFrom(from.vi_41400_notify_return_lane());
    }
    if (from.has_vi_41400_not_finish()) {
      mutable_vi_41400_not_finish()->::OPMessage::voiceItem::MergeFrom(from.vi_41400_not_finish());
    }
    if (from.has_vi_41400_change_lane_error()) {
      mutable_vi_41400_change_lane_error()->::OPMessage::voiceItem::MergeFrom(from.vi_41400_change_lane_error());
    }
    if (from.has_vi_41400_return_lane_error()) {
      mutable_vi_41400_return_lane_error()->::OPMessage::voiceItem::MergeFrom(from.vi_41400_return_lane_error());
    }
    if (from.has_vi_41400_turn_lamp_use_error()) {
      mutable_vi_41400_turn_lamp_use_error()->::OPMessage::voiceItem::MergeFrom(from.vi_41400_turn_lamp_use_error());
    }
    if (from.has_vi_41400_not_keep_enough_distance()) {
      mutable_vi_41400_not_keep_enough_distance()->::OPMessage::voiceItem::MergeFrom(from.vi_41400_not_keep_enough_distance());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_vi_41400_turn_lamp_not_use()) {
      mutable_vi_41400_turn_lamp_not_use()->::OPMessage::voiceItem::MergeFrom(from.vi_41400_turn_lamp_not_use());
    }
    if (from.has_vi_41400_not_reach_min_speed()) {
      mutable_vi_41400_not_reach_min_speed()->::OPMessage::voiceItem::MergeFrom(from.vi_41400_not_reach_min_speed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Judge41400::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Judge41400::CopyFrom(const Judge41400& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Judge41400::IsInitialized() const {

  return true;
}

void Judge41400::Swap(Judge41400* other) {
  if (other != this) {
    std::swap(itemcode_, other->itemcode_);
    std::swap(itemname_, other->itemname_);
    std::swap(max_time_, other->max_time_);
    std::swap(max_trigger_distance_, other->max_trigger_distance_);
    std::swap(min_turn_signal_time_, other->min_turn_signal_time_);
    std::swap(lane_width_, other->lane_width_);
    std::swap(check_change_lane_, other->check_change_lane_);
    std::swap(start_change_lane_time_delay_, other->start_change_lane_time_delay_);
    std::swap(start_change_lane_distance_delay_, other->start_change_lane_distance_delay_);
    std::swap(finish_change_lane_time_delay_, other->finish_change_lane_time_delay_);
    std::swap(finish_change_lane_distance_delay_, other->finish_change_lane_distance_delay_);
    std::swap(need_near_far_lamp_flash_, other->need_near_far_lamp_flash_);
    std::swap(need_return_lane_, other->need_return_lane_);
    std::swap(return_lane_time_dealy_, other->return_lane_time_dealy_);
    std::swap(vi_41400_start_exam_, other->vi_41400_start_exam_);
    std::swap(vi_41400_end_exam_, other->vi_41400_end_exam_);
    std::swap(vi_41400_driving_in_one_lane_, other->vi_41400_driving_in_one_lane_);
    std::swap(vi_41400_notify_change_lane_, other->vi_41400_notify_change_lane_);
    std::swap(vi_41400_notify_return_lane_, other->vi_41400_notify_return_lane_);
    std::swap(vi_41400_not_finish_, other->vi_41400_not_finish_);
    std::swap(vi_41400_change_lane_error_, other->vi_41400_change_lane_error_);
    std::swap(vi_41400_return_lane_error_, other->vi_41400_return_lane_error_);
    std::swap(vi_41400_turn_lamp_use_error_, other->vi_41400_turn_lamp_use_error_);
    std::swap(vi_41400_not_keep_enough_distance_, other->vi_41400_not_keep_enough_distance_);
    std::swap(vi_41400_turn_lamp_not_use_, other->vi_41400_turn_lamp_not_use_);
    std::swap(vi_41400_not_reach_min_speed_, other->vi_41400_not_reach_min_speed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Judge41400::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Judge41400_descriptor_;
  metadata.reflection = Judge41400_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Judge40500::kItemCodeFieldNumber;
const int Judge40500::kItemNameFieldNumber;
const int Judge40500::kMaxTimeFieldNumber;
const int Judge40500::kMaxTriggerDistanceFieldNumber;
const int Judge40500::kMinTurnSignalTimeFieldNumber;
const int Judge40500::kLaneWidthFieldNumber;
const int Judge40500::kCheckChangeLaneFieldNumber;
const int Judge40500::kStartChangeLaneTimeDelayFieldNumber;
const int Judge40500::kStartChangeLaneDistanceDelayFieldNumber;
const int Judge40500::kFinishChangeLaneTimeDelayFieldNumber;
const int Judge40500::kFinishChangeLaneDistanceDelayFieldNumber;
const int Judge40500::kVi40500StartExamFieldNumber;
const int Judge40500::kVi40500EndExamFieldNumber;
const int Judge40500::kVi40500DrivingInOneLaneFieldNumber;
const int Judge40500::kVi40500NotifyChangeLaneFieldNumber;
const int Judge40500::kVi40500NotFinishChangeLaneFieldNumber;
const int Judge40500::kVi40500TurnLampUseErrorFieldNumber;
const int Judge40500::kVi40500TurnLampNotUseFieldNumber;
#endif  // !_MSC_VER

Judge40500::Judge40500()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OPMessage.Judge40500)
}

void Judge40500::InitAsDefaultInstance() {
  max_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  max_trigger_distance_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  min_turn_signal_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  lane_width_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  check_change_lane_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  start_change_lane_time_delay_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  start_change_lane_distance_delay_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  finish_change_lane_time_delay_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  finish_change_lane_distance_delay_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  vi_40500_start_exam_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40500_end_exam_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40500_driving_in_one_lane_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40500_notify_change_lane_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40500_not_finish_change_lane_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40500_turn_lamp_use_error_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40500_turn_lamp_not_use_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
}

Judge40500::Judge40500(const Judge40500& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OPMessage.Judge40500)
}

void Judge40500::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  itemcode_ = 0;
  itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_time_ = NULL;
  max_trigger_distance_ = NULL;
  min_turn_signal_time_ = NULL;
  lane_width_ = NULL;
  check_change_lane_ = NULL;
  start_change_lane_time_delay_ = NULL;
  start_change_lane_distance_delay_ = NULL;
  finish_change_lane_time_delay_ = NULL;
  finish_change_lane_distance_delay_ = NULL;
  vi_40500_start_exam_ = NULL;
  vi_40500_end_exam_ = NULL;
  vi_40500_driving_in_one_lane_ = NULL;
  vi_40500_notify_change_lane_ = NULL;
  vi_40500_not_finish_change_lane_ = NULL;
  vi_40500_turn_lamp_use_error_ = NULL;
  vi_40500_turn_lamp_not_use_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Judge40500::~Judge40500() {
  // @@protoc_insertion_point(destructor:OPMessage.Judge40500)
  SharedDtor();
}

void Judge40500::SharedDtor() {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (this != default_instance_) {
    delete max_time_;
    delete max_trigger_distance_;
    delete min_turn_signal_time_;
    delete lane_width_;
    delete check_change_lane_;
    delete start_change_lane_time_delay_;
    delete start_change_lane_distance_delay_;
    delete finish_change_lane_time_delay_;
    delete finish_change_lane_distance_delay_;
    delete vi_40500_start_exam_;
    delete vi_40500_end_exam_;
    delete vi_40500_driving_in_one_lane_;
    delete vi_40500_notify_change_lane_;
    delete vi_40500_not_finish_change_lane_;
    delete vi_40500_turn_lamp_use_error_;
    delete vi_40500_turn_lamp_not_use_;
  }
}

void Judge40500::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Judge40500::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Judge40500_descriptor_;
}

const Judge40500& Judge40500::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageKm3Config_2eproto();
  return *default_instance_;
}

Judge40500* Judge40500::default_instance_ = NULL;

Judge40500* Judge40500::New() const {
  return new Judge40500;
}

void Judge40500::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    itemcode_ = 0;
    if (has_itemname()) {
      if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        itemname_->clear();
      }
    }
    if (has_max_time()) {
      if (max_time_ != NULL) max_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_max_trigger_distance()) {
      if (max_trigger_distance_ != NULL) max_trigger_distance_->::OPMessage::judgeItem::Clear();
    }
    if (has_min_turn_signal_time()) {
      if (min_turn_signal_time_ != NULL) min_turn_signal_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_lane_width()) {
      if (lane_width_ != NULL) lane_width_->::OPMessage::judgeItem::Clear();
    }
    if (has_check_change_lane()) {
      if (check_change_lane_ != NULL) check_change_lane_->::OPMessage::judgeItem::Clear();
    }
    if (has_start_change_lane_time_delay()) {
      if (start_change_lane_time_delay_ != NULL) start_change_lane_time_delay_->::OPMessage::judgeItem::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_start_change_lane_distance_delay()) {
      if (start_change_lane_distance_delay_ != NULL) start_change_lane_distance_delay_->::OPMessage::judgeItem::Clear();
    }
    if (has_finish_change_lane_time_delay()) {
      if (finish_change_lane_time_delay_ != NULL) finish_change_lane_time_delay_->::OPMessage::judgeItem::Clear();
    }
    if (has_finish_change_lane_distance_delay()) {
      if (finish_change_lane_distance_delay_ != NULL) finish_change_lane_distance_delay_->::OPMessage::judgeItem::Clear();
    }
    if (has_vi_40500_start_exam()) {
      if (vi_40500_start_exam_ != NULL) vi_40500_start_exam_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40500_end_exam()) {
      if (vi_40500_end_exam_ != NULL) vi_40500_end_exam_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40500_driving_in_one_lane()) {
      if (vi_40500_driving_in_one_lane_ != NULL) vi_40500_driving_in_one_lane_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40500_notify_change_lane()) {
      if (vi_40500_notify_change_lane_ != NULL) vi_40500_notify_change_lane_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40500_not_finish_change_lane()) {
      if (vi_40500_not_finish_change_lane_ != NULL) vi_40500_not_finish_change_lane_->::OPMessage::voiceItem::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 196608) {
    if (has_vi_40500_turn_lamp_use_error()) {
      if (vi_40500_turn_lamp_use_error_ != NULL) vi_40500_turn_lamp_use_error_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40500_turn_lamp_not_use()) {
      if (vi_40500_turn_lamp_not_use_ != NULL) vi_40500_turn_lamp_not_use_->::OPMessage::voiceItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Judge40500::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OPMessage.Judge40500)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemcode_)));
          set_has_itemcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_itemName;
        break;
      }

      // optional string itemName = 2;
      case 2: {
        if (tag == 18) {
         parse_itemName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itemname().data(), this->itemname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "itemname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_max_time;
        break;
      }

      // optional .OPMessage.judgeItem max_time = 3;
      case 3: {
        if (tag == 26) {
         parse_max_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_max_trigger_distance;
        break;
      }

      // optional .OPMessage.judgeItem max_trigger_distance = 4;
      case 4: {
        if (tag == 34) {
         parse_max_trigger_distance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_trigger_distance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_min_turn_signal_time;
        break;
      }

      // optional .OPMessage.judgeItem min_turn_signal_time = 5;
      case 5: {
        if (tag == 42) {
         parse_min_turn_signal_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_turn_signal_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_lane_width;
        break;
      }

      // optional .OPMessage.judgeItem lane_width = 6;
      case 6: {
        if (tag == 50) {
         parse_lane_width:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lane_width()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_check_change_lane;
        break;
      }

      // optional .OPMessage.judgeItem check_change_lane = 7;
      case 7: {
        if (tag == 58) {
         parse_check_change_lane:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_check_change_lane()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_start_change_lane_time_delay;
        break;
      }

      // optional .OPMessage.judgeItem start_change_lane_time_delay = 8;
      case 8: {
        if (tag == 66) {
         parse_start_change_lane_time_delay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_change_lane_time_delay()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_start_change_lane_distance_delay;
        break;
      }

      // optional .OPMessage.judgeItem start_change_lane_distance_delay = 9;
      case 9: {
        if (tag == 74) {
         parse_start_change_lane_distance_delay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_change_lane_distance_delay()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_finish_change_lane_time_delay;
        break;
      }

      // optional .OPMessage.judgeItem finish_change_lane_time_delay = 10;
      case 10: {
        if (tag == 82) {
         parse_finish_change_lane_time_delay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_finish_change_lane_time_delay()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_finish_change_lane_distance_delay;
        break;
      }

      // optional .OPMessage.judgeItem finish_change_lane_distance_delay = 11;
      case 11: {
        if (tag == 90) {
         parse_finish_change_lane_distance_delay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_finish_change_lane_distance_delay()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_vi_40500_start_exam;
        break;
      }

      // optional .OPMessage.voiceItem vi_40500_start_exam = 12;
      case 12: {
        if (tag == 98) {
         parse_vi_40500_start_exam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40500_start_exam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_vi_40500_end_exam;
        break;
      }

      // optional .OPMessage.voiceItem vi_40500_end_exam = 13;
      case 13: {
        if (tag == 106) {
         parse_vi_40500_end_exam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40500_end_exam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_vi_40500_driving_in_one_lane;
        break;
      }

      // optional .OPMessage.voiceItem vi_40500_driving_in_one_lane = 14;
      case 14: {
        if (tag == 114) {
         parse_vi_40500_driving_in_one_lane:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40500_driving_in_one_lane()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_vi_40500_notify_change_lane;
        break;
      }

      // optional .OPMessage.voiceItem vi_40500_notify_change_lane = 15;
      case 15: {
        if (tag == 122) {
         parse_vi_40500_notify_change_lane:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40500_notify_change_lane()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_vi_40500_not_finish_change_lane;
        break;
      }

      // optional .OPMessage.voiceItem vi_40500_not_finish_change_lane = 16;
      case 16: {
        if (tag == 130) {
         parse_vi_40500_not_finish_change_lane:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40500_not_finish_change_lane()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_vi_40500_turn_lamp_use_error;
        break;
      }

      // optional .OPMessage.voiceItem vi_40500_turn_lamp_use_error = 17;
      case 17: {
        if (tag == 138) {
         parse_vi_40500_turn_lamp_use_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40500_turn_lamp_use_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_vi_40500_turn_lamp_not_use;
        break;
      }

      // optional .OPMessage.voiceItem vi_40500_turn_lamp_not_use = 18;
      case 18: {
        if (tag == 146) {
         parse_vi_40500_turn_lamp_not_use:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40500_turn_lamp_not_use()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OPMessage.Judge40500)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OPMessage.Judge40500)
  return false;
#undef DO_
}

void Judge40500::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OPMessage.Judge40500)
  // optional int32 itemCode = 1;
  if (has_itemcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemcode(), output);
  }

  // optional string itemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->itemname(), output);
  }

  // optional .OPMessage.judgeItem max_time = 3;
  if (has_max_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->max_time(), output);
  }

  // optional .OPMessage.judgeItem max_trigger_distance = 4;
  if (has_max_trigger_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->max_trigger_distance(), output);
  }

  // optional .OPMessage.judgeItem min_turn_signal_time = 5;
  if (has_min_turn_signal_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->min_turn_signal_time(), output);
  }

  // optional .OPMessage.judgeItem lane_width = 6;
  if (has_lane_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->lane_width(), output);
  }

  // optional .OPMessage.judgeItem check_change_lane = 7;
  if (has_check_change_lane()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->check_change_lane(), output);
  }

  // optional .OPMessage.judgeItem start_change_lane_time_delay = 8;
  if (has_start_change_lane_time_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->start_change_lane_time_delay(), output);
  }

  // optional .OPMessage.judgeItem start_change_lane_distance_delay = 9;
  if (has_start_change_lane_distance_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->start_change_lane_distance_delay(), output);
  }

  // optional .OPMessage.judgeItem finish_change_lane_time_delay = 10;
  if (has_finish_change_lane_time_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->finish_change_lane_time_delay(), output);
  }

  // optional .OPMessage.judgeItem finish_change_lane_distance_delay = 11;
  if (has_finish_change_lane_distance_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->finish_change_lane_distance_delay(), output);
  }

  // optional .OPMessage.voiceItem vi_40500_start_exam = 12;
  if (has_vi_40500_start_exam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->vi_40500_start_exam(), output);
  }

  // optional .OPMessage.voiceItem vi_40500_end_exam = 13;
  if (has_vi_40500_end_exam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->vi_40500_end_exam(), output);
  }

  // optional .OPMessage.voiceItem vi_40500_driving_in_one_lane = 14;
  if (has_vi_40500_driving_in_one_lane()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->vi_40500_driving_in_one_lane(), output);
  }

  // optional .OPMessage.voiceItem vi_40500_notify_change_lane = 15;
  if (has_vi_40500_notify_change_lane()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->vi_40500_notify_change_lane(), output);
  }

  // optional .OPMessage.voiceItem vi_40500_not_finish_change_lane = 16;
  if (has_vi_40500_not_finish_change_lane()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->vi_40500_not_finish_change_lane(), output);
  }

  // optional .OPMessage.voiceItem vi_40500_turn_lamp_use_error = 17;
  if (has_vi_40500_turn_lamp_use_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->vi_40500_turn_lamp_use_error(), output);
  }

  // optional .OPMessage.voiceItem vi_40500_turn_lamp_not_use = 18;
  if (has_vi_40500_turn_lamp_not_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->vi_40500_turn_lamp_not_use(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OPMessage.Judge40500)
}

::google::protobuf::uint8* Judge40500::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OPMessage.Judge40500)
  // optional int32 itemCode = 1;
  if (has_itemcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemcode(), target);
  }

  // optional string itemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->itemname(), target);
  }

  // optional .OPMessage.judgeItem max_time = 3;
  if (has_max_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->max_time(), target);
  }

  // optional .OPMessage.judgeItem max_trigger_distance = 4;
  if (has_max_trigger_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->max_trigger_distance(), target);
  }

  // optional .OPMessage.judgeItem min_turn_signal_time = 5;
  if (has_min_turn_signal_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->min_turn_signal_time(), target);
  }

  // optional .OPMessage.judgeItem lane_width = 6;
  if (has_lane_width()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->lane_width(), target);
  }

  // optional .OPMessage.judgeItem check_change_lane = 7;
  if (has_check_change_lane()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->check_change_lane(), target);
  }

  // optional .OPMessage.judgeItem start_change_lane_time_delay = 8;
  if (has_start_change_lane_time_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->start_change_lane_time_delay(), target);
  }

  // optional .OPMessage.judgeItem start_change_lane_distance_delay = 9;
  if (has_start_change_lane_distance_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->start_change_lane_distance_delay(), target);
  }

  // optional .OPMessage.judgeItem finish_change_lane_time_delay = 10;
  if (has_finish_change_lane_time_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->finish_change_lane_time_delay(), target);
  }

  // optional .OPMessage.judgeItem finish_change_lane_distance_delay = 11;
  if (has_finish_change_lane_distance_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->finish_change_lane_distance_delay(), target);
  }

  // optional .OPMessage.voiceItem vi_40500_start_exam = 12;
  if (has_vi_40500_start_exam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->vi_40500_start_exam(), target);
  }

  // optional .OPMessage.voiceItem vi_40500_end_exam = 13;
  if (has_vi_40500_end_exam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->vi_40500_end_exam(), target);
  }

  // optional .OPMessage.voiceItem vi_40500_driving_in_one_lane = 14;
  if (has_vi_40500_driving_in_one_lane()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->vi_40500_driving_in_one_lane(), target);
  }

  // optional .OPMessage.voiceItem vi_40500_notify_change_lane = 15;
  if (has_vi_40500_notify_change_lane()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->vi_40500_notify_change_lane(), target);
  }

  // optional .OPMessage.voiceItem vi_40500_not_finish_change_lane = 16;
  if (has_vi_40500_not_finish_change_lane()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->vi_40500_not_finish_change_lane(), target);
  }

  // optional .OPMessage.voiceItem vi_40500_turn_lamp_use_error = 17;
  if (has_vi_40500_turn_lamp_use_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->vi_40500_turn_lamp_use_error(), target);
  }

  // optional .OPMessage.voiceItem vi_40500_turn_lamp_not_use = 18;
  if (has_vi_40500_turn_lamp_not_use()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->vi_40500_turn_lamp_not_use(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OPMessage.Judge40500)
  return target;
}

int Judge40500::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemCode = 1;
    if (has_itemcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemcode());
    }

    // optional string itemName = 2;
    if (has_itemname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemname());
    }

    // optional .OPMessage.judgeItem max_time = 3;
    if (has_max_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_time());
    }

    // optional .OPMessage.judgeItem max_trigger_distance = 4;
    if (has_max_trigger_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_trigger_distance());
    }

    // optional .OPMessage.judgeItem min_turn_signal_time = 5;
    if (has_min_turn_signal_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->min_turn_signal_time());
    }

    // optional .OPMessage.judgeItem lane_width = 6;
    if (has_lane_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lane_width());
    }

    // optional .OPMessage.judgeItem check_change_lane = 7;
    if (has_check_change_lane()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->check_change_lane());
    }

    // optional .OPMessage.judgeItem start_change_lane_time_delay = 8;
    if (has_start_change_lane_time_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_change_lane_time_delay());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .OPMessage.judgeItem start_change_lane_distance_delay = 9;
    if (has_start_change_lane_distance_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_change_lane_distance_delay());
    }

    // optional .OPMessage.judgeItem finish_change_lane_time_delay = 10;
    if (has_finish_change_lane_time_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->finish_change_lane_time_delay());
    }

    // optional .OPMessage.judgeItem finish_change_lane_distance_delay = 11;
    if (has_finish_change_lane_distance_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->finish_change_lane_distance_delay());
    }

    // optional .OPMessage.voiceItem vi_40500_start_exam = 12;
    if (has_vi_40500_start_exam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40500_start_exam());
    }

    // optional .OPMessage.voiceItem vi_40500_end_exam = 13;
    if (has_vi_40500_end_exam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40500_end_exam());
    }

    // optional .OPMessage.voiceItem vi_40500_driving_in_one_lane = 14;
    if (has_vi_40500_driving_in_one_lane()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40500_driving_in_one_lane());
    }

    // optional .OPMessage.voiceItem vi_40500_notify_change_lane = 15;
    if (has_vi_40500_notify_change_lane()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40500_notify_change_lane());
    }

    // optional .OPMessage.voiceItem vi_40500_not_finish_change_lane = 16;
    if (has_vi_40500_not_finish_change_lane()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40500_not_finish_change_lane());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .OPMessage.voiceItem vi_40500_turn_lamp_use_error = 17;
    if (has_vi_40500_turn_lamp_use_error()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40500_turn_lamp_use_error());
    }

    // optional .OPMessage.voiceItem vi_40500_turn_lamp_not_use = 18;
    if (has_vi_40500_turn_lamp_not_use()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40500_turn_lamp_not_use());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Judge40500::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Judge40500* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Judge40500*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Judge40500::MergeFrom(const Judge40500& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemcode()) {
      set_itemcode(from.itemcode());
    }
    if (from.has_itemname()) {
      set_itemname(from.itemname());
    }
    if (from.has_max_time()) {
      mutable_max_time()->::OPMessage::judgeItem::MergeFrom(from.max_time());
    }
    if (from.has_max_trigger_distance()) {
      mutable_max_trigger_distance()->::OPMessage::judgeItem::MergeFrom(from.max_trigger_distance());
    }
    if (from.has_min_turn_signal_time()) {
      mutable_min_turn_signal_time()->::OPMessage::judgeItem::MergeFrom(from.min_turn_signal_time());
    }
    if (from.has_lane_width()) {
      mutable_lane_width()->::OPMessage::judgeItem::MergeFrom(from.lane_width());
    }
    if (from.has_check_change_lane()) {
      mutable_check_change_lane()->::OPMessage::judgeItem::MergeFrom(from.check_change_lane());
    }
    if (from.has_start_change_lane_time_delay()) {
      mutable_start_change_lane_time_delay()->::OPMessage::judgeItem::MergeFrom(from.start_change_lane_time_delay());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_start_change_lane_distance_delay()) {
      mutable_start_change_lane_distance_delay()->::OPMessage::judgeItem::MergeFrom(from.start_change_lane_distance_delay());
    }
    if (from.has_finish_change_lane_time_delay()) {
      mutable_finish_change_lane_time_delay()->::OPMessage::judgeItem::MergeFrom(from.finish_change_lane_time_delay());
    }
    if (from.has_finish_change_lane_distance_delay()) {
      mutable_finish_change_lane_distance_delay()->::OPMessage::judgeItem::MergeFrom(from.finish_change_lane_distance_delay());
    }
    if (from.has_vi_40500_start_exam()) {
      mutable_vi_40500_start_exam()->::OPMessage::voiceItem::MergeFrom(from.vi_40500_start_exam());
    }
    if (from.has_vi_40500_end_exam()) {
      mutable_vi_40500_end_exam()->::OPMessage::voiceItem::MergeFrom(from.vi_40500_end_exam());
    }
    if (from.has_vi_40500_driving_in_one_lane()) {
      mutable_vi_40500_driving_in_one_lane()->::OPMessage::voiceItem::MergeFrom(from.vi_40500_driving_in_one_lane());
    }
    if (from.has_vi_40500_notify_change_lane()) {
      mutable_vi_40500_notify_change_lane()->::OPMessage::voiceItem::MergeFrom(from.vi_40500_notify_change_lane());
    }
    if (from.has_vi_40500_not_finish_change_lane()) {
      mutable_vi_40500_not_finish_change_lane()->::OPMessage::voiceItem::MergeFrom(from.vi_40500_not_finish_change_lane());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_vi_40500_turn_lamp_use_error()) {
      mutable_vi_40500_turn_lamp_use_error()->::OPMessage::voiceItem::MergeFrom(from.vi_40500_turn_lamp_use_error());
    }
    if (from.has_vi_40500_turn_lamp_not_use()) {
      mutable_vi_40500_turn_lamp_not_use()->::OPMessage::voiceItem::MergeFrom(from.vi_40500_turn_lamp_not_use());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Judge40500::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Judge40500::CopyFrom(const Judge40500& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Judge40500::IsInitialized() const {

  return true;
}

void Judge40500::Swap(Judge40500* other) {
  if (other != this) {
    std::swap(itemcode_, other->itemcode_);
    std::swap(itemname_, other->itemname_);
    std::swap(max_time_, other->max_time_);
    std::swap(max_trigger_distance_, other->max_trigger_distance_);
    std::swap(min_turn_signal_time_, other->min_turn_signal_time_);
    std::swap(lane_width_, other->lane_width_);
    std::swap(check_change_lane_, other->check_change_lane_);
    std::swap(start_change_lane_time_delay_, other->start_change_lane_time_delay_);
    std::swap(start_change_lane_distance_delay_, other->start_change_lane_distance_delay_);
    std::swap(finish_change_lane_time_delay_, other->finish_change_lane_time_delay_);
    std::swap(finish_change_lane_distance_delay_, other->finish_change_lane_distance_delay_);
    std::swap(vi_40500_start_exam_, other->vi_40500_start_exam_);
    std::swap(vi_40500_end_exam_, other->vi_40500_end_exam_);
    std::swap(vi_40500_driving_in_one_lane_, other->vi_40500_driving_in_one_lane_);
    std::swap(vi_40500_notify_change_lane_, other->vi_40500_notify_change_lane_);
    std::swap(vi_40500_not_finish_change_lane_, other->vi_40500_not_finish_change_lane_);
    std::swap(vi_40500_turn_lamp_use_error_, other->vi_40500_turn_lamp_use_error_);
    std::swap(vi_40500_turn_lamp_not_use_, other->vi_40500_turn_lamp_not_use_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Judge40500::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Judge40500_descriptor_;
  metadata.reflection = Judge40500_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Judge41300::kItemCodeFieldNumber;
const int Judge41300::kItemNameFieldNumber;
const int Judge41300::kMaxTimeFieldNumber;
const int Judge41300::kMaxTriggerDistanceFieldNumber;
const int Judge41300::kMaxSpeedFieldNumber;
const int Judge41300::kJudgeModeFieldNumber;
const int Judge41300::kVi41300StartExamFieldNumber;
const int Judge41300::kVi41300EndExamFieldNumber;
const int Judge41300::kVi41300NotSlowdownFieldNumber;
#endif  // !_MSC_VER

Judge41300::Judge41300()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OPMessage.Judge41300)
}

void Judge41300::InitAsDefaultInstance() {
  max_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  max_trigger_distance_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  max_speed_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  judge_mode_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  vi_41300_start_exam_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_41300_end_exam_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_41300_not_slowdown_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
}

Judge41300::Judge41300(const Judge41300& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OPMessage.Judge41300)
}

void Judge41300::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  itemcode_ = 0;
  itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_time_ = NULL;
  max_trigger_distance_ = NULL;
  max_speed_ = NULL;
  judge_mode_ = NULL;
  vi_41300_start_exam_ = NULL;
  vi_41300_end_exam_ = NULL;
  vi_41300_not_slowdown_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Judge41300::~Judge41300() {
  // @@protoc_insertion_point(destructor:OPMessage.Judge41300)
  SharedDtor();
}

void Judge41300::SharedDtor() {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (this != default_instance_) {
    delete max_time_;
    delete max_trigger_distance_;
    delete max_speed_;
    delete judge_mode_;
    delete vi_41300_start_exam_;
    delete vi_41300_end_exam_;
    delete vi_41300_not_slowdown_;
  }
}

void Judge41300::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Judge41300::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Judge41300_descriptor_;
}

const Judge41300& Judge41300::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageKm3Config_2eproto();
  return *default_instance_;
}

Judge41300* Judge41300::default_instance_ = NULL;

Judge41300* Judge41300::New() const {
  return new Judge41300;
}

void Judge41300::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    itemcode_ = 0;
    if (has_itemname()) {
      if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        itemname_->clear();
      }
    }
    if (has_max_time()) {
      if (max_time_ != NULL) max_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_max_trigger_distance()) {
      if (max_trigger_distance_ != NULL) max_trigger_distance_->::OPMessage::judgeItem::Clear();
    }
    if (has_max_speed()) {
      if (max_speed_ != NULL) max_speed_->::OPMessage::judgeItem::Clear();
    }
    if (has_judge_mode()) {
      if (judge_mode_ != NULL) judge_mode_->::OPMessage::judgeItem::Clear();
    }
    if (has_vi_41300_start_exam()) {
      if (vi_41300_start_exam_ != NULL) vi_41300_start_exam_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_41300_end_exam()) {
      if (vi_41300_end_exam_ != NULL) vi_41300_end_exam_->::OPMessage::voiceItem::Clear();
    }
  }
  if (has_vi_41300_not_slowdown()) {
    if (vi_41300_not_slowdown_ != NULL) vi_41300_not_slowdown_->::OPMessage::voiceItem::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Judge41300::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OPMessage.Judge41300)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemcode_)));
          set_has_itemcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_itemName;
        break;
      }

      // optional string itemName = 2;
      case 2: {
        if (tag == 18) {
         parse_itemName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itemname().data(), this->itemname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "itemname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_max_time;
        break;
      }

      // optional .OPMessage.judgeItem max_time = 3;
      case 3: {
        if (tag == 26) {
         parse_max_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_max_trigger_distance;
        break;
      }

      // optional .OPMessage.judgeItem max_trigger_distance = 4;
      case 4: {
        if (tag == 34) {
         parse_max_trigger_distance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_trigger_distance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_max_speed;
        break;
      }

      // optional .OPMessage.judgeItem max_speed = 5;
      case 5: {
        if (tag == 42) {
         parse_max_speed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_speed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_judge_mode;
        break;
      }

      // optional .OPMessage.judgeItem judge_mode = 6;
      case 6: {
        if (tag == 50) {
         parse_judge_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_judge_mode()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_vi_41300_start_exam;
        break;
      }

      // optional .OPMessage.voiceItem vi_41300_start_exam = 7;
      case 7: {
        if (tag == 58) {
         parse_vi_41300_start_exam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_41300_start_exam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_vi_41300_end_exam;
        break;
      }

      // optional .OPMessage.voiceItem vi_41300_end_exam = 8;
      case 8: {
        if (tag == 66) {
         parse_vi_41300_end_exam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_41300_end_exam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_vi_41300_not_slowdown;
        break;
      }

      // optional .OPMessage.voiceItem vi_41300_not_slowdown = 9;
      case 9: {
        if (tag == 74) {
         parse_vi_41300_not_slowdown:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_41300_not_slowdown()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OPMessage.Judge41300)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OPMessage.Judge41300)
  return false;
#undef DO_
}

void Judge41300::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OPMessage.Judge41300)
  // optional int32 itemCode = 1;
  if (has_itemcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemcode(), output);
  }

  // optional string itemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->itemname(), output);
  }

  // optional .OPMessage.judgeItem max_time = 3;
  if (has_max_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->max_time(), output);
  }

  // optional .OPMessage.judgeItem max_trigger_distance = 4;
  if (has_max_trigger_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->max_trigger_distance(), output);
  }

  // optional .OPMessage.judgeItem max_speed = 5;
  if (has_max_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->max_speed(), output);
  }

  // optional .OPMessage.judgeItem judge_mode = 6;
  if (has_judge_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->judge_mode(), output);
  }

  // optional .OPMessage.voiceItem vi_41300_start_exam = 7;
  if (has_vi_41300_start_exam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->vi_41300_start_exam(), output);
  }

  // optional .OPMessage.voiceItem vi_41300_end_exam = 8;
  if (has_vi_41300_end_exam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->vi_41300_end_exam(), output);
  }

  // optional .OPMessage.voiceItem vi_41300_not_slowdown = 9;
  if (has_vi_41300_not_slowdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->vi_41300_not_slowdown(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OPMessage.Judge41300)
}

::google::protobuf::uint8* Judge41300::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OPMessage.Judge41300)
  // optional int32 itemCode = 1;
  if (has_itemcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemcode(), target);
  }

  // optional string itemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->itemname(), target);
  }

  // optional .OPMessage.judgeItem max_time = 3;
  if (has_max_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->max_time(), target);
  }

  // optional .OPMessage.judgeItem max_trigger_distance = 4;
  if (has_max_trigger_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->max_trigger_distance(), target);
  }

  // optional .OPMessage.judgeItem max_speed = 5;
  if (has_max_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->max_speed(), target);
  }

  // optional .OPMessage.judgeItem judge_mode = 6;
  if (has_judge_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->judge_mode(), target);
  }

  // optional .OPMessage.voiceItem vi_41300_start_exam = 7;
  if (has_vi_41300_start_exam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->vi_41300_start_exam(), target);
  }

  // optional .OPMessage.voiceItem vi_41300_end_exam = 8;
  if (has_vi_41300_end_exam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->vi_41300_end_exam(), target);
  }

  // optional .OPMessage.voiceItem vi_41300_not_slowdown = 9;
  if (has_vi_41300_not_slowdown()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->vi_41300_not_slowdown(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OPMessage.Judge41300)
  return target;
}

int Judge41300::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemCode = 1;
    if (has_itemcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemcode());
    }

    // optional string itemName = 2;
    if (has_itemname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemname());
    }

    // optional .OPMessage.judgeItem max_time = 3;
    if (has_max_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_time());
    }

    // optional .OPMessage.judgeItem max_trigger_distance = 4;
    if (has_max_trigger_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_trigger_distance());
    }

    // optional .OPMessage.judgeItem max_speed = 5;
    if (has_max_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_speed());
    }

    // optional .OPMessage.judgeItem judge_mode = 6;
    if (has_judge_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->judge_mode());
    }

    // optional .OPMessage.voiceItem vi_41300_start_exam = 7;
    if (has_vi_41300_start_exam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_41300_start_exam());
    }

    // optional .OPMessage.voiceItem vi_41300_end_exam = 8;
    if (has_vi_41300_end_exam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_41300_end_exam());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .OPMessage.voiceItem vi_41300_not_slowdown = 9;
    if (has_vi_41300_not_slowdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_41300_not_slowdown());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Judge41300::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Judge41300* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Judge41300*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Judge41300::MergeFrom(const Judge41300& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemcode()) {
      set_itemcode(from.itemcode());
    }
    if (from.has_itemname()) {
      set_itemname(from.itemname());
    }
    if (from.has_max_time()) {
      mutable_max_time()->::OPMessage::judgeItem::MergeFrom(from.max_time());
    }
    if (from.has_max_trigger_distance()) {
      mutable_max_trigger_distance()->::OPMessage::judgeItem::MergeFrom(from.max_trigger_distance());
    }
    if (from.has_max_speed()) {
      mutable_max_speed()->::OPMessage::judgeItem::MergeFrom(from.max_speed());
    }
    if (from.has_judge_mode()) {
      mutable_judge_mode()->::OPMessage::judgeItem::MergeFrom(from.judge_mode());
    }
    if (from.has_vi_41300_start_exam()) {
      mutable_vi_41300_start_exam()->::OPMessage::voiceItem::MergeFrom(from.vi_41300_start_exam());
    }
    if (from.has_vi_41300_end_exam()) {
      mutable_vi_41300_end_exam()->::OPMessage::voiceItem::MergeFrom(from.vi_41300_end_exam());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vi_41300_not_slowdown()) {
      mutable_vi_41300_not_slowdown()->::OPMessage::voiceItem::MergeFrom(from.vi_41300_not_slowdown());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Judge41300::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Judge41300::CopyFrom(const Judge41300& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Judge41300::IsInitialized() const {

  return true;
}

void Judge41300::Swap(Judge41300* other) {
  if (other != this) {
    std::swap(itemcode_, other->itemcode_);
    std::swap(itemname_, other->itemname_);
    std::swap(max_time_, other->max_time_);
    std::swap(max_trigger_distance_, other->max_trigger_distance_);
    std::swap(max_speed_, other->max_speed_);
    std::swap(judge_mode_, other->judge_mode_);
    std::swap(vi_41300_start_exam_, other->vi_41300_start_exam_);
    std::swap(vi_41300_end_exam_, other->vi_41300_end_exam_);
    std::swap(vi_41300_not_slowdown_, other->vi_41300_not_slowdown_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Judge41300::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Judge41300_descriptor_;
  metadata.reflection = Judge41300_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Judge40300::kItemCodeFieldNumber;
const int Judge40300::kItemNameFieldNumber;
const int Judge40300::kMaxTimeFieldNumber;
const int Judge40300::kMinSpeedFieldNumber;
const int Judge40300::kMaxTriggerDistanceFieldNumber;
const int Judge40300::kMaxErrorDistanceFieldNumber;
const int Judge40300::kEnableSteeringFieldNumber;
const int Judge40300::kMaxErrorSteeringAngleFieldNumber;
const int Judge40300::kVi40300StartExamFieldNumber;
const int Judge40300::kVi40300EndExamFieldNumber;
const int Judge40300::kVi40300NotGoStraightFieldNumber;
const int Judge40300::kVi40300NotReachSpeedFieldNumber;
#endif  // !_MSC_VER

Judge40300::Judge40300()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OPMessage.Judge40300)
}

void Judge40300::InitAsDefaultInstance() {
  max_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  min_speed_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  max_trigger_distance_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  max_error_distance_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  enable_steering_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  max_error_steering_angle_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  vi_40300_start_exam_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40300_end_exam_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40300_not_go_straight_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40300_not_reach_speed_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
}

Judge40300::Judge40300(const Judge40300& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OPMessage.Judge40300)
}

void Judge40300::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  itemcode_ = 0;
  itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_time_ = NULL;
  min_speed_ = NULL;
  max_trigger_distance_ = NULL;
  max_error_distance_ = NULL;
  enable_steering_ = NULL;
  max_error_steering_angle_ = NULL;
  vi_40300_start_exam_ = NULL;
  vi_40300_end_exam_ = NULL;
  vi_40300_not_go_straight_ = NULL;
  vi_40300_not_reach_speed_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Judge40300::~Judge40300() {
  // @@protoc_insertion_point(destructor:OPMessage.Judge40300)
  SharedDtor();
}

void Judge40300::SharedDtor() {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (this != default_instance_) {
    delete max_time_;
    delete min_speed_;
    delete max_trigger_distance_;
    delete max_error_distance_;
    delete enable_steering_;
    delete max_error_steering_angle_;
    delete vi_40300_start_exam_;
    delete vi_40300_end_exam_;
    delete vi_40300_not_go_straight_;
    delete vi_40300_not_reach_speed_;
  }
}

void Judge40300::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Judge40300::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Judge40300_descriptor_;
}

const Judge40300& Judge40300::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageKm3Config_2eproto();
  return *default_instance_;
}

Judge40300* Judge40300::default_instance_ = NULL;

Judge40300* Judge40300::New() const {
  return new Judge40300;
}

void Judge40300::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    itemcode_ = 0;
    if (has_itemname()) {
      if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        itemname_->clear();
      }
    }
    if (has_max_time()) {
      if (max_time_ != NULL) max_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_min_speed()) {
      if (min_speed_ != NULL) min_speed_->::OPMessage::judgeItem::Clear();
    }
    if (has_max_trigger_distance()) {
      if (max_trigger_distance_ != NULL) max_trigger_distance_->::OPMessage::judgeItem::Clear();
    }
    if (has_max_error_distance()) {
      if (max_error_distance_ != NULL) max_error_distance_->::OPMessage::judgeItem::Clear();
    }
    if (has_enable_steering()) {
      if (enable_steering_ != NULL) enable_steering_->::OPMessage::judgeItem::Clear();
    }
    if (has_max_error_steering_angle()) {
      if (max_error_steering_angle_ != NULL) max_error_steering_angle_->::OPMessage::judgeItem::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 3840) {
    if (has_vi_40300_start_exam()) {
      if (vi_40300_start_exam_ != NULL) vi_40300_start_exam_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40300_end_exam()) {
      if (vi_40300_end_exam_ != NULL) vi_40300_end_exam_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40300_not_go_straight()) {
      if (vi_40300_not_go_straight_ != NULL) vi_40300_not_go_straight_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40300_not_reach_speed()) {
      if (vi_40300_not_reach_speed_ != NULL) vi_40300_not_reach_speed_->::OPMessage::voiceItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Judge40300::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OPMessage.Judge40300)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemcode_)));
          set_has_itemcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_itemName;
        break;
      }

      // optional string itemName = 2;
      case 2: {
        if (tag == 18) {
         parse_itemName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itemname().data(), this->itemname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "itemname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_max_time;
        break;
      }

      // optional .OPMessage.judgeItem max_time = 3;
      case 3: {
        if (tag == 26) {
         parse_max_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_min_speed;
        break;
      }

      // optional .OPMessage.judgeItem min_speed = 4;
      case 4: {
        if (tag == 34) {
         parse_min_speed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_speed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_max_trigger_distance;
        break;
      }

      // optional .OPMessage.judgeItem max_trigger_distance = 5;
      case 5: {
        if (tag == 42) {
         parse_max_trigger_distance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_trigger_distance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_max_error_distance;
        break;
      }

      // optional .OPMessage.judgeItem max_error_distance = 6;
      case 6: {
        if (tag == 50) {
         parse_max_error_distance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_error_distance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_enable_steering;
        break;
      }

      // optional .OPMessage.judgeItem enable_steering = 7;
      case 7: {
        if (tag == 58) {
         parse_enable_steering:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enable_steering()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_max_error_steering_angle;
        break;
      }

      // optional .OPMessage.judgeItem max_error_steering_angle = 8;
      case 8: {
        if (tag == 66) {
         parse_max_error_steering_angle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_error_steering_angle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_vi_40300_start_exam;
        break;
      }

      // optional .OPMessage.voiceItem vi_40300_start_exam = 9;
      case 9: {
        if (tag == 74) {
         parse_vi_40300_start_exam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40300_start_exam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_vi_40300_end_exam;
        break;
      }

      // optional .OPMessage.voiceItem vi_40300_end_exam = 10;
      case 10: {
        if (tag == 82) {
         parse_vi_40300_end_exam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40300_end_exam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_vi_40300_not_go_straight;
        break;
      }

      // optional .OPMessage.voiceItem vi_40300_not_go_straight = 11;
      case 11: {
        if (tag == 90) {
         parse_vi_40300_not_go_straight:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40300_not_go_straight()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_vi_40300_not_reach_speed;
        break;
      }

      // optional .OPMessage.voiceItem vi_40300_not_reach_speed = 12;
      case 12: {
        if (tag == 98) {
         parse_vi_40300_not_reach_speed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40300_not_reach_speed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OPMessage.Judge40300)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OPMessage.Judge40300)
  return false;
#undef DO_
}

void Judge40300::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OPMessage.Judge40300)
  // optional int32 itemCode = 1;
  if (has_itemcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemcode(), output);
  }

  // optional string itemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->itemname(), output);
  }

  // optional .OPMessage.judgeItem max_time = 3;
  if (has_max_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->max_time(), output);
  }

  // optional .OPMessage.judgeItem min_speed = 4;
  if (has_min_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->min_speed(), output);
  }

  // optional .OPMessage.judgeItem max_trigger_distance = 5;
  if (has_max_trigger_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->max_trigger_distance(), output);
  }

  // optional .OPMessage.judgeItem max_error_distance = 6;
  if (has_max_error_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->max_error_distance(), output);
  }

  // optional .OPMessage.judgeItem enable_steering = 7;
  if (has_enable_steering()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->enable_steering(), output);
  }

  // optional .OPMessage.judgeItem max_error_steering_angle = 8;
  if (has_max_error_steering_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->max_error_steering_angle(), output);
  }

  // optional .OPMessage.voiceItem vi_40300_start_exam = 9;
  if (has_vi_40300_start_exam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->vi_40300_start_exam(), output);
  }

  // optional .OPMessage.voiceItem vi_40300_end_exam = 10;
  if (has_vi_40300_end_exam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->vi_40300_end_exam(), output);
  }

  // optional .OPMessage.voiceItem vi_40300_not_go_straight = 11;
  if (has_vi_40300_not_go_straight()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->vi_40300_not_go_straight(), output);
  }

  // optional .OPMessage.voiceItem vi_40300_not_reach_speed = 12;
  if (has_vi_40300_not_reach_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->vi_40300_not_reach_speed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OPMessage.Judge40300)
}

::google::protobuf::uint8* Judge40300::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OPMessage.Judge40300)
  // optional int32 itemCode = 1;
  if (has_itemcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemcode(), target);
  }

  // optional string itemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->itemname(), target);
  }

  // optional .OPMessage.judgeItem max_time = 3;
  if (has_max_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->max_time(), target);
  }

  // optional .OPMessage.judgeItem min_speed = 4;
  if (has_min_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->min_speed(), target);
  }

  // optional .OPMessage.judgeItem max_trigger_distance = 5;
  if (has_max_trigger_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->max_trigger_distance(), target);
  }

  // optional .OPMessage.judgeItem max_error_distance = 6;
  if (has_max_error_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->max_error_distance(), target);
  }

  // optional .OPMessage.judgeItem enable_steering = 7;
  if (has_enable_steering()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->enable_steering(), target);
  }

  // optional .OPMessage.judgeItem max_error_steering_angle = 8;
  if (has_max_error_steering_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->max_error_steering_angle(), target);
  }

  // optional .OPMessage.voiceItem vi_40300_start_exam = 9;
  if (has_vi_40300_start_exam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->vi_40300_start_exam(), target);
  }

  // optional .OPMessage.voiceItem vi_40300_end_exam = 10;
  if (has_vi_40300_end_exam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->vi_40300_end_exam(), target);
  }

  // optional .OPMessage.voiceItem vi_40300_not_go_straight = 11;
  if (has_vi_40300_not_go_straight()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->vi_40300_not_go_straight(), target);
  }

  // optional .OPMessage.voiceItem vi_40300_not_reach_speed = 12;
  if (has_vi_40300_not_reach_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->vi_40300_not_reach_speed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OPMessage.Judge40300)
  return target;
}

int Judge40300::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemCode = 1;
    if (has_itemcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemcode());
    }

    // optional string itemName = 2;
    if (has_itemname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemname());
    }

    // optional .OPMessage.judgeItem max_time = 3;
    if (has_max_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_time());
    }

    // optional .OPMessage.judgeItem min_speed = 4;
    if (has_min_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->min_speed());
    }

    // optional .OPMessage.judgeItem max_trigger_distance = 5;
    if (has_max_trigger_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_trigger_distance());
    }

    // optional .OPMessage.judgeItem max_error_distance = 6;
    if (has_max_error_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_error_distance());
    }

    // optional .OPMessage.judgeItem enable_steering = 7;
    if (has_enable_steering()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->enable_steering());
    }

    // optional .OPMessage.judgeItem max_error_steering_angle = 8;
    if (has_max_error_steering_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_error_steering_angle());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .OPMessage.voiceItem vi_40300_start_exam = 9;
    if (has_vi_40300_start_exam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40300_start_exam());
    }

    // optional .OPMessage.voiceItem vi_40300_end_exam = 10;
    if (has_vi_40300_end_exam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40300_end_exam());
    }

    // optional .OPMessage.voiceItem vi_40300_not_go_straight = 11;
    if (has_vi_40300_not_go_straight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40300_not_go_straight());
    }

    // optional .OPMessage.voiceItem vi_40300_not_reach_speed = 12;
    if (has_vi_40300_not_reach_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40300_not_reach_speed());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Judge40300::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Judge40300* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Judge40300*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Judge40300::MergeFrom(const Judge40300& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemcode()) {
      set_itemcode(from.itemcode());
    }
    if (from.has_itemname()) {
      set_itemname(from.itemname());
    }
    if (from.has_max_time()) {
      mutable_max_time()->::OPMessage::judgeItem::MergeFrom(from.max_time());
    }
    if (from.has_min_speed()) {
      mutable_min_speed()->::OPMessage::judgeItem::MergeFrom(from.min_speed());
    }
    if (from.has_max_trigger_distance()) {
      mutable_max_trigger_distance()->::OPMessage::judgeItem::MergeFrom(from.max_trigger_distance());
    }
    if (from.has_max_error_distance()) {
      mutable_max_error_distance()->::OPMessage::judgeItem::MergeFrom(from.max_error_distance());
    }
    if (from.has_enable_steering()) {
      mutable_enable_steering()->::OPMessage::judgeItem::MergeFrom(from.enable_steering());
    }
    if (from.has_max_error_steering_angle()) {
      mutable_max_error_steering_angle()->::OPMessage::judgeItem::MergeFrom(from.max_error_steering_angle());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vi_40300_start_exam()) {
      mutable_vi_40300_start_exam()->::OPMessage::voiceItem::MergeFrom(from.vi_40300_start_exam());
    }
    if (from.has_vi_40300_end_exam()) {
      mutable_vi_40300_end_exam()->::OPMessage::voiceItem::MergeFrom(from.vi_40300_end_exam());
    }
    if (from.has_vi_40300_not_go_straight()) {
      mutable_vi_40300_not_go_straight()->::OPMessage::voiceItem::MergeFrom(from.vi_40300_not_go_straight());
    }
    if (from.has_vi_40300_not_reach_speed()) {
      mutable_vi_40300_not_reach_speed()->::OPMessage::voiceItem::MergeFrom(from.vi_40300_not_reach_speed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Judge40300::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Judge40300::CopyFrom(const Judge40300& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Judge40300::IsInitialized() const {

  return true;
}

void Judge40300::Swap(Judge40300* other) {
  if (other != this) {
    std::swap(itemcode_, other->itemcode_);
    std::swap(itemname_, other->itemname_);
    std::swap(max_time_, other->max_time_);
    std::swap(min_speed_, other->min_speed_);
    std::swap(max_trigger_distance_, other->max_trigger_distance_);
    std::swap(max_error_distance_, other->max_error_distance_);
    std::swap(enable_steering_, other->enable_steering_);
    std::swap(max_error_steering_angle_, other->max_error_steering_angle_);
    std::swap(vi_40300_start_exam_, other->vi_40300_start_exam_);
    std::swap(vi_40300_end_exam_, other->vi_40300_end_exam_);
    std::swap(vi_40300_not_go_straight_, other->vi_40300_not_go_straight_);
    std::swap(vi_40300_not_reach_speed_, other->vi_40300_not_reach_speed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Judge40300::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Judge40300_descriptor_;
  metadata.reflection = Judge40300_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Judge40600::kItemCodeFieldNumber;
const int Judge40600::kItemNameFieldNumber;
const int Judge40600::kMaxTimeFieldNumber;
const int Judge40600::kMaxTriggerDistanceFieldNumber;
const int Judge40600::kMinTurnSignalTimeFieldNumber;
const int Judge40600::kFinishModeFieldNumber;
const int Judge40600::kGetOffCloseDoorTimeFieldNumber;
const int Judge40600::kSidelineCheckSensorFieldNumber;
const int Judge40600::kVi40600StartExamFieldNumber;
const int Judge40600::kVi40600EndExamFieldNumber;
const int Judge40600::kVi40600NotFinishFieldNumber;
const int Judge40600::kVi40600NotHandbrakeFieldNumber;
const int Judge40600::kVi40600NotCloseDoorFieldNumber;
const int Judge40600::kVi40600NotFlameoutFieldNumber;
const int Judge40600::kVi40600TurnLampUseErrorFieldNumber;
const int Judge40600::kVi40600TurnLampNotUseFieldNumber;
const int Judge40600::kVi40600HandbrakeFootbrakeOrderErrorFieldNumber;
#endif  // !_MSC_VER

Judge40600::Judge40600()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OPMessage.Judge40600)
}

void Judge40600::InitAsDefaultInstance() {
  max_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  max_trigger_distance_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  min_turn_signal_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  finish_mode_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  get_off_close_door_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  sideline_check_sensor_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  vi_40600_start_exam_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40600_end_exam_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40600_not_finish_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40600_not_handbrake_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40600_not_close_door_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40600_not_flameout_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40600_turn_lamp_use_error_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40600_turn_lamp_not_use_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40600_handbrake_footbrake_order_error_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
}

Judge40600::Judge40600(const Judge40600& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OPMessage.Judge40600)
}

void Judge40600::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  itemcode_ = 0;
  itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_time_ = NULL;
  max_trigger_distance_ = NULL;
  min_turn_signal_time_ = NULL;
  finish_mode_ = NULL;
  get_off_close_door_time_ = NULL;
  sideline_check_sensor_ = NULL;
  vi_40600_start_exam_ = NULL;
  vi_40600_end_exam_ = NULL;
  vi_40600_not_finish_ = NULL;
  vi_40600_not_handbrake_ = NULL;
  vi_40600_not_close_door_ = NULL;
  vi_40600_not_flameout_ = NULL;
  vi_40600_turn_lamp_use_error_ = NULL;
  vi_40600_turn_lamp_not_use_ = NULL;
  vi_40600_handbrake_footbrake_order_error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Judge40600::~Judge40600() {
  // @@protoc_insertion_point(destructor:OPMessage.Judge40600)
  SharedDtor();
}

void Judge40600::SharedDtor() {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (this != default_instance_) {
    delete max_time_;
    delete max_trigger_distance_;
    delete min_turn_signal_time_;
    delete finish_mode_;
    delete get_off_close_door_time_;
    delete sideline_check_sensor_;
    delete vi_40600_start_exam_;
    delete vi_40600_end_exam_;
    delete vi_40600_not_finish_;
    delete vi_40600_not_handbrake_;
    delete vi_40600_not_close_door_;
    delete vi_40600_not_flameout_;
    delete vi_40600_turn_lamp_use_error_;
    delete vi_40600_turn_lamp_not_use_;
    delete vi_40600_handbrake_footbrake_order_error_;
  }
}

void Judge40600::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Judge40600::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Judge40600_descriptor_;
}

const Judge40600& Judge40600::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageKm3Config_2eproto();
  return *default_instance_;
}

Judge40600* Judge40600::default_instance_ = NULL;

Judge40600* Judge40600::New() const {
  return new Judge40600;
}

void Judge40600::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    itemcode_ = 0;
    if (has_itemname()) {
      if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        itemname_->clear();
      }
    }
    if (has_max_time()) {
      if (max_time_ != NULL) max_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_max_trigger_distance()) {
      if (max_trigger_distance_ != NULL) max_trigger_distance_->::OPMessage::judgeItem::Clear();
    }
    if (has_min_turn_signal_time()) {
      if (min_turn_signal_time_ != NULL) min_turn_signal_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_finish_mode()) {
      if (finish_mode_ != NULL) finish_mode_->::OPMessage::judgeItem::Clear();
    }
    if (has_get_off_close_door_time()) {
      if (get_off_close_door_time_ != NULL) get_off_close_door_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_sideline_check_sensor()) {
      if (sideline_check_sensor_ != NULL) sideline_check_sensor_->::OPMessage::judgeItem::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_vi_40600_start_exam()) {
      if (vi_40600_start_exam_ != NULL) vi_40600_start_exam_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40600_end_exam()) {
      if (vi_40600_end_exam_ != NULL) vi_40600_end_exam_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40600_not_finish()) {
      if (vi_40600_not_finish_ != NULL) vi_40600_not_finish_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40600_not_handbrake()) {
      if (vi_40600_not_handbrake_ != NULL) vi_40600_not_handbrake_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40600_not_close_door()) {
      if (vi_40600_not_close_door_ != NULL) vi_40600_not_close_door_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40600_not_flameout()) {
      if (vi_40600_not_flameout_ != NULL) vi_40600_not_flameout_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40600_turn_lamp_use_error()) {
      if (vi_40600_turn_lamp_use_error_ != NULL) vi_40600_turn_lamp_use_error_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40600_turn_lamp_not_use()) {
      if (vi_40600_turn_lamp_not_use_ != NULL) vi_40600_turn_lamp_not_use_->::OPMessage::voiceItem::Clear();
    }
  }
  if (has_vi_40600_handbrake_footbrake_order_error()) {
    if (vi_40600_handbrake_footbrake_order_error_ != NULL) vi_40600_handbrake_footbrake_order_error_->::OPMessage::voiceItem::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Judge40600::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OPMessage.Judge40600)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemcode_)));
          set_has_itemcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_itemName;
        break;
      }

      // optional string itemName = 2;
      case 2: {
        if (tag == 18) {
         parse_itemName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itemname().data(), this->itemname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "itemname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_max_time;
        break;
      }

      // optional .OPMessage.judgeItem max_time = 3;
      case 3: {
        if (tag == 26) {
         parse_max_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_max_trigger_distance;
        break;
      }

      // optional .OPMessage.judgeItem max_trigger_distance = 4;
      case 4: {
        if (tag == 34) {
         parse_max_trigger_distance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_trigger_distance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_min_turn_signal_time;
        break;
      }

      // optional .OPMessage.judgeItem min_turn_signal_time = 5;
      case 5: {
        if (tag == 42) {
         parse_min_turn_signal_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_turn_signal_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_finish_mode;
        break;
      }

      // optional .OPMessage.judgeItem finish_mode = 6;
      case 6: {
        if (tag == 50) {
         parse_finish_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_finish_mode()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_get_off_close_door_time;
        break;
      }

      // optional .OPMessage.judgeItem get_off_close_door_time = 7;
      case 7: {
        if (tag == 58) {
         parse_get_off_close_door_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_off_close_door_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_sideline_check_sensor;
        break;
      }

      // optional .OPMessage.judgeItem sideline_check_sensor = 8;
      case 8: {
        if (tag == 66) {
         parse_sideline_check_sensor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sideline_check_sensor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_vi_40600_start_exam;
        break;
      }

      // optional .OPMessage.voiceItem vi_40600_start_exam = 9;
      case 9: {
        if (tag == 74) {
         parse_vi_40600_start_exam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40600_start_exam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_vi_40600_end_exam;
        break;
      }

      // optional .OPMessage.voiceItem vi_40600_end_exam = 10;
      case 10: {
        if (tag == 82) {
         parse_vi_40600_end_exam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40600_end_exam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_vi_40600_not_finish;
        break;
      }

      // optional .OPMessage.voiceItem vi_40600_not_finish = 11;
      case 11: {
        if (tag == 90) {
         parse_vi_40600_not_finish:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40600_not_finish()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_vi_40600_not_handbrake;
        break;
      }

      // optional .OPMessage.voiceItem vi_40600_not_handbrake = 12;
      case 12: {
        if (tag == 98) {
         parse_vi_40600_not_handbrake:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40600_not_handbrake()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_vi_40600_not_close_door;
        break;
      }

      // optional .OPMessage.voiceItem vi_40600_not_close_door = 13;
      case 13: {
        if (tag == 106) {
         parse_vi_40600_not_close_door:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40600_not_close_door()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_vi_40600_not_flameout;
        break;
      }

      // optional .OPMessage.voiceItem vi_40600_not_flameout = 14;
      case 14: {
        if (tag == 114) {
         parse_vi_40600_not_flameout:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40600_not_flameout()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_vi_40600_turn_lamp_use_error;
        break;
      }

      // optional .OPMessage.voiceItem vi_40600_turn_lamp_use_error = 15;
      case 15: {
        if (tag == 122) {
         parse_vi_40600_turn_lamp_use_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40600_turn_lamp_use_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_vi_40600_turn_lamp_not_use;
        break;
      }

      // optional .OPMessage.voiceItem vi_40600_turn_lamp_not_use = 16;
      case 16: {
        if (tag == 130) {
         parse_vi_40600_turn_lamp_not_use:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40600_turn_lamp_not_use()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_vi_40600_handbrake_footbrake_order_error;
        break;
      }

      // optional .OPMessage.voiceItem vi_40600_handbrake_footbrake_order_error = 17;
      case 17: {
        if (tag == 138) {
         parse_vi_40600_handbrake_footbrake_order_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40600_handbrake_footbrake_order_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OPMessage.Judge40600)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OPMessage.Judge40600)
  return false;
#undef DO_
}

void Judge40600::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OPMessage.Judge40600)
  // optional int32 itemCode = 1;
  if (has_itemcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemcode(), output);
  }

  // optional string itemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->itemname(), output);
  }

  // optional .OPMessage.judgeItem max_time = 3;
  if (has_max_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->max_time(), output);
  }

  // optional .OPMessage.judgeItem max_trigger_distance = 4;
  if (has_max_trigger_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->max_trigger_distance(), output);
  }

  // optional .OPMessage.judgeItem min_turn_signal_time = 5;
  if (has_min_turn_signal_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->min_turn_signal_time(), output);
  }

  // optional .OPMessage.judgeItem finish_mode = 6;
  if (has_finish_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->finish_mode(), output);
  }

  // optional .OPMessage.judgeItem get_off_close_door_time = 7;
  if (has_get_off_close_door_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->get_off_close_door_time(), output);
  }

  // optional .OPMessage.judgeItem sideline_check_sensor = 8;
  if (has_sideline_check_sensor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->sideline_check_sensor(), output);
  }

  // optional .OPMessage.voiceItem vi_40600_start_exam = 9;
  if (has_vi_40600_start_exam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->vi_40600_start_exam(), output);
  }

  // optional .OPMessage.voiceItem vi_40600_end_exam = 10;
  if (has_vi_40600_end_exam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->vi_40600_end_exam(), output);
  }

  // optional .OPMessage.voiceItem vi_40600_not_finish = 11;
  if (has_vi_40600_not_finish()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->vi_40600_not_finish(), output);
  }

  // optional .OPMessage.voiceItem vi_40600_not_handbrake = 12;
  if (has_vi_40600_not_handbrake()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->vi_40600_not_handbrake(), output);
  }

  // optional .OPMessage.voiceItem vi_40600_not_close_door = 13;
  if (has_vi_40600_not_close_door()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->vi_40600_not_close_door(), output);
  }

  // optional .OPMessage.voiceItem vi_40600_not_flameout = 14;
  if (has_vi_40600_not_flameout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->vi_40600_not_flameout(), output);
  }

  // optional .OPMessage.voiceItem vi_40600_turn_lamp_use_error = 15;
  if (has_vi_40600_turn_lamp_use_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->vi_40600_turn_lamp_use_error(), output);
  }

  // optional .OPMessage.voiceItem vi_40600_turn_lamp_not_use = 16;
  if (has_vi_40600_turn_lamp_not_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->vi_40600_turn_lamp_not_use(), output);
  }

  // optional .OPMessage.voiceItem vi_40600_handbrake_footbrake_order_error = 17;
  if (has_vi_40600_handbrake_footbrake_order_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->vi_40600_handbrake_footbrake_order_error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OPMessage.Judge40600)
}

::google::protobuf::uint8* Judge40600::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OPMessage.Judge40600)
  // optional int32 itemCode = 1;
  if (has_itemcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemcode(), target);
  }

  // optional string itemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->itemname(), target);
  }

  // optional .OPMessage.judgeItem max_time = 3;
  if (has_max_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->max_time(), target);
  }

  // optional .OPMessage.judgeItem max_trigger_distance = 4;
  if (has_max_trigger_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->max_trigger_distance(), target);
  }

  // optional .OPMessage.judgeItem min_turn_signal_time = 5;
  if (has_min_turn_signal_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->min_turn_signal_time(), target);
  }

  // optional .OPMessage.judgeItem finish_mode = 6;
  if (has_finish_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->finish_mode(), target);
  }

  // optional .OPMessage.judgeItem get_off_close_door_time = 7;
  if (has_get_off_close_door_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->get_off_close_door_time(), target);
  }

  // optional .OPMessage.judgeItem sideline_check_sensor = 8;
  if (has_sideline_check_sensor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->sideline_check_sensor(), target);
  }

  // optional .OPMessage.voiceItem vi_40600_start_exam = 9;
  if (has_vi_40600_start_exam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->vi_40600_start_exam(), target);
  }

  // optional .OPMessage.voiceItem vi_40600_end_exam = 10;
  if (has_vi_40600_end_exam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->vi_40600_end_exam(), target);
  }

  // optional .OPMessage.voiceItem vi_40600_not_finish = 11;
  if (has_vi_40600_not_finish()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->vi_40600_not_finish(), target);
  }

  // optional .OPMessage.voiceItem vi_40600_not_handbrake = 12;
  if (has_vi_40600_not_handbrake()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->vi_40600_not_handbrake(), target);
  }

  // optional .OPMessage.voiceItem vi_40600_not_close_door = 13;
  if (has_vi_40600_not_close_door()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->vi_40600_not_close_door(), target);
  }

  // optional .OPMessage.voiceItem vi_40600_not_flameout = 14;
  if (has_vi_40600_not_flameout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->vi_40600_not_flameout(), target);
  }

  // optional .OPMessage.voiceItem vi_40600_turn_lamp_use_error = 15;
  if (has_vi_40600_turn_lamp_use_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->vi_40600_turn_lamp_use_error(), target);
  }

  // optional .OPMessage.voiceItem vi_40600_turn_lamp_not_use = 16;
  if (has_vi_40600_turn_lamp_not_use()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->vi_40600_turn_lamp_not_use(), target);
  }

  // optional .OPMessage.voiceItem vi_40600_handbrake_footbrake_order_error = 17;
  if (has_vi_40600_handbrake_footbrake_order_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->vi_40600_handbrake_footbrake_order_error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OPMessage.Judge40600)
  return target;
}

int Judge40600::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemCode = 1;
    if (has_itemcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemcode());
    }

    // optional string itemName = 2;
    if (has_itemname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemname());
    }

    // optional .OPMessage.judgeItem max_time = 3;
    if (has_max_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_time());
    }

    // optional .OPMessage.judgeItem max_trigger_distance = 4;
    if (has_max_trigger_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_trigger_distance());
    }

    // optional .OPMessage.judgeItem min_turn_signal_time = 5;
    if (has_min_turn_signal_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->min_turn_signal_time());
    }

    // optional .OPMessage.judgeItem finish_mode = 6;
    if (has_finish_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->finish_mode());
    }

    // optional .OPMessage.judgeItem get_off_close_door_time = 7;
    if (has_get_off_close_door_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_off_close_door_time());
    }

    // optional .OPMessage.judgeItem sideline_check_sensor = 8;
    if (has_sideline_check_sensor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sideline_check_sensor());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .OPMessage.voiceItem vi_40600_start_exam = 9;
    if (has_vi_40600_start_exam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40600_start_exam());
    }

    // optional .OPMessage.voiceItem vi_40600_end_exam = 10;
    if (has_vi_40600_end_exam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40600_end_exam());
    }

    // optional .OPMessage.voiceItem vi_40600_not_finish = 11;
    if (has_vi_40600_not_finish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40600_not_finish());
    }

    // optional .OPMessage.voiceItem vi_40600_not_handbrake = 12;
    if (has_vi_40600_not_handbrake()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40600_not_handbrake());
    }

    // optional .OPMessage.voiceItem vi_40600_not_close_door = 13;
    if (has_vi_40600_not_close_door()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40600_not_close_door());
    }

    // optional .OPMessage.voiceItem vi_40600_not_flameout = 14;
    if (has_vi_40600_not_flameout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40600_not_flameout());
    }

    // optional .OPMessage.voiceItem vi_40600_turn_lamp_use_error = 15;
    if (has_vi_40600_turn_lamp_use_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40600_turn_lamp_use_error());
    }

    // optional .OPMessage.voiceItem vi_40600_turn_lamp_not_use = 16;
    if (has_vi_40600_turn_lamp_not_use()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40600_turn_lamp_not_use());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .OPMessage.voiceItem vi_40600_handbrake_footbrake_order_error = 17;
    if (has_vi_40600_handbrake_footbrake_order_error()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40600_handbrake_footbrake_order_error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Judge40600::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Judge40600* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Judge40600*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Judge40600::MergeFrom(const Judge40600& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemcode()) {
      set_itemcode(from.itemcode());
    }
    if (from.has_itemname()) {
      set_itemname(from.itemname());
    }
    if (from.has_max_time()) {
      mutable_max_time()->::OPMessage::judgeItem::MergeFrom(from.max_time());
    }
    if (from.has_max_trigger_distance()) {
      mutable_max_trigger_distance()->::OPMessage::judgeItem::MergeFrom(from.max_trigger_distance());
    }
    if (from.has_min_turn_signal_time()) {
      mutable_min_turn_signal_time()->::OPMessage::judgeItem::MergeFrom(from.min_turn_signal_time());
    }
    if (from.has_finish_mode()) {
      mutable_finish_mode()->::OPMessage::judgeItem::MergeFrom(from.finish_mode());
    }
    if (from.has_get_off_close_door_time()) {
      mutable_get_off_close_door_time()->::OPMessage::judgeItem::MergeFrom(from.get_off_close_door_time());
    }
    if (from.has_sideline_check_sensor()) {
      mutable_sideline_check_sensor()->::OPMessage::judgeItem::MergeFrom(from.sideline_check_sensor());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vi_40600_start_exam()) {
      mutable_vi_40600_start_exam()->::OPMessage::voiceItem::MergeFrom(from.vi_40600_start_exam());
    }
    if (from.has_vi_40600_end_exam()) {
      mutable_vi_40600_end_exam()->::OPMessage::voiceItem::MergeFrom(from.vi_40600_end_exam());
    }
    if (from.has_vi_40600_not_finish()) {
      mutable_vi_40600_not_finish()->::OPMessage::voiceItem::MergeFrom(from.vi_40600_not_finish());
    }
    if (from.has_vi_40600_not_handbrake()) {
      mutable_vi_40600_not_handbrake()->::OPMessage::voiceItem::MergeFrom(from.vi_40600_not_handbrake());
    }
    if (from.has_vi_40600_not_close_door()) {
      mutable_vi_40600_not_close_door()->::OPMessage::voiceItem::MergeFrom(from.vi_40600_not_close_door());
    }
    if (from.has_vi_40600_not_flameout()) {
      mutable_vi_40600_not_flameout()->::OPMessage::voiceItem::MergeFrom(from.vi_40600_not_flameout());
    }
    if (from.has_vi_40600_turn_lamp_use_error()) {
      mutable_vi_40600_turn_lamp_use_error()->::OPMessage::voiceItem::MergeFrom(from.vi_40600_turn_lamp_use_error());
    }
    if (from.has_vi_40600_turn_lamp_not_use()) {
      mutable_vi_40600_turn_lamp_not_use()->::OPMessage::voiceItem::MergeFrom(from.vi_40600_turn_lamp_not_use());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_vi_40600_handbrake_footbrake_order_error()) {
      mutable_vi_40600_handbrake_footbrake_order_error()->::OPMessage::voiceItem::MergeFrom(from.vi_40600_handbrake_footbrake_order_error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Judge40600::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Judge40600::CopyFrom(const Judge40600& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Judge40600::IsInitialized() const {

  return true;
}

void Judge40600::Swap(Judge40600* other) {
  if (other != this) {
    std::swap(itemcode_, other->itemcode_);
    std::swap(itemname_, other->itemname_);
    std::swap(max_time_, other->max_time_);
    std::swap(max_trigger_distance_, other->max_trigger_distance_);
    std::swap(min_turn_signal_time_, other->min_turn_signal_time_);
    std::swap(finish_mode_, other->finish_mode_);
    std::swap(get_off_close_door_time_, other->get_off_close_door_time_);
    std::swap(sideline_check_sensor_, other->sideline_check_sensor_);
    std::swap(vi_40600_start_exam_, other->vi_40600_start_exam_);
    std::swap(vi_40600_end_exam_, other->vi_40600_end_exam_);
    std::swap(vi_40600_not_finish_, other->vi_40600_not_finish_);
    std::swap(vi_40600_not_handbrake_, other->vi_40600_not_handbrake_);
    std::swap(vi_40600_not_close_door_, other->vi_40600_not_close_door_);
    std::swap(vi_40600_not_flameout_, other->vi_40600_not_flameout_);
    std::swap(vi_40600_turn_lamp_use_error_, other->vi_40600_turn_lamp_use_error_);
    std::swap(vi_40600_turn_lamp_not_use_, other->vi_40600_turn_lamp_not_use_);
    std::swap(vi_40600_handbrake_footbrake_order_error_, other->vi_40600_handbrake_footbrake_order_error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Judge40600::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Judge40600_descriptor_;
  metadata.reflection = Judge40600_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Judge40601::kItemCodeFieldNumber;
const int Judge40601::kItemNameFieldNumber;
const int Judge40601::kMaxTimeFieldNumber;
const int Judge40601::kMaxTriggerDistanceFieldNumber;
const int Judge40601::kMinTurnSignalTimeFieldNumber;
const int Judge40601::kFinishModeFieldNumber;
const int Judge40601::kMinHornTimeFieldNumber;
const int Judge40601::kSidelineCheckSensorFieldNumber;
const int Judge40601::kVi40600SidelineErrorFieldNumber;
const int Judge40601::kVi40601StartExamFieldNumber;
const int Judge40601::kVi40601EndExamFieldNumber;
const int Judge40601::kVi40601StartDrivingFieldNumber;
const int Judge40601::kVi40601FinishDrivingFieldNumber;
const int Judge40601::kVi40601NotFinishFieldNumber;
const int Judge40601::kVi40601TurnLampUseErrorFieldNumber;
const int Judge40601::kVi40601TurnLampNotUseFieldNumber;
const int Judge40601::kVi40601NotHandbrakeFieldNumber;
const int Judge40601::kVi40601HandbrakeFootbrakeOrderErrorFieldNumber;
const int Judge40601::kVi40601HornNotUseFieldNumber;
const int Judge40601::kVi40601SidelineErrorFieldNumber;
#endif  // !_MSC_VER

Judge40601::Judge40601()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OPMessage.Judge40601)
}

void Judge40601::InitAsDefaultInstance() {
  max_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  max_trigger_distance_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  min_turn_signal_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  finish_mode_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  min_horn_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  sideline_check_sensor_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  vi_40600_sideline_error_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40601_start_exam_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40601_end_exam_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40601_start_driving_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40601_finish_driving_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40601_not_finish_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40601_turn_lamp_use_error_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40601_turn_lamp_not_use_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40601_not_handbrake_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40601_handbrake_footbrake_order_error_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40601_horn_not_use_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_40601_sideline_error_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
}

Judge40601::Judge40601(const Judge40601& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OPMessage.Judge40601)
}

void Judge40601::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  itemcode_ = 0;
  itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_time_ = NULL;
  max_trigger_distance_ = NULL;
  min_turn_signal_time_ = NULL;
  finish_mode_ = NULL;
  min_horn_time_ = NULL;
  sideline_check_sensor_ = NULL;
  vi_40600_sideline_error_ = NULL;
  vi_40601_start_exam_ = NULL;
  vi_40601_end_exam_ = NULL;
  vi_40601_start_driving_ = NULL;
  vi_40601_finish_driving_ = NULL;
  vi_40601_not_finish_ = NULL;
  vi_40601_turn_lamp_use_error_ = NULL;
  vi_40601_turn_lamp_not_use_ = NULL;
  vi_40601_not_handbrake_ = NULL;
  vi_40601_handbrake_footbrake_order_error_ = NULL;
  vi_40601_horn_not_use_ = NULL;
  vi_40601_sideline_error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Judge40601::~Judge40601() {
  // @@protoc_insertion_point(destructor:OPMessage.Judge40601)
  SharedDtor();
}

void Judge40601::SharedDtor() {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (this != default_instance_) {
    delete max_time_;
    delete max_trigger_distance_;
    delete min_turn_signal_time_;
    delete finish_mode_;
    delete min_horn_time_;
    delete sideline_check_sensor_;
    delete vi_40600_sideline_error_;
    delete vi_40601_start_exam_;
    delete vi_40601_end_exam_;
    delete vi_40601_start_driving_;
    delete vi_40601_finish_driving_;
    delete vi_40601_not_finish_;
    delete vi_40601_turn_lamp_use_error_;
    delete vi_40601_turn_lamp_not_use_;
    delete vi_40601_not_handbrake_;
    delete vi_40601_handbrake_footbrake_order_error_;
    delete vi_40601_horn_not_use_;
    delete vi_40601_sideline_error_;
  }
}

void Judge40601::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Judge40601::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Judge40601_descriptor_;
}

const Judge40601& Judge40601::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageKm3Config_2eproto();
  return *default_instance_;
}

Judge40601* Judge40601::default_instance_ = NULL;

Judge40601* Judge40601::New() const {
  return new Judge40601;
}

void Judge40601::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    itemcode_ = 0;
    if (has_itemname()) {
      if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        itemname_->clear();
      }
    }
    if (has_max_time()) {
      if (max_time_ != NULL) max_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_max_trigger_distance()) {
      if (max_trigger_distance_ != NULL) max_trigger_distance_->::OPMessage::judgeItem::Clear();
    }
    if (has_min_turn_signal_time()) {
      if (min_turn_signal_time_ != NULL) min_turn_signal_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_finish_mode()) {
      if (finish_mode_ != NULL) finish_mode_->::OPMessage::judgeItem::Clear();
    }
    if (has_min_horn_time()) {
      if (min_horn_time_ != NULL) min_horn_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_sideline_check_sensor()) {
      if (sideline_check_sensor_ != NULL) sideline_check_sensor_->::OPMessage::judgeItem::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_vi_40600_sideline_error()) {
      if (vi_40600_sideline_error_ != NULL) vi_40600_sideline_error_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40601_start_exam()) {
      if (vi_40601_start_exam_ != NULL) vi_40601_start_exam_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40601_end_exam()) {
      if (vi_40601_end_exam_ != NULL) vi_40601_end_exam_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40601_start_driving()) {
      if (vi_40601_start_driving_ != NULL) vi_40601_start_driving_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40601_finish_driving()) {
      if (vi_40601_finish_driving_ != NULL) vi_40601_finish_driving_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40601_not_finish()) {
      if (vi_40601_not_finish_ != NULL) vi_40601_not_finish_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40601_turn_lamp_use_error()) {
      if (vi_40601_turn_lamp_use_error_ != NULL) vi_40601_turn_lamp_use_error_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40601_turn_lamp_not_use()) {
      if (vi_40601_turn_lamp_not_use_ != NULL) vi_40601_turn_lamp_not_use_->::OPMessage::voiceItem::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 983040) {
    if (has_vi_40601_not_handbrake()) {
      if (vi_40601_not_handbrake_ != NULL) vi_40601_not_handbrake_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40601_handbrake_footbrake_order_error()) {
      if (vi_40601_handbrake_footbrake_order_error_ != NULL) vi_40601_handbrake_footbrake_order_error_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40601_horn_not_use()) {
      if (vi_40601_horn_not_use_ != NULL) vi_40601_horn_not_use_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_40601_sideline_error()) {
      if (vi_40601_sideline_error_ != NULL) vi_40601_sideline_error_->::OPMessage::voiceItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Judge40601::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OPMessage.Judge40601)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemcode_)));
          set_has_itemcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_itemName;
        break;
      }

      // optional string itemName = 2;
      case 2: {
        if (tag == 18) {
         parse_itemName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itemname().data(), this->itemname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "itemname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_max_time;
        break;
      }

      // optional .OPMessage.judgeItem max_time = 3;
      case 3: {
        if (tag == 26) {
         parse_max_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_max_trigger_distance;
        break;
      }

      // optional .OPMessage.judgeItem max_trigger_distance = 4;
      case 4: {
        if (tag == 34) {
         parse_max_trigger_distance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_trigger_distance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_min_turn_signal_time;
        break;
      }

      // optional .OPMessage.judgeItem min_turn_signal_time = 5;
      case 5: {
        if (tag == 42) {
         parse_min_turn_signal_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_turn_signal_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_finish_mode;
        break;
      }

      // optional .OPMessage.judgeItem finish_mode = 6;
      case 6: {
        if (tag == 50) {
         parse_finish_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_finish_mode()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_min_horn_time;
        break;
      }

      // optional .OPMessage.judgeItem min_horn_time = 7;
      case 7: {
        if (tag == 58) {
         parse_min_horn_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_horn_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_sideline_check_sensor;
        break;
      }

      // optional .OPMessage.judgeItem sideline_check_sensor = 8;
      case 8: {
        if (tag == 66) {
         parse_sideline_check_sensor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sideline_check_sensor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_vi_40600_sideline_error;
        break;
      }

      // optional .OPMessage.voiceItem vi_40600_sideline_error = 9;
      case 9: {
        if (tag == 74) {
         parse_vi_40600_sideline_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40600_sideline_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_vi_40601_start_exam;
        break;
      }

      // optional .OPMessage.voiceItem vi_40601_start_exam = 10;
      case 10: {
        if (tag == 82) {
         parse_vi_40601_start_exam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40601_start_exam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_vi_40601_end_exam;
        break;
      }

      // optional .OPMessage.voiceItem vi_40601_end_exam = 11;
      case 11: {
        if (tag == 90) {
         parse_vi_40601_end_exam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40601_end_exam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_vi_40601_start_driving;
        break;
      }

      // optional .OPMessage.voiceItem vi_40601_start_driving = 12;
      case 12: {
        if (tag == 98) {
         parse_vi_40601_start_driving:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40601_start_driving()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_vi_40601_finish_driving;
        break;
      }

      // optional .OPMessage.voiceItem vi_40601_finish_driving = 13;
      case 13: {
        if (tag == 106) {
         parse_vi_40601_finish_driving:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40601_finish_driving()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_vi_40601_not_finish;
        break;
      }

      // optional .OPMessage.voiceItem vi_40601_not_finish = 14;
      case 14: {
        if (tag == 114) {
         parse_vi_40601_not_finish:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40601_not_finish()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_vi_40601_turn_lamp_use_error;
        break;
      }

      // optional .OPMessage.voiceItem vi_40601_turn_lamp_use_error = 15;
      case 15: {
        if (tag == 122) {
         parse_vi_40601_turn_lamp_use_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40601_turn_lamp_use_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_vi_40601_turn_lamp_not_use;
        break;
      }

      // optional .OPMessage.voiceItem vi_40601_turn_lamp_not_use = 16;
      case 16: {
        if (tag == 130) {
         parse_vi_40601_turn_lamp_not_use:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40601_turn_lamp_not_use()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_vi_40601_not_handbrake;
        break;
      }

      // optional .OPMessage.voiceItem vi_40601_not_handbrake = 17;
      case 17: {
        if (tag == 138) {
         parse_vi_40601_not_handbrake:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40601_not_handbrake()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_vi_40601_handbrake_footbrake_order_error;
        break;
      }

      // optional .OPMessage.voiceItem vi_40601_handbrake_footbrake_order_error = 18;
      case 18: {
        if (tag == 146) {
         parse_vi_40601_handbrake_footbrake_order_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40601_handbrake_footbrake_order_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_vi_40601_horn_not_use;
        break;
      }

      // optional .OPMessage.voiceItem vi_40601_horn_not_use = 19;
      case 19: {
        if (tag == 154) {
         parse_vi_40601_horn_not_use:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40601_horn_not_use()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_vi_40601_sideline_error;
        break;
      }

      // optional .OPMessage.voiceItem vi_40601_sideline_error = 20;
      case 20: {
        if (tag == 162) {
         parse_vi_40601_sideline_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_40601_sideline_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OPMessage.Judge40601)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OPMessage.Judge40601)
  return false;
#undef DO_
}

void Judge40601::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OPMessage.Judge40601)
  // optional int32 itemCode = 1;
  if (has_itemcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemcode(), output);
  }

  // optional string itemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->itemname(), output);
  }

  // optional .OPMessage.judgeItem max_time = 3;
  if (has_max_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->max_time(), output);
  }

  // optional .OPMessage.judgeItem max_trigger_distance = 4;
  if (has_max_trigger_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->max_trigger_distance(), output);
  }

  // optional .OPMessage.judgeItem min_turn_signal_time = 5;
  if (has_min_turn_signal_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->min_turn_signal_time(), output);
  }

  // optional .OPMessage.judgeItem finish_mode = 6;
  if (has_finish_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->finish_mode(), output);
  }

  // optional .OPMessage.judgeItem min_horn_time = 7;
  if (has_min_horn_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->min_horn_time(), output);
  }

  // optional .OPMessage.judgeItem sideline_check_sensor = 8;
  if (has_sideline_check_sensor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->sideline_check_sensor(), output);
  }

  // optional .OPMessage.voiceItem vi_40600_sideline_error = 9;
  if (has_vi_40600_sideline_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->vi_40600_sideline_error(), output);
  }

  // optional .OPMessage.voiceItem vi_40601_start_exam = 10;
  if (has_vi_40601_start_exam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->vi_40601_start_exam(), output);
  }

  // optional .OPMessage.voiceItem vi_40601_end_exam = 11;
  if (has_vi_40601_end_exam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->vi_40601_end_exam(), output);
  }

  // optional .OPMessage.voiceItem vi_40601_start_driving = 12;
  if (has_vi_40601_start_driving()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->vi_40601_start_driving(), output);
  }

  // optional .OPMessage.voiceItem vi_40601_finish_driving = 13;
  if (has_vi_40601_finish_driving()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->vi_40601_finish_driving(), output);
  }

  // optional .OPMessage.voiceItem vi_40601_not_finish = 14;
  if (has_vi_40601_not_finish()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->vi_40601_not_finish(), output);
  }

  // optional .OPMessage.voiceItem vi_40601_turn_lamp_use_error = 15;
  if (has_vi_40601_turn_lamp_use_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->vi_40601_turn_lamp_use_error(), output);
  }

  // optional .OPMessage.voiceItem vi_40601_turn_lamp_not_use = 16;
  if (has_vi_40601_turn_lamp_not_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->vi_40601_turn_lamp_not_use(), output);
  }

  // optional .OPMessage.voiceItem vi_40601_not_handbrake = 17;
  if (has_vi_40601_not_handbrake()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->vi_40601_not_handbrake(), output);
  }

  // optional .OPMessage.voiceItem vi_40601_handbrake_footbrake_order_error = 18;
  if (has_vi_40601_handbrake_footbrake_order_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->vi_40601_handbrake_footbrake_order_error(), output);
  }

  // optional .OPMessage.voiceItem vi_40601_horn_not_use = 19;
  if (has_vi_40601_horn_not_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->vi_40601_horn_not_use(), output);
  }

  // optional .OPMessage.voiceItem vi_40601_sideline_error = 20;
  if (has_vi_40601_sideline_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->vi_40601_sideline_error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OPMessage.Judge40601)
}

::google::protobuf::uint8* Judge40601::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OPMessage.Judge40601)
  // optional int32 itemCode = 1;
  if (has_itemcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemcode(), target);
  }

  // optional string itemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->itemname(), target);
  }

  // optional .OPMessage.judgeItem max_time = 3;
  if (has_max_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->max_time(), target);
  }

  // optional .OPMessage.judgeItem max_trigger_distance = 4;
  if (has_max_trigger_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->max_trigger_distance(), target);
  }

  // optional .OPMessage.judgeItem min_turn_signal_time = 5;
  if (has_min_turn_signal_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->min_turn_signal_time(), target);
  }

  // optional .OPMessage.judgeItem finish_mode = 6;
  if (has_finish_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->finish_mode(), target);
  }

  // optional .OPMessage.judgeItem min_horn_time = 7;
  if (has_min_horn_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->min_horn_time(), target);
  }

  // optional .OPMessage.judgeItem sideline_check_sensor = 8;
  if (has_sideline_check_sensor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->sideline_check_sensor(), target);
  }

  // optional .OPMessage.voiceItem vi_40600_sideline_error = 9;
  if (has_vi_40600_sideline_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->vi_40600_sideline_error(), target);
  }

  // optional .OPMessage.voiceItem vi_40601_start_exam = 10;
  if (has_vi_40601_start_exam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->vi_40601_start_exam(), target);
  }

  // optional .OPMessage.voiceItem vi_40601_end_exam = 11;
  if (has_vi_40601_end_exam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->vi_40601_end_exam(), target);
  }

  // optional .OPMessage.voiceItem vi_40601_start_driving = 12;
  if (has_vi_40601_start_driving()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->vi_40601_start_driving(), target);
  }

  // optional .OPMessage.voiceItem vi_40601_finish_driving = 13;
  if (has_vi_40601_finish_driving()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->vi_40601_finish_driving(), target);
  }

  // optional .OPMessage.voiceItem vi_40601_not_finish = 14;
  if (has_vi_40601_not_finish()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->vi_40601_not_finish(), target);
  }

  // optional .OPMessage.voiceItem vi_40601_turn_lamp_use_error = 15;
  if (has_vi_40601_turn_lamp_use_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->vi_40601_turn_lamp_use_error(), target);
  }

  // optional .OPMessage.voiceItem vi_40601_turn_lamp_not_use = 16;
  if (has_vi_40601_turn_lamp_not_use()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->vi_40601_turn_lamp_not_use(), target);
  }

  // optional .OPMessage.voiceItem vi_40601_not_handbrake = 17;
  if (has_vi_40601_not_handbrake()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->vi_40601_not_handbrake(), target);
  }

  // optional .OPMessage.voiceItem vi_40601_handbrake_footbrake_order_error = 18;
  if (has_vi_40601_handbrake_footbrake_order_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->vi_40601_handbrake_footbrake_order_error(), target);
  }

  // optional .OPMessage.voiceItem vi_40601_horn_not_use = 19;
  if (has_vi_40601_horn_not_use()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->vi_40601_horn_not_use(), target);
  }

  // optional .OPMessage.voiceItem vi_40601_sideline_error = 20;
  if (has_vi_40601_sideline_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->vi_40601_sideline_error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OPMessage.Judge40601)
  return target;
}

int Judge40601::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemCode = 1;
    if (has_itemcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemcode());
    }

    // optional string itemName = 2;
    if (has_itemname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemname());
    }

    // optional .OPMessage.judgeItem max_time = 3;
    if (has_max_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_time());
    }

    // optional .OPMessage.judgeItem max_trigger_distance = 4;
    if (has_max_trigger_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_trigger_distance());
    }

    // optional .OPMessage.judgeItem min_turn_signal_time = 5;
    if (has_min_turn_signal_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->min_turn_signal_time());
    }

    // optional .OPMessage.judgeItem finish_mode = 6;
    if (has_finish_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->finish_mode());
    }

    // optional .OPMessage.judgeItem min_horn_time = 7;
    if (has_min_horn_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->min_horn_time());
    }

    // optional .OPMessage.judgeItem sideline_check_sensor = 8;
    if (has_sideline_check_sensor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sideline_check_sensor());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .OPMessage.voiceItem vi_40600_sideline_error = 9;
    if (has_vi_40600_sideline_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40600_sideline_error());
    }

    // optional .OPMessage.voiceItem vi_40601_start_exam = 10;
    if (has_vi_40601_start_exam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40601_start_exam());
    }

    // optional .OPMessage.voiceItem vi_40601_end_exam = 11;
    if (has_vi_40601_end_exam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40601_end_exam());
    }

    // optional .OPMessage.voiceItem vi_40601_start_driving = 12;
    if (has_vi_40601_start_driving()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40601_start_driving());
    }

    // optional .OPMessage.voiceItem vi_40601_finish_driving = 13;
    if (has_vi_40601_finish_driving()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40601_finish_driving());
    }

    // optional .OPMessage.voiceItem vi_40601_not_finish = 14;
    if (has_vi_40601_not_finish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40601_not_finish());
    }

    // optional .OPMessage.voiceItem vi_40601_turn_lamp_use_error = 15;
    if (has_vi_40601_turn_lamp_use_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40601_turn_lamp_use_error());
    }

    // optional .OPMessage.voiceItem vi_40601_turn_lamp_not_use = 16;
    if (has_vi_40601_turn_lamp_not_use()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40601_turn_lamp_not_use());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .OPMessage.voiceItem vi_40601_not_handbrake = 17;
    if (has_vi_40601_not_handbrake()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40601_not_handbrake());
    }

    // optional .OPMessage.voiceItem vi_40601_handbrake_footbrake_order_error = 18;
    if (has_vi_40601_handbrake_footbrake_order_error()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40601_handbrake_footbrake_order_error());
    }

    // optional .OPMessage.voiceItem vi_40601_horn_not_use = 19;
    if (has_vi_40601_horn_not_use()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40601_horn_not_use());
    }

    // optional .OPMessage.voiceItem vi_40601_sideline_error = 20;
    if (has_vi_40601_sideline_error()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_40601_sideline_error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Judge40601::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Judge40601* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Judge40601*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Judge40601::MergeFrom(const Judge40601& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemcode()) {
      set_itemcode(from.itemcode());
    }
    if (from.has_itemname()) {
      set_itemname(from.itemname());
    }
    if (from.has_max_time()) {
      mutable_max_time()->::OPMessage::judgeItem::MergeFrom(from.max_time());
    }
    if (from.has_max_trigger_distance()) {
      mutable_max_trigger_distance()->::OPMessage::judgeItem::MergeFrom(from.max_trigger_distance());
    }
    if (from.has_min_turn_signal_time()) {
      mutable_min_turn_signal_time()->::OPMessage::judgeItem::MergeFrom(from.min_turn_signal_time());
    }
    if (from.has_finish_mode()) {
      mutable_finish_mode()->::OPMessage::judgeItem::MergeFrom(from.finish_mode());
    }
    if (from.has_min_horn_time()) {
      mutable_min_horn_time()->::OPMessage::judgeItem::MergeFrom(from.min_horn_time());
    }
    if (from.has_sideline_check_sensor()) {
      mutable_sideline_check_sensor()->::OPMessage::judgeItem::MergeFrom(from.sideline_check_sensor());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vi_40600_sideline_error()) {
      mutable_vi_40600_sideline_error()->::OPMessage::voiceItem::MergeFrom(from.vi_40600_sideline_error());
    }
    if (from.has_vi_40601_start_exam()) {
      mutable_vi_40601_start_exam()->::OPMessage::voiceItem::MergeFrom(from.vi_40601_start_exam());
    }
    if (from.has_vi_40601_end_exam()) {
      mutable_vi_40601_end_exam()->::OPMessage::voiceItem::MergeFrom(from.vi_40601_end_exam());
    }
    if (from.has_vi_40601_start_driving()) {
      mutable_vi_40601_start_driving()->::OPMessage::voiceItem::MergeFrom(from.vi_40601_start_driving());
    }
    if (from.has_vi_40601_finish_driving()) {
      mutable_vi_40601_finish_driving()->::OPMessage::voiceItem::MergeFrom(from.vi_40601_finish_driving());
    }
    if (from.has_vi_40601_not_finish()) {
      mutable_vi_40601_not_finish()->::OPMessage::voiceItem::MergeFrom(from.vi_40601_not_finish());
    }
    if (from.has_vi_40601_turn_lamp_use_error()) {
      mutable_vi_40601_turn_lamp_use_error()->::OPMessage::voiceItem::MergeFrom(from.vi_40601_turn_lamp_use_error());
    }
    if (from.has_vi_40601_turn_lamp_not_use()) {
      mutable_vi_40601_turn_lamp_not_use()->::OPMessage::voiceItem::MergeFrom(from.vi_40601_turn_lamp_not_use());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_vi_40601_not_handbrake()) {
      mutable_vi_40601_not_handbrake()->::OPMessage::voiceItem::MergeFrom(from.vi_40601_not_handbrake());
    }
    if (from.has_vi_40601_handbrake_footbrake_order_error()) {
      mutable_vi_40601_handbrake_footbrake_order_error()->::OPMessage::voiceItem::MergeFrom(from.vi_40601_handbrake_footbrake_order_error());
    }
    if (from.has_vi_40601_horn_not_use()) {
      mutable_vi_40601_horn_not_use()->::OPMessage::voiceItem::MergeFrom(from.vi_40601_horn_not_use());
    }
    if (from.has_vi_40601_sideline_error()) {
      mutable_vi_40601_sideline_error()->::OPMessage::voiceItem::MergeFrom(from.vi_40601_sideline_error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Judge40601::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Judge40601::CopyFrom(const Judge40601& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Judge40601::IsInitialized() const {

  return true;
}

void Judge40601::Swap(Judge40601* other) {
  if (other != this) {
    std::swap(itemcode_, other->itemcode_);
    std::swap(itemname_, other->itemname_);
    std::swap(max_time_, other->max_time_);
    std::swap(max_trigger_distance_, other->max_trigger_distance_);
    std::swap(min_turn_signal_time_, other->min_turn_signal_time_);
    std::swap(finish_mode_, other->finish_mode_);
    std::swap(min_horn_time_, other->min_horn_time_);
    std::swap(sideline_check_sensor_, other->sideline_check_sensor_);
    std::swap(vi_40600_sideline_error_, other->vi_40600_sideline_error_);
    std::swap(vi_40601_start_exam_, other->vi_40601_start_exam_);
    std::swap(vi_40601_end_exam_, other->vi_40601_end_exam_);
    std::swap(vi_40601_start_driving_, other->vi_40601_start_driving_);
    std::swap(vi_40601_finish_driving_, other->vi_40601_finish_driving_);
    std::swap(vi_40601_not_finish_, other->vi_40601_not_finish_);
    std::swap(vi_40601_turn_lamp_use_error_, other->vi_40601_turn_lamp_use_error_);
    std::swap(vi_40601_turn_lamp_not_use_, other->vi_40601_turn_lamp_not_use_);
    std::swap(vi_40601_not_handbrake_, other->vi_40601_not_handbrake_);
    std::swap(vi_40601_handbrake_footbrake_order_error_, other->vi_40601_handbrake_footbrake_order_error_);
    std::swap(vi_40601_horn_not_use_, other->vi_40601_horn_not_use_);
    std::swap(vi_40601_sideline_error_, other->vi_40601_sideline_error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Judge40601::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Judge40601_descriptor_;
  metadata.reflection = Judge40601_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Judge50001::kItemCodeFieldNumber;
const int Judge50001::kItemNameFieldNumber;
const int Judge50001::kMaxTimeFieldNumber;
const int Judge50001::kMaxSpeedFieldNumber;
const int Judge50001::kJudgeModeFieldNumber;
const int Judge50001::kMinLeftTurnSignalTimeFieldNumber;
const int Judge50001::kMinRightTurnSignalTimeFieldNumber;
const int Judge50001::kNeedNearFarLampFlashFieldNumber;
const int Judge50001::kCheckFarLampFieldNumber;
const int Judge50001::kCheckNearLampFieldNumber;
const int Judge50001::kVi50001StartExamFieldNumber;
const int Judge50001::kVi50001EndExamFieldNumber;
const int Judge50001::kVi50001NotSlowdownFieldNumber;
const int Judge50001::kVi50001TurnLampUseErrorFieldNumber;
const int Judge50001::kVi50001TurnLampNotUseFieldNumber;
const int Judge50001::kVi50001HornNotUseFieldNumber;
const int Judge50001::kVi50001NotOpenNearLampFieldNumber;
const int Judge50001::kVi50001NotOpenFarLampFieldNumber;
#endif  // !_MSC_VER

Judge50001::Judge50001()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OPMessage.Judge50001)
}

void Judge50001::InitAsDefaultInstance() {
  max_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  max_speed_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  judge_mode_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  min_left_turn_signal_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  min_right_turn_signal_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  need_near_far_lamp_flash_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  check_far_lamp_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  check_near_lamp_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  vi_50001_start_exam_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_50001_end_exam_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_50001_not_slowdown_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_50001_turn_lamp_use_error_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_50001_turn_lamp_not_use_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_50001_horn_not_use_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_50001_not_open_near_lamp_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_50001_not_open_far_lamp_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
}

Judge50001::Judge50001(const Judge50001& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OPMessage.Judge50001)
}

void Judge50001::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  itemcode_ = 0;
  itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_time_ = NULL;
  max_speed_ = NULL;
  judge_mode_ = NULL;
  min_left_turn_signal_time_ = NULL;
  min_right_turn_signal_time_ = NULL;
  need_near_far_lamp_flash_ = NULL;
  check_far_lamp_ = NULL;
  check_near_lamp_ = NULL;
  vi_50001_start_exam_ = NULL;
  vi_50001_end_exam_ = NULL;
  vi_50001_not_slowdown_ = NULL;
  vi_50001_turn_lamp_use_error_ = NULL;
  vi_50001_turn_lamp_not_use_ = NULL;
  vi_50001_horn_not_use_ = NULL;
  vi_50001_not_open_near_lamp_ = NULL;
  vi_50001_not_open_far_lamp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Judge50001::~Judge50001() {
  // @@protoc_insertion_point(destructor:OPMessage.Judge50001)
  SharedDtor();
}

void Judge50001::SharedDtor() {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (this != default_instance_) {
    delete max_time_;
    delete max_speed_;
    delete judge_mode_;
    delete min_left_turn_signal_time_;
    delete min_right_turn_signal_time_;
    delete need_near_far_lamp_flash_;
    delete check_far_lamp_;
    delete check_near_lamp_;
    delete vi_50001_start_exam_;
    delete vi_50001_end_exam_;
    delete vi_50001_not_slowdown_;
    delete vi_50001_turn_lamp_use_error_;
    delete vi_50001_turn_lamp_not_use_;
    delete vi_50001_horn_not_use_;
    delete vi_50001_not_open_near_lamp_;
    delete vi_50001_not_open_far_lamp_;
  }
}

void Judge50001::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Judge50001::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Judge50001_descriptor_;
}

const Judge50001& Judge50001::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageKm3Config_2eproto();
  return *default_instance_;
}

Judge50001* Judge50001::default_instance_ = NULL;

Judge50001* Judge50001::New() const {
  return new Judge50001;
}

void Judge50001::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    itemcode_ = 0;
    if (has_itemname()) {
      if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        itemname_->clear();
      }
    }
    if (has_max_time()) {
      if (max_time_ != NULL) max_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_max_speed()) {
      if (max_speed_ != NULL) max_speed_->::OPMessage::judgeItem::Clear();
    }
    if (has_judge_mode()) {
      if (judge_mode_ != NULL) judge_mode_->::OPMessage::judgeItem::Clear();
    }
    if (has_min_left_turn_signal_time()) {
      if (min_left_turn_signal_time_ != NULL) min_left_turn_signal_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_min_right_turn_signal_time()) {
      if (min_right_turn_signal_time_ != NULL) min_right_turn_signal_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_need_near_far_lamp_flash()) {
      if (need_near_far_lamp_flash_ != NULL) need_near_far_lamp_flash_->::OPMessage::judgeItem::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_check_far_lamp()) {
      if (check_far_lamp_ != NULL) check_far_lamp_->::OPMessage::judgeItem::Clear();
    }
    if (has_check_near_lamp()) {
      if (check_near_lamp_ != NULL) check_near_lamp_->::OPMessage::judgeItem::Clear();
    }
    if (has_vi_50001_start_exam()) {
      if (vi_50001_start_exam_ != NULL) vi_50001_start_exam_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_50001_end_exam()) {
      if (vi_50001_end_exam_ != NULL) vi_50001_end_exam_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_50001_not_slowdown()) {
      if (vi_50001_not_slowdown_ != NULL) vi_50001_not_slowdown_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_50001_turn_lamp_use_error()) {
      if (vi_50001_turn_lamp_use_error_ != NULL) vi_50001_turn_lamp_use_error_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_50001_turn_lamp_not_use()) {
      if (vi_50001_turn_lamp_not_use_ != NULL) vi_50001_turn_lamp_not_use_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_50001_horn_not_use()) {
      if (vi_50001_horn_not_use_ != NULL) vi_50001_horn_not_use_->::OPMessage::voiceItem::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 196608) {
    if (has_vi_50001_not_open_near_lamp()) {
      if (vi_50001_not_open_near_lamp_ != NULL) vi_50001_not_open_near_lamp_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_50001_not_open_far_lamp()) {
      if (vi_50001_not_open_far_lamp_ != NULL) vi_50001_not_open_far_lamp_->::OPMessage::voiceItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Judge50001::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OPMessage.Judge50001)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemcode_)));
          set_has_itemcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_itemName;
        break;
      }

      // optional string itemName = 2;
      case 2: {
        if (tag == 18) {
         parse_itemName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itemname().data(), this->itemname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "itemname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_max_time;
        break;
      }

      // optional .OPMessage.judgeItem max_time = 3;
      case 3: {
        if (tag == 26) {
         parse_max_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_max_speed;
        break;
      }

      // optional .OPMessage.judgeItem max_speed = 4;
      case 4: {
        if (tag == 34) {
         parse_max_speed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_speed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_judge_mode;
        break;
      }

      // optional .OPMessage.judgeItem judge_mode = 5;
      case 5: {
        if (tag == 42) {
         parse_judge_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_judge_mode()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_min_left_turn_signal_time;
        break;
      }

      // optional .OPMessage.judgeItem min_left_turn_signal_time = 6;
      case 6: {
        if (tag == 50) {
         parse_min_left_turn_signal_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_left_turn_signal_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_min_right_turn_signal_time;
        break;
      }

      // optional .OPMessage.judgeItem min_right_turn_signal_time = 7;
      case 7: {
        if (tag == 58) {
         parse_min_right_turn_signal_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_right_turn_signal_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_need_near_far_lamp_flash;
        break;
      }

      // optional .OPMessage.judgeItem need_near_far_lamp_flash = 8;
      case 8: {
        if (tag == 66) {
         parse_need_near_far_lamp_flash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_need_near_far_lamp_flash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_check_far_lamp;
        break;
      }

      // optional .OPMessage.judgeItem check_far_lamp = 9;
      case 9: {
        if (tag == 74) {
         parse_check_far_lamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_check_far_lamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_check_near_lamp;
        break;
      }

      // optional .OPMessage.judgeItem check_near_lamp = 10;
      case 10: {
        if (tag == 82) {
         parse_check_near_lamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_check_near_lamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_vi_50001_start_exam;
        break;
      }

      // optional .OPMessage.voiceItem vi_50001_start_exam = 11;
      case 11: {
        if (tag == 90) {
         parse_vi_50001_start_exam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_50001_start_exam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_vi_50001_end_exam;
        break;
      }

      // optional .OPMessage.voiceItem vi_50001_end_exam = 12;
      case 12: {
        if (tag == 98) {
         parse_vi_50001_end_exam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_50001_end_exam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_vi_50001_not_slowdown;
        break;
      }

      // optional .OPMessage.voiceItem vi_50001_not_slowdown = 13;
      case 13: {
        if (tag == 106) {
         parse_vi_50001_not_slowdown:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_50001_not_slowdown()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_vi_50001_turn_lamp_use_error;
        break;
      }

      // optional .OPMessage.voiceItem vi_50001_turn_lamp_use_error = 14;
      case 14: {
        if (tag == 114) {
         parse_vi_50001_turn_lamp_use_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_50001_turn_lamp_use_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_vi_50001_turn_lamp_not_use;
        break;
      }

      // optional .OPMessage.voiceItem vi_50001_turn_lamp_not_use = 15;
      case 15: {
        if (tag == 122) {
         parse_vi_50001_turn_lamp_not_use:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_50001_turn_lamp_not_use()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_vi_50001_horn_not_use;
        break;
      }

      // optional .OPMessage.voiceItem vi_50001_horn_not_use = 16;
      case 16: {
        if (tag == 130) {
         parse_vi_50001_horn_not_use:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_50001_horn_not_use()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_vi_50001_not_open_near_lamp;
        break;
      }

      // optional .OPMessage.voiceItem vi_50001_not_open_near_lamp = 17;
      case 17: {
        if (tag == 138) {
         parse_vi_50001_not_open_near_lamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_50001_not_open_near_lamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_vi_50001_not_open_far_lamp;
        break;
      }

      // optional .OPMessage.voiceItem vi_50001_not_open_far_lamp = 18;
      case 18: {
        if (tag == 146) {
         parse_vi_50001_not_open_far_lamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_50001_not_open_far_lamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OPMessage.Judge50001)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OPMessage.Judge50001)
  return false;
#undef DO_
}

void Judge50001::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OPMessage.Judge50001)
  // optional int32 itemCode = 1;
  if (has_itemcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemcode(), output);
  }

  // optional string itemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->itemname(), output);
  }

  // optional .OPMessage.judgeItem max_time = 3;
  if (has_max_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->max_time(), output);
  }

  // optional .OPMessage.judgeItem max_speed = 4;
  if (has_max_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->max_speed(), output);
  }

  // optional .OPMessage.judgeItem judge_mode = 5;
  if (has_judge_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->judge_mode(), output);
  }

  // optional .OPMessage.judgeItem min_left_turn_signal_time = 6;
  if (has_min_left_turn_signal_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->min_left_turn_signal_time(), output);
  }

  // optional .OPMessage.judgeItem min_right_turn_signal_time = 7;
  if (has_min_right_turn_signal_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->min_right_turn_signal_time(), output);
  }

  // optional .OPMessage.judgeItem need_near_far_lamp_flash = 8;
  if (has_need_near_far_lamp_flash()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->need_near_far_lamp_flash(), output);
  }

  // optional .OPMessage.judgeItem check_far_lamp = 9;
  if (has_check_far_lamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->check_far_lamp(), output);
  }

  // optional .OPMessage.judgeItem check_near_lamp = 10;
  if (has_check_near_lamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->check_near_lamp(), output);
  }

  // optional .OPMessage.voiceItem vi_50001_start_exam = 11;
  if (has_vi_50001_start_exam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->vi_50001_start_exam(), output);
  }

  // optional .OPMessage.voiceItem vi_50001_end_exam = 12;
  if (has_vi_50001_end_exam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->vi_50001_end_exam(), output);
  }

  // optional .OPMessage.voiceItem vi_50001_not_slowdown = 13;
  if (has_vi_50001_not_slowdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->vi_50001_not_slowdown(), output);
  }

  // optional .OPMessage.voiceItem vi_50001_turn_lamp_use_error = 14;
  if (has_vi_50001_turn_lamp_use_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->vi_50001_turn_lamp_use_error(), output);
  }

  // optional .OPMessage.voiceItem vi_50001_turn_lamp_not_use = 15;
  if (has_vi_50001_turn_lamp_not_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->vi_50001_turn_lamp_not_use(), output);
  }

  // optional .OPMessage.voiceItem vi_50001_horn_not_use = 16;
  if (has_vi_50001_horn_not_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->vi_50001_horn_not_use(), output);
  }

  // optional .OPMessage.voiceItem vi_50001_not_open_near_lamp = 17;
  if (has_vi_50001_not_open_near_lamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->vi_50001_not_open_near_lamp(), output);
  }

  // optional .OPMessage.voiceItem vi_50001_not_open_far_lamp = 18;
  if (has_vi_50001_not_open_far_lamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->vi_50001_not_open_far_lamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OPMessage.Judge50001)
}

::google::protobuf::uint8* Judge50001::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OPMessage.Judge50001)
  // optional int32 itemCode = 1;
  if (has_itemcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemcode(), target);
  }

  // optional string itemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->itemname(), target);
  }

  // optional .OPMessage.judgeItem max_time = 3;
  if (has_max_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->max_time(), target);
  }

  // optional .OPMessage.judgeItem max_speed = 4;
  if (has_max_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->max_speed(), target);
  }

  // optional .OPMessage.judgeItem judge_mode = 5;
  if (has_judge_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->judge_mode(), target);
  }

  // optional .OPMessage.judgeItem min_left_turn_signal_time = 6;
  if (has_min_left_turn_signal_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->min_left_turn_signal_time(), target);
  }

  // optional .OPMessage.judgeItem min_right_turn_signal_time = 7;
  if (has_min_right_turn_signal_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->min_right_turn_signal_time(), target);
  }

  // optional .OPMessage.judgeItem need_near_far_lamp_flash = 8;
  if (has_need_near_far_lamp_flash()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->need_near_far_lamp_flash(), target);
  }

  // optional .OPMessage.judgeItem check_far_lamp = 9;
  if (has_check_far_lamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->check_far_lamp(), target);
  }

  // optional .OPMessage.judgeItem check_near_lamp = 10;
  if (has_check_near_lamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->check_near_lamp(), target);
  }

  // optional .OPMessage.voiceItem vi_50001_start_exam = 11;
  if (has_vi_50001_start_exam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->vi_50001_start_exam(), target);
  }

  // optional .OPMessage.voiceItem vi_50001_end_exam = 12;
  if (has_vi_50001_end_exam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->vi_50001_end_exam(), target);
  }

  // optional .OPMessage.voiceItem vi_50001_not_slowdown = 13;
  if (has_vi_50001_not_slowdown()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->vi_50001_not_slowdown(), target);
  }

  // optional .OPMessage.voiceItem vi_50001_turn_lamp_use_error = 14;
  if (has_vi_50001_turn_lamp_use_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->vi_50001_turn_lamp_use_error(), target);
  }

  // optional .OPMessage.voiceItem vi_50001_turn_lamp_not_use = 15;
  if (has_vi_50001_turn_lamp_not_use()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->vi_50001_turn_lamp_not_use(), target);
  }

  // optional .OPMessage.voiceItem vi_50001_horn_not_use = 16;
  if (has_vi_50001_horn_not_use()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->vi_50001_horn_not_use(), target);
  }

  // optional .OPMessage.voiceItem vi_50001_not_open_near_lamp = 17;
  if (has_vi_50001_not_open_near_lamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->vi_50001_not_open_near_lamp(), target);
  }

  // optional .OPMessage.voiceItem vi_50001_not_open_far_lamp = 18;
  if (has_vi_50001_not_open_far_lamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->vi_50001_not_open_far_lamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OPMessage.Judge50001)
  return target;
}

int Judge50001::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemCode = 1;
    if (has_itemcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemcode());
    }

    // optional string itemName = 2;
    if (has_itemname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemname());
    }

    // optional .OPMessage.judgeItem max_time = 3;
    if (has_max_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_time());
    }

    // optional .OPMessage.judgeItem max_speed = 4;
    if (has_max_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_speed());
    }

    // optional .OPMessage.judgeItem judge_mode = 5;
    if (has_judge_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->judge_mode());
    }

    // optional .OPMessage.judgeItem min_left_turn_signal_time = 6;
    if (has_min_left_turn_signal_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->min_left_turn_signal_time());
    }

    // optional .OPMessage.judgeItem min_right_turn_signal_time = 7;
    if (has_min_right_turn_signal_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->min_right_turn_signal_time());
    }

    // optional .OPMessage.judgeItem need_near_far_lamp_flash = 8;
    if (has_need_near_far_lamp_flash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->need_near_far_lamp_flash());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .OPMessage.judgeItem check_far_lamp = 9;
    if (has_check_far_lamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->check_far_lamp());
    }

    // optional .OPMessage.judgeItem check_near_lamp = 10;
    if (has_check_near_lamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->check_near_lamp());
    }

    // optional .OPMessage.voiceItem vi_50001_start_exam = 11;
    if (has_vi_50001_start_exam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_50001_start_exam());
    }

    // optional .OPMessage.voiceItem vi_50001_end_exam = 12;
    if (has_vi_50001_end_exam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_50001_end_exam());
    }

    // optional .OPMessage.voiceItem vi_50001_not_slowdown = 13;
    if (has_vi_50001_not_slowdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_50001_not_slowdown());
    }

    // optional .OPMessage.voiceItem vi_50001_turn_lamp_use_error = 14;
    if (has_vi_50001_turn_lamp_use_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_50001_turn_lamp_use_error());
    }

    // optional .OPMessage.voiceItem vi_50001_turn_lamp_not_use = 15;
    if (has_vi_50001_turn_lamp_not_use()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_50001_turn_lamp_not_use());
    }

    // optional .OPMessage.voiceItem vi_50001_horn_not_use = 16;
    if (has_vi_50001_horn_not_use()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_50001_horn_not_use());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .OPMessage.voiceItem vi_50001_not_open_near_lamp = 17;
    if (has_vi_50001_not_open_near_lamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_50001_not_open_near_lamp());
    }

    // optional .OPMessage.voiceItem vi_50001_not_open_far_lamp = 18;
    if (has_vi_50001_not_open_far_lamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_50001_not_open_far_lamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Judge50001::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Judge50001* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Judge50001*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Judge50001::MergeFrom(const Judge50001& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemcode()) {
      set_itemcode(from.itemcode());
    }
    if (from.has_itemname()) {
      set_itemname(from.itemname());
    }
    if (from.has_max_time()) {
      mutable_max_time()->::OPMessage::judgeItem::MergeFrom(from.max_time());
    }
    if (from.has_max_speed()) {
      mutable_max_speed()->::OPMessage::judgeItem::MergeFrom(from.max_speed());
    }
    if (from.has_judge_mode()) {
      mutable_judge_mode()->::OPMessage::judgeItem::MergeFrom(from.judge_mode());
    }
    if (from.has_min_left_turn_signal_time()) {
      mutable_min_left_turn_signal_time()->::OPMessage::judgeItem::MergeFrom(from.min_left_turn_signal_time());
    }
    if (from.has_min_right_turn_signal_time()) {
      mutable_min_right_turn_signal_time()->::OPMessage::judgeItem::MergeFrom(from.min_right_turn_signal_time());
    }
    if (from.has_need_near_far_lamp_flash()) {
      mutable_need_near_far_lamp_flash()->::OPMessage::judgeItem::MergeFrom(from.need_near_far_lamp_flash());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_check_far_lamp()) {
      mutable_check_far_lamp()->::OPMessage::judgeItem::MergeFrom(from.check_far_lamp());
    }
    if (from.has_check_near_lamp()) {
      mutable_check_near_lamp()->::OPMessage::judgeItem::MergeFrom(from.check_near_lamp());
    }
    if (from.has_vi_50001_start_exam()) {
      mutable_vi_50001_start_exam()->::OPMessage::voiceItem::MergeFrom(from.vi_50001_start_exam());
    }
    if (from.has_vi_50001_end_exam()) {
      mutable_vi_50001_end_exam()->::OPMessage::voiceItem::MergeFrom(from.vi_50001_end_exam());
    }
    if (from.has_vi_50001_not_slowdown()) {
      mutable_vi_50001_not_slowdown()->::OPMessage::voiceItem::MergeFrom(from.vi_50001_not_slowdown());
    }
    if (from.has_vi_50001_turn_lamp_use_error()) {
      mutable_vi_50001_turn_lamp_use_error()->::OPMessage::voiceItem::MergeFrom(from.vi_50001_turn_lamp_use_error());
    }
    if (from.has_vi_50001_turn_lamp_not_use()) {
      mutable_vi_50001_turn_lamp_not_use()->::OPMessage::voiceItem::MergeFrom(from.vi_50001_turn_lamp_not_use());
    }
    if (from.has_vi_50001_horn_not_use()) {
      mutable_vi_50001_horn_not_use()->::OPMessage::voiceItem::MergeFrom(from.vi_50001_horn_not_use());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_vi_50001_not_open_near_lamp()) {
      mutable_vi_50001_not_open_near_lamp()->::OPMessage::voiceItem::MergeFrom(from.vi_50001_not_open_near_lamp());
    }
    if (from.has_vi_50001_not_open_far_lamp()) {
      mutable_vi_50001_not_open_far_lamp()->::OPMessage::voiceItem::MergeFrom(from.vi_50001_not_open_far_lamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Judge50001::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Judge50001::CopyFrom(const Judge50001& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Judge50001::IsInitialized() const {

  return true;
}

void Judge50001::Swap(Judge50001* other) {
  if (other != this) {
    std::swap(itemcode_, other->itemcode_);
    std::swap(itemname_, other->itemname_);
    std::swap(max_time_, other->max_time_);
    std::swap(max_speed_, other->max_speed_);
    std::swap(judge_mode_, other->judge_mode_);
    std::swap(min_left_turn_signal_time_, other->min_left_turn_signal_time_);
    std::swap(min_right_turn_signal_time_, other->min_right_turn_signal_time_);
    std::swap(need_near_far_lamp_flash_, other->need_near_far_lamp_flash_);
    std::swap(check_far_lamp_, other->check_far_lamp_);
    std::swap(check_near_lamp_, other->check_near_lamp_);
    std::swap(vi_50001_start_exam_, other->vi_50001_start_exam_);
    std::swap(vi_50001_end_exam_, other->vi_50001_end_exam_);
    std::swap(vi_50001_not_slowdown_, other->vi_50001_not_slowdown_);
    std::swap(vi_50001_turn_lamp_use_error_, other->vi_50001_turn_lamp_use_error_);
    std::swap(vi_50001_turn_lamp_not_use_, other->vi_50001_turn_lamp_not_use_);
    std::swap(vi_50001_horn_not_use_, other->vi_50001_horn_not_use_);
    std::swap(vi_50001_not_open_near_lamp_, other->vi_50001_not_open_near_lamp_);
    std::swap(vi_50001_not_open_far_lamp_, other->vi_50001_not_open_far_lamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Judge50001::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Judge50001_descriptor_;
  metadata.reflection = Judge50001_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Judge50002::kItemCodeFieldNumber;
const int Judge50002::kItemNameFieldNumber;
const int Judge50002::kMaxTimeFieldNumber;
const int Judge50002::kMaxSpeedFieldNumber;
const int Judge50002::kJudgeModeFieldNumber;
const int Judge50002::kMinLeftTurnSignalTimeFieldNumber;
const int Judge50002::kMinRightTurnSignalTimeFieldNumber;
const int Judge50002::kNeedNearFarLampFlashFieldNumber;
const int Judge50002::kCheckFarLampFieldNumber;
const int Judge50002::kCheckNearLampFieldNumber;
const int Judge50002::kVi50002StartExamFieldNumber;
const int Judge50002::kVi50002EndExamFieldNumber;
const int Judge50002::kVi50002NotSlowdownFieldNumber;
const int Judge50002::kVi50002TurnLampUseErrorFieldNumber;
const int Judge50002::kVi50002TurnLampNotUseFieldNumber;
const int Judge50002::kVi50002HornNotUseFieldNumber;
const int Judge50002::kVi50002NotOpenNearLampFieldNumber;
const int Judge50002::kVi50002NotOpenFarLampFieldNumber;
#endif  // !_MSC_VER

Judge50002::Judge50002()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OPMessage.Judge50002)
}

void Judge50002::InitAsDefaultInstance() {
  max_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  max_speed_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  judge_mode_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  min_left_turn_signal_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  min_right_turn_signal_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  need_near_far_lamp_flash_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  check_far_lamp_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  check_near_lamp_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  vi_50002_start_exam_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_50002_end_exam_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_50002_not_slowdown_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_50002_turn_lamp_use_error_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_50002_turn_lamp_not_use_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_50002_horn_not_use_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_50002_not_open_near_lamp_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_50002_not_open_far_lamp_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
}

Judge50002::Judge50002(const Judge50002& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OPMessage.Judge50002)
}

void Judge50002::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  itemcode_ = 0;
  itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_time_ = NULL;
  max_speed_ = NULL;
  judge_mode_ = NULL;
  min_left_turn_signal_time_ = NULL;
  min_right_turn_signal_time_ = NULL;
  need_near_far_lamp_flash_ = NULL;
  check_far_lamp_ = NULL;
  check_near_lamp_ = NULL;
  vi_50002_start_exam_ = NULL;
  vi_50002_end_exam_ = NULL;
  vi_50002_not_slowdown_ = NULL;
  vi_50002_turn_lamp_use_error_ = NULL;
  vi_50002_turn_lamp_not_use_ = NULL;
  vi_50002_horn_not_use_ = NULL;
  vi_50002_not_open_near_lamp_ = NULL;
  vi_50002_not_open_far_lamp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Judge50002::~Judge50002() {
  // @@protoc_insertion_point(destructor:OPMessage.Judge50002)
  SharedDtor();
}

void Judge50002::SharedDtor() {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (this != default_instance_) {
    delete max_time_;
    delete max_speed_;
    delete judge_mode_;
    delete min_left_turn_signal_time_;
    delete min_right_turn_signal_time_;
    delete need_near_far_lamp_flash_;
    delete check_far_lamp_;
    delete check_near_lamp_;
    delete vi_50002_start_exam_;
    delete vi_50002_end_exam_;
    delete vi_50002_not_slowdown_;
    delete vi_50002_turn_lamp_use_error_;
    delete vi_50002_turn_lamp_not_use_;
    delete vi_50002_horn_not_use_;
    delete vi_50002_not_open_near_lamp_;
    delete vi_50002_not_open_far_lamp_;
  }
}

void Judge50002::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Judge50002::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Judge50002_descriptor_;
}

const Judge50002& Judge50002::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageKm3Config_2eproto();
  return *default_instance_;
}

Judge50002* Judge50002::default_instance_ = NULL;

Judge50002* Judge50002::New() const {
  return new Judge50002;
}

void Judge50002::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    itemcode_ = 0;
    if (has_itemname()) {
      if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        itemname_->clear();
      }
    }
    if (has_max_time()) {
      if (max_time_ != NULL) max_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_max_speed()) {
      if (max_speed_ != NULL) max_speed_->::OPMessage::judgeItem::Clear();
    }
    if (has_judge_mode()) {
      if (judge_mode_ != NULL) judge_mode_->::OPMessage::judgeItem::Clear();
    }
    if (has_min_left_turn_signal_time()) {
      if (min_left_turn_signal_time_ != NULL) min_left_turn_signal_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_min_right_turn_signal_time()) {
      if (min_right_turn_signal_time_ != NULL) min_right_turn_signal_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_need_near_far_lamp_flash()) {
      if (need_near_far_lamp_flash_ != NULL) need_near_far_lamp_flash_->::OPMessage::judgeItem::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_check_far_lamp()) {
      if (check_far_lamp_ != NULL) check_far_lamp_->::OPMessage::judgeItem::Clear();
    }
    if (has_check_near_lamp()) {
      if (check_near_lamp_ != NULL) check_near_lamp_->::OPMessage::judgeItem::Clear();
    }
    if (has_vi_50002_start_exam()) {
      if (vi_50002_start_exam_ != NULL) vi_50002_start_exam_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_50002_end_exam()) {
      if (vi_50002_end_exam_ != NULL) vi_50002_end_exam_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_50002_not_slowdown()) {
      if (vi_50002_not_slowdown_ != NULL) vi_50002_not_slowdown_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_50002_turn_lamp_use_error()) {
      if (vi_50002_turn_lamp_use_error_ != NULL) vi_50002_turn_lamp_use_error_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_50002_turn_lamp_not_use()) {
      if (vi_50002_turn_lamp_not_use_ != NULL) vi_50002_turn_lamp_not_use_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_50002_horn_not_use()) {
      if (vi_50002_horn_not_use_ != NULL) vi_50002_horn_not_use_->::OPMessage::voiceItem::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 196608) {
    if (has_vi_50002_not_open_near_lamp()) {
      if (vi_50002_not_open_near_lamp_ != NULL) vi_50002_not_open_near_lamp_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_50002_not_open_far_lamp()) {
      if (vi_50002_not_open_far_lamp_ != NULL) vi_50002_not_open_far_lamp_->::OPMessage::voiceItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Judge50002::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OPMessage.Judge50002)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemcode_)));
          set_has_itemcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_itemName;
        break;
      }

      // optional string itemName = 2;
      case 2: {
        if (tag == 18) {
         parse_itemName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itemname().data(), this->itemname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "itemname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_max_time;
        break;
      }

      // optional .OPMessage.judgeItem max_time = 3;
      case 3: {
        if (tag == 26) {
         parse_max_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_max_speed;
        break;
      }

      // optional .OPMessage.judgeItem max_speed = 4;
      case 4: {
        if (tag == 34) {
         parse_max_speed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_speed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_judge_mode;
        break;
      }

      // optional .OPMessage.judgeItem judge_mode = 5;
      case 5: {
        if (tag == 42) {
         parse_judge_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_judge_mode()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_min_left_turn_signal_time;
        break;
      }

      // optional .OPMessage.judgeItem min_left_turn_signal_time = 6;
      case 6: {
        if (tag == 50) {
         parse_min_left_turn_signal_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_left_turn_signal_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_min_right_turn_signal_time;
        break;
      }

      // optional .OPMessage.judgeItem min_right_turn_signal_time = 7;
      case 7: {
        if (tag == 58) {
         parse_min_right_turn_signal_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_right_turn_signal_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_need_near_far_lamp_flash;
        break;
      }

      // optional .OPMessage.judgeItem need_near_far_lamp_flash = 8;
      case 8: {
        if (tag == 66) {
         parse_need_near_far_lamp_flash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_need_near_far_lamp_flash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_check_far_lamp;
        break;
      }

      // optional .OPMessage.judgeItem check_far_lamp = 9;
      case 9: {
        if (tag == 74) {
         parse_check_far_lamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_check_far_lamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_check_near_lamp;
        break;
      }

      // optional .OPMessage.judgeItem check_near_lamp = 10;
      case 10: {
        if (tag == 82) {
         parse_check_near_lamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_check_near_lamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_vi_50002_start_exam;
        break;
      }

      // optional .OPMessage.voiceItem vi_50002_start_exam = 11;
      case 11: {
        if (tag == 90) {
         parse_vi_50002_start_exam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_50002_start_exam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_vi_50002_end_exam;
        break;
      }

      // optional .OPMessage.voiceItem vi_50002_end_exam = 12;
      case 12: {
        if (tag == 98) {
         parse_vi_50002_end_exam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_50002_end_exam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_vi_50002_not_slowdown;
        break;
      }

      // optional .OPMessage.voiceItem vi_50002_not_slowdown = 13;
      case 13: {
        if (tag == 106) {
         parse_vi_50002_not_slowdown:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_50002_not_slowdown()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_vi_50002_turn_lamp_use_error;
        break;
      }

      // optional .OPMessage.voiceItem vi_50002_turn_lamp_use_error = 14;
      case 14: {
        if (tag == 114) {
         parse_vi_50002_turn_lamp_use_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_50002_turn_lamp_use_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_vi_50002_turn_lamp_not_use;
        break;
      }

      // optional .OPMessage.voiceItem vi_50002_turn_lamp_not_use = 15;
      case 15: {
        if (tag == 122) {
         parse_vi_50002_turn_lamp_not_use:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_50002_turn_lamp_not_use()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_vi_50002_horn_not_use;
        break;
      }

      // optional .OPMessage.voiceItem vi_50002_horn_not_use = 16;
      case 16: {
        if (tag == 130) {
         parse_vi_50002_horn_not_use:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_50002_horn_not_use()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_vi_50002_not_open_near_lamp;
        break;
      }

      // optional .OPMessage.voiceItem vi_50002_not_open_near_lamp = 17;
      case 17: {
        if (tag == 138) {
         parse_vi_50002_not_open_near_lamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_50002_not_open_near_lamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_vi_50002_not_open_far_lamp;
        break;
      }

      // optional .OPMessage.voiceItem vi_50002_not_open_far_lamp = 18;
      case 18: {
        if (tag == 146) {
         parse_vi_50002_not_open_far_lamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_50002_not_open_far_lamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OPMessage.Judge50002)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OPMessage.Judge50002)
  return false;
#undef DO_
}

void Judge50002::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OPMessage.Judge50002)
  // optional int32 itemCode = 1;
  if (has_itemcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemcode(), output);
  }

  // optional string itemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->itemname(), output);
  }

  // optional .OPMessage.judgeItem max_time = 3;
  if (has_max_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->max_time(), output);
  }

  // optional .OPMessage.judgeItem max_speed = 4;
  if (has_max_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->max_speed(), output);
  }

  // optional .OPMessage.judgeItem judge_mode = 5;
  if (has_judge_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->judge_mode(), output);
  }

  // optional .OPMessage.judgeItem min_left_turn_signal_time = 6;
  if (has_min_left_turn_signal_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->min_left_turn_signal_time(), output);
  }

  // optional .OPMessage.judgeItem min_right_turn_signal_time = 7;
  if (has_min_right_turn_signal_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->min_right_turn_signal_time(), output);
  }

  // optional .OPMessage.judgeItem need_near_far_lamp_flash = 8;
  if (has_need_near_far_lamp_flash()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->need_near_far_lamp_flash(), output);
  }

  // optional .OPMessage.judgeItem check_far_lamp = 9;
  if (has_check_far_lamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->check_far_lamp(), output);
  }

  // optional .OPMessage.judgeItem check_near_lamp = 10;
  if (has_check_near_lamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->check_near_lamp(), output);
  }

  // optional .OPMessage.voiceItem vi_50002_start_exam = 11;
  if (has_vi_50002_start_exam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->vi_50002_start_exam(), output);
  }

  // optional .OPMessage.voiceItem vi_50002_end_exam = 12;
  if (has_vi_50002_end_exam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->vi_50002_end_exam(), output);
  }

  // optional .OPMessage.voiceItem vi_50002_not_slowdown = 13;
  if (has_vi_50002_not_slowdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->vi_50002_not_slowdown(), output);
  }

  // optional .OPMessage.voiceItem vi_50002_turn_lamp_use_error = 14;
  if (has_vi_50002_turn_lamp_use_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->vi_50002_turn_lamp_use_error(), output);
  }

  // optional .OPMessage.voiceItem vi_50002_turn_lamp_not_use = 15;
  if (has_vi_50002_turn_lamp_not_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->vi_50002_turn_lamp_not_use(), output);
  }

  // optional .OPMessage.voiceItem vi_50002_horn_not_use = 16;
  if (has_vi_50002_horn_not_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->vi_50002_horn_not_use(), output);
  }

  // optional .OPMessage.voiceItem vi_50002_not_open_near_lamp = 17;
  if (has_vi_50002_not_open_near_lamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->vi_50002_not_open_near_lamp(), output);
  }

  // optional .OPMessage.voiceItem vi_50002_not_open_far_lamp = 18;
  if (has_vi_50002_not_open_far_lamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->vi_50002_not_open_far_lamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OPMessage.Judge50002)
}

::google::protobuf::uint8* Judge50002::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OPMessage.Judge50002)
  // optional int32 itemCode = 1;
  if (has_itemcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemcode(), target);
  }

  // optional string itemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->itemname(), target);
  }

  // optional .OPMessage.judgeItem max_time = 3;
  if (has_max_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->max_time(), target);
  }

  // optional .OPMessage.judgeItem max_speed = 4;
  if (has_max_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->max_speed(), target);
  }

  // optional .OPMessage.judgeItem judge_mode = 5;
  if (has_judge_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->judge_mode(), target);
  }

  // optional .OPMessage.judgeItem min_left_turn_signal_time = 6;
  if (has_min_left_turn_signal_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->min_left_turn_signal_time(), target);
  }

  // optional .OPMessage.judgeItem min_right_turn_signal_time = 7;
  if (has_min_right_turn_signal_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->min_right_turn_signal_time(), target);
  }

  // optional .OPMessage.judgeItem need_near_far_lamp_flash = 8;
  if (has_need_near_far_lamp_flash()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->need_near_far_lamp_flash(), target);
  }

  // optional .OPMessage.judgeItem check_far_lamp = 9;
  if (has_check_far_lamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->check_far_lamp(), target);
  }

  // optional .OPMessage.judgeItem check_near_lamp = 10;
  if (has_check_near_lamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->check_near_lamp(), target);
  }

  // optional .OPMessage.voiceItem vi_50002_start_exam = 11;
  if (has_vi_50002_start_exam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->vi_50002_start_exam(), target);
  }

  // optional .OPMessage.voiceItem vi_50002_end_exam = 12;
  if (has_vi_50002_end_exam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->vi_50002_end_exam(), target);
  }

  // optional .OPMessage.voiceItem vi_50002_not_slowdown = 13;
  if (has_vi_50002_not_slowdown()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->vi_50002_not_slowdown(), target);
  }

  // optional .OPMessage.voiceItem vi_50002_turn_lamp_use_error = 14;
  if (has_vi_50002_turn_lamp_use_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->vi_50002_turn_lamp_use_error(), target);
  }

  // optional .OPMessage.voiceItem vi_50002_turn_lamp_not_use = 15;
  if (has_vi_50002_turn_lamp_not_use()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->vi_50002_turn_lamp_not_use(), target);
  }

  // optional .OPMessage.voiceItem vi_50002_horn_not_use = 16;
  if (has_vi_50002_horn_not_use()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->vi_50002_horn_not_use(), target);
  }

  // optional .OPMessage.voiceItem vi_50002_not_open_near_lamp = 17;
  if (has_vi_50002_not_open_near_lamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->vi_50002_not_open_near_lamp(), target);
  }

  // optional .OPMessage.voiceItem vi_50002_not_open_far_lamp = 18;
  if (has_vi_50002_not_open_far_lamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->vi_50002_not_open_far_lamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OPMessage.Judge50002)
  return target;
}

int Judge50002::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemCode = 1;
    if (has_itemcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemcode());
    }

    // optional string itemName = 2;
    if (has_itemname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemname());
    }

    // optional .OPMessage.judgeItem max_time = 3;
    if (has_max_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_time());
    }

    // optional .OPMessage.judgeItem max_speed = 4;
    if (has_max_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_speed());
    }

    // optional .OPMessage.judgeItem judge_mode = 5;
    if (has_judge_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->judge_mode());
    }

    // optional .OPMessage.judgeItem min_left_turn_signal_time = 6;
    if (has_min_left_turn_signal_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->min_left_turn_signal_time());
    }

    // optional .OPMessage.judgeItem min_right_turn_signal_time = 7;
    if (has_min_right_turn_signal_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->min_right_turn_signal_time());
    }

    // optional .OPMessage.judgeItem need_near_far_lamp_flash = 8;
    if (has_need_near_far_lamp_flash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->need_near_far_lamp_flash());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .OPMessage.judgeItem check_far_lamp = 9;
    if (has_check_far_lamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->check_far_lamp());
    }

    // optional .OPMessage.judgeItem check_near_lamp = 10;
    if (has_check_near_lamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->check_near_lamp());
    }

    // optional .OPMessage.voiceItem vi_50002_start_exam = 11;
    if (has_vi_50002_start_exam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_50002_start_exam());
    }

    // optional .OPMessage.voiceItem vi_50002_end_exam = 12;
    if (has_vi_50002_end_exam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_50002_end_exam());
    }

    // optional .OPMessage.voiceItem vi_50002_not_slowdown = 13;
    if (has_vi_50002_not_slowdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_50002_not_slowdown());
    }

    // optional .OPMessage.voiceItem vi_50002_turn_lamp_use_error = 14;
    if (has_vi_50002_turn_lamp_use_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_50002_turn_lamp_use_error());
    }

    // optional .OPMessage.voiceItem vi_50002_turn_lamp_not_use = 15;
    if (has_vi_50002_turn_lamp_not_use()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_50002_turn_lamp_not_use());
    }

    // optional .OPMessage.voiceItem vi_50002_horn_not_use = 16;
    if (has_vi_50002_horn_not_use()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_50002_horn_not_use());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .OPMessage.voiceItem vi_50002_not_open_near_lamp = 17;
    if (has_vi_50002_not_open_near_lamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_50002_not_open_near_lamp());
    }

    // optional .OPMessage.voiceItem vi_50002_not_open_far_lamp = 18;
    if (has_vi_50002_not_open_far_lamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_50002_not_open_far_lamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Judge50002::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Judge50002* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Judge50002*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Judge50002::MergeFrom(const Judge50002& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemcode()) {
      set_itemcode(from.itemcode());
    }
    if (from.has_itemname()) {
      set_itemname(from.itemname());
    }
    if (from.has_max_time()) {
      mutable_max_time()->::OPMessage::judgeItem::MergeFrom(from.max_time());
    }
    if (from.has_max_speed()) {
      mutable_max_speed()->::OPMessage::judgeItem::MergeFrom(from.max_speed());
    }
    if (from.has_judge_mode()) {
      mutable_judge_mode()->::OPMessage::judgeItem::MergeFrom(from.judge_mode());
    }
    if (from.has_min_left_turn_signal_time()) {
      mutable_min_left_turn_signal_time()->::OPMessage::judgeItem::MergeFrom(from.min_left_turn_signal_time());
    }
    if (from.has_min_right_turn_signal_time()) {
      mutable_min_right_turn_signal_time()->::OPMessage::judgeItem::MergeFrom(from.min_right_turn_signal_time());
    }
    if (from.has_need_near_far_lamp_flash()) {
      mutable_need_near_far_lamp_flash()->::OPMessage::judgeItem::MergeFrom(from.need_near_far_lamp_flash());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_check_far_lamp()) {
      mutable_check_far_lamp()->::OPMessage::judgeItem::MergeFrom(from.check_far_lamp());
    }
    if (from.has_check_near_lamp()) {
      mutable_check_near_lamp()->::OPMessage::judgeItem::MergeFrom(from.check_near_lamp());
    }
    if (from.has_vi_50002_start_exam()) {
      mutable_vi_50002_start_exam()->::OPMessage::voiceItem::MergeFrom(from.vi_50002_start_exam());
    }
    if (from.has_vi_50002_end_exam()) {
      mutable_vi_50002_end_exam()->::OPMessage::voiceItem::MergeFrom(from.vi_50002_end_exam());
    }
    if (from.has_vi_50002_not_slowdown()) {
      mutable_vi_50002_not_slowdown()->::OPMessage::voiceItem::MergeFrom(from.vi_50002_not_slowdown());
    }
    if (from.has_vi_50002_turn_lamp_use_error()) {
      mutable_vi_50002_turn_lamp_use_error()->::OPMessage::voiceItem::MergeFrom(from.vi_50002_turn_lamp_use_error());
    }
    if (from.has_vi_50002_turn_lamp_not_use()) {
      mutable_vi_50002_turn_lamp_not_use()->::OPMessage::voiceItem::MergeFrom(from.vi_50002_turn_lamp_not_use());
    }
    if (from.has_vi_50002_horn_not_use()) {
      mutable_vi_50002_horn_not_use()->::OPMessage::voiceItem::MergeFrom(from.vi_50002_horn_not_use());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_vi_50002_not_open_near_lamp()) {
      mutable_vi_50002_not_open_near_lamp()->::OPMessage::voiceItem::MergeFrom(from.vi_50002_not_open_near_lamp());
    }
    if (from.has_vi_50002_not_open_far_lamp()) {
      mutable_vi_50002_not_open_far_lamp()->::OPMessage::voiceItem::MergeFrom(from.vi_50002_not_open_far_lamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Judge50002::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Judge50002::CopyFrom(const Judge50002& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Judge50002::IsInitialized() const {

  return true;
}

void Judge50002::Swap(Judge50002* other) {
  if (other != this) {
    std::swap(itemcode_, other->itemcode_);
    std::swap(itemname_, other->itemname_);
    std::swap(max_time_, other->max_time_);
    std::swap(max_speed_, other->max_speed_);
    std::swap(judge_mode_, other->judge_mode_);
    std::swap(min_left_turn_signal_time_, other->min_left_turn_signal_time_);
    std::swap(min_right_turn_signal_time_, other->min_right_turn_signal_time_);
    std::swap(need_near_far_lamp_flash_, other->need_near_far_lamp_flash_);
    std::swap(check_far_lamp_, other->check_far_lamp_);
    std::swap(check_near_lamp_, other->check_near_lamp_);
    std::swap(vi_50002_start_exam_, other->vi_50002_start_exam_);
    std::swap(vi_50002_end_exam_, other->vi_50002_end_exam_);
    std::swap(vi_50002_not_slowdown_, other->vi_50002_not_slowdown_);
    std::swap(vi_50002_turn_lamp_use_error_, other->vi_50002_turn_lamp_use_error_);
    std::swap(vi_50002_turn_lamp_not_use_, other->vi_50002_turn_lamp_not_use_);
    std::swap(vi_50002_horn_not_use_, other->vi_50002_horn_not_use_);
    std::swap(vi_50002_not_open_near_lamp_, other->vi_50002_not_open_near_lamp_);
    std::swap(vi_50002_not_open_far_lamp_, other->vi_50002_not_open_far_lamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Judge50002::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Judge50002_descriptor_;
  metadata.reflection = Judge50002_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Judge50003::kItemCodeFieldNumber;
const int Judge50003::kItemNameFieldNumber;
const int Judge50003::kMaxTimeFieldNumber;
const int Judge50003::kMaxSpeedFieldNumber;
const int Judge50003::kJudgeModeFieldNumber;
const int Judge50003::kMinLeftTurnSignalTimeFieldNumber;
const int Judge50003::kMinRightTurnSignalTimeFieldNumber;
const int Judge50003::kNeedNearFarLampFlashFieldNumber;
const int Judge50003::kCheckFarLampFieldNumber;
const int Judge50003::kCheckNearLampFieldNumber;
const int Judge50003::kVi50003StartExamFieldNumber;
const int Judge50003::kVi50003EndExamFieldNumber;
const int Judge50003::kVi50003NotSlowdownFieldNumber;
const int Judge50003::kVi50003TurnLampUseErrorFieldNumber;
const int Judge50003::kVi50003TurnLampNotUseFieldNumber;
const int Judge50003::kVi50003HornNotUseFieldNumber;
const int Judge50003::kVi50003NotOpenNearLampFieldNumber;
const int Judge50003::kVi50003NotOpenFarLampFieldNumber;
#endif  // !_MSC_VER

Judge50003::Judge50003()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OPMessage.Judge50003)
}

void Judge50003::InitAsDefaultInstance() {
  max_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  max_speed_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  judge_mode_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  min_left_turn_signal_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  min_right_turn_signal_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  need_near_far_lamp_flash_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  check_far_lamp_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  check_near_lamp_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  vi_50003_start_exam_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_50003_end_exam_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_50003_not_slowdown_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_50003_turn_lamp_use_error_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_50003_turn_lamp_not_use_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_50003_horn_not_use_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_50003_not_open_near_lamp_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_50003_not_open_far_lamp_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
}

Judge50003::Judge50003(const Judge50003& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OPMessage.Judge50003)
}

void Judge50003::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  itemcode_ = 0;
  itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_time_ = NULL;
  max_speed_ = NULL;
  judge_mode_ = NULL;
  min_left_turn_signal_time_ = NULL;
  min_right_turn_signal_time_ = NULL;
  need_near_far_lamp_flash_ = NULL;
  check_far_lamp_ = NULL;
  check_near_lamp_ = NULL;
  vi_50003_start_exam_ = NULL;
  vi_50003_end_exam_ = NULL;
  vi_50003_not_slowdown_ = NULL;
  vi_50003_turn_lamp_use_error_ = NULL;
  vi_50003_turn_lamp_not_use_ = NULL;
  vi_50003_horn_not_use_ = NULL;
  vi_50003_not_open_near_lamp_ = NULL;
  vi_50003_not_open_far_lamp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Judge50003::~Judge50003() {
  // @@protoc_insertion_point(destructor:OPMessage.Judge50003)
  SharedDtor();
}

void Judge50003::SharedDtor() {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (this != default_instance_) {
    delete max_time_;
    delete max_speed_;
    delete judge_mode_;
    delete min_left_turn_signal_time_;
    delete min_right_turn_signal_time_;
    delete need_near_far_lamp_flash_;
    delete check_far_lamp_;
    delete check_near_lamp_;
    delete vi_50003_start_exam_;
    delete vi_50003_end_exam_;
    delete vi_50003_not_slowdown_;
    delete vi_50003_turn_lamp_use_error_;
    delete vi_50003_turn_lamp_not_use_;
    delete vi_50003_horn_not_use_;
    delete vi_50003_not_open_near_lamp_;
    delete vi_50003_not_open_far_lamp_;
  }
}

void Judge50003::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Judge50003::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Judge50003_descriptor_;
}

const Judge50003& Judge50003::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageKm3Config_2eproto();
  return *default_instance_;
}

Judge50003* Judge50003::default_instance_ = NULL;

Judge50003* Judge50003::New() const {
  return new Judge50003;
}

void Judge50003::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    itemcode_ = 0;
    if (has_itemname()) {
      if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        itemname_->clear();
      }
    }
    if (has_max_time()) {
      if (max_time_ != NULL) max_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_max_speed()) {
      if (max_speed_ != NULL) max_speed_->::OPMessage::judgeItem::Clear();
    }
    if (has_judge_mode()) {
      if (judge_mode_ != NULL) judge_mode_->::OPMessage::judgeItem::Clear();
    }
    if (has_min_left_turn_signal_time()) {
      if (min_left_turn_signal_time_ != NULL) min_left_turn_signal_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_min_right_turn_signal_time()) {
      if (min_right_turn_signal_time_ != NULL) min_right_turn_signal_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_need_near_far_lamp_flash()) {
      if (need_near_far_lamp_flash_ != NULL) need_near_far_lamp_flash_->::OPMessage::judgeItem::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_check_far_lamp()) {
      if (check_far_lamp_ != NULL) check_far_lamp_->::OPMessage::judgeItem::Clear();
    }
    if (has_check_near_lamp()) {
      if (check_near_lamp_ != NULL) check_near_lamp_->::OPMessage::judgeItem::Clear();
    }
    if (has_vi_50003_start_exam()) {
      if (vi_50003_start_exam_ != NULL) vi_50003_start_exam_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_50003_end_exam()) {
      if (vi_50003_end_exam_ != NULL) vi_50003_end_exam_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_50003_not_slowdown()) {
      if (vi_50003_not_slowdown_ != NULL) vi_50003_not_slowdown_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_50003_turn_lamp_use_error()) {
      if (vi_50003_turn_lamp_use_error_ != NULL) vi_50003_turn_lamp_use_error_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_50003_turn_lamp_not_use()) {
      if (vi_50003_turn_lamp_not_use_ != NULL) vi_50003_turn_lamp_not_use_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_50003_horn_not_use()) {
      if (vi_50003_horn_not_use_ != NULL) vi_50003_horn_not_use_->::OPMessage::voiceItem::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 196608) {
    if (has_vi_50003_not_open_near_lamp()) {
      if (vi_50003_not_open_near_lamp_ != NULL) vi_50003_not_open_near_lamp_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_50003_not_open_far_lamp()) {
      if (vi_50003_not_open_far_lamp_ != NULL) vi_50003_not_open_far_lamp_->::OPMessage::voiceItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Judge50003::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OPMessage.Judge50003)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemcode_)));
          set_has_itemcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_itemName;
        break;
      }

      // optional string itemName = 2;
      case 2: {
        if (tag == 18) {
         parse_itemName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itemname().data(), this->itemname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "itemname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_max_time;
        break;
      }

      // optional .OPMessage.judgeItem max_time = 3;
      case 3: {
        if (tag == 26) {
         parse_max_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_max_speed;
        break;
      }

      // optional .OPMessage.judgeItem max_speed = 4;
      case 4: {
        if (tag == 34) {
         parse_max_speed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_speed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_judge_mode;
        break;
      }

      // optional .OPMessage.judgeItem judge_mode = 5;
      case 5: {
        if (tag == 42) {
         parse_judge_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_judge_mode()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_min_left_turn_signal_time;
        break;
      }

      // optional .OPMessage.judgeItem min_left_turn_signal_time = 6;
      case 6: {
        if (tag == 50) {
         parse_min_left_turn_signal_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_left_turn_signal_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_min_right_turn_signal_time;
        break;
      }

      // optional .OPMessage.judgeItem min_right_turn_signal_time = 7;
      case 7: {
        if (tag == 58) {
         parse_min_right_turn_signal_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_right_turn_signal_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_need_near_far_lamp_flash;
        break;
      }

      // optional .OPMessage.judgeItem need_near_far_lamp_flash = 8;
      case 8: {
        if (tag == 66) {
         parse_need_near_far_lamp_flash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_need_near_far_lamp_flash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_check_far_lamp;
        break;
      }

      // optional .OPMessage.judgeItem check_far_lamp = 9;
      case 9: {
        if (tag == 74) {
         parse_check_far_lamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_check_far_lamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_check_near_lamp;
        break;
      }

      // optional .OPMessage.judgeItem check_near_lamp = 10;
      case 10: {
        if (tag == 82) {
         parse_check_near_lamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_check_near_lamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_vi_50003_start_exam;
        break;
      }

      // optional .OPMessage.voiceItem vi_50003_start_exam = 11;
      case 11: {
        if (tag == 90) {
         parse_vi_50003_start_exam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_50003_start_exam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_vi_50003_end_exam;
        break;
      }

      // optional .OPMessage.voiceItem vi_50003_end_exam = 12;
      case 12: {
        if (tag == 98) {
         parse_vi_50003_end_exam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_50003_end_exam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_vi_50003_not_slowdown;
        break;
      }

      // optional .OPMessage.voiceItem vi_50003_not_slowdown = 13;
      case 13: {
        if (tag == 106) {
         parse_vi_50003_not_slowdown:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_50003_not_slowdown()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_vi_50003_turn_lamp_use_error;
        break;
      }

      // optional .OPMessage.voiceItem vi_50003_turn_lamp_use_error = 14;
      case 14: {
        if (tag == 114) {
         parse_vi_50003_turn_lamp_use_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_50003_turn_lamp_use_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_vi_50003_turn_lamp_not_use;
        break;
      }

      // optional .OPMessage.voiceItem vi_50003_turn_lamp_not_use = 15;
      case 15: {
        if (tag == 122) {
         parse_vi_50003_turn_lamp_not_use:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_50003_turn_lamp_not_use()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_vi_50003_horn_not_use;
        break;
      }

      // optional .OPMessage.voiceItem vi_50003_horn_not_use = 16;
      case 16: {
        if (tag == 130) {
         parse_vi_50003_horn_not_use:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_50003_horn_not_use()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_vi_50003_not_open_near_lamp;
        break;
      }

      // optional .OPMessage.voiceItem vi_50003_not_open_near_lamp = 17;
      case 17: {
        if (tag == 138) {
         parse_vi_50003_not_open_near_lamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_50003_not_open_near_lamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_vi_50003_not_open_far_lamp;
        break;
      }

      // optional .OPMessage.voiceItem vi_50003_not_open_far_lamp = 18;
      case 18: {
        if (tag == 146) {
         parse_vi_50003_not_open_far_lamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_50003_not_open_far_lamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OPMessage.Judge50003)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OPMessage.Judge50003)
  return false;
#undef DO_
}

void Judge50003::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OPMessage.Judge50003)
  // optional int32 itemCode = 1;
  if (has_itemcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemcode(), output);
  }

  // optional string itemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->itemname(), output);
  }

  // optional .OPMessage.judgeItem max_time = 3;
  if (has_max_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->max_time(), output);
  }

  // optional .OPMessage.judgeItem max_speed = 4;
  if (has_max_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->max_speed(), output);
  }

  // optional .OPMessage.judgeItem judge_mode = 5;
  if (has_judge_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->judge_mode(), output);
  }

  // optional .OPMessage.judgeItem min_left_turn_signal_time = 6;
  if (has_min_left_turn_signal_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->min_left_turn_signal_time(), output);
  }

  // optional .OPMessage.judgeItem min_right_turn_signal_time = 7;
  if (has_min_right_turn_signal_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->min_right_turn_signal_time(), output);
  }

  // optional .OPMessage.judgeItem need_near_far_lamp_flash = 8;
  if (has_need_near_far_lamp_flash()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->need_near_far_lamp_flash(), output);
  }

  // optional .OPMessage.judgeItem check_far_lamp = 9;
  if (has_check_far_lamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->check_far_lamp(), output);
  }

  // optional .OPMessage.judgeItem check_near_lamp = 10;
  if (has_check_near_lamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->check_near_lamp(), output);
  }

  // optional .OPMessage.voiceItem vi_50003_start_exam = 11;
  if (has_vi_50003_start_exam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->vi_50003_start_exam(), output);
  }

  // optional .OPMessage.voiceItem vi_50003_end_exam = 12;
  if (has_vi_50003_end_exam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->vi_50003_end_exam(), output);
  }

  // optional .OPMessage.voiceItem vi_50003_not_slowdown = 13;
  if (has_vi_50003_not_slowdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->vi_50003_not_slowdown(), output);
  }

  // optional .OPMessage.voiceItem vi_50003_turn_lamp_use_error = 14;
  if (has_vi_50003_turn_lamp_use_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->vi_50003_turn_lamp_use_error(), output);
  }

  // optional .OPMessage.voiceItem vi_50003_turn_lamp_not_use = 15;
  if (has_vi_50003_turn_lamp_not_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->vi_50003_turn_lamp_not_use(), output);
  }

  // optional .OPMessage.voiceItem vi_50003_horn_not_use = 16;
  if (has_vi_50003_horn_not_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->vi_50003_horn_not_use(), output);
  }

  // optional .OPMessage.voiceItem vi_50003_not_open_near_lamp = 17;
  if (has_vi_50003_not_open_near_lamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->vi_50003_not_open_near_lamp(), output);
  }

  // optional .OPMessage.voiceItem vi_50003_not_open_far_lamp = 18;
  if (has_vi_50003_not_open_far_lamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->vi_50003_not_open_far_lamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OPMessage.Judge50003)
}

::google::protobuf::uint8* Judge50003::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OPMessage.Judge50003)
  // optional int32 itemCode = 1;
  if (has_itemcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemcode(), target);
  }

  // optional string itemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->itemname(), target);
  }

  // optional .OPMessage.judgeItem max_time = 3;
  if (has_max_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->max_time(), target);
  }

  // optional .OPMessage.judgeItem max_speed = 4;
  if (has_max_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->max_speed(), target);
  }

  // optional .OPMessage.judgeItem judge_mode = 5;
  if (has_judge_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->judge_mode(), target);
  }

  // optional .OPMessage.judgeItem min_left_turn_signal_time = 6;
  if (has_min_left_turn_signal_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->min_left_turn_signal_time(), target);
  }

  // optional .OPMessage.judgeItem min_right_turn_signal_time = 7;
  if (has_min_right_turn_signal_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->min_right_turn_signal_time(), target);
  }

  // optional .OPMessage.judgeItem need_near_far_lamp_flash = 8;
  if (has_need_near_far_lamp_flash()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->need_near_far_lamp_flash(), target);
  }

  // optional .OPMessage.judgeItem check_far_lamp = 9;
  if (has_check_far_lamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->check_far_lamp(), target);
  }

  // optional .OPMessage.judgeItem check_near_lamp = 10;
  if (has_check_near_lamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->check_near_lamp(), target);
  }

  // optional .OPMessage.voiceItem vi_50003_start_exam = 11;
  if (has_vi_50003_start_exam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->vi_50003_start_exam(), target);
  }

  // optional .OPMessage.voiceItem vi_50003_end_exam = 12;
  if (has_vi_50003_end_exam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->vi_50003_end_exam(), target);
  }

  // optional .OPMessage.voiceItem vi_50003_not_slowdown = 13;
  if (has_vi_50003_not_slowdown()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->vi_50003_not_slowdown(), target);
  }

  // optional .OPMessage.voiceItem vi_50003_turn_lamp_use_error = 14;
  if (has_vi_50003_turn_lamp_use_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->vi_50003_turn_lamp_use_error(), target);
  }

  // optional .OPMessage.voiceItem vi_50003_turn_lamp_not_use = 15;
  if (has_vi_50003_turn_lamp_not_use()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->vi_50003_turn_lamp_not_use(), target);
  }

  // optional .OPMessage.voiceItem vi_50003_horn_not_use = 16;
  if (has_vi_50003_horn_not_use()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->vi_50003_horn_not_use(), target);
  }

  // optional .OPMessage.voiceItem vi_50003_not_open_near_lamp = 17;
  if (has_vi_50003_not_open_near_lamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->vi_50003_not_open_near_lamp(), target);
  }

  // optional .OPMessage.voiceItem vi_50003_not_open_far_lamp = 18;
  if (has_vi_50003_not_open_far_lamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->vi_50003_not_open_far_lamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OPMessage.Judge50003)
  return target;
}

int Judge50003::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemCode = 1;
    if (has_itemcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemcode());
    }

    // optional string itemName = 2;
    if (has_itemname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemname());
    }

    // optional .OPMessage.judgeItem max_time = 3;
    if (has_max_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_time());
    }

    // optional .OPMessage.judgeItem max_speed = 4;
    if (has_max_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_speed());
    }

    // optional .OPMessage.judgeItem judge_mode = 5;
    if (has_judge_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->judge_mode());
    }

    // optional .OPMessage.judgeItem min_left_turn_signal_time = 6;
    if (has_min_left_turn_signal_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->min_left_turn_signal_time());
    }

    // optional .OPMessage.judgeItem min_right_turn_signal_time = 7;
    if (has_min_right_turn_signal_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->min_right_turn_signal_time());
    }

    // optional .OPMessage.judgeItem need_near_far_lamp_flash = 8;
    if (has_need_near_far_lamp_flash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->need_near_far_lamp_flash());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .OPMessage.judgeItem check_far_lamp = 9;
    if (has_check_far_lamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->check_far_lamp());
    }

    // optional .OPMessage.judgeItem check_near_lamp = 10;
    if (has_check_near_lamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->check_near_lamp());
    }

    // optional .OPMessage.voiceItem vi_50003_start_exam = 11;
    if (has_vi_50003_start_exam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_50003_start_exam());
    }

    // optional .OPMessage.voiceItem vi_50003_end_exam = 12;
    if (has_vi_50003_end_exam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_50003_end_exam());
    }

    // optional .OPMessage.voiceItem vi_50003_not_slowdown = 13;
    if (has_vi_50003_not_slowdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_50003_not_slowdown());
    }

    // optional .OPMessage.voiceItem vi_50003_turn_lamp_use_error = 14;
    if (has_vi_50003_turn_lamp_use_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_50003_turn_lamp_use_error());
    }

    // optional .OPMessage.voiceItem vi_50003_turn_lamp_not_use = 15;
    if (has_vi_50003_turn_lamp_not_use()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_50003_turn_lamp_not_use());
    }

    // optional .OPMessage.voiceItem vi_50003_horn_not_use = 16;
    if (has_vi_50003_horn_not_use()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_50003_horn_not_use());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .OPMessage.voiceItem vi_50003_not_open_near_lamp = 17;
    if (has_vi_50003_not_open_near_lamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_50003_not_open_near_lamp());
    }

    // optional .OPMessage.voiceItem vi_50003_not_open_far_lamp = 18;
    if (has_vi_50003_not_open_far_lamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_50003_not_open_far_lamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Judge50003::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Judge50003* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Judge50003*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Judge50003::MergeFrom(const Judge50003& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemcode()) {
      set_itemcode(from.itemcode());
    }
    if (from.has_itemname()) {
      set_itemname(from.itemname());
    }
    if (from.has_max_time()) {
      mutable_max_time()->::OPMessage::judgeItem::MergeFrom(from.max_time());
    }
    if (from.has_max_speed()) {
      mutable_max_speed()->::OPMessage::judgeItem::MergeFrom(from.max_speed());
    }
    if (from.has_judge_mode()) {
      mutable_judge_mode()->::OPMessage::judgeItem::MergeFrom(from.judge_mode());
    }
    if (from.has_min_left_turn_signal_time()) {
      mutable_min_left_turn_signal_time()->::OPMessage::judgeItem::MergeFrom(from.min_left_turn_signal_time());
    }
    if (from.has_min_right_turn_signal_time()) {
      mutable_min_right_turn_signal_time()->::OPMessage::judgeItem::MergeFrom(from.min_right_turn_signal_time());
    }
    if (from.has_need_near_far_lamp_flash()) {
      mutable_need_near_far_lamp_flash()->::OPMessage::judgeItem::MergeFrom(from.need_near_far_lamp_flash());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_check_far_lamp()) {
      mutable_check_far_lamp()->::OPMessage::judgeItem::MergeFrom(from.check_far_lamp());
    }
    if (from.has_check_near_lamp()) {
      mutable_check_near_lamp()->::OPMessage::judgeItem::MergeFrom(from.check_near_lamp());
    }
    if (from.has_vi_50003_start_exam()) {
      mutable_vi_50003_start_exam()->::OPMessage::voiceItem::MergeFrom(from.vi_50003_start_exam());
    }
    if (from.has_vi_50003_end_exam()) {
      mutable_vi_50003_end_exam()->::OPMessage::voiceItem::MergeFrom(from.vi_50003_end_exam());
    }
    if (from.has_vi_50003_not_slowdown()) {
      mutable_vi_50003_not_slowdown()->::OPMessage::voiceItem::MergeFrom(from.vi_50003_not_slowdown());
    }
    if (from.has_vi_50003_turn_lamp_use_error()) {
      mutable_vi_50003_turn_lamp_use_error()->::OPMessage::voiceItem::MergeFrom(from.vi_50003_turn_lamp_use_error());
    }
    if (from.has_vi_50003_turn_lamp_not_use()) {
      mutable_vi_50003_turn_lamp_not_use()->::OPMessage::voiceItem::MergeFrom(from.vi_50003_turn_lamp_not_use());
    }
    if (from.has_vi_50003_horn_not_use()) {
      mutable_vi_50003_horn_not_use()->::OPMessage::voiceItem::MergeFrom(from.vi_50003_horn_not_use());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_vi_50003_not_open_near_lamp()) {
      mutable_vi_50003_not_open_near_lamp()->::OPMessage::voiceItem::MergeFrom(from.vi_50003_not_open_near_lamp());
    }
    if (from.has_vi_50003_not_open_far_lamp()) {
      mutable_vi_50003_not_open_far_lamp()->::OPMessage::voiceItem::MergeFrom(from.vi_50003_not_open_far_lamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Judge50003::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Judge50003::CopyFrom(const Judge50003& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Judge50003::IsInitialized() const {

  return true;
}

void Judge50003::Swap(Judge50003* other) {
  if (other != this) {
    std::swap(itemcode_, other->itemcode_);
    std::swap(itemname_, other->itemname_);
    std::swap(max_time_, other->max_time_);
    std::swap(max_speed_, other->max_speed_);
    std::swap(judge_mode_, other->judge_mode_);
    std::swap(min_left_turn_signal_time_, other->min_left_turn_signal_time_);
    std::swap(min_right_turn_signal_time_, other->min_right_turn_signal_time_);
    std::swap(need_near_far_lamp_flash_, other->need_near_far_lamp_flash_);
    std::swap(check_far_lamp_, other->check_far_lamp_);
    std::swap(check_near_lamp_, other->check_near_lamp_);
    std::swap(vi_50003_start_exam_, other->vi_50003_start_exam_);
    std::swap(vi_50003_end_exam_, other->vi_50003_end_exam_);
    std::swap(vi_50003_not_slowdown_, other->vi_50003_not_slowdown_);
    std::swap(vi_50003_turn_lamp_use_error_, other->vi_50003_turn_lamp_use_error_);
    std::swap(vi_50003_turn_lamp_not_use_, other->vi_50003_turn_lamp_not_use_);
    std::swap(vi_50003_horn_not_use_, other->vi_50003_horn_not_use_);
    std::swap(vi_50003_not_open_near_lamp_, other->vi_50003_not_open_near_lamp_);
    std::swap(vi_50003_not_open_far_lamp_, other->vi_50003_not_open_far_lamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Judge50003::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Judge50003_descriptor_;
  metadata.reflection = Judge50003_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Judge50004::kItemCodeFieldNumber;
const int Judge50004::kItemNameFieldNumber;
const int Judge50004::kMaxTimeFieldNumber;
const int Judge50004::kMaxSpeedFieldNumber;
const int Judge50004::kJudgeModeFieldNumber;
const int Judge50004::kMinLeftTurnSignalTimeFieldNumber;
const int Judge50004::kMinRightTurnSignalTimeFieldNumber;
const int Judge50004::kNeedNearFarLampFlashFieldNumber;
const int Judge50004::kCheckFarLampFieldNumber;
const int Judge50004::kCheckNearLampFieldNumber;
const int Judge50004::kVi50004StartExamFieldNumber;
const int Judge50004::kVi50004EndExamFieldNumber;
const int Judge50004::kVi50004NotSlowdownFieldNumber;
const int Judge50004::kVi50004TurnLampUseErrorFieldNumber;
const int Judge50004::kVi50004TurnLampNotUseFieldNumber;
const int Judge50004::kVi50004HornNotUseFieldNumber;
const int Judge50004::kVi50004NotOpenNearLampFieldNumber;
const int Judge50004::kVi50004NotOpenFarLampFieldNumber;
#endif  // !_MSC_VER

Judge50004::Judge50004()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OPMessage.Judge50004)
}

void Judge50004::InitAsDefaultInstance() {
  max_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  max_speed_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  judge_mode_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  min_left_turn_signal_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  min_right_turn_signal_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  need_near_far_lamp_flash_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  check_far_lamp_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  check_near_lamp_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  vi_50004_start_exam_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_50004_end_exam_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_50004_not_slowdown_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_50004_turn_lamp_use_error_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_50004_turn_lamp_not_use_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_50004_horn_not_use_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_50004_not_open_near_lamp_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_50004_not_open_far_lamp_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
}

Judge50004::Judge50004(const Judge50004& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OPMessage.Judge50004)
}

void Judge50004::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  itemcode_ = 0;
  itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_time_ = NULL;
  max_speed_ = NULL;
  judge_mode_ = NULL;
  min_left_turn_signal_time_ = NULL;
  min_right_turn_signal_time_ = NULL;
  need_near_far_lamp_flash_ = NULL;
  check_far_lamp_ = NULL;
  check_near_lamp_ = NULL;
  vi_50004_start_exam_ = NULL;
  vi_50004_end_exam_ = NULL;
  vi_50004_not_slowdown_ = NULL;
  vi_50004_turn_lamp_use_error_ = NULL;
  vi_50004_turn_lamp_not_use_ = NULL;
  vi_50004_horn_not_use_ = NULL;
  vi_50004_not_open_near_lamp_ = NULL;
  vi_50004_not_open_far_lamp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Judge50004::~Judge50004() {
  // @@protoc_insertion_point(destructor:OPMessage.Judge50004)
  SharedDtor();
}

void Judge50004::SharedDtor() {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (this != default_instance_) {
    delete max_time_;
    delete max_speed_;
    delete judge_mode_;
    delete min_left_turn_signal_time_;
    delete min_right_turn_signal_time_;
    delete need_near_far_lamp_flash_;
    delete check_far_lamp_;
    delete check_near_lamp_;
    delete vi_50004_start_exam_;
    delete vi_50004_end_exam_;
    delete vi_50004_not_slowdown_;
    delete vi_50004_turn_lamp_use_error_;
    delete vi_50004_turn_lamp_not_use_;
    delete vi_50004_horn_not_use_;
    delete vi_50004_not_open_near_lamp_;
    delete vi_50004_not_open_far_lamp_;
  }
}

void Judge50004::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Judge50004::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Judge50004_descriptor_;
}

const Judge50004& Judge50004::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageKm3Config_2eproto();
  return *default_instance_;
}

Judge50004* Judge50004::default_instance_ = NULL;

Judge50004* Judge50004::New() const {
  return new Judge50004;
}

void Judge50004::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    itemcode_ = 0;
    if (has_itemname()) {
      if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        itemname_->clear();
      }
    }
    if (has_max_time()) {
      if (max_time_ != NULL) max_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_max_speed()) {
      if (max_speed_ != NULL) max_speed_->::OPMessage::judgeItem::Clear();
    }
    if (has_judge_mode()) {
      if (judge_mode_ != NULL) judge_mode_->::OPMessage::judgeItem::Clear();
    }
    if (has_min_left_turn_signal_time()) {
      if (min_left_turn_signal_time_ != NULL) min_left_turn_signal_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_min_right_turn_signal_time()) {
      if (min_right_turn_signal_time_ != NULL) min_right_turn_signal_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_need_near_far_lamp_flash()) {
      if (need_near_far_lamp_flash_ != NULL) need_near_far_lamp_flash_->::OPMessage::judgeItem::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_check_far_lamp()) {
      if (check_far_lamp_ != NULL) check_far_lamp_->::OPMessage::judgeItem::Clear();
    }
    if (has_check_near_lamp()) {
      if (check_near_lamp_ != NULL) check_near_lamp_->::OPMessage::judgeItem::Clear();
    }
    if (has_vi_50004_start_exam()) {
      if (vi_50004_start_exam_ != NULL) vi_50004_start_exam_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_50004_end_exam()) {
      if (vi_50004_end_exam_ != NULL) vi_50004_end_exam_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_50004_not_slowdown()) {
      if (vi_50004_not_slowdown_ != NULL) vi_50004_not_slowdown_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_50004_turn_lamp_use_error()) {
      if (vi_50004_turn_lamp_use_error_ != NULL) vi_50004_turn_lamp_use_error_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_50004_turn_lamp_not_use()) {
      if (vi_50004_turn_lamp_not_use_ != NULL) vi_50004_turn_lamp_not_use_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_50004_horn_not_use()) {
      if (vi_50004_horn_not_use_ != NULL) vi_50004_horn_not_use_->::OPMessage::voiceItem::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 196608) {
    if (has_vi_50004_not_open_near_lamp()) {
      if (vi_50004_not_open_near_lamp_ != NULL) vi_50004_not_open_near_lamp_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_50004_not_open_far_lamp()) {
      if (vi_50004_not_open_far_lamp_ != NULL) vi_50004_not_open_far_lamp_->::OPMessage::voiceItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Judge50004::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OPMessage.Judge50004)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemcode_)));
          set_has_itemcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_itemName;
        break;
      }

      // optional string itemName = 2;
      case 2: {
        if (tag == 18) {
         parse_itemName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itemname().data(), this->itemname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "itemname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_max_time;
        break;
      }

      // optional .OPMessage.judgeItem max_time = 3;
      case 3: {
        if (tag == 26) {
         parse_max_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_max_speed;
        break;
      }

      // optional .OPMessage.judgeItem max_speed = 4;
      case 4: {
        if (tag == 34) {
         parse_max_speed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_speed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_judge_mode;
        break;
      }

      // optional .OPMessage.judgeItem judge_mode = 5;
      case 5: {
        if (tag == 42) {
         parse_judge_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_judge_mode()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_min_left_turn_signal_time;
        break;
      }

      // optional .OPMessage.judgeItem min_left_turn_signal_time = 6;
      case 6: {
        if (tag == 50) {
         parse_min_left_turn_signal_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_left_turn_signal_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_min_right_turn_signal_time;
        break;
      }

      // optional .OPMessage.judgeItem min_right_turn_signal_time = 7;
      case 7: {
        if (tag == 58) {
         parse_min_right_turn_signal_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_right_turn_signal_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_need_near_far_lamp_flash;
        break;
      }

      // optional .OPMessage.judgeItem need_near_far_lamp_flash = 8;
      case 8: {
        if (tag == 66) {
         parse_need_near_far_lamp_flash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_need_near_far_lamp_flash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_check_far_lamp;
        break;
      }

      // optional .OPMessage.judgeItem check_far_lamp = 9;
      case 9: {
        if (tag == 74) {
         parse_check_far_lamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_check_far_lamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_check_near_lamp;
        break;
      }

      // optional .OPMessage.judgeItem check_near_lamp = 10;
      case 10: {
        if (tag == 82) {
         parse_check_near_lamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_check_near_lamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_vi_50004_start_exam;
        break;
      }

      // optional .OPMessage.voiceItem vi_50004_start_exam = 11;
      case 11: {
        if (tag == 90) {
         parse_vi_50004_start_exam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_50004_start_exam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_vi_50004_end_exam;
        break;
      }

      // optional .OPMessage.voiceItem vi_50004_end_exam = 12;
      case 12: {
        if (tag == 98) {
         parse_vi_50004_end_exam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_50004_end_exam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_vi_50004_not_slowdown;
        break;
      }

      // optional .OPMessage.voiceItem vi_50004_not_slowdown = 13;
      case 13: {
        if (tag == 106) {
         parse_vi_50004_not_slowdown:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_50004_not_slowdown()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_vi_50004_turn_lamp_use_error;
        break;
      }

      // optional .OPMessage.voiceItem vi_50004_turn_lamp_use_error = 14;
      case 14: {
        if (tag == 114) {
         parse_vi_50004_turn_lamp_use_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_50004_turn_lamp_use_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_vi_50004_turn_lamp_not_use;
        break;
      }

      // optional .OPMessage.voiceItem vi_50004_turn_lamp_not_use = 15;
      case 15: {
        if (tag == 122) {
         parse_vi_50004_turn_lamp_not_use:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_50004_turn_lamp_not_use()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_vi_50004_horn_not_use;
        break;
      }

      // optional .OPMessage.voiceItem vi_50004_horn_not_use = 16;
      case 16: {
        if (tag == 130) {
         parse_vi_50004_horn_not_use:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_50004_horn_not_use()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_vi_50004_not_open_near_lamp;
        break;
      }

      // optional .OPMessage.voiceItem vi_50004_not_open_near_lamp = 17;
      case 17: {
        if (tag == 138) {
         parse_vi_50004_not_open_near_lamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_50004_not_open_near_lamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_vi_50004_not_open_far_lamp;
        break;
      }

      // optional .OPMessage.voiceItem vi_50004_not_open_far_lamp = 18;
      case 18: {
        if (tag == 146) {
         parse_vi_50004_not_open_far_lamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_50004_not_open_far_lamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OPMessage.Judge50004)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OPMessage.Judge50004)
  return false;
#undef DO_
}

void Judge50004::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OPMessage.Judge50004)
  // optional int32 itemCode = 1;
  if (has_itemcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemcode(), output);
  }

  // optional string itemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->itemname(), output);
  }

  // optional .OPMessage.judgeItem max_time = 3;
  if (has_max_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->max_time(), output);
  }

  // optional .OPMessage.judgeItem max_speed = 4;
  if (has_max_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->max_speed(), output);
  }

  // optional .OPMessage.judgeItem judge_mode = 5;
  if (has_judge_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->judge_mode(), output);
  }

  // optional .OPMessage.judgeItem min_left_turn_signal_time = 6;
  if (has_min_left_turn_signal_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->min_left_turn_signal_time(), output);
  }

  // optional .OPMessage.judgeItem min_right_turn_signal_time = 7;
  if (has_min_right_turn_signal_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->min_right_turn_signal_time(), output);
  }

  // optional .OPMessage.judgeItem need_near_far_lamp_flash = 8;
  if (has_need_near_far_lamp_flash()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->need_near_far_lamp_flash(), output);
  }

  // optional .OPMessage.judgeItem check_far_lamp = 9;
  if (has_check_far_lamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->check_far_lamp(), output);
  }

  // optional .OPMessage.judgeItem check_near_lamp = 10;
  if (has_check_near_lamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->check_near_lamp(), output);
  }

  // optional .OPMessage.voiceItem vi_50004_start_exam = 11;
  if (has_vi_50004_start_exam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->vi_50004_start_exam(), output);
  }

  // optional .OPMessage.voiceItem vi_50004_end_exam = 12;
  if (has_vi_50004_end_exam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->vi_50004_end_exam(), output);
  }

  // optional .OPMessage.voiceItem vi_50004_not_slowdown = 13;
  if (has_vi_50004_not_slowdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->vi_50004_not_slowdown(), output);
  }

  // optional .OPMessage.voiceItem vi_50004_turn_lamp_use_error = 14;
  if (has_vi_50004_turn_lamp_use_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->vi_50004_turn_lamp_use_error(), output);
  }

  // optional .OPMessage.voiceItem vi_50004_turn_lamp_not_use = 15;
  if (has_vi_50004_turn_lamp_not_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->vi_50004_turn_lamp_not_use(), output);
  }

  // optional .OPMessage.voiceItem vi_50004_horn_not_use = 16;
  if (has_vi_50004_horn_not_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->vi_50004_horn_not_use(), output);
  }

  // optional .OPMessage.voiceItem vi_50004_not_open_near_lamp = 17;
  if (has_vi_50004_not_open_near_lamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->vi_50004_not_open_near_lamp(), output);
  }

  // optional .OPMessage.voiceItem vi_50004_not_open_far_lamp = 18;
  if (has_vi_50004_not_open_far_lamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->vi_50004_not_open_far_lamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OPMessage.Judge50004)
}

::google::protobuf::uint8* Judge50004::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OPMessage.Judge50004)
  // optional int32 itemCode = 1;
  if (has_itemcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemcode(), target);
  }

  // optional string itemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->itemname(), target);
  }

  // optional .OPMessage.judgeItem max_time = 3;
  if (has_max_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->max_time(), target);
  }

  // optional .OPMessage.judgeItem max_speed = 4;
  if (has_max_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->max_speed(), target);
  }

  // optional .OPMessage.judgeItem judge_mode = 5;
  if (has_judge_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->judge_mode(), target);
  }

  // optional .OPMessage.judgeItem min_left_turn_signal_time = 6;
  if (has_min_left_turn_signal_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->min_left_turn_signal_time(), target);
  }

  // optional .OPMessage.judgeItem min_right_turn_signal_time = 7;
  if (has_min_right_turn_signal_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->min_right_turn_signal_time(), target);
  }

  // optional .OPMessage.judgeItem need_near_far_lamp_flash = 8;
  if (has_need_near_far_lamp_flash()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->need_near_far_lamp_flash(), target);
  }

  // optional .OPMessage.judgeItem check_far_lamp = 9;
  if (has_check_far_lamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->check_far_lamp(), target);
  }

  // optional .OPMessage.judgeItem check_near_lamp = 10;
  if (has_check_near_lamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->check_near_lamp(), target);
  }

  // optional .OPMessage.voiceItem vi_50004_start_exam = 11;
  if (has_vi_50004_start_exam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->vi_50004_start_exam(), target);
  }

  // optional .OPMessage.voiceItem vi_50004_end_exam = 12;
  if (has_vi_50004_end_exam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->vi_50004_end_exam(), target);
  }

  // optional .OPMessage.voiceItem vi_50004_not_slowdown = 13;
  if (has_vi_50004_not_slowdown()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->vi_50004_not_slowdown(), target);
  }

  // optional .OPMessage.voiceItem vi_50004_turn_lamp_use_error = 14;
  if (has_vi_50004_turn_lamp_use_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->vi_50004_turn_lamp_use_error(), target);
  }

  // optional .OPMessage.voiceItem vi_50004_turn_lamp_not_use = 15;
  if (has_vi_50004_turn_lamp_not_use()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->vi_50004_turn_lamp_not_use(), target);
  }

  // optional .OPMessage.voiceItem vi_50004_horn_not_use = 16;
  if (has_vi_50004_horn_not_use()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->vi_50004_horn_not_use(), target);
  }

  // optional .OPMessage.voiceItem vi_50004_not_open_near_lamp = 17;
  if (has_vi_50004_not_open_near_lamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->vi_50004_not_open_near_lamp(), target);
  }

  // optional .OPMessage.voiceItem vi_50004_not_open_far_lamp = 18;
  if (has_vi_50004_not_open_far_lamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->vi_50004_not_open_far_lamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OPMessage.Judge50004)
  return target;
}

int Judge50004::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemCode = 1;
    if (has_itemcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemcode());
    }

    // optional string itemName = 2;
    if (has_itemname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemname());
    }

    // optional .OPMessage.judgeItem max_time = 3;
    if (has_max_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_time());
    }

    // optional .OPMessage.judgeItem max_speed = 4;
    if (has_max_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_speed());
    }

    // optional .OPMessage.judgeItem judge_mode = 5;
    if (has_judge_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->judge_mode());
    }

    // optional .OPMessage.judgeItem min_left_turn_signal_time = 6;
    if (has_min_left_turn_signal_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->min_left_turn_signal_time());
    }

    // optional .OPMessage.judgeItem min_right_turn_signal_time = 7;
    if (has_min_right_turn_signal_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->min_right_turn_signal_time());
    }

    // optional .OPMessage.judgeItem need_near_far_lamp_flash = 8;
    if (has_need_near_far_lamp_flash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->need_near_far_lamp_flash());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .OPMessage.judgeItem check_far_lamp = 9;
    if (has_check_far_lamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->check_far_lamp());
    }

    // optional .OPMessage.judgeItem check_near_lamp = 10;
    if (has_check_near_lamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->check_near_lamp());
    }

    // optional .OPMessage.voiceItem vi_50004_start_exam = 11;
    if (has_vi_50004_start_exam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_50004_start_exam());
    }

    // optional .OPMessage.voiceItem vi_50004_end_exam = 12;
    if (has_vi_50004_end_exam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_50004_end_exam());
    }

    // optional .OPMessage.voiceItem vi_50004_not_slowdown = 13;
    if (has_vi_50004_not_slowdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_50004_not_slowdown());
    }

    // optional .OPMessage.voiceItem vi_50004_turn_lamp_use_error = 14;
    if (has_vi_50004_turn_lamp_use_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_50004_turn_lamp_use_error());
    }

    // optional .OPMessage.voiceItem vi_50004_turn_lamp_not_use = 15;
    if (has_vi_50004_turn_lamp_not_use()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_50004_turn_lamp_not_use());
    }

    // optional .OPMessage.voiceItem vi_50004_horn_not_use = 16;
    if (has_vi_50004_horn_not_use()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_50004_horn_not_use());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .OPMessage.voiceItem vi_50004_not_open_near_lamp = 17;
    if (has_vi_50004_not_open_near_lamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_50004_not_open_near_lamp());
    }

    // optional .OPMessage.voiceItem vi_50004_not_open_far_lamp = 18;
    if (has_vi_50004_not_open_far_lamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_50004_not_open_far_lamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Judge50004::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Judge50004* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Judge50004*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Judge50004::MergeFrom(const Judge50004& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemcode()) {
      set_itemcode(from.itemcode());
    }
    if (from.has_itemname()) {
      set_itemname(from.itemname());
    }
    if (from.has_max_time()) {
      mutable_max_time()->::OPMessage::judgeItem::MergeFrom(from.max_time());
    }
    if (from.has_max_speed()) {
      mutable_max_speed()->::OPMessage::judgeItem::MergeFrom(from.max_speed());
    }
    if (from.has_judge_mode()) {
      mutable_judge_mode()->::OPMessage::judgeItem::MergeFrom(from.judge_mode());
    }
    if (from.has_min_left_turn_signal_time()) {
      mutable_min_left_turn_signal_time()->::OPMessage::judgeItem::MergeFrom(from.min_left_turn_signal_time());
    }
    if (from.has_min_right_turn_signal_time()) {
      mutable_min_right_turn_signal_time()->::OPMessage::judgeItem::MergeFrom(from.min_right_turn_signal_time());
    }
    if (from.has_need_near_far_lamp_flash()) {
      mutable_need_near_far_lamp_flash()->::OPMessage::judgeItem::MergeFrom(from.need_near_far_lamp_flash());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_check_far_lamp()) {
      mutable_check_far_lamp()->::OPMessage::judgeItem::MergeFrom(from.check_far_lamp());
    }
    if (from.has_check_near_lamp()) {
      mutable_check_near_lamp()->::OPMessage::judgeItem::MergeFrom(from.check_near_lamp());
    }
    if (from.has_vi_50004_start_exam()) {
      mutable_vi_50004_start_exam()->::OPMessage::voiceItem::MergeFrom(from.vi_50004_start_exam());
    }
    if (from.has_vi_50004_end_exam()) {
      mutable_vi_50004_end_exam()->::OPMessage::voiceItem::MergeFrom(from.vi_50004_end_exam());
    }
    if (from.has_vi_50004_not_slowdown()) {
      mutable_vi_50004_not_slowdown()->::OPMessage::voiceItem::MergeFrom(from.vi_50004_not_slowdown());
    }
    if (from.has_vi_50004_turn_lamp_use_error()) {
      mutable_vi_50004_turn_lamp_use_error()->::OPMessage::voiceItem::MergeFrom(from.vi_50004_turn_lamp_use_error());
    }
    if (from.has_vi_50004_turn_lamp_not_use()) {
      mutable_vi_50004_turn_lamp_not_use()->::OPMessage::voiceItem::MergeFrom(from.vi_50004_turn_lamp_not_use());
    }
    if (from.has_vi_50004_horn_not_use()) {
      mutable_vi_50004_horn_not_use()->::OPMessage::voiceItem::MergeFrom(from.vi_50004_horn_not_use());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_vi_50004_not_open_near_lamp()) {
      mutable_vi_50004_not_open_near_lamp()->::OPMessage::voiceItem::MergeFrom(from.vi_50004_not_open_near_lamp());
    }
    if (from.has_vi_50004_not_open_far_lamp()) {
      mutable_vi_50004_not_open_far_lamp()->::OPMessage::voiceItem::MergeFrom(from.vi_50004_not_open_far_lamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Judge50004::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Judge50004::CopyFrom(const Judge50004& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Judge50004::IsInitialized() const {

  return true;
}

void Judge50004::Swap(Judge50004* other) {
  if (other != this) {
    std::swap(itemcode_, other->itemcode_);
    std::swap(itemname_, other->itemname_);
    std::swap(max_time_, other->max_time_);
    std::swap(max_speed_, other->max_speed_);
    std::swap(judge_mode_, other->judge_mode_);
    std::swap(min_left_turn_signal_time_, other->min_left_turn_signal_time_);
    std::swap(min_right_turn_signal_time_, other->min_right_turn_signal_time_);
    std::swap(need_near_far_lamp_flash_, other->need_near_far_lamp_flash_);
    std::swap(check_far_lamp_, other->check_far_lamp_);
    std::swap(check_near_lamp_, other->check_near_lamp_);
    std::swap(vi_50004_start_exam_, other->vi_50004_start_exam_);
    std::swap(vi_50004_end_exam_, other->vi_50004_end_exam_);
    std::swap(vi_50004_not_slowdown_, other->vi_50004_not_slowdown_);
    std::swap(vi_50004_turn_lamp_use_error_, other->vi_50004_turn_lamp_use_error_);
    std::swap(vi_50004_turn_lamp_not_use_, other->vi_50004_turn_lamp_not_use_);
    std::swap(vi_50004_horn_not_use_, other->vi_50004_horn_not_use_);
    std::swap(vi_50004_not_open_near_lamp_, other->vi_50004_not_open_near_lamp_);
    std::swap(vi_50004_not_open_far_lamp_, other->vi_50004_not_open_far_lamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Judge50004::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Judge50004_descriptor_;
  metadata.reflection = Judge50004_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Judge50005::kItemCodeFieldNumber;
const int Judge50005::kItemNameFieldNumber;
const int Judge50005::kMaxTimeFieldNumber;
const int Judge50005::kMaxSpeedFieldNumber;
const int Judge50005::kJudgeModeFieldNumber;
const int Judge50005::kMinLeftTurnSignalTimeFieldNumber;
const int Judge50005::kMinRightTurnSignalTimeFieldNumber;
const int Judge50005::kNeedNearFarLampFlashFieldNumber;
const int Judge50005::kCheckFarLampFieldNumber;
const int Judge50005::kCheckNearLampFieldNumber;
const int Judge50005::kVi50005StartExamFieldNumber;
const int Judge50005::kVi50005EndExamFieldNumber;
const int Judge50005::kVi50005NotSlowdownFieldNumber;
const int Judge50005::kVi50005TurnLampUseErrorFieldNumber;
const int Judge50005::kVi50005TurnLampNotUseFieldNumber;
const int Judge50005::kVi50005HornNotUseFieldNumber;
const int Judge50005::kVi50005NotOpenNearLampFieldNumber;
const int Judge50005::kVi50005NotOpenFarLampFieldNumber;
#endif  // !_MSC_VER

Judge50005::Judge50005()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OPMessage.Judge50005)
}

void Judge50005::InitAsDefaultInstance() {
  max_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  max_speed_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  judge_mode_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  min_left_turn_signal_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  min_right_turn_signal_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  need_near_far_lamp_flash_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  check_far_lamp_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  check_near_lamp_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  vi_50005_start_exam_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_50005_end_exam_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_50005_not_slowdown_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_50005_turn_lamp_use_error_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_50005_turn_lamp_not_use_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_50005_horn_not_use_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_50005_not_open_near_lamp_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_50005_not_open_far_lamp_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
}

Judge50005::Judge50005(const Judge50005& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OPMessage.Judge50005)
}

void Judge50005::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  itemcode_ = 0;
  itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_time_ = NULL;
  max_speed_ = NULL;
  judge_mode_ = NULL;
  min_left_turn_signal_time_ = NULL;
  min_right_turn_signal_time_ = NULL;
  need_near_far_lamp_flash_ = NULL;
  check_far_lamp_ = NULL;
  check_near_lamp_ = NULL;
  vi_50005_start_exam_ = NULL;
  vi_50005_end_exam_ = NULL;
  vi_50005_not_slowdown_ = NULL;
  vi_50005_turn_lamp_use_error_ = NULL;
  vi_50005_turn_lamp_not_use_ = NULL;
  vi_50005_horn_not_use_ = NULL;
  vi_50005_not_open_near_lamp_ = NULL;
  vi_50005_not_open_far_lamp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Judge50005::~Judge50005() {
  // @@protoc_insertion_point(destructor:OPMessage.Judge50005)
  SharedDtor();
}

void Judge50005::SharedDtor() {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (this != default_instance_) {
    delete max_time_;
    delete max_speed_;
    delete judge_mode_;
    delete min_left_turn_signal_time_;
    delete min_right_turn_signal_time_;
    delete need_near_far_lamp_flash_;
    delete check_far_lamp_;
    delete check_near_lamp_;
    delete vi_50005_start_exam_;
    delete vi_50005_end_exam_;
    delete vi_50005_not_slowdown_;
    delete vi_50005_turn_lamp_use_error_;
    delete vi_50005_turn_lamp_not_use_;
    delete vi_50005_horn_not_use_;
    delete vi_50005_not_open_near_lamp_;
    delete vi_50005_not_open_far_lamp_;
  }
}

void Judge50005::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Judge50005::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Judge50005_descriptor_;
}

const Judge50005& Judge50005::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageKm3Config_2eproto();
  return *default_instance_;
}

Judge50005* Judge50005::default_instance_ = NULL;

Judge50005* Judge50005::New() const {
  return new Judge50005;
}

void Judge50005::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    itemcode_ = 0;
    if (has_itemname()) {
      if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        itemname_->clear();
      }
    }
    if (has_max_time()) {
      if (max_time_ != NULL) max_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_max_speed()) {
      if (max_speed_ != NULL) max_speed_->::OPMessage::judgeItem::Clear();
    }
    if (has_judge_mode()) {
      if (judge_mode_ != NULL) judge_mode_->::OPMessage::judgeItem::Clear();
    }
    if (has_min_left_turn_signal_time()) {
      if (min_left_turn_signal_time_ != NULL) min_left_turn_signal_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_min_right_turn_signal_time()) {
      if (min_right_turn_signal_time_ != NULL) min_right_turn_signal_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_need_near_far_lamp_flash()) {
      if (need_near_far_lamp_flash_ != NULL) need_near_far_lamp_flash_->::OPMessage::judgeItem::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_check_far_lamp()) {
      if (check_far_lamp_ != NULL) check_far_lamp_->::OPMessage::judgeItem::Clear();
    }
    if (has_check_near_lamp()) {
      if (check_near_lamp_ != NULL) check_near_lamp_->::OPMessage::judgeItem::Clear();
    }
    if (has_vi_50005_start_exam()) {
      if (vi_50005_start_exam_ != NULL) vi_50005_start_exam_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_50005_end_exam()) {
      if (vi_50005_end_exam_ != NULL) vi_50005_end_exam_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_50005_not_slowdown()) {
      if (vi_50005_not_slowdown_ != NULL) vi_50005_not_slowdown_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_50005_turn_lamp_use_error()) {
      if (vi_50005_turn_lamp_use_error_ != NULL) vi_50005_turn_lamp_use_error_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_50005_turn_lamp_not_use()) {
      if (vi_50005_turn_lamp_not_use_ != NULL) vi_50005_turn_lamp_not_use_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_50005_horn_not_use()) {
      if (vi_50005_horn_not_use_ != NULL) vi_50005_horn_not_use_->::OPMessage::voiceItem::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 196608) {
    if (has_vi_50005_not_open_near_lamp()) {
      if (vi_50005_not_open_near_lamp_ != NULL) vi_50005_not_open_near_lamp_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_50005_not_open_far_lamp()) {
      if (vi_50005_not_open_far_lamp_ != NULL) vi_50005_not_open_far_lamp_->::OPMessage::voiceItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Judge50005::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OPMessage.Judge50005)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemcode_)));
          set_has_itemcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_itemName;
        break;
      }

      // optional string itemName = 2;
      case 2: {
        if (tag == 18) {
         parse_itemName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itemname().data(), this->itemname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "itemname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_max_time;
        break;
      }

      // optional .OPMessage.judgeItem max_time = 3;
      case 3: {
        if (tag == 26) {
         parse_max_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_max_speed;
        break;
      }

      // optional .OPMessage.judgeItem max_speed = 4;
      case 4: {
        if (tag == 34) {
         parse_max_speed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_speed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_judge_mode;
        break;
      }

      // optional .OPMessage.judgeItem judge_mode = 5;
      case 5: {
        if (tag == 42) {
         parse_judge_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_judge_mode()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_min_left_turn_signal_time;
        break;
      }

      // optional .OPMessage.judgeItem min_left_turn_signal_time = 6;
      case 6: {
        if (tag == 50) {
         parse_min_left_turn_signal_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_left_turn_signal_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_min_right_turn_signal_time;
        break;
      }

      // optional .OPMessage.judgeItem min_right_turn_signal_time = 7;
      case 7: {
        if (tag == 58) {
         parse_min_right_turn_signal_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_right_turn_signal_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_need_near_far_lamp_flash;
        break;
      }

      // optional .OPMessage.judgeItem need_near_far_lamp_flash = 8;
      case 8: {
        if (tag == 66) {
         parse_need_near_far_lamp_flash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_need_near_far_lamp_flash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_check_far_lamp;
        break;
      }

      // optional .OPMessage.judgeItem check_far_lamp = 9;
      case 9: {
        if (tag == 74) {
         parse_check_far_lamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_check_far_lamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_check_near_lamp;
        break;
      }

      // optional .OPMessage.judgeItem check_near_lamp = 10;
      case 10: {
        if (tag == 82) {
         parse_check_near_lamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_check_near_lamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_vi_50005_start_exam;
        break;
      }

      // optional .OPMessage.voiceItem vi_50005_start_exam = 11;
      case 11: {
        if (tag == 90) {
         parse_vi_50005_start_exam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_50005_start_exam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_vi_50005_end_exam;
        break;
      }

      // optional .OPMessage.voiceItem vi_50005_end_exam = 12;
      case 12: {
        if (tag == 98) {
         parse_vi_50005_end_exam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_50005_end_exam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_vi_50005_not_slowdown;
        break;
      }

      // optional .OPMessage.voiceItem vi_50005_not_slowdown = 13;
      case 13: {
        if (tag == 106) {
         parse_vi_50005_not_slowdown:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_50005_not_slowdown()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_vi_50005_turn_lamp_use_error;
        break;
      }

      // optional .OPMessage.voiceItem vi_50005_turn_lamp_use_error = 14;
      case 14: {
        if (tag == 114) {
         parse_vi_50005_turn_lamp_use_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_50005_turn_lamp_use_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_vi_50005_turn_lamp_not_use;
        break;
      }

      // optional .OPMessage.voiceItem vi_50005_turn_lamp_not_use = 15;
      case 15: {
        if (tag == 122) {
         parse_vi_50005_turn_lamp_not_use:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_50005_turn_lamp_not_use()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_vi_50005_horn_not_use;
        break;
      }

      // optional .OPMessage.voiceItem vi_50005_horn_not_use = 16;
      case 16: {
        if (tag == 130) {
         parse_vi_50005_horn_not_use:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_50005_horn_not_use()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_vi_50005_not_open_near_lamp;
        break;
      }

      // optional .OPMessage.voiceItem vi_50005_not_open_near_lamp = 17;
      case 17: {
        if (tag == 138) {
         parse_vi_50005_not_open_near_lamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_50005_not_open_near_lamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_vi_50005_not_open_far_lamp;
        break;
      }

      // optional .OPMessage.voiceItem vi_50005_not_open_far_lamp = 18;
      case 18: {
        if (tag == 146) {
         parse_vi_50005_not_open_far_lamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_50005_not_open_far_lamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OPMessage.Judge50005)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OPMessage.Judge50005)
  return false;
#undef DO_
}

void Judge50005::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OPMessage.Judge50005)
  // optional int32 itemCode = 1;
  if (has_itemcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemcode(), output);
  }

  // optional string itemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->itemname(), output);
  }

  // optional .OPMessage.judgeItem max_time = 3;
  if (has_max_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->max_time(), output);
  }

  // optional .OPMessage.judgeItem max_speed = 4;
  if (has_max_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->max_speed(), output);
  }

  // optional .OPMessage.judgeItem judge_mode = 5;
  if (has_judge_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->judge_mode(), output);
  }

  // optional .OPMessage.judgeItem min_left_turn_signal_time = 6;
  if (has_min_left_turn_signal_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->min_left_turn_signal_time(), output);
  }

  // optional .OPMessage.judgeItem min_right_turn_signal_time = 7;
  if (has_min_right_turn_signal_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->min_right_turn_signal_time(), output);
  }

  // optional .OPMessage.judgeItem need_near_far_lamp_flash = 8;
  if (has_need_near_far_lamp_flash()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->need_near_far_lamp_flash(), output);
  }

  // optional .OPMessage.judgeItem check_far_lamp = 9;
  if (has_check_far_lamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->check_far_lamp(), output);
  }

  // optional .OPMessage.judgeItem check_near_lamp = 10;
  if (has_check_near_lamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->check_near_lamp(), output);
  }

  // optional .OPMessage.voiceItem vi_50005_start_exam = 11;
  if (has_vi_50005_start_exam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->vi_50005_start_exam(), output);
  }

  // optional .OPMessage.voiceItem vi_50005_end_exam = 12;
  if (has_vi_50005_end_exam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->vi_50005_end_exam(), output);
  }

  // optional .OPMessage.voiceItem vi_50005_not_slowdown = 13;
  if (has_vi_50005_not_slowdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->vi_50005_not_slowdown(), output);
  }

  // optional .OPMessage.voiceItem vi_50005_turn_lamp_use_error = 14;
  if (has_vi_50005_turn_lamp_use_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->vi_50005_turn_lamp_use_error(), output);
  }

  // optional .OPMessage.voiceItem vi_50005_turn_lamp_not_use = 15;
  if (has_vi_50005_turn_lamp_not_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->vi_50005_turn_lamp_not_use(), output);
  }

  // optional .OPMessage.voiceItem vi_50005_horn_not_use = 16;
  if (has_vi_50005_horn_not_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->vi_50005_horn_not_use(), output);
  }

  // optional .OPMessage.voiceItem vi_50005_not_open_near_lamp = 17;
  if (has_vi_50005_not_open_near_lamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->vi_50005_not_open_near_lamp(), output);
  }

  // optional .OPMessage.voiceItem vi_50005_not_open_far_lamp = 18;
  if (has_vi_50005_not_open_far_lamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->vi_50005_not_open_far_lamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OPMessage.Judge50005)
}

::google::protobuf::uint8* Judge50005::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OPMessage.Judge50005)
  // optional int32 itemCode = 1;
  if (has_itemcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemcode(), target);
  }

  // optional string itemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->itemname(), target);
  }

  // optional .OPMessage.judgeItem max_time = 3;
  if (has_max_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->max_time(), target);
  }

  // optional .OPMessage.judgeItem max_speed = 4;
  if (has_max_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->max_speed(), target);
  }

  // optional .OPMessage.judgeItem judge_mode = 5;
  if (has_judge_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->judge_mode(), target);
  }

  // optional .OPMessage.judgeItem min_left_turn_signal_time = 6;
  if (has_min_left_turn_signal_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->min_left_turn_signal_time(), target);
  }

  // optional .OPMessage.judgeItem min_right_turn_signal_time = 7;
  if (has_min_right_turn_signal_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->min_right_turn_signal_time(), target);
  }

  // optional .OPMessage.judgeItem need_near_far_lamp_flash = 8;
  if (has_need_near_far_lamp_flash()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->need_near_far_lamp_flash(), target);
  }

  // optional .OPMessage.judgeItem check_far_lamp = 9;
  if (has_check_far_lamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->check_far_lamp(), target);
  }

  // optional .OPMessage.judgeItem check_near_lamp = 10;
  if (has_check_near_lamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->check_near_lamp(), target);
  }

  // optional .OPMessage.voiceItem vi_50005_start_exam = 11;
  if (has_vi_50005_start_exam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->vi_50005_start_exam(), target);
  }

  // optional .OPMessage.voiceItem vi_50005_end_exam = 12;
  if (has_vi_50005_end_exam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->vi_50005_end_exam(), target);
  }

  // optional .OPMessage.voiceItem vi_50005_not_slowdown = 13;
  if (has_vi_50005_not_slowdown()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->vi_50005_not_slowdown(), target);
  }

  // optional .OPMessage.voiceItem vi_50005_turn_lamp_use_error = 14;
  if (has_vi_50005_turn_lamp_use_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->vi_50005_turn_lamp_use_error(), target);
  }

  // optional .OPMessage.voiceItem vi_50005_turn_lamp_not_use = 15;
  if (has_vi_50005_turn_lamp_not_use()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->vi_50005_turn_lamp_not_use(), target);
  }

  // optional .OPMessage.voiceItem vi_50005_horn_not_use = 16;
  if (has_vi_50005_horn_not_use()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->vi_50005_horn_not_use(), target);
  }

  // optional .OPMessage.voiceItem vi_50005_not_open_near_lamp = 17;
  if (has_vi_50005_not_open_near_lamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->vi_50005_not_open_near_lamp(), target);
  }

  // optional .OPMessage.voiceItem vi_50005_not_open_far_lamp = 18;
  if (has_vi_50005_not_open_far_lamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->vi_50005_not_open_far_lamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OPMessage.Judge50005)
  return target;
}

int Judge50005::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemCode = 1;
    if (has_itemcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemcode());
    }

    // optional string itemName = 2;
    if (has_itemname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemname());
    }

    // optional .OPMessage.judgeItem max_time = 3;
    if (has_max_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_time());
    }

    // optional .OPMessage.judgeItem max_speed = 4;
    if (has_max_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_speed());
    }

    // optional .OPMessage.judgeItem judge_mode = 5;
    if (has_judge_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->judge_mode());
    }

    // optional .OPMessage.judgeItem min_left_turn_signal_time = 6;
    if (has_min_left_turn_signal_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->min_left_turn_signal_time());
    }

    // optional .OPMessage.judgeItem min_right_turn_signal_time = 7;
    if (has_min_right_turn_signal_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->min_right_turn_signal_time());
    }

    // optional .OPMessage.judgeItem need_near_far_lamp_flash = 8;
    if (has_need_near_far_lamp_flash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->need_near_far_lamp_flash());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .OPMessage.judgeItem check_far_lamp = 9;
    if (has_check_far_lamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->check_far_lamp());
    }

    // optional .OPMessage.judgeItem check_near_lamp = 10;
    if (has_check_near_lamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->check_near_lamp());
    }

    // optional .OPMessage.voiceItem vi_50005_start_exam = 11;
    if (has_vi_50005_start_exam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_50005_start_exam());
    }

    // optional .OPMessage.voiceItem vi_50005_end_exam = 12;
    if (has_vi_50005_end_exam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_50005_end_exam());
    }

    // optional .OPMessage.voiceItem vi_50005_not_slowdown = 13;
    if (has_vi_50005_not_slowdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_50005_not_slowdown());
    }

    // optional .OPMessage.voiceItem vi_50005_turn_lamp_use_error = 14;
    if (has_vi_50005_turn_lamp_use_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_50005_turn_lamp_use_error());
    }

    // optional .OPMessage.voiceItem vi_50005_turn_lamp_not_use = 15;
    if (has_vi_50005_turn_lamp_not_use()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_50005_turn_lamp_not_use());
    }

    // optional .OPMessage.voiceItem vi_50005_horn_not_use = 16;
    if (has_vi_50005_horn_not_use()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_50005_horn_not_use());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .OPMessage.voiceItem vi_50005_not_open_near_lamp = 17;
    if (has_vi_50005_not_open_near_lamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_50005_not_open_near_lamp());
    }

    // optional .OPMessage.voiceItem vi_50005_not_open_far_lamp = 18;
    if (has_vi_50005_not_open_far_lamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_50005_not_open_far_lamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Judge50005::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Judge50005* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Judge50005*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Judge50005::MergeFrom(const Judge50005& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemcode()) {
      set_itemcode(from.itemcode());
    }
    if (from.has_itemname()) {
      set_itemname(from.itemname());
    }
    if (from.has_max_time()) {
      mutable_max_time()->::OPMessage::judgeItem::MergeFrom(from.max_time());
    }
    if (from.has_max_speed()) {
      mutable_max_speed()->::OPMessage::judgeItem::MergeFrom(from.max_speed());
    }
    if (from.has_judge_mode()) {
      mutable_judge_mode()->::OPMessage::judgeItem::MergeFrom(from.judge_mode());
    }
    if (from.has_min_left_turn_signal_time()) {
      mutable_min_left_turn_signal_time()->::OPMessage::judgeItem::MergeFrom(from.min_left_turn_signal_time());
    }
    if (from.has_min_right_turn_signal_time()) {
      mutable_min_right_turn_signal_time()->::OPMessage::judgeItem::MergeFrom(from.min_right_turn_signal_time());
    }
    if (from.has_need_near_far_lamp_flash()) {
      mutable_need_near_far_lamp_flash()->::OPMessage::judgeItem::MergeFrom(from.need_near_far_lamp_flash());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_check_far_lamp()) {
      mutable_check_far_lamp()->::OPMessage::judgeItem::MergeFrom(from.check_far_lamp());
    }
    if (from.has_check_near_lamp()) {
      mutable_check_near_lamp()->::OPMessage::judgeItem::MergeFrom(from.check_near_lamp());
    }
    if (from.has_vi_50005_start_exam()) {
      mutable_vi_50005_start_exam()->::OPMessage::voiceItem::MergeFrom(from.vi_50005_start_exam());
    }
    if (from.has_vi_50005_end_exam()) {
      mutable_vi_50005_end_exam()->::OPMessage::voiceItem::MergeFrom(from.vi_50005_end_exam());
    }
    if (from.has_vi_50005_not_slowdown()) {
      mutable_vi_50005_not_slowdown()->::OPMessage::voiceItem::MergeFrom(from.vi_50005_not_slowdown());
    }
    if (from.has_vi_50005_turn_lamp_use_error()) {
      mutable_vi_50005_turn_lamp_use_error()->::OPMessage::voiceItem::MergeFrom(from.vi_50005_turn_lamp_use_error());
    }
    if (from.has_vi_50005_turn_lamp_not_use()) {
      mutable_vi_50005_turn_lamp_not_use()->::OPMessage::voiceItem::MergeFrom(from.vi_50005_turn_lamp_not_use());
    }
    if (from.has_vi_50005_horn_not_use()) {
      mutable_vi_50005_horn_not_use()->::OPMessage::voiceItem::MergeFrom(from.vi_50005_horn_not_use());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_vi_50005_not_open_near_lamp()) {
      mutable_vi_50005_not_open_near_lamp()->::OPMessage::voiceItem::MergeFrom(from.vi_50005_not_open_near_lamp());
    }
    if (from.has_vi_50005_not_open_far_lamp()) {
      mutable_vi_50005_not_open_far_lamp()->::OPMessage::voiceItem::MergeFrom(from.vi_50005_not_open_far_lamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Judge50005::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Judge50005::CopyFrom(const Judge50005& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Judge50005::IsInitialized() const {

  return true;
}

void Judge50005::Swap(Judge50005* other) {
  if (other != this) {
    std::swap(itemcode_, other->itemcode_);
    std::swap(itemname_, other->itemname_);
    std::swap(max_time_, other->max_time_);
    std::swap(max_speed_, other->max_speed_);
    std::swap(judge_mode_, other->judge_mode_);
    std::swap(min_left_turn_signal_time_, other->min_left_turn_signal_time_);
    std::swap(min_right_turn_signal_time_, other->min_right_turn_signal_time_);
    std::swap(need_near_far_lamp_flash_, other->need_near_far_lamp_flash_);
    std::swap(check_far_lamp_, other->check_far_lamp_);
    std::swap(check_near_lamp_, other->check_near_lamp_);
    std::swap(vi_50005_start_exam_, other->vi_50005_start_exam_);
    std::swap(vi_50005_end_exam_, other->vi_50005_end_exam_);
    std::swap(vi_50005_not_slowdown_, other->vi_50005_not_slowdown_);
    std::swap(vi_50005_turn_lamp_use_error_, other->vi_50005_turn_lamp_use_error_);
    std::swap(vi_50005_turn_lamp_not_use_, other->vi_50005_turn_lamp_not_use_);
    std::swap(vi_50005_horn_not_use_, other->vi_50005_horn_not_use_);
    std::swap(vi_50005_not_open_near_lamp_, other->vi_50005_not_open_near_lamp_);
    std::swap(vi_50005_not_open_far_lamp_, other->vi_50005_not_open_far_lamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Judge50005::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Judge50005_descriptor_;
  metadata.reflection = Judge50005_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Judge50006::kItemCodeFieldNumber;
const int Judge50006::kItemNameFieldNumber;
const int Judge50006::kMaxTimeFieldNumber;
const int Judge50006::kMaxSpeedFieldNumber;
const int Judge50006::kJudgeModeFieldNumber;
const int Judge50006::kMinLeftTurnSignalTimeFieldNumber;
const int Judge50006::kMinRightTurnSignalTimeFieldNumber;
const int Judge50006::kNeedNearFarLampFlashFieldNumber;
const int Judge50006::kCheckFarLampFieldNumber;
const int Judge50006::kCheckNearLampFieldNumber;
const int Judge50006::kVi50006StartExamFieldNumber;
const int Judge50006::kVi50006EndExamFieldNumber;
const int Judge50006::kVi50006NotSlowdownFieldNumber;
const int Judge50006::kVi50006TurnLampUseErrorFieldNumber;
const int Judge50006::kVi50006TurnLampNotUseFieldNumber;
const int Judge50006::kVi50006HornNotUseFieldNumber;
const int Judge50006::kVi50006NotOpenNearLampFieldNumber;
const int Judge50006::kVi50006NotOpenFarLampFieldNumber;
#endif  // !_MSC_VER

Judge50006::Judge50006()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OPMessage.Judge50006)
}

void Judge50006::InitAsDefaultInstance() {
  max_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  max_speed_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  judge_mode_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  min_left_turn_signal_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  min_right_turn_signal_time_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  need_near_far_lamp_flash_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  check_far_lamp_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  check_near_lamp_ = const_cast< ::OPMessage::judgeItem*>(&::OPMessage::judgeItem::default_instance());
  vi_50006_start_exam_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_50006_end_exam_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_50006_not_slowdown_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_50006_turn_lamp_use_error_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_50006_turn_lamp_not_use_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_50006_horn_not_use_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_50006_not_open_near_lamp_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
  vi_50006_not_open_far_lamp_ = const_cast< ::OPMessage::voiceItem*>(&::OPMessage::voiceItem::default_instance());
}

Judge50006::Judge50006(const Judge50006& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OPMessage.Judge50006)
}

void Judge50006::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  itemcode_ = 0;
  itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_time_ = NULL;
  max_speed_ = NULL;
  judge_mode_ = NULL;
  min_left_turn_signal_time_ = NULL;
  min_right_turn_signal_time_ = NULL;
  need_near_far_lamp_flash_ = NULL;
  check_far_lamp_ = NULL;
  check_near_lamp_ = NULL;
  vi_50006_start_exam_ = NULL;
  vi_50006_end_exam_ = NULL;
  vi_50006_not_slowdown_ = NULL;
  vi_50006_turn_lamp_use_error_ = NULL;
  vi_50006_turn_lamp_not_use_ = NULL;
  vi_50006_horn_not_use_ = NULL;
  vi_50006_not_open_near_lamp_ = NULL;
  vi_50006_not_open_far_lamp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Judge50006::~Judge50006() {
  // @@protoc_insertion_point(destructor:OPMessage.Judge50006)
  SharedDtor();
}

void Judge50006::SharedDtor() {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (this != default_instance_) {
    delete max_time_;
    delete max_speed_;
    delete judge_mode_;
    delete min_left_turn_signal_time_;
    delete min_right_turn_signal_time_;
    delete need_near_far_lamp_flash_;
    delete check_far_lamp_;
    delete check_near_lamp_;
    delete vi_50006_start_exam_;
    delete vi_50006_end_exam_;
    delete vi_50006_not_slowdown_;
    delete vi_50006_turn_lamp_use_error_;
    delete vi_50006_turn_lamp_not_use_;
    delete vi_50006_horn_not_use_;
    delete vi_50006_not_open_near_lamp_;
    delete vi_50006_not_open_far_lamp_;
  }
}

void Judge50006::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Judge50006::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Judge50006_descriptor_;
}

const Judge50006& Judge50006::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageKm3Config_2eproto();
  return *default_instance_;
}

Judge50006* Judge50006::default_instance_ = NULL;

Judge50006* Judge50006::New() const {
  return new Judge50006;
}

void Judge50006::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    itemcode_ = 0;
    if (has_itemname()) {
      if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        itemname_->clear();
      }
    }
    if (has_max_time()) {
      if (max_time_ != NULL) max_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_max_speed()) {
      if (max_speed_ != NULL) max_speed_->::OPMessage::judgeItem::Clear();
    }
    if (has_judge_mode()) {
      if (judge_mode_ != NULL) judge_mode_->::OPMessage::judgeItem::Clear();
    }
    if (has_min_left_turn_signal_time()) {
      if (min_left_turn_signal_time_ != NULL) min_left_turn_signal_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_min_right_turn_signal_time()) {
      if (min_right_turn_signal_time_ != NULL) min_right_turn_signal_time_->::OPMessage::judgeItem::Clear();
    }
    if (has_need_near_far_lamp_flash()) {
      if (need_near_far_lamp_flash_ != NULL) need_near_far_lamp_flash_->::OPMessage::judgeItem::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_check_far_lamp()) {
      if (check_far_lamp_ != NULL) check_far_lamp_->::OPMessage::judgeItem::Clear();
    }
    if (has_check_near_lamp()) {
      if (check_near_lamp_ != NULL) check_near_lamp_->::OPMessage::judgeItem::Clear();
    }
    if (has_vi_50006_start_exam()) {
      if (vi_50006_start_exam_ != NULL) vi_50006_start_exam_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_50006_end_exam()) {
      if (vi_50006_end_exam_ != NULL) vi_50006_end_exam_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_50006_not_slowdown()) {
      if (vi_50006_not_slowdown_ != NULL) vi_50006_not_slowdown_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_50006_turn_lamp_use_error()) {
      if (vi_50006_turn_lamp_use_error_ != NULL) vi_50006_turn_lamp_use_error_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_50006_turn_lamp_not_use()) {
      if (vi_50006_turn_lamp_not_use_ != NULL) vi_50006_turn_lamp_not_use_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_50006_horn_not_use()) {
      if (vi_50006_horn_not_use_ != NULL) vi_50006_horn_not_use_->::OPMessage::voiceItem::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 196608) {
    if (has_vi_50006_not_open_near_lamp()) {
      if (vi_50006_not_open_near_lamp_ != NULL) vi_50006_not_open_near_lamp_->::OPMessage::voiceItem::Clear();
    }
    if (has_vi_50006_not_open_far_lamp()) {
      if (vi_50006_not_open_far_lamp_ != NULL) vi_50006_not_open_far_lamp_->::OPMessage::voiceItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Judge50006::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OPMessage.Judge50006)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemcode_)));
          set_has_itemcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_itemName;
        break;
      }

      // optional string itemName = 2;
      case 2: {
        if (tag == 18) {
         parse_itemName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itemname().data(), this->itemname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "itemname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_max_time;
        break;
      }

      // optional .OPMessage.judgeItem max_time = 3;
      case 3: {
        if (tag == 26) {
         parse_max_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_max_speed;
        break;
      }

      // optional .OPMessage.judgeItem max_speed = 4;
      case 4: {
        if (tag == 34) {
         parse_max_speed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_speed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_judge_mode;
        break;
      }

      // optional .OPMessage.judgeItem judge_mode = 5;
      case 5: {
        if (tag == 42) {
         parse_judge_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_judge_mode()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_min_left_turn_signal_time;
        break;
      }

      // optional .OPMessage.judgeItem min_left_turn_signal_time = 6;
      case 6: {
        if (tag == 50) {
         parse_min_left_turn_signal_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_left_turn_signal_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_min_right_turn_signal_time;
        break;
      }

      // optional .OPMessage.judgeItem min_right_turn_signal_time = 7;
      case 7: {
        if (tag == 58) {
         parse_min_right_turn_signal_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_right_turn_signal_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_need_near_far_lamp_flash;
        break;
      }

      // optional .OPMessage.judgeItem need_near_far_lamp_flash = 8;
      case 8: {
        if (tag == 66) {
         parse_need_near_far_lamp_flash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_need_near_far_lamp_flash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_check_far_lamp;
        break;
      }

      // optional .OPMessage.judgeItem check_far_lamp = 9;
      case 9: {
        if (tag == 74) {
         parse_check_far_lamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_check_far_lamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_check_near_lamp;
        break;
      }

      // optional .OPMessage.judgeItem check_near_lamp = 10;
      case 10: {
        if (tag == 82) {
         parse_check_near_lamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_check_near_lamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_vi_50006_start_exam;
        break;
      }

      // optional .OPMessage.voiceItem vi_50006_start_exam = 11;
      case 11: {
        if (tag == 90) {
         parse_vi_50006_start_exam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_50006_start_exam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_vi_50006_end_exam;
        break;
      }

      // optional .OPMessage.voiceItem vi_50006_end_exam = 12;
      case 12: {
        if (tag == 98) {
         parse_vi_50006_end_exam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_50006_end_exam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_vi_50006_not_slowdown;
        break;
      }

      // optional .OPMessage.voiceItem vi_50006_not_slowdown = 13;
      case 13: {
        if (tag == 106) {
         parse_vi_50006_not_slowdown:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_50006_not_slowdown()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_vi_50006_turn_lamp_use_error;
        break;
      }

      // optional .OPMessage.voiceItem vi_50006_turn_lamp_use_error = 14;
      case 14: {
        if (tag == 114) {
         parse_vi_50006_turn_lamp_use_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_50006_turn_lamp_use_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_vi_50006_turn_lamp_not_use;
        break;
      }

      // optional .OPMessage.voiceItem vi_50006_turn_lamp_not_use = 15;
      case 15: {
        if (tag == 122) {
         parse_vi_50006_turn_lamp_not_use:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_50006_turn_lamp_not_use()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_vi_50006_horn_not_use;
        break;
      }

      // optional .OPMessage.voiceItem vi_50006_horn_not_use = 16;
      case 16: {
        if (tag == 130) {
         parse_vi_50006_horn_not_use:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_50006_horn_not_use()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_vi_50006_not_open_near_lamp;
        break;
      }

      // optional .OPMessage.voiceItem vi_50006_not_open_near_lamp = 17;
      case 17: {
        if (tag == 138) {
         parse_vi_50006_not_open_near_lamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_50006_not_open_near_lamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_vi_50006_not_open_far_lamp;
        break;
      }

      // optional .OPMessage.voiceItem vi_50006_not_open_far_lamp = 18;
      case 18: {
        if (tag == 146) {
         parse_vi_50006_not_open_far_lamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vi_50006_not_open_far_lamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OPMessage.Judge50006)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OPMessage.Judge50006)
  return false;
#undef DO_
}

void Judge50006::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OPMessage.Judge50006)
  // optional int32 itemCode = 1;
  if (has_itemcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemcode(), output);
  }

  // optional string itemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->itemname(), output);
  }

  // optional .OPMessage.judgeItem max_time = 3;
  if (has_max_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->max_time(), output);
  }

  // optional .OPMessage.judgeItem max_speed = 4;
  if (has_max_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->max_speed(), output);
  }

  // optional .OPMessage.judgeItem judge_mode = 5;
  if (has_judge_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->judge_mode(), output);
  }

  // optional .OPMessage.judgeItem min_left_turn_signal_time = 6;
  if (has_min_left_turn_signal_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->min_left_turn_signal_time(), output);
  }

  // optional .OPMessage.judgeItem min_right_turn_signal_time = 7;
  if (has_min_right_turn_signal_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->min_right_turn_signal_time(), output);
  }

  // optional .OPMessage.judgeItem need_near_far_lamp_flash = 8;
  if (has_need_near_far_lamp_flash()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->need_near_far_lamp_flash(), output);
  }

  // optional .OPMessage.judgeItem check_far_lamp = 9;
  if (has_check_far_lamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->check_far_lamp(), output);
  }

  // optional .OPMessage.judgeItem check_near_lamp = 10;
  if (has_check_near_lamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->check_near_lamp(), output);
  }

  // optional .OPMessage.voiceItem vi_50006_start_exam = 11;
  if (has_vi_50006_start_exam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->vi_50006_start_exam(), output);
  }

  // optional .OPMessage.voiceItem vi_50006_end_exam = 12;
  if (has_vi_50006_end_exam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->vi_50006_end_exam(), output);
  }

  // optional .OPMessage.voiceItem vi_50006_not_slowdown = 13;
  if (has_vi_50006_not_slowdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->vi_50006_not_slowdown(), output);
  }

  // optional .OPMessage.voiceItem vi_50006_turn_lamp_use_error = 14;
  if (has_vi_50006_turn_lamp_use_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->vi_50006_turn_lamp_use_error(), output);
  }

  // optional .OPMessage.voiceItem vi_50006_turn_lamp_not_use = 15;
  if (has_vi_50006_turn_lamp_not_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->vi_50006_turn_lamp_not_use(), output);
  }

  // optional .OPMessage.voiceItem vi_50006_horn_not_use = 16;
  if (has_vi_50006_horn_not_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->vi_50006_horn_not_use(), output);
  }

  // optional .OPMessage.voiceItem vi_50006_not_open_near_lamp = 17;
  if (has_vi_50006_not_open_near_lamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->vi_50006_not_open_near_lamp(), output);
  }

  // optional .OPMessage.voiceItem vi_50006_not_open_far_lamp = 18;
  if (has_vi_50006_not_open_far_lamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->vi_50006_not_open_far_lamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OPMessage.Judge50006)
}

::google::protobuf::uint8* Judge50006::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OPMessage.Judge50006)
  // optional int32 itemCode = 1;
  if (has_itemcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemcode(), target);
  }

  // optional string itemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->itemname(), target);
  }

  // optional .OPMessage.judgeItem max_time = 3;
  if (has_max_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->max_time(), target);
  }

  // optional .OPMessage.judgeItem max_speed = 4;
  if (has_max_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->max_speed(), target);
  }

  // optional .OPMessage.judgeItem judge_mode = 5;
  if (has_judge_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->judge_mode(), target);
  }

  // optional .OPMessage.judgeItem min_left_turn_signal_time = 6;
  if (has_min_left_turn_signal_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->min_left_turn_signal_time(), target);
  }

  // optional .OPMessage.judgeItem min_right_turn_signal_time = 7;
  if (has_min_right_turn_signal_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->min_right_turn_signal_time(), target);
  }

  // optional .OPMessage.judgeItem need_near_far_lamp_flash = 8;
  if (has_need_near_far_lamp_flash()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->need_near_far_lamp_flash(), target);
  }

  // optional .OPMessage.judgeItem check_far_lamp = 9;
  if (has_check_far_lamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->check_far_lamp(), target);
  }

  // optional .OPMessage.judgeItem check_near_lamp = 10;
  if (has_check_near_lamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->check_near_lamp(), target);
  }

  // optional .OPMessage.voiceItem vi_50006_start_exam = 11;
  if (has_vi_50006_start_exam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->vi_50006_start_exam(), target);
  }

  // optional .OPMessage.voiceItem vi_50006_end_exam = 12;
  if (has_vi_50006_end_exam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->vi_50006_end_exam(), target);
  }

  // optional .OPMessage.voiceItem vi_50006_not_slowdown = 13;
  if (has_vi_50006_not_slowdown()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->vi_50006_not_slowdown(), target);
  }

  // optional .OPMessage.voiceItem vi_50006_turn_lamp_use_error = 14;
  if (has_vi_50006_turn_lamp_use_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->vi_50006_turn_lamp_use_error(), target);
  }

  // optional .OPMessage.voiceItem vi_50006_turn_lamp_not_use = 15;
  if (has_vi_50006_turn_lamp_not_use()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->vi_50006_turn_lamp_not_use(), target);
  }

  // optional .OPMessage.voiceItem vi_50006_horn_not_use = 16;
  if (has_vi_50006_horn_not_use()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->vi_50006_horn_not_use(), target);
  }

  // optional .OPMessage.voiceItem vi_50006_not_open_near_lamp = 17;
  if (has_vi_50006_not_open_near_lamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->vi_50006_not_open_near_lamp(), target);
  }

  // optional .OPMessage.voiceItem vi_50006_not_open_far_lamp = 18;
  if (has_vi_50006_not_open_far_lamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->vi_50006_not_open_far_lamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OPMessage.Judge50006)
  return target;
}

int Judge50006::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemCode = 1;
    if (has_itemcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemcode());
    }

    // optional string itemName = 2;
    if (has_itemname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemname());
    }

    // optional .OPMessage.judgeItem max_time = 3;
    if (has_max_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_time());
    }

    // optional .OPMessage.judgeItem max_speed = 4;
    if (has_max_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_speed());
    }

    // optional .OPMessage.judgeItem judge_mode = 5;
    if (has_judge_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->judge_mode());
    }

    // optional .OPMessage.judgeItem min_left_turn_signal_time = 6;
    if (has_min_left_turn_signal_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->min_left_turn_signal_time());
    }

    // optional .OPMessage.judgeItem min_right_turn_signal_time = 7;
    if (has_min_right_turn_signal_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->min_right_turn_signal_time());
    }

    // optional .OPMessage.judgeItem need_near_far_lamp_flash = 8;
    if (has_need_near_far_lamp_flash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->need_near_far_lamp_flash());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .OPMessage.judgeItem check_far_lamp = 9;
    if (has_check_far_lamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->check_far_lamp());
    }

    // optional .OPMessage.judgeItem check_near_lamp = 10;
    if (has_check_near_lamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->check_near_lamp());
    }

    // optional .OPMessage.voiceItem vi_50006_start_exam = 11;
    if (has_vi_50006_start_exam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_50006_start_exam());
    }

    // optional .OPMessage.voiceItem vi_50006_end_exam = 12;
    if (has_vi_50006_end_exam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_50006_end_exam());
    }

    // optional .OPMessage.voiceItem vi_50006_not_slowdown = 13;
    if (has_vi_50006_not_slowdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_50006_not_slowdown());
    }

    // optional .OPMessage.voiceItem vi_50006_turn_lamp_use_error = 14;
    if (has_vi_50006_turn_lamp_use_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_50006_turn_lamp_use_error());
    }

    // optional .OPMessage.voiceItem vi_50006_turn_lamp_not_use = 15;
    if (has_vi_50006_turn_lamp_not_use()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_50006_turn_lamp_not_use());
    }

    // optional .OPMessage.voiceItem vi_50006_horn_not_use = 16;
    if (has_vi_50006_horn_not_use()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_50006_horn_not_use());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .OPMessage.voiceItem vi_50006_not_open_near_lamp = 17;
    if (has_vi_50006_not_open_near_lamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_50006_not_open_near_lamp());
    }

    // optional .OPMessage.voiceItem vi_50006_not_open_far_lamp = 18;
    if (has_vi_50006_not_open_far_lamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vi_50006_not_open_far_lamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Judge50006::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Judge50006* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Judge50006*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Judge50006::MergeFrom(const Judge50006& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemcode()) {
      set_itemcode(from.itemcode());
    }
    if (from.has_itemname()) {
      set_itemname(from.itemname());
    }
    if (from.has_max_time()) {
      mutable_max_time()->::OPMessage::judgeItem::MergeFrom(from.max_time());
    }
    if (from.has_max_speed()) {
      mutable_max_speed()->::OPMessage::judgeItem::MergeFrom(from.max_speed());
    }
    if (from.has_judge_mode()) {
      mutable_judge_mode()->::OPMessage::judgeItem::MergeFrom(from.judge_mode());
    }
    if (from.has_min_left_turn_signal_time()) {
      mutable_min_left_turn_signal_time()->::OPMessage::judgeItem::MergeFrom(from.min_left_turn_signal_time());
    }
    if (from.has_min_right_turn_signal_time()) {
      mutable_min_right_turn_signal_time()->::OPMessage::judgeItem::MergeFrom(from.min_right_turn_signal_time());
    }
    if (from.has_need_near_far_lamp_flash()) {
      mutable_need_near_far_lamp_flash()->::OPMessage::judgeItem::MergeFrom(from.need_near_far_lamp_flash());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_check_far_lamp()) {
      mutable_check_far_lamp()->::OPMessage::judgeItem::MergeFrom(from.check_far_lamp());
    }
    if (from.has_check_near_lamp()) {
      mutable_check_near_lamp()->::OPMessage::judgeItem::MergeFrom(from.check_near_lamp());
    }
    if (from.has_vi_50006_start_exam()) {
      mutable_vi_50006_start_exam()->::OPMessage::voiceItem::MergeFrom(from.vi_50006_start_exam());
    }
    if (from.has_vi_50006_end_exam()) {
      mutable_vi_50006_end_exam()->::OPMessage::voiceItem::MergeFrom(from.vi_50006_end_exam());
    }
    if (from.has_vi_50006_not_slowdown()) {
      mutable_vi_50006_not_slowdown()->::OPMessage::voiceItem::MergeFrom(from.vi_50006_not_slowdown());
    }
    if (from.has_vi_50006_turn_lamp_use_error()) {
      mutable_vi_50006_turn_lamp_use_error()->::OPMessage::voiceItem::MergeFrom(from.vi_50006_turn_lamp_use_error());
    }
    if (from.has_vi_50006_turn_lamp_not_use()) {
      mutable_vi_50006_turn_lamp_not_use()->::OPMessage::voiceItem::MergeFrom(from.vi_50006_turn_lamp_not_use());
    }
    if (from.has_vi_50006_horn_not_use()) {
      mutable_vi_50006_horn_not_use()->::OPMessage::voiceItem::MergeFrom(from.vi_50006_horn_not_use());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_vi_50006_not_open_near_lamp()) {
      mutable_vi_50006_not_open_near_lamp()->::OPMessage::voiceItem::MergeFrom(from.vi_50006_not_open_near_lamp());
    }
    if (from.has_vi_50006_not_open_far_lamp()) {
      mutable_vi_50006_not_open_far_lamp()->::OPMessage::voiceItem::MergeFrom(from.vi_50006_not_open_far_lamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Judge50006::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Judge50006::CopyFrom(const Judge50006& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Judge50006::IsInitialized() const {

  return true;
}

void Judge50006::Swap(Judge50006* other) {
  if (other != this) {
    std::swap(itemcode_, other->itemcode_);
    std::swap(itemname_, other->itemname_);
    std::swap(max_time_, other->max_time_);
    std::swap(max_speed_, other->max_speed_);
    std::swap(judge_mode_, other->judge_mode_);
    std::swap(min_left_turn_signal_time_, other->min_left_turn_signal_time_);
    std::swap(min_right_turn_signal_time_, other->min_right_turn_signal_time_);
    std::swap(need_near_far_lamp_flash_, other->need_near_far_lamp_flash_);
    std::swap(check_far_lamp_, other->check_far_lamp_);
    std::swap(check_near_lamp_, other->check_near_lamp_);
    std::swap(vi_50006_start_exam_, other->vi_50006_start_exam_);
    std::swap(vi_50006_end_exam_, other->vi_50006_end_exam_);
    std::swap(vi_50006_not_slowdown_, other->vi_50006_not_slowdown_);
    std::swap(vi_50006_turn_lamp_use_error_, other->vi_50006_turn_lamp_use_error_);
    std::swap(vi_50006_turn_lamp_not_use_, other->vi_50006_turn_lamp_not_use_);
    std::swap(vi_50006_horn_not_use_, other->vi_50006_horn_not_use_);
    std::swap(vi_50006_not_open_near_lamp_, other->vi_50006_not_open_near_lamp_);
    std::swap(vi_50006_not_open_far_lamp_, other->vi_50006_not_open_far_lamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Judge50006::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Judge50006_descriptor_;
  metadata.reflection = Judge50006_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Km3Judge::kJudge0FieldNumber;
const int Km3Judge::kJudge40100FieldNumber;
const int Km3Judge::kJudge41600FieldNumber;
const int Km3Judge::kJudge40200FieldNumber;
const int Km3Judge::kJudge40400FieldNumber;
const int Km3Judge::kJudge41000FieldNumber;
const int Km3Judge::kJudge41001FieldNumber;
const int Km3Judge::kJudge41200FieldNumber;
const int Km3Judge::kJudge41100FieldNumber;
const int Km3Judge::kJudge40700FieldNumber;
const int Km3Judge::kJudge41500FieldNumber;
const int Km3Judge::kJudge40800FieldNumber;
const int Km3Judge::kJudge40900FieldNumber;
const int Km3Judge::kJudge41400FieldNumber;
const int Km3Judge::kJudge40500FieldNumber;
const int Km3Judge::kJudge41300FieldNumber;
const int Km3Judge::kJudge40300FieldNumber;
const int Km3Judge::kJudge40600FieldNumber;
const int Km3Judge::kJudge40601FieldNumber;
const int Km3Judge::kJudge50001FieldNumber;
const int Km3Judge::kJudge50002FieldNumber;
const int Km3Judge::kJudge50003FieldNumber;
const int Km3Judge::kJudge50004FieldNumber;
const int Km3Judge::kJudge50005FieldNumber;
const int Km3Judge::kJudge50006FieldNumber;
#endif  // !_MSC_VER

Km3Judge::Km3Judge()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OPMessage.Km3Judge)
}

void Km3Judge::InitAsDefaultInstance() {
  judge0_ = const_cast< ::OPMessage::Judge0*>(&::OPMessage::Judge0::default_instance());
  judge40100_ = const_cast< ::OPMessage::Judge40100*>(&::OPMessage::Judge40100::default_instance());
  judge41600_ = const_cast< ::OPMessage::Judge41600*>(&::OPMessage::Judge41600::default_instance());
  judge40200_ = const_cast< ::OPMessage::Judge40200*>(&::OPMessage::Judge40200::default_instance());
  judge40400_ = const_cast< ::OPMessage::Judge40400*>(&::OPMessage::Judge40400::default_instance());
  judge41000_ = const_cast< ::OPMessage::Judge41000*>(&::OPMessage::Judge41000::default_instance());
  judge41001_ = const_cast< ::OPMessage::Judge41001*>(&::OPMessage::Judge41001::default_instance());
  judge41200_ = const_cast< ::OPMessage::Judge41200*>(&::OPMessage::Judge41200::default_instance());
  judge41100_ = const_cast< ::OPMessage::Judge41100*>(&::OPMessage::Judge41100::default_instance());
  judge40700_ = const_cast< ::OPMessage::Judge40700*>(&::OPMessage::Judge40700::default_instance());
  judge41500_ = const_cast< ::OPMessage::Judge41500*>(&::OPMessage::Judge41500::default_instance());
  judge40800_ = const_cast< ::OPMessage::Judge40800*>(&::OPMessage::Judge40800::default_instance());
  judge40900_ = const_cast< ::OPMessage::Judge40900*>(&::OPMessage::Judge40900::default_instance());
  judge41400_ = const_cast< ::OPMessage::Judge41400*>(&::OPMessage::Judge41400::default_instance());
  judge40500_ = const_cast< ::OPMessage::Judge40500*>(&::OPMessage::Judge40500::default_instance());
  judge41300_ = const_cast< ::OPMessage::Judge41300*>(&::OPMessage::Judge41300::default_instance());
  judge40300_ = const_cast< ::OPMessage::Judge40300*>(&::OPMessage::Judge40300::default_instance());
  judge40600_ = const_cast< ::OPMessage::Judge40600*>(&::OPMessage::Judge40600::default_instance());
  judge40601_ = const_cast< ::OPMessage::Judge40601*>(&::OPMessage::Judge40601::default_instance());
  judge50001_ = const_cast< ::OPMessage::Judge50001*>(&::OPMessage::Judge50001::default_instance());
  judge50002_ = const_cast< ::OPMessage::Judge50002*>(&::OPMessage::Judge50002::default_instance());
  judge50003_ = const_cast< ::OPMessage::Judge50003*>(&::OPMessage::Judge50003::default_instance());
  judge50004_ = const_cast< ::OPMessage::Judge50004*>(&::OPMessage::Judge50004::default_instance());
  judge50005_ = const_cast< ::OPMessage::Judge50005*>(&::OPMessage::Judge50005::default_instance());
  judge50006_ = const_cast< ::OPMessage::Judge50006*>(&::OPMessage::Judge50006::default_instance());
}

Km3Judge::Km3Judge(const Km3Judge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OPMessage.Km3Judge)
}

void Km3Judge::SharedCtor() {
  _cached_size_ = 0;
  judge0_ = NULL;
  judge40100_ = NULL;
  judge41600_ = NULL;
  judge40200_ = NULL;
  judge40400_ = NULL;
  judge41000_ = NULL;
  judge41001_ = NULL;
  judge41200_ = NULL;
  judge41100_ = NULL;
  judge40700_ = NULL;
  judge41500_ = NULL;
  judge40800_ = NULL;
  judge40900_ = NULL;
  judge41400_ = NULL;
  judge40500_ = NULL;
  judge41300_ = NULL;
  judge40300_ = NULL;
  judge40600_ = NULL;
  judge40601_ = NULL;
  judge50001_ = NULL;
  judge50002_ = NULL;
  judge50003_ = NULL;
  judge50004_ = NULL;
  judge50005_ = NULL;
  judge50006_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Km3Judge::~Km3Judge() {
  // @@protoc_insertion_point(destructor:OPMessage.Km3Judge)
  SharedDtor();
}

void Km3Judge::SharedDtor() {
  if (this != default_instance_) {
    delete judge0_;
    delete judge40100_;
    delete judge41600_;
    delete judge40200_;
    delete judge40400_;
    delete judge41000_;
    delete judge41001_;
    delete judge41200_;
    delete judge41100_;
    delete judge40700_;
    delete judge41500_;
    delete judge40800_;
    delete judge40900_;
    delete judge41400_;
    delete judge40500_;
    delete judge41300_;
    delete judge40300_;
    delete judge40600_;
    delete judge40601_;
    delete judge50001_;
    delete judge50002_;
    delete judge50003_;
    delete judge50004_;
    delete judge50005_;
    delete judge50006_;
  }
}

void Km3Judge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Km3Judge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Km3Judge_descriptor_;
}

const Km3Judge& Km3Judge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageKm3Config_2eproto();
  return *default_instance_;
}

Km3Judge* Km3Judge::default_instance_ = NULL;

Km3Judge* Km3Judge::New() const {
  return new Km3Judge;
}

void Km3Judge::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_judge0()) {
      if (judge0_ != NULL) judge0_->::OPMessage::Judge0::Clear();
    }
    if (has_judge40100()) {
      if (judge40100_ != NULL) judge40100_->::OPMessage::Judge40100::Clear();
    }
    if (has_judge41600()) {
      if (judge41600_ != NULL) judge41600_->::OPMessage::Judge41600::Clear();
    }
    if (has_judge40200()) {
      if (judge40200_ != NULL) judge40200_->::OPMessage::Judge40200::Clear();
    }
    if (has_judge40400()) {
      if (judge40400_ != NULL) judge40400_->::OPMessage::Judge40400::Clear();
    }
    if (has_judge41000()) {
      if (judge41000_ != NULL) judge41000_->::OPMessage::Judge41000::Clear();
    }
    if (has_judge41001()) {
      if (judge41001_ != NULL) judge41001_->::OPMessage::Judge41001::Clear();
    }
    if (has_judge41200()) {
      if (judge41200_ != NULL) judge41200_->::OPMessage::Judge41200::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_judge41100()) {
      if (judge41100_ != NULL) judge41100_->::OPMessage::Judge41100::Clear();
    }
    if (has_judge40700()) {
      if (judge40700_ != NULL) judge40700_->::OPMessage::Judge40700::Clear();
    }
    if (has_judge41500()) {
      if (judge41500_ != NULL) judge41500_->::OPMessage::Judge41500::Clear();
    }
    if (has_judge40800()) {
      if (judge40800_ != NULL) judge40800_->::OPMessage::Judge40800::Clear();
    }
    if (has_judge40900()) {
      if (judge40900_ != NULL) judge40900_->::OPMessage::Judge40900::Clear();
    }
    if (has_judge41400()) {
      if (judge41400_ != NULL) judge41400_->::OPMessage::Judge41400::Clear();
    }
    if (has_judge40500()) {
      if (judge40500_ != NULL) judge40500_->::OPMessage::Judge40500::Clear();
    }
    if (has_judge41300()) {
      if (judge41300_ != NULL) judge41300_->::OPMessage::Judge41300::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    if (has_judge40300()) {
      if (judge40300_ != NULL) judge40300_->::OPMessage::Judge40300::Clear();
    }
    if (has_judge40600()) {
      if (judge40600_ != NULL) judge40600_->::OPMessage::Judge40600::Clear();
    }
    if (has_judge40601()) {
      if (judge40601_ != NULL) judge40601_->::OPMessage::Judge40601::Clear();
    }
    if (has_judge50001()) {
      if (judge50001_ != NULL) judge50001_->::OPMessage::Judge50001::Clear();
    }
    if (has_judge50002()) {
      if (judge50002_ != NULL) judge50002_->::OPMessage::Judge50002::Clear();
    }
    if (has_judge50003()) {
      if (judge50003_ != NULL) judge50003_->::OPMessage::Judge50003::Clear();
    }
    if (has_judge50004()) {
      if (judge50004_ != NULL) judge50004_->::OPMessage::Judge50004::Clear();
    }
    if (has_judge50005()) {
      if (judge50005_ != NULL) judge50005_->::OPMessage::Judge50005::Clear();
    }
  }
  if (has_judge50006()) {
    if (judge50006_ != NULL) judge50006_->::OPMessage::Judge50006::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Km3Judge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OPMessage.Km3Judge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .OPMessage.Judge0 judge0 = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_judge0()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_judge40100;
        break;
      }

      // optional .OPMessage.Judge40100 judge40100 = 2;
      case 2: {
        if (tag == 18) {
         parse_judge40100:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_judge40100()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_judge41600;
        break;
      }

      // optional .OPMessage.Judge41600 judge41600 = 3;
      case 3: {
        if (tag == 26) {
         parse_judge41600:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_judge41600()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_judge40200;
        break;
      }

      // optional .OPMessage.Judge40200 judge40200 = 4;
      case 4: {
        if (tag == 34) {
         parse_judge40200:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_judge40200()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_judge40400;
        break;
      }

      // optional .OPMessage.Judge40400 judge40400 = 5;
      case 5: {
        if (tag == 42) {
         parse_judge40400:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_judge40400()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_judge41000;
        break;
      }

      // optional .OPMessage.Judge41000 judge41000 = 6;
      case 6: {
        if (tag == 50) {
         parse_judge41000:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_judge41000()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_judge41001;
        break;
      }

      // optional .OPMessage.Judge41001 judge41001 = 7;
      case 7: {
        if (tag == 58) {
         parse_judge41001:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_judge41001()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_judge41200;
        break;
      }

      // optional .OPMessage.Judge41200 judge41200 = 8;
      case 8: {
        if (tag == 66) {
         parse_judge41200:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_judge41200()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_judge41100;
        break;
      }

      // optional .OPMessage.Judge41100 judge41100 = 9;
      case 9: {
        if (tag == 74) {
         parse_judge41100:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_judge41100()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_judge40700;
        break;
      }

      // optional .OPMessage.Judge40700 judge40700 = 10;
      case 10: {
        if (tag == 82) {
         parse_judge40700:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_judge40700()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_judge41500;
        break;
      }

      // optional .OPMessage.Judge41500 judge41500 = 11;
      case 11: {
        if (tag == 90) {
         parse_judge41500:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_judge41500()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_judge40800;
        break;
      }

      // optional .OPMessage.Judge40800 judge40800 = 12;
      case 12: {
        if (tag == 98) {
         parse_judge40800:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_judge40800()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_judge40900;
        break;
      }

      // optional .OPMessage.Judge40900 judge40900 = 13;
      case 13: {
        if (tag == 106) {
         parse_judge40900:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_judge40900()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_judge41400;
        break;
      }

      // optional .OPMessage.Judge41400 judge41400 = 14;
      case 14: {
        if (tag == 114) {
         parse_judge41400:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_judge41400()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_judge40500;
        break;
      }

      // optional .OPMessage.Judge40500 judge40500 = 15;
      case 15: {
        if (tag == 122) {
         parse_judge40500:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_judge40500()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_judge41300;
        break;
      }

      // optional .OPMessage.Judge41300 judge41300 = 16;
      case 16: {
        if (tag == 130) {
         parse_judge41300:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_judge41300()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_judge40300;
        break;
      }

      // optional .OPMessage.Judge40300 judge40300 = 17;
      case 17: {
        if (tag == 138) {
         parse_judge40300:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_judge40300()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_judge40600;
        break;
      }

      // optional .OPMessage.Judge40600 judge40600 = 18;
      case 18: {
        if (tag == 146) {
         parse_judge40600:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_judge40600()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_judge40601;
        break;
      }

      // optional .OPMessage.Judge40601 judge40601 = 19;
      case 19: {
        if (tag == 154) {
         parse_judge40601:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_judge40601()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_judge50001;
        break;
      }

      // optional .OPMessage.Judge50001 judge50001 = 20;
      case 20: {
        if (tag == 162) {
         parse_judge50001:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_judge50001()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_judge50002;
        break;
      }

      // optional .OPMessage.Judge50002 judge50002 = 21;
      case 21: {
        if (tag == 170) {
         parse_judge50002:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_judge50002()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_judge50003;
        break;
      }

      // optional .OPMessage.Judge50003 judge50003 = 22;
      case 22: {
        if (tag == 178) {
         parse_judge50003:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_judge50003()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_judge50004;
        break;
      }

      // optional .OPMessage.Judge50004 judge50004 = 23;
      case 23: {
        if (tag == 186) {
         parse_judge50004:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_judge50004()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_judge50005;
        break;
      }

      // optional .OPMessage.Judge50005 judge50005 = 24;
      case 24: {
        if (tag == 194) {
         parse_judge50005:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_judge50005()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_judge50006;
        break;
      }

      // optional .OPMessage.Judge50006 judge50006 = 25;
      case 25: {
        if (tag == 202) {
         parse_judge50006:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_judge50006()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OPMessage.Km3Judge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OPMessage.Km3Judge)
  return false;
#undef DO_
}

void Km3Judge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OPMessage.Km3Judge)
  // optional .OPMessage.Judge0 judge0 = 1;
  if (has_judge0()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->judge0(), output);
  }

  // optional .OPMessage.Judge40100 judge40100 = 2;
  if (has_judge40100()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->judge40100(), output);
  }

  // optional .OPMessage.Judge41600 judge41600 = 3;
  if (has_judge41600()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->judge41600(), output);
  }

  // optional .OPMessage.Judge40200 judge40200 = 4;
  if (has_judge40200()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->judge40200(), output);
  }

  // optional .OPMessage.Judge40400 judge40400 = 5;
  if (has_judge40400()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->judge40400(), output);
  }

  // optional .OPMessage.Judge41000 judge41000 = 6;
  if (has_judge41000()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->judge41000(), output);
  }

  // optional .OPMessage.Judge41001 judge41001 = 7;
  if (has_judge41001()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->judge41001(), output);
  }

  // optional .OPMessage.Judge41200 judge41200 = 8;
  if (has_judge41200()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->judge41200(), output);
  }

  // optional .OPMessage.Judge41100 judge41100 = 9;
  if (has_judge41100()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->judge41100(), output);
  }

  // optional .OPMessage.Judge40700 judge40700 = 10;
  if (has_judge40700()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->judge40700(), output);
  }

  // optional .OPMessage.Judge41500 judge41500 = 11;
  if (has_judge41500()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->judge41500(), output);
  }

  // optional .OPMessage.Judge40800 judge40800 = 12;
  if (has_judge40800()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->judge40800(), output);
  }

  // optional .OPMessage.Judge40900 judge40900 = 13;
  if (has_judge40900()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->judge40900(), output);
  }

  // optional .OPMessage.Judge41400 judge41400 = 14;
  if (has_judge41400()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->judge41400(), output);
  }

  // optional .OPMessage.Judge40500 judge40500 = 15;
  if (has_judge40500()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->judge40500(), output);
  }

  // optional .OPMessage.Judge41300 judge41300 = 16;
  if (has_judge41300()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->judge41300(), output);
  }

  // optional .OPMessage.Judge40300 judge40300 = 17;
  if (has_judge40300()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->judge40300(), output);
  }

  // optional .OPMessage.Judge40600 judge40600 = 18;
  if (has_judge40600()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->judge40600(), output);
  }

  // optional .OPMessage.Judge40601 judge40601 = 19;
  if (has_judge40601()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->judge40601(), output);
  }

  // optional .OPMessage.Judge50001 judge50001 = 20;
  if (has_judge50001()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->judge50001(), output);
  }

  // optional .OPMessage.Judge50002 judge50002 = 21;
  if (has_judge50002()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->judge50002(), output);
  }

  // optional .OPMessage.Judge50003 judge50003 = 22;
  if (has_judge50003()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->judge50003(), output);
  }

  // optional .OPMessage.Judge50004 judge50004 = 23;
  if (has_judge50004()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->judge50004(), output);
  }

  // optional .OPMessage.Judge50005 judge50005 = 24;
  if (has_judge50005()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->judge50005(), output);
  }

  // optional .OPMessage.Judge50006 judge50006 = 25;
  if (has_judge50006()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->judge50006(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OPMessage.Km3Judge)
}

::google::protobuf::uint8* Km3Judge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OPMessage.Km3Judge)
  // optional .OPMessage.Judge0 judge0 = 1;
  if (has_judge0()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->judge0(), target);
  }

  // optional .OPMessage.Judge40100 judge40100 = 2;
  if (has_judge40100()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->judge40100(), target);
  }

  // optional .OPMessage.Judge41600 judge41600 = 3;
  if (has_judge41600()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->judge41600(), target);
  }

  // optional .OPMessage.Judge40200 judge40200 = 4;
  if (has_judge40200()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->judge40200(), target);
  }

  // optional .OPMessage.Judge40400 judge40400 = 5;
  if (has_judge40400()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->judge40400(), target);
  }

  // optional .OPMessage.Judge41000 judge41000 = 6;
  if (has_judge41000()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->judge41000(), target);
  }

  // optional .OPMessage.Judge41001 judge41001 = 7;
  if (has_judge41001()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->judge41001(), target);
  }

  // optional .OPMessage.Judge41200 judge41200 = 8;
  if (has_judge41200()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->judge41200(), target);
  }

  // optional .OPMessage.Judge41100 judge41100 = 9;
  if (has_judge41100()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->judge41100(), target);
  }

  // optional .OPMessage.Judge40700 judge40700 = 10;
  if (has_judge40700()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->judge40700(), target);
  }

  // optional .OPMessage.Judge41500 judge41500 = 11;
  if (has_judge41500()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->judge41500(), target);
  }

  // optional .OPMessage.Judge40800 judge40800 = 12;
  if (has_judge40800()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->judge40800(), target);
  }

  // optional .OPMessage.Judge40900 judge40900 = 13;
  if (has_judge40900()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->judge40900(), target);
  }

  // optional .OPMessage.Judge41400 judge41400 = 14;
  if (has_judge41400()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->judge41400(), target);
  }

  // optional .OPMessage.Judge40500 judge40500 = 15;
  if (has_judge40500()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->judge40500(), target);
  }

  // optional .OPMessage.Judge41300 judge41300 = 16;
  if (has_judge41300()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->judge41300(), target);
  }

  // optional .OPMessage.Judge40300 judge40300 = 17;
  if (has_judge40300()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->judge40300(), target);
  }

  // optional .OPMessage.Judge40600 judge40600 = 18;
  if (has_judge40600()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->judge40600(), target);
  }

  // optional .OPMessage.Judge40601 judge40601 = 19;
  if (has_judge40601()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->judge40601(), target);
  }

  // optional .OPMessage.Judge50001 judge50001 = 20;
  if (has_judge50001()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->judge50001(), target);
  }

  // optional .OPMessage.Judge50002 judge50002 = 21;
  if (has_judge50002()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->judge50002(), target);
  }

  // optional .OPMessage.Judge50003 judge50003 = 22;
  if (has_judge50003()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->judge50003(), target);
  }

  // optional .OPMessage.Judge50004 judge50004 = 23;
  if (has_judge50004()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->judge50004(), target);
  }

  // optional .OPMessage.Judge50005 judge50005 = 24;
  if (has_judge50005()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->judge50005(), target);
  }

  // optional .OPMessage.Judge50006 judge50006 = 25;
  if (has_judge50006()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->judge50006(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OPMessage.Km3Judge)
  return target;
}

int Km3Judge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .OPMessage.Judge0 judge0 = 1;
    if (has_judge0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->judge0());
    }

    // optional .OPMessage.Judge40100 judge40100 = 2;
    if (has_judge40100()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->judge40100());
    }

    // optional .OPMessage.Judge41600 judge41600 = 3;
    if (has_judge41600()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->judge41600());
    }

    // optional .OPMessage.Judge40200 judge40200 = 4;
    if (has_judge40200()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->judge40200());
    }

    // optional .OPMessage.Judge40400 judge40400 = 5;
    if (has_judge40400()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->judge40400());
    }

    // optional .OPMessage.Judge41000 judge41000 = 6;
    if (has_judge41000()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->judge41000());
    }

    // optional .OPMessage.Judge41001 judge41001 = 7;
    if (has_judge41001()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->judge41001());
    }

    // optional .OPMessage.Judge41200 judge41200 = 8;
    if (has_judge41200()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->judge41200());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .OPMessage.Judge41100 judge41100 = 9;
    if (has_judge41100()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->judge41100());
    }

    // optional .OPMessage.Judge40700 judge40700 = 10;
    if (has_judge40700()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->judge40700());
    }

    // optional .OPMessage.Judge41500 judge41500 = 11;
    if (has_judge41500()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->judge41500());
    }

    // optional .OPMessage.Judge40800 judge40800 = 12;
    if (has_judge40800()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->judge40800());
    }

    // optional .OPMessage.Judge40900 judge40900 = 13;
    if (has_judge40900()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->judge40900());
    }

    // optional .OPMessage.Judge41400 judge41400 = 14;
    if (has_judge41400()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->judge41400());
    }

    // optional .OPMessage.Judge40500 judge40500 = 15;
    if (has_judge40500()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->judge40500());
    }

    // optional .OPMessage.Judge41300 judge41300 = 16;
    if (has_judge41300()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->judge41300());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .OPMessage.Judge40300 judge40300 = 17;
    if (has_judge40300()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->judge40300());
    }

    // optional .OPMessage.Judge40600 judge40600 = 18;
    if (has_judge40600()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->judge40600());
    }

    // optional .OPMessage.Judge40601 judge40601 = 19;
    if (has_judge40601()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->judge40601());
    }

    // optional .OPMessage.Judge50001 judge50001 = 20;
    if (has_judge50001()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->judge50001());
    }

    // optional .OPMessage.Judge50002 judge50002 = 21;
    if (has_judge50002()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->judge50002());
    }

    // optional .OPMessage.Judge50003 judge50003 = 22;
    if (has_judge50003()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->judge50003());
    }

    // optional .OPMessage.Judge50004 judge50004 = 23;
    if (has_judge50004()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->judge50004());
    }

    // optional .OPMessage.Judge50005 judge50005 = 24;
    if (has_judge50005()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->judge50005());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .OPMessage.Judge50006 judge50006 = 25;
    if (has_judge50006()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->judge50006());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Km3Judge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Km3Judge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Km3Judge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Km3Judge::MergeFrom(const Km3Judge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_judge0()) {
      mutable_judge0()->::OPMessage::Judge0::MergeFrom(from.judge0());
    }
    if (from.has_judge40100()) {
      mutable_judge40100()->::OPMessage::Judge40100::MergeFrom(from.judge40100());
    }
    if (from.has_judge41600()) {
      mutable_judge41600()->::OPMessage::Judge41600::MergeFrom(from.judge41600());
    }
    if (from.has_judge40200()) {
      mutable_judge40200()->::OPMessage::Judge40200::MergeFrom(from.judge40200());
    }
    if (from.has_judge40400()) {
      mutable_judge40400()->::OPMessage::Judge40400::MergeFrom(from.judge40400());
    }
    if (from.has_judge41000()) {
      mutable_judge41000()->::OPMessage::Judge41000::MergeFrom(from.judge41000());
    }
    if (from.has_judge41001()) {
      mutable_judge41001()->::OPMessage::Judge41001::MergeFrom(from.judge41001());
    }
    if (from.has_judge41200()) {
      mutable_judge41200()->::OPMessage::Judge41200::MergeFrom(from.judge41200());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_judge41100()) {
      mutable_judge41100()->::OPMessage::Judge41100::MergeFrom(from.judge41100());
    }
    if (from.has_judge40700()) {
      mutable_judge40700()->::OPMessage::Judge40700::MergeFrom(from.judge40700());
    }
    if (from.has_judge41500()) {
      mutable_judge41500()->::OPMessage::Judge41500::MergeFrom(from.judge41500());
    }
    if (from.has_judge40800()) {
      mutable_judge40800()->::OPMessage::Judge40800::MergeFrom(from.judge40800());
    }
    if (from.has_judge40900()) {
      mutable_judge40900()->::OPMessage::Judge40900::MergeFrom(from.judge40900());
    }
    if (from.has_judge41400()) {
      mutable_judge41400()->::OPMessage::Judge41400::MergeFrom(from.judge41400());
    }
    if (from.has_judge40500()) {
      mutable_judge40500()->::OPMessage::Judge40500::MergeFrom(from.judge40500());
    }
    if (from.has_judge41300()) {
      mutable_judge41300()->::OPMessage::Judge41300::MergeFrom(from.judge41300());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_judge40300()) {
      mutable_judge40300()->::OPMessage::Judge40300::MergeFrom(from.judge40300());
    }
    if (from.has_judge40600()) {
      mutable_judge40600()->::OPMessage::Judge40600::MergeFrom(from.judge40600());
    }
    if (from.has_judge40601()) {
      mutable_judge40601()->::OPMessage::Judge40601::MergeFrom(from.judge40601());
    }
    if (from.has_judge50001()) {
      mutable_judge50001()->::OPMessage::Judge50001::MergeFrom(from.judge50001());
    }
    if (from.has_judge50002()) {
      mutable_judge50002()->::OPMessage::Judge50002::MergeFrom(from.judge50002());
    }
    if (from.has_judge50003()) {
      mutable_judge50003()->::OPMessage::Judge50003::MergeFrom(from.judge50003());
    }
    if (from.has_judge50004()) {
      mutable_judge50004()->::OPMessage::Judge50004::MergeFrom(from.judge50004());
    }
    if (from.has_judge50005()) {
      mutable_judge50005()->::OPMessage::Judge50005::MergeFrom(from.judge50005());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_judge50006()) {
      mutable_judge50006()->::OPMessage::Judge50006::MergeFrom(from.judge50006());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Km3Judge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Km3Judge::CopyFrom(const Km3Judge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Km3Judge::IsInitialized() const {

  return true;
}

void Km3Judge::Swap(Km3Judge* other) {
  if (other != this) {
    std::swap(judge0_, other->judge0_);
    std::swap(judge40100_, other->judge40100_);
    std::swap(judge41600_, other->judge41600_);
    std::swap(judge40200_, other->judge40200_);
    std::swap(judge40400_, other->judge40400_);
    std::swap(judge41000_, other->judge41000_);
    std::swap(judge41001_, other->judge41001_);
    std::swap(judge41200_, other->judge41200_);
    std::swap(judge41100_, other->judge41100_);
    std::swap(judge40700_, other->judge40700_);
    std::swap(judge41500_, other->judge41500_);
    std::swap(judge40800_, other->judge40800_);
    std::swap(judge40900_, other->judge40900_);
    std::swap(judge41400_, other->judge41400_);
    std::swap(judge40500_, other->judge40500_);
    std::swap(judge41300_, other->judge41300_);
    std::swap(judge40300_, other->judge40300_);
    std::swap(judge40600_, other->judge40600_);
    std::swap(judge40601_, other->judge40601_);
    std::swap(judge50001_, other->judge50001_);
    std::swap(judge50002_, other->judge50002_);
    std::swap(judge50003_, other->judge50003_);
    std::swap(judge50004_, other->judge50004_);
    std::swap(judge50005_, other->judge50005_);
    std::swap(judge50006_, other->judge50006_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Km3Judge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Km3Judge_descriptor_;
  metadata.reflection = Km3Judge_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace OPMessage

// @@protoc_insertion_point(global_scope)
